<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.20总结</title>
    <url>/2024/01/21/1-20%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="a3be3caa83de410ac795edddc03bb364344dccef1655b3d8217b09a622aa3fcb">60fd0739c5a82ca45262b2f3393acd53fd31bca53c334bb8932a0f6239abd0ae741c8c3f2a20d75e28b189146242deb9332b5d1a54b6f087496383247c18b5abe4be8fc7653c8806b7744385ac0ef5e1e7d4a30f9239e4c9447ea2d3ff76af551d2d5d90c216b7f1e920d00059db86512c118c402a43d15c4b7dd070cb512ef94430e5dda1c8c35e36e1053c4faf8e5acf31a38da095304d48f0f4f56e541a4d0d1186cce94606e44f7480cb019d9503cb8e48b75c439afbd4334ae64874d8d8d5403208dae29efdeef6e6a39c96486ba206f8b63291f61371887de995f7866512949845d71ac8c0efe6aa90bd41afaafd4ae7a89448fb1835b092e381aed58e3687111eb9755e7c5dd230973061a91763eda8c21e22ef4548e3b6db489433aa1e47dd2580f344ad4d042df556f6446565ff6a583eb5504f38d46d3c5199169676d461fc164714068d6824e2518d6f657c45125bbe37fb0367f098020ffe5cd5a79fc3fc7161da508947058cd8fe1dea384903556936f4bc284720926d03a1ab0d43c3eec684c95febf04dd0a3b6245bebfa1241381eac209dea18e857388fc6ad14408fa89374ae5503f8e8077e83a86c0f25b5a3ddd1f8012ed58d95c5ee068c96c2506cb1f9d4496e87c8691aa759401804b659b99f4442c18da1c59f059536d561e0bd2318cf7ea578d49d68c1ee7008feeeb489edf7e70202a36f2ecff8d437ef9dc60a9a6c61dff57aa1c51f20888bada4f1fd331f30ac3bda3d9917381763419be0d0cc9a0f133ad89d113df6abdfa01d921cb62653560e85d117cc3945b2fe2594f7e25d4796a40d2d7172e334c240cb3c7f9f883924e589036488a6a07ce449f4ce67398abea1cb94e0c487af90ed54f6d117707e5cb41ebb16b207c943a8b8c50b78be0640ef0e6b644cfde134372543b676723f37a965b7f2e1679fe873f74b2e2d73d8d593c7c4b93d23a624853fa7fe8f37466299a9d11dd8e8bbb71114ec220ee2babf39d2e20645ff3a4a1d4ce1c654deca62d40c949c3aa6b779b2eeedf575bcce6a88a4d58a116d807f04152c01d673584134b3335e1178743820e73fc0915531630d8f51c052ff01691757602bd0ecac541857222a424b6192759d395be7fc5a3064578055508af6c1bc9c9e97a8e344d2b61e31e579350d2b2c8e1fb430a632bd4bd98c58c9f2c2f519e561a2fc7b9bb558ff3374790eb64e289004358a32909fe4e160192c47116c92c76f86a224dd5593729deb2d3906fc5870b2cbfdb0c8fa0fc49186793be8b5802bf77b526d269099abd4b9a80aa23435ba417d351a3c5e18778e10785fa45ab4822da2b38157e876a48f7f183c80b4c1b59de51a56ea62c5144b1d422fb0ab84a3b2f335c264aab379dac82936d2f85796eacf86817603cb9728a9143dc7bdcc7fa935947272dd1177d45602057ba4f0e499b84e9104e02e54ec5b983c483a0ff36788c129f6f99c3adacd0db12b684f1e71585ef5f2fc4ffa483dc097f78da6496dd7d7ff2d34486a86f24abe3080304ff74a73d412bce92ac47b87e69d811dabc773958bfc66cbdb80d1a65b75232786f85c72e834a03ce7ad2e6dfadb17b9d721b54519bf529077b026010575824167cbb6ee15105b99625075f6de50fc7b0abca09beea941492972a2e67f958b17da8614360fa91b573d0cd2d34ee98a11c09e819d2451a87b8294240c19df7a1649ea36ebf058b19d40aa3a46cee1123bc1aca67f1a141cff52b727a6df4b2cc6e49f258989915a2960390db51486204e14efc695a2e1b811512e858f2a6edfe8b9d710ae81c0adb42ddc9696635132a279ed55065d0918937868066bbb2aa68079da973d344f793762d95a278c5c349dc8847b79d3c333ec3d1fb0ee236f90b884ad8d6319c777b15f38fffca7d67d93ff337bc96454a0e38e8c3396ef0a9a6413dfab8614d639ab2cb364209e7c6baec94c93597c08fe97154f33c525ee7678b2a8842f9a42acb7442ae0f69bb1b0d74b51d3a45e5cadf23331f35931b5ea229240a0aae0b4e82ddbfd57abc693e73d2b95302a18cdde5d0e9bad1a4bcaf7fbcbba8a1e4eb6c4e855197c622d19b7bc9b242abd64075526a86328ad8dd536389a667476e54f96547a1464a73d33fd108d72d85f9611549aa4aa7713da1436f5019323927b640541be9505233442f3b77dc8efbae8f8d444b3d3e394e3e6a5ee8e9f7eb5ad800b1008bc83eb0807bfbc7c8f04ae9586db74c19bc78209e4d45d3d885c13807080860f0617857841a527c8545af3bbadbf8e97229fe14814462ef66a65082a74d69ea95623a7e86a3e50719fb87f0d05acedcc54e2b0326450b6446d5574fca356dc4b1566e61a3dee9a6ef6b69550f2cf81d9b532d25fb8ebc5059189748403569214a1264c85962d91764c1a7ad7772ca40a3da9fc69c0f68a5ce6140d68a29c9814acbaea4ae52d2bfa232731b5d4bc9fd60be8c04d663894b141829924a8e743b00841189a3d46c2dbfdf88a47681d4ff7bf293927fef190a8497bcd898b2dd7de0999b4c87abdbde9c3160d79f80d7cd4504884fdeb359693af0b1364d6cd482180e3782b60a2ca237eb42011ed2ca720b014e0c67f3550eb8d3659d90e68b66ccce5dff477c9ebc8e236fa5e1db4b267f3737103319004ec3a7942b36ca75648f94f10abe420ceff1ad0ba6c7e68c69281044afb416b8eafac29985f3bc37f5718d06abb08d5bbc73a4af51b3c8f6d6999b521bc2fa0560ab2ffda2fb32f961c01315d724bcab2b3d07367554e4dfc866b60c804</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2024十一月月中总结</title>
    <url>/2024/11/18/2024%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d22e6df96a6aeadd60ac4e75798eac27598181f1e4b6bd8351140d57db12cbf8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2024国庆假期总结</title>
    <url>/2024/10/07/2024%E5%9B%BD%E5%BA%86%E5%81%87%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="080f5c312f409e28ebf0cfbbf2bedf99bdd133a2a6c13cf0fac361d66c8e4b8a">60fd0739c5a82ca45262b2f3393acd539b7e2b429cf1df0d7078ef663fd8858ae9a2800ff0ec9721489de3ec254590903fd1528cb50a36baf8da312a81036c4f0a6aed28994c449567520c8c7a99d22fa2facb231283c3cd1f95ec69688b2c26aebe289b590439754e049ae3159ec0ce40d811f677a7b18dfc8912d20999f5ea32ac30a57378d8bced6ea5c033f8fd323f1a3ba6c37315e1e0f2991778d54791ee4915c56c62cf6ea8295d76420d3d9e52f6371461cf395f67531d8657acd87c14500f1cc48d12c91b7969bb3ef263065ecd51284bc0945895e16ce74fbfbd01d6103a0438535d3c4859678f18e0a29a363b391ceb9ad2e4264a0aa97da2e1816547ab2bb775152f7a8f631b39e017da7b58e1072b7235489def6108b5f44bb51d55f7fc5d77119c1ad0f212fd56b29c54885106961c5d9d88cd0ef76fb78536b099cf8c2201ea88e57a73e8999d2499881a68c5e7b038434da802a8b870d5ab5c8f43ac407d9a2f8c35af8e2d5121d4387a803695c1875c0259fda4cf1bc483a5d22ff2e6c10e658f58667945dc0da6ba62c99ee99ba139fceb2ea4c657413ee0d6909838db7ad4174354ad8fb7ff3a5acc23da98eed99e699016927dc4e7f8c17acb934b46bb439e03eb81e1fc514127d2c8e4330bbd5293bd8e31d3b3b6aa6f3ecbd313047b11b5ba9ac475cf15ef14d53b1d0fa2349c9fb1f78bc0341e710343aa9d5a33f3078b6f75cccc4a903f4134fb0f4931ebabe4fba0e5dedb96e82269dcde3f01d3a86930c789f1bd8c9be4ae28f5dc4580edb0dc3117c4fc14a27ef45d38a6620f8565634601ca98c82ed1fe4ec56ce96c6d694be18f8f7eb3758a50d59749eb3e7fcb93316186eea6ebf897affa365fcb0b413290b0b8e25b8b450eb733da43620732d01682b03bb41c3669e0247983fc716b42f4644b3bdea8d485bd209446dfad3479695a21aa57cde736e621d43bcc5d36a1a5346b91f444951a82321c37976fb3c9f979d0e43982eb29d3c87d05345364d9090aa29c3f17486b341d01f35623a0722ceadd56b8649c3340b8be4acf3ec930b66ff5ba33b6730cf6e75a3ff350ac42d477cab75afbf945c3be6b1986d248caf80fe6f4c97f64227d3e395e1f1b1ac7d6e2741b5ec6fe4850189de6544d4f5953a69b9df7d798d8c972a75f80c203806e8974acaa22ea0b08ffe3e1055fcba367e4652d7b52e4ff3d07e08fa970e48658fa57d59e809ea3664da008a9257ed7b889cd707ad402a5ee88a7fe3b260a1cf5290d71cf6512daee50480719cdaa2dce72c2dd746adf92b055880354c6e871a245810dd0b2342a65b210975e072f7edbdf41883737bcf0c63db3cc59c494d0025f46205d887165abab4bb57ef237b5be52367d7998f216b458b2935cae657989b7e93de57c11ec832a2f140c660ca222e6cb934773e442346e0b9a88e7f70a9693aec5502cbdcfb9512cd8217b8241786d98b3d812c1c63a8715cab704caa900d04ddb3a17f518e7d85d214158af0454fc83ff79ecbacf32ff34dad20a408a9e7dbebb53879cfd5de55b12ce41b86450d5629d5953884dfce10ce4c9759df1a3a15e40966fbe7e6e794b31dae8ca12bbcd7a8375450b234b75a8d009fb4ba98db01fb331834f4ab3bc2ab3d1f1c1827c7285ea2c3ba6f75798983d3dc9ff71e02ca6a2dfe819ef3d5d1c6574587ca4b6cbdaf81b0066d98df3f2be5cac550fe6a7b5a5aa97a62b007e7150b5fd47c3d168e121e5deafc4b90237ba0b6cf317105d4000432e1b59489520be7e82da0bdbe39266305b4d161295a045fb373126666143c2eb708fe6a72d6cd53a77a830f35a43dbae9b6eec088aaea25c208b2785d7c50a8ae8b04c1c2716e1d023cac472ee422770e53cf9cc75f4c771c726b28d4f2839383efa511f732d83694d3685c7d2368eaffdc3c130b6152faaf261e2438d6923005677e9f48fe6d87d8f4176a7b3306f5535f405bb816bfafac172e6a220a183189dd70b044adcd37d8bb8602111e5ee2d459f3495bbe697a0498ff4381eb8854c8f186e788688ac215ba173676c422ad195787839fe5906e770e78e49fd3dea86d470b2281fe085046a81f6d263a5a1b0deb10399786164aadc533e85c3ad3b6fee3d9da0ea96f52463fa56cbdac011698e816a4a888f87c4eb251a1ae1f7eaae2d963d89fb5490ccf5464a54a2970fc7feeb5d124638b1f7b0f68721fb0a4fa62e13834f1f3ccf503298947cd5103c00e8859e6b31e3265c4a3701d3603715e6958daeed9aece2f9cfe723eafb5438699a1a8f4809f20bb511a91cad66128db942dd2fa05909da9e3a528c23a5cbab72fb469f77aa76afa9bf7e3ce014315e953d99c844d367af9e031acff256419210f61c8dce5d13df5446e9118279592e75afe40f640f68fc2e31618d82d5e2526d5d71c2737721df8a56f24be130e4ec031b23b9dd4e2b928925803e14f94835edd7aff2ced57ec1b53d1dea3ac5b48c0bfc15c8720894846bf2bb877bf4287fb5f5071bdbd3b32d7dd2ca41ef28b0f324f5125dbe97399ba87a1b6a4a0a4563d8f4b314a2a715671e82008c7d531fa5538cfea5171b753861ca487f08506dac4ca349be517ac3fe55eaec855ce482941875867a9c5fb45a2e7c1d95b85ff52e5bcdd789f9d0baec6ef12fa9000258e5213de765d7309acdf8ad08748fd7c7d3062b6c0fc0c07bb86ec0597fc132a7c4a92ef4ab5eff32791a50ce063d6d68435680b6efb7f03fca97074f0db10ee9b8369a6f22ea947e86dd8da176035614c3d785aa6573d00a5c908b7cd8d11407988d752d030c8007b6ec9b9366673b0a36e4f9359297d8295a0a35b435f9a84cf49b18176acc2f5f7f4b53dfe9145b6c2ab064f7d7e35252bf690424ae1153887bccb04093e5eb10ae5fe7a41fe1330037ed3276fceb6139f09302ffbab19e00f8d01226cc8574c937a1ad4e0c4ba7ac9c40aaa9d783d90376e0090853960bc2f84402f7a92583652c57ea0fe4bf79a2358bc2bf41ffe8a3b3d2b9c1e67541e6af37b0d2e58768a4da3b45b908c2819ad02993b143c2ee797e972cc5aacc6c1d20bcbe5e2c6f877404c68aa214cd17f2c80b9a7f981075ee6075262a8789d579ca6267000f86924452206336e9656d4e20fc15252ec8647699c6686e75dfefa6160f9870554101994374854a033d8eba9c14fc282ecb4899f09c057bd8ef1d37439f19085df83ac5c31e32e9d1cfecf40c42fa00134890f03994b405f5642f8b4f2d1cdce7ed9de421c231b2df7f4e0acd4e87fccdabbe2447b6e32bad4c5855623afd5d1590aae5ee276b04b3395f79a56b939fbe73654452a940fd1e038e1fae738bb668be2c8c3d7217921d3a22bc9f39a0bf1a948856409e1577ccc5a4ff539763200dd51aca2a9f455c994640c63444398126561dbdcb9d57fe02c22a57f3104bb9cb45f13fc07939c95715ddf954a797dc60c1f3174f3e29a21c6b32804231b45ad33e0e5e15dd60aa0f6b8f953ce22ae0742447c065a1ebbb25637fd02644e8f91e668dd91cb525d97aa82edbc9ad30c22c5ef5c41c53c9689efff67849291fc5f22b0f3f6aa676632dd0c081ec3b07827ea75a6959a92df24388e6a77c0554b15e67760071eba178cb734177dd9ea205850432342bdfffdb4e8f1ca346a199dd80f050fd4e2b5643f5e1042a358a6c1787af4cac2348320264f6307b395c7715cbd398634aebf73313c726c6e21de6ed15329c2264b588ddf524b61a444bc5ae21281d055c689f16344b9ab8dcd39e4cd654c91010c218519136dd04117c0772d0f5d6a3f7e94d1f454eef7683f54a19af71be9f58dba5b72cc0f618cb0c6832102779318e768ac42bb5160945a21ae317d89646415844df927f3a7f7a1890cf31a137918c698ab26d98e18de62c353cc7481be14469b09c167762430e1eb5256fda57bb40e7bfc6b16519994781677e92b1c99f0a2e783c4e820bff451e4cdf5bb4fa4766341bd8c1b2776e503dc8f5a6ac07b3005d1ee8020856e573a265a8979f1b8d6360e7d9d84351f5f523b7f78d5454b30ce7e5244ef1a80acfbed5a927b9626cf0e553169509109292729aa172ffc23165d5fd7d724303de82fc26</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ map新知</title>
    <url>/2024/01/23/C++map%E6%96%B0%E7%9F%A5/</url>
    <content><![CDATA[<p><strong>假期闲来无事，打一打基础。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720220731222432.jpg" style="zoom: 25%;" />
<span id="more"></span>
<hr>
<h2 id="命名空间"><a class="header-anchor" href="#命名空间">¶</a>命名空间</h2>
<p>在 C++ 中，命名空间是一个命名范围或容器，用于<strong>组织和封装代码元素的集合</strong>，例如变量、函数、类和其他命名空间。</p>
<p>它们主要用于划分和管理代码库，使开发人员能够控制名称冲突和代码的专业化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> animals &#123;</span><br><span class="line">    std::string dog = <span class="string">&quot;Bobby&quot;</span>;</span><br><span class="line">    std::string cat = <span class="string">&quot;Lilly&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//访问命名空间中的内容需要加上作用域符号::</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Dog&#x27;s name: &quot;</span> &lt;&lt; animals::dog &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Cat&#x27;s name: &quot;</span> &lt;&lt; animals::cat &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> animals::dog;<span class="comment">//using关键字，后面可以直接使用命名空间animals中的变量dog</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Dog&#x27;s name: &quot;</span> &lt;&lt; dog &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像常用的 <code>using namespace std；</code></p>
<p>就可以直接使用std中的成员，<code>cin</code>、<code>cout</code>、<code>endl</code>等等。</p>
<h2 id="多态"><a class="header-anchor" href="#多态">¶</a>多态</h2>
<p>父类<strong>指针或引用</strong>指向子类对象，产生多态现象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The Animal makes a sound&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dog barks!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Cat meows!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal* myAnimal = <span class="keyword">new</span> <span class="built_in">Animal</span>();<span class="comment">//父类指针指向子类对象</span></span><br><span class="line">    Animal* myDog = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">    Animal* myCat = <span class="keyword">new</span> <span class="built_in">Cat</span>();</span><br><span class="line"></span><br><span class="line">    myAnimal-&gt;<span class="built_in">makeSound</span>();  <span class="comment">// Outputs: The Animal makes a sound</span></span><br><span class="line">    myDog-&gt;<span class="built_in">makeSound</span>();     <span class="comment">// Outputs: Dog barks!</span></span><br><span class="line">    myCat-&gt;<span class="built_in">makeSound</span>();     <span class="comment">// Outputs: Cat meows!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> myAnimal;</span><br><span class="line">    <span class="keyword">delete</span> myDog;</span><br><span class="line">    <span class="keyword">delete</span> myCat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类中的特殊成员函数"><a class="header-anchor" href="#类中的特殊成员函数">¶</a>类中的特殊成员函数</h2>
<ol>
<li>
<p><strong>构造函数（Constructor）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MyResource</span>() : <span class="built_in">data</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>]) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这个构造函数用于在<strong>对象创建时</strong>分配一个包含100个整数的动态数组，并将该数组的地址存储在 <code>data</code> 成员变量中。</p>
</li>
<li>
<p><strong>析构函数（Destructor）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~<span class="built_in">MyResource</span>() &#123; <span class="keyword">delete</span>[] data; &#125;</span><br></pre></td></tr></table></figure>
<p>析构函数用于在<strong>对象销毁时</strong>释放动态分配的内存。这里使用 <code>delete[]</code> 来释放通过 <code>new int[100]</code> 分配的整数数组。</p>
</li>
<li>
<p><strong>复制构造函数（Copy Constructor）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MyResource</span>(<span class="type">const</span> MyResource&amp; other) : <span class="built_in">data</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>]) &#123;</span><br><span class="line">    std::<span class="built_in">copy</span>(other.data, other.data + <span class="number">100</span>, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制构造函数用于在<strong>创建一个新对象时</strong>，使用另一个对象的数据来初始化新对象。这里通过动态分配一个新的数组，并使用 <code>std::copy</code> 将 <code>other</code> 对象的数据复制到新数组中。</p>
<p>其中：</p>
<ul>
<li><code>other.data</code>: 是源范围的<strong>起始位置</strong>，指向 <code>other</code> 对象的动态分配的整数数组。</li>
<li><code>other.data + 100</code>: 是源范围的<strong>结束位置</strong>，指向 <code>other.data</code> 之后100个元素的位置。</li>
<li><code>data</code>: 是<strong>目标范围的起始位置</strong>，指向当前对象的动态分配的整数数组。</li>
</ul>
</li>
<li>
<p><strong>复制赋值运算符（Copy Assignment Operator）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyResource&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyResource&amp; other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    std::<span class="built_in">copy</span>(other.data, other.data + <span class="number">100</span>, data);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制赋值运算符用于<strong>将一个对象的数据复制到另一个已经存在的对象中</strong>。在这里，首先检查是否是自我赋值（<code>if (&amp;other == this)</code>），如果是自我赋值，就直接返回当前对象。否则，分配一个新的数组，并使用 <code>std::copy</code> 将 <code>other</code> 对象的数据复制到当前对象operator的数组中。</p>
</li>
<li>
<p><strong>移动构造函数（Move Constructor）:</strong></p>
<p>通过<strong>转移所有权</strong>来更有效地处理资源，而不必复制所有数据。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MyResource</span>(MyResource&amp;&amp; other) <span class="keyword">noexcept</span> : <span class="built_in">data</span>(other.data) &#123;</span><br><span class="line">    other.data = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移动构造函数接受一个右值引用 <code>MyResource&amp;&amp; other</code>，表示可以使用其他对象的资源。在这里，它将 <code>other</code> 对象的 <code>data</code> 指针（指向动态分配的数组）移动到当前对象，并将 <code>other.data</code> 设置为 <code>nullptr</code>，<strong>表示资源已经被移动</strong>。这样做的目的是确保在 <code>other</code> 对象被销毁时不会重复释放内存。</p>
<ol start="6">
<li><strong>移动赋值运算符（Move Assignment Operator）:</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyResource&amp; <span class="keyword">operator</span>=(MyResource&amp;&amp; other) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] data;</span><br><span class="line">    data = other.data;</span><br><span class="line">    other.data = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移动赋值运算符接受一个右值引用 <code>MyResource&amp;&amp; other</code>，表示可以使用其他对象的资源。它首先检查是否是自我赋值，然后释放当前对象已有的资源（通过 <code>delete[] data</code>），将 <code>other.data</code> 移动到当前对象，最后将 <code>other.data</code> 设置为 <code>nullptr</code>。这样做是为了确保在 <code>other</code> 对象被销毁时不会重复释放内存。</p>
<p>这些移动语义的改进可以提高对象的性能，特别是在涉及到资源管理的场景，因为它避免了不必要的<strong>深拷贝</strong>。</p>
<h2 id="菱形继承"><a class="header-anchor" href="#菱形继承">¶</a>菱形继承</h2>
<p>菱形继承会带来二义性和资源浪费的问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  A</span><br><span class="line"> / \</span><br><span class="line">B   C</span><br><span class="line"> \ /</span><br><span class="line">  D</span><br></pre></td></tr></table></figure>
<p><strong>二义性（Ambiguity）：</strong> 如果在类 <code>D</code> 中访问一个继承自 <code>A</code> 的成员，编译器可能无法确定应该使用哪个基类的成员，因为可以通过两条路径（从 <code>B</code> 或从 <code>C</code>）到达 <code>A</code>。</p>
<p><strong>资源浪费：</strong> 如果 <code>B</code> 和 <code>C</code> 中都有 <code>A</code> 类的成员，而 <code>D</code> 继承了两者，就会导致 <code>A</code> 类的成员在 <code>D</code> 中存在两份，这可能会浪费内存。</p>
<p>为了解决这些问题，可以使用<strong>虚继承</strong>，通过在基类 <code>A</code> 的继承前面加上 <code>virtual</code> 关键字，确保只有一份 <code>A</code> 类的实例被继承，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;    <span class="comment">// ... &#125;; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;    <span class="comment">// ... &#125;;</span></span><br></pre></td></tr></table></figure>
<h2 id="静态多态性"><a class="header-anchor" href="#静态多态性">¶</a>静态多态性</h2>
<p>静态多态性，也称为<strong>编译时</strong>多态性，是一种在编译时而非运行时解析类型和方法调用的多态性。</p>
<p>通常使用 C++ 中的<strong>函数重载</strong>和<strong>模板</strong>来实现的。</p>
<p><strong>函数重载</strong>是一种创建多个具有<strong>相同名称但不同参数列表</strong>的函数的方法。</p>
<p>编译器根据调用函数时使用的参数类型和数量确定要调用的正确函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing int: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span> d)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing double: &quot;</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing string: &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>);          <span class="comment">// Calls print(int i)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.14</span>);       <span class="comment">// Calls print(double d)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>);    <span class="comment">// Calls print(const char* s)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>模板</strong>是 C++ 中的一项强大功能，创建通用函数或通用类。</p>
<p>特定类型的实际代码是在<strong>编译时</strong>生成的，这避免了运行时多态性的开销。使用模板是C++中实现静态多态性的主要技术。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Template function to print any type</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//T为各种数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">42</span>);           <span class="comment">// int</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.14159</span>);      <span class="comment">// double</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>);      <span class="comment">// const char*</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态多态性"><a class="header-anchor" href="#动态多态性">¶</a>动态多态性</h2>
<p>动态多态性是面向对象语言（如 C++）中的一个编程概念，其中派生类可以覆盖或重新定义其基类的<strong>方法</strong>。</p>
<p>这意味着单个方法调用可以根据调用它的对象类型有不同的实现。</p>
<p>动态多态性是通过<strong>虚函数</strong>实现的。当在基类中指定虚函数时，可以在任何派生类中<strong>重写</strong>它以提供不同的实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Base class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;<span class="comment">//虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a shape&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a circle&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a rectangle&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Shape* shape;</span><br><span class="line">    Circle circle;</span><br><span class="line">    Rectangle rectangle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Storing the address of circle</span></span><br><span class="line">    shape = &amp;circle;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call circle draw function</span></span><br><span class="line">    shape-&gt;<span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Storing the address of rectangle</span></span><br><span class="line">    shape = &amp;rectangle;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call rectangle draw function</span></span><br><span class="line">    shape-&gt;<span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异常处理"><a class="header-anchor" href="#异常处理">¶</a>异常处理</h2>
<p>C++ 中的异常处理是一种处理程序执行期间可能发生的错误、异常或意外事件的机制。</p>
<p>这使得程序在遇到错误时可以继续运行或优雅退出，<strong>而不是突然崩溃</strong>。</p>
<p>C++ 提供了一组关键字和构造来实现异常处理：</p>
<ul>
<li><code>try</code>：定义应监视异常的代码块。</li>
<li><code>catch</code>：指定要捕获的异常类型以及异常发生时应执行的代码块。</li>
<li><code>throw</code>：引发异常，该异常将由适当的 catch 块捕获并处理。</li>
<li><code>noexcept</code>：指定一个函数，如果在其范围内抛出异常，则不会抛出异常或终止程序。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Division by zero!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter two numbers for division: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">divide</span>(num1, num2);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The result is: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error: &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当除数为0时，会执行<code>throw &quot;Division by zero!&quot;;</code>然后<code>&quot;Division by zero!&quot;</code>会传到catch语句块，输出错误信息。</p>
<h2 id="动态数组vector"><a class="header-anchor" href="#动态数组vector">¶</a>动态数组vector</h2>
<p><code>vector</code> 是一种动态数组（dynamic array）的数据结构，它属于标准模板库（STL）的一部分。</p>
<p><code>vector</code> 提供了一个可变大小的数组，可以在运行时动态地调整大小，而且<strong>支持在数组的末尾高效地添加或删除元素</strong>。</p>
<p>与传统的数组相比，<code>vector</code> 的一个主要优势是<strong>它能够自动处理内存管理，不需要手动指定数组大小。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的整数数组</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; myVector;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向数组中添加元素</span></span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//删除数组的末尾元素</span></span><br><span class="line">myVector.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// 访问向量中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; myVector.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    std::cout &lt;&lt; myVector[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="auto关键字"><a class="header-anchor" href="#auto关键字">¶</a>auto关键字</h2>
<p>auto用于自动类型推导，在编译时自动从变量的初始化表达式的类型推断出变量的类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Traditional way of declaring a variable:</span></span><br><span class="line">    <span class="type">int</span> myInt = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using auto for type deduction:</span></span><br><span class="line">    <span class="keyword">auto</span> myAutoInt = <span class="number">5</span>; <span class="comment">// Automatically deduces the type as &#x27;int&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为auto是根据<strong>等号右项</strong>来自动推导类型，所以<strong>必须要提供初始值</strong>，否则会报错。</p>
<h2 id="类型转换"><a class="header-anchor" href="#类型转换">¶</a>类型转换</h2>
<p><strong>C 风格转换</strong>：这是从 C 继承的语法，只需将目标数据类型放在要转换的值之前的<strong>括号</strong>中即可完成。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = (<span class="type">float</span>)a;  <span class="comment">// C-style cast from int to float</span></span><br></pre></td></tr></table></figure>
<p><strong><code>static_cast</code></strong>：这是 C++ 中<strong>最常用</strong>的类型转换方法。它在编译时执行，当您在<strong>数据类型之间</strong>进行显式转换时应该使用它。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(a);  <span class="comment">// static_cast from int to float</span></span><br></pre></td></tr></table></figure>
<p><strong><code>dynamic_cast</code></strong>：此方法专门用于在类层次结构中的<strong>基类和派生类之间</strong>安全地转换指针和引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Base* base_ptr = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Derived* derived_ptr = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(base_ptr);  <span class="comment">// dynamic_cast from Base* to Derived*</span></span><br></pre></td></tr></table></figure>
<p><strong><code>reinterpret_cast</code></strong>：此转换更改指针、引用或整数值的类型。它也称为<strong>按位转换</strong>，因为它改变了编译器解释底层位的方式。</p>
<p>仅当您对自己正在做的事情有深入了解时才使用<code>reinterpret_cast</code>，因为它并不能保证结果值有意义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">42</span>);</span><br><span class="line"><span class="type">long</span> b = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">long</span>&gt;(a);  <span class="comment">// reinterpret_cast from int* to long</span></span><br></pre></td></tr></table></figure>
<p><strong><code>const_cast</code></strong>：此转换方法用于从<strong>常量</strong>中删除限定符。通常不建议这样做，但在某些无法控制变量常量的情况下可能很有用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* ptr = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;a);  <span class="comment">// const_cast from const int* to int*</span></span><br><span class="line">*ptr = <span class="number">20</span>;  <span class="comment">// Not recommended, use with caution</span></span><br></pre></td></tr></table></figure>
<h2 id="未定义行为"><a class="header-anchor" href="#未定义行为">¶</a>未定义行为</h2>
<p><strong>未初始化的变量</strong>：声明一个变量但没有显式地初始化它时，它的值是未定义的，而<strong>不是默认初始化为0</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y = x + <span class="number">5</span>; <span class="comment">// Undefined behavior since x is uninitialized</span></span><br></pre></td></tr></table></figure>
<p><strong>越界内存访问</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> val = arr[<span class="number">5</span>]; <span class="comment">// Undefined behavior since the valid indices are 0 to 4</span></span><br></pre></td></tr></table></figure>
<p><strong>空指针解引用</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ptr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="type">int</span> val = *ptr; <span class="comment">// Undefined behavior since ptr is a null pointer</span></span><br></pre></td></tr></table></figure>
<p><strong>除以零</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> z = x / y; <span class="comment">// Undefined behavior since division by zero is not allowed</span></span><br></pre></td></tr></table></figure>
<h2 id="C-宏"><a class="header-anchor" href="#C-宏">¶</a>C++ 宏</h2>
<p>宏是 C++ 中的<strong>预处理指令</strong>，预处理器使用它来执行文本替换。它们是使用<code>#define</code>指令定义的，后跟宏名称和要替换的值。</p>
<p><strong>常量宏</strong>：常量宏用于定义在代码中使用的符号常量。它们<strong>不使用任何内存</strong>，并在编译过程之前由预处理器替换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159<span class="comment">//常数宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> circumference = <span class="number">2</span> * PI * radius;</span><br></pre></td></tr></table></figure>
<p><strong>函数宏</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x))<span class="comment">//函数宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> square_of_five = <span class="built_in">SQUARE</span>(<span class="number">5</span>); <span class="comment">// expands to ((5) * (5))</span></span><br></pre></td></tr></table></figure>
<h2 id="C-标准模板库STL"><a class="header-anchor" href="#C-标准模板库STL">¶</a>C++ 标准模板库STL</h2>
<p>C++ 标准模板库 (STL) 是<strong>头文件的集合</strong>，提供多种数据结构、算法和函数来<strong>简化 C++ 编码体验</strong>。</p>
<p>STL 的主要目的是通过提供一组即用型的有用工具来节省时间并提高效率。</p>
<p>STL最常用的功能可以分为三大类：<strong>容器、算法</strong>和<strong>迭代器</strong>。</p>
<p><strong>容器</strong>：C++ 中用于数据存储和操作的数据结构。它们分为四种类型：序列容器、关联容器、无序关联容器和容器适配器。</p>
<p><code>std::vector</code>：在运行时增长和收缩的动态数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; my_vector;</span><br></pre></td></tr></table></figure>
<p><code>std::list</code>：双向链表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; my_list;</span><br></pre></td></tr></table></figure>
<p><code>std::set</code>：按键值排序的元素的集合。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="type">int</span>&gt; my_set;</span><br></pre></td></tr></table></figure>
<p><code>std::unordered_set</code>：没有特定顺序的独特元素的集合。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unordered_set&lt;<span class="type">int</span>&gt; my_unordered_set;</span><br></pre></td></tr></table></figure>
<p><code>std::stack</code>：栈</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::stack&lt;<span class="type">int</span>&gt; my_stack;</span><br></pre></td></tr></table></figure>
<p><code>std::queue</code>：队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>&gt; my_queue;</span><br></pre></td></tr></table></figure>
<p>未完待续 ~</p>
<p><strong>算法</strong>：STL 提供了几种通用算法，可用于对容器中存储的数据执行各种操作。</p>
<p>它们分为五类：非修改序列算法、修改序列算法、排序算法、排序范围算法和数值算法。</p>
<p>一些示例包括<code>std::find</code>、<code>std::replace</code>、<code>std::sort</code>和<code>std::binary_search</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序算法（从小到大）</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; my_vec = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::<span class="built_in">sort</span>(my_vec.<span class="built_in">begin</span>(), my_vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>
<p><strong>迭代器</strong>：迭代器是 STL 中的一个基本概念，因为它们提供了访问容器中元素的统一方法。</p>
<p>迭代器可以被认为是<strong>指针的高级形式</strong>。</p>
<p><strong>每个容器都有</strong>自己的迭代器类型，可<strong>用于遍历元素和修改值</strong>。</p>
<p>最常见的迭代器操作是<code>begin()</code>和 ，<code>end()</code>分别用于获取指向容器的第一个元素和最后一个元素之后的迭代器。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历元素</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; my_vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//定义一个动态数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = my_vec.<span class="built_in">begin</span>(); it != my_vec.<span class="built_in">end</span>(); ++it) &#123;<span class="comment">//for循环</span></span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//通过解引用操作符 *，可以访问迭代器所指向的元素。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多线程"><a class="header-anchor" href="#多线程">¶</a>多线程</h2>
<p>多线程是程序中多个线程的<strong>并发执行</strong>。</p>
<p>通过<strong>同时执行</strong>多个任务来提高应用程序的性能和效率。</p>
<p><strong>基本线程的创建</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;This function is executing in a separate thread&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(my_function)</span></span>;<span class="comment">//创建了一个名为 t 的线程对象，并将 my_function 作为新线程的执行函数。</span></span><br><span class="line">    t.<span class="built_in">join</span>(); <span class="comment">//在主线程中等待新线程执行完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>互斥量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;<span class="comment">//定义了一个互斥量对象 mtx，它将用于保护共享资源，确保在任何时候只有一个线程能够访问它。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_block</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span> </span>&#123;<span class="comment">//以n为次数打印字符c。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;<span class="comment">//创建一个独占锁，一旦一个线程获得了锁，其他线程就无法获得，直到释放。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cout &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//创建了两个线程 t1 和 t2</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(print_block, <span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(print_block, <span class="number">50</span>, <span class="string">&#x27;$&#x27;</span>)</span></span>;</span><br><span class="line"><span class="comment">//等待两个线程执行完成。确保在主线程结束之前，等待所有的子线程执行完成。</span></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了互斥量 <code>std::mutex</code> 来<strong>避免竞态条件</strong>。</p>
<p>如果没有互斥量，两个线程 <code>t1</code> 和 <code>t2</code> 可能会同时访问 <code>std::cout</code>，导致输出的字符交叉、混乱，从而产生竞态条件。</p>
<p>通过使用互斥量，每个线程在访问共享资源之前都会尝试获得锁，确保只有一个线程能够执行打印操作，从而避免了竞态条件的发生。</p>
<h2 id="模板"><a class="header-anchor" href="#模板">¶</a>模板</h2>
<p>C++ 中的模板是一项强大的功能，用来编写通用代码。模板：<code>template</code>关键字</p>
<p>这意味着可以编写能够<strong>处理不同数据类型</strong>的单个函数或类，这意味着不需要为每种数据类型编写单独的函数或类。</p>
<p><strong>模板函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//模板头</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;<span class="comment">//判断哪个数更大</span></span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//可以显式指定数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">max</span>(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//也可以让编译器自行推断</span></span><br></pre></td></tr></table></figure>
<p><strong>模板类</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;<span class="comment">//模板头</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T1 first;</span><br><span class="line">    T2 second;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pair</span>(T1 first, T2 second) : <span class="built_in">first</span>(first), <span class="built_in">second</span>(second) &#123;&#125;<span class="comment">//类的构造函数，初始化成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Pair&lt;<span class="type">int</span>, std::string&gt; <span class="title">pair</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>)</span></span>;<span class="comment">//实例化类对象并传参</span></span><br></pre></td></tr></table></figure>
<p><strong>可变参数模板</strong></p>
<p>定义具有可变数量参数的模板。</p>
<p>当需要编写可以接受<strong>不同数量</strong>和类型的参数的函数或类时，这特别有用。</p>
<p>表示：<code>template &lt;typename... Args&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 基本模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t, Args... args)</span> </span>&#123;<span class="comment">//对多个数求和</span></span><br><span class="line">  <span class="keyword">return</span> t + <span class="built_in">sum</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);  <span class="comment">// expands to 1 + 2 + 3 + 4 + 5</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;The sum is: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">server_client::AddInts::Request &amp;req</span><br></pre></td></tr></table></figure>
<p>在C++中，声明一个名为 <code>req</code> 的变量，且该变量是 <code>Request</code> 类型的一个引用，这种做法在多种场景下都非常有用。以下是一些关键的应用场景和优势：</p>
<ol>
<li><strong>避免不必要的拷贝</strong>：<br>
当 <code>Request</code> 类型包含大量数据或复杂结构时，通过引用传递可以避免在函数调用或参数传递过程中进行昂贵的拷贝操作。这能够显著提升程序的性能，特别是当处理大型数据结构时。</li>
<li><strong>直接修改原始数据</strong>：<br>
通过引用传递的变量（如 <code>req</code>）允许函数或方法直接修改其引用的原始数据。这在需要更新或修改传入参数的场景中非常有用。</li>
<li><strong>保持数据一致性</strong>：<br>
在某些情况下，确保数据的一致性和准确性至关重要。通过引用传递，可以确保所有操作都在同一份数据上进行，从而避免了数据不同步或丢失更新的风险。</li>
<li><strong>提高代码可读性</strong>：<br>
使用引用可以使代码更加清晰和易于理解。通过明确标注参数是通过引用传递的，可以更容易地推断出函数或方法可能会修改其参数。</li>
<li><strong>支持多态性</strong>：<br>
在面向对象编程中，引用常用于支持多态性。通过基类引用指向派生类对象，可以实现动态绑定和运行时多态性。</li>
<li><strong>函数返回引用</strong>：<br>
虽然不直接相关于你的例子，但值得一提的是，函数也可以返回引用。这允许函数返回一个对内部数据结构的直接引用，而不是其拷贝。</li>
<li><strong>与STL容器和算法协同工作</strong>：<br>
C++标准模板库（STL）中的许多算法和容器都使用引用来操作元素。通过引用传递，可以确保这些算法和容器能够高效地处理数据。</li>
</ol>
<p>在你的特定情况下，如果 <code>req</code> 是作为某个函数或方法的参数传递的，并且该参数需要被修改或包含大量数据，那么使用引用传递是一个明智的选择。这样做不仅可以提高性能，还可以使代码更加简洁和易于维护。</p>
<p>请注意，当使用引用时，必须确保引用的对象在引用的生命周期内始终有效。如果引用的对象被销毁或变得无效，那么通过该引用进行的任何操作都可能导致未定义行为。因此，在使用引用时需要格外小心。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C#新知</title>
    <url>/2024/05/28/C%20sharp/</url>
    <content><![CDATA[<p>由于写数据库课设的时候需要用到C#中的winform控件，于是自己从菜鸟教程上过了一遍C#基础。</p>
<p>语法大部分和C++类似，所以这里只记录了不熟的或是新的知识点。</p>
<span id="more"></span>
<hr>
<h2 id="foreach-循环"><a class="header-anchor" href="#foreach-循环">¶</a>foreach 循环</h2>
<p>在前面的实例中，我们使用一个 for 循环来访问每个数组元素，您也可以使用一个 <strong>foreach</strong> 语句来遍历数组。</p>
<p>以下实例我们使用 foreach 来遍历一个数组：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ArrayApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">MyArray</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> []  n = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>]; <span class="comment">/* n 是一个带有 10 个整数的数组 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 初始化数组 n 中的元素 */</span>         </span><br><span class="line">         <span class="keyword">for</span> ( <span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">         &#123;</span><br><span class="line">            n[i] = i + <span class="number">100</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">         <span class="keyword">foreach</span> (<span class="built_in">int</span> j <span class="keyword">in</span> n )</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="built_in">int</span> i = j<span class="number">-100</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Element[&#123;0&#125;] = &#123;1&#125;&quot;</span>, i, j);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">Element[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Element[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">Element[<span class="number">2</span>] = <span class="number">102</span></span><br><span class="line">Element[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">Element[<span class="number">4</span>] = <span class="number">104</span></span><br><span class="line">Element[<span class="number">5</span>] = <span class="number">105</span></span><br><span class="line">Element[<span class="number">6</span>] = <span class="number">106</span></span><br><span class="line">Element[<span class="number">7</span>] = <span class="number">107</span></span><br><span class="line">Element[<span class="number">8</span>] = <span class="number">108</span></span><br><span class="line">Element[<span class="number">9</span>] = <span class="number">109</span></span><br></pre></td></tr></table></figure>
<h2 id="类-vs-结构"><a class="header-anchor" href="#类-vs-结构">¶</a>类 vs 结构</h2>
<p>类和结构在设计和使用时有不同的考虑因素，类适合表示复杂的对象和行为，支持继承和多态性，而结构则更适合表示轻量级数据和值类型，以提高性能并避免引用的管理开销。</p>
<p>类和结构有以下几个基本的不同点：</p>
<p><strong>值类型 vs 引用类型：</strong></p>
<ul>
<li><strong>结构是值类型（Value Type）：</strong> 结构是值类型，它们在栈上分配内存，而不是在堆上。当将结构实例传递给方法或赋值给另一个变量时，将复制整个结构的内容。</li>
<li><strong>类是引用类型（Reference Type）：</strong> 类是引用类型，它们在堆上分配内存。当将类实例传递给方法或赋值给另一个变量时，实际上是传递引用（内存地址）而不是整个对象的副本。</li>
</ul>
<p><strong>继承和多态性：</strong></p>
<ul>
<li><strong>结构不能继承：</strong> 结构不能继承其他结构或类，也不能作为其他结构或类的基类。</li>
<li><strong>类支持继承：</strong> 类支持继承和多态性，可以通过派生新类来扩展现有类的功能。</li>
</ul>
<p><strong>默认构造函数：</strong></p>
<ul>
<li><strong>结构不能有无参数的构造函数：</strong> 结构不能包含无参数的构造函数。每个结构都必须有至少一个有参数的构造函数。</li>
<li><strong>类可以有无参数的构造函数：</strong> 类可以包含无参数的构造函数，如果没有提供构造函数，系统会提供默认的无参数构造函数。</li>
</ul>
<p><strong>赋值行为：</strong></p>
<ul>
<li>类型为类的变量在赋值时存储的是引用，因此两个变量指向同一个对象。</li>
<li>结构变量在赋值时会复制整个结构，因此每个变量都有自己的独立副本。</li>
</ul>
<p><strong>传递方式：</strong></p>
<ul>
<li>类型为类的对象在方法调用时通过引用传递，这意味着在方法中对对象所做的更改会影响到原始对象。</li>
<li>结构对象通常通过值传递，这意味着传递的是结构的副本，而不是原始结构对象本身。因此，在方法中对结构所做的更改不会影响到原始对象。</li>
</ul>
<p><strong>可空性：</strong></p>
<ul>
<li>**结构体是值类型，不能直接设置为 *<em>null*</em>：**因为 <strong>null</strong> 是引用类型的默认值，而不是值类型的默认值。如果你需要表示结构体变量的缺失或无效状态，可以使用 <strong>Nullable<T></strong> 或称为 <strong>T?</strong> 的可空类型。</li>
<li><strong>类默认可为null：</strong> 类的实例默认可以为 <code>null</code>，因为它们是引用类型。</li>
</ul>
<p><strong>性能和内存分配：</strong></p>
<ul>
<li><strong>结构通常更轻量：</strong> 由于结构是值类型且在栈上分配内存，它们通常比类更轻量，适用于简单的数据表示。</li>
<li><strong>类可能有更多开销：</strong> 由于类是引用类型，可能涉及更多的内存开销和管理。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构声明</span></span><br><span class="line"><span class="keyword">struct</span> MyStruct</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构不能有无参数的构造函数</span></span><br><span class="line">    <span class="comment">// public MyStruct()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStruct</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构不能继承</span></span><br><span class="line">    <span class="comment">// struct MyDerivedStruct : MyBaseStruct</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类可以有无参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类支持继承</span></span><br><span class="line">    <span class="comment">// class MyDerivedClass : MyBaseClass</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 结构是值类型，分配在栈上</span></span><br><span class="line">        MyStruct structInstance1 = <span class="keyword">new</span> MyStruct(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        MyStruct structInstance2 = structInstance1; <span class="comment">// 复制整个结构</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类是引用类型，分配在堆上</span></span><br><span class="line">        MyClass classInstance1 = <span class="keyword">new</span> MyClass(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        MyClass classInstance2 = classInstance1; <span class="comment">// 复制引用，指向同一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改结构实例不影响其他实例</span></span><br><span class="line">        structInstance1.X = <span class="number">5</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Struct: <span class="subst">&#123;structInstance1.X&#125;</span>, <span class="subst">&#123;structInstance2.X&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改类实例会影响其他实例</span></span><br><span class="line">        classInstance1.X = <span class="number">6</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Class: <span class="subst">&#123;classInstance1.X&#125;</span>, <span class="subst">&#123;classInstance2.X&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">Struct: <span class="number">5</span>, <span class="number">1</span></span><br><span class="line">Class: <span class="number">6</span>, <span class="number">6</span></span><br></pre></td></tr></table></figure>
<h2 id="枚举eunm"><a class="header-anchor" href="#枚举eunm">¶</a><strong>枚举eunm</strong></h2>
<p>枚举列表中的每个符号代表一个整数值，一个比它前面的符号大的整数值。默认情况下，第一个枚举符号的值是 0。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Days &#123; Sun, Mon, tue, Wed, thu, Fri, Sat &#125;;</span><br><span class="line">          <span class="comment">// 0    1    2    3    4    5    6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例：</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">enum</span> Day &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = (<span class="built_in">int</span>)Day.Sun;</span><br><span class="line">        <span class="built_in">int</span> y = (<span class="built_in">int</span>)Day.Fri;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sun = &#123;0&#125;&quot;</span>, x);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fri = &#123;0&#125;&quot;</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">Sun = <span class="number">0</span></span><br><span class="line">Fri = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h2 id="C-类的静态成员"><a class="header-anchor" href="#C-类的静态成员">¶</a>C# 类的静态成员</h2>
<p>我们可以使用 <strong>static</strong> 关键字把类成员定义为静态的。当我们声明一个类成员为静态时，意味着无论有多少个类的对象被创建，只会有一个该静态成员的副本。</p>
<p>关键字 <strong>static</strong> 意味着类中只有一个该成员的实例。静态变量用于定义常量，因为它们的值可以通过直接调用类而不需要创建类的实例来获取。静态变量可在成员函数或类的定义外部进行初始化。你也可以在类的定义内部初始化静态变量。</p>
<p>下面的实例演示了<strong>静态变量</strong>的用法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StaticVarApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticVar</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> num;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticTester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StaticVar s1 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            StaticVar s2 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            s1.count();</span><br><span class="line">            s1.count();</span><br><span class="line">            s1.count();</span><br><span class="line">            s2.count();</span><br><span class="line">            s2.count();</span><br><span class="line">            s2.count();         </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;s1 的变量 num： &#123;0&#125;&quot;</span>, s1.getNum());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;s2 的变量 num： &#123;0&#125;&quot;</span>, s2.getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">s1 的变量 num： <span class="number">6</span></span><br><span class="line">s2 的变量 num： <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>你也可以把一个<strong>成员函数</strong>声明为 <strong>static</strong>。这样的函数只能访问静态变量。静态函数在对象被创建之前就已经存在。</p>
<h2 id="C-继承"><a class="header-anchor" href="#C-继承">¶</a>C# 继承</h2>
<h3 id="继承接口（Interface-Inheritance）"><a class="header-anchor" href="#继承接口（Interface-Inheritance）">¶</a>继承接口（Interface Inheritance）</h3>
<p>一个接口可以继承自一个或多个其他接口，派生接口继承了基接口的所有成员。</p>
<p>派生接口可以扩展基接口的成员列表，但不能改变它们的访问修饰符。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个基接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IBaseInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Method1</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个派生接口，继承自基接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IDerivedInterface</span> : <span class="title">IBaseInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Method2</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现派生接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">IDerivedInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method1 implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method2 implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建 MyClass 类的实例</span></span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用继承自基接口的方法</span></span><br><span class="line">        obj.Method1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用派生接口新增的方法</span></span><br><span class="line">        obj.Method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上实例中 MyClass 类实现了 IDerivedInterface 接口，因此必须提供 IDerivedInterface 中定义的所有方法，包括从 IBaseInterface继承的 Method1() 方法。 在 Main 方法中，我们创建了 MyClass 的实例 obj 并调用了它的方法。</p>
<h3 id="C-多重继承"><a class="header-anchor" href="#C-多重继承">¶</a>C# 多重继承</h3>
<p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。</p>
<p><strong>C# 不支持多重继承</strong>。但是，您可以使用接口来实现多重继承。下面的程序演示了这点：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">InheritanceApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span>(<span class="params"><span class="built_in">int</span> w</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"><span class="built_in">int</span> h</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> height;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 基类 PaintCost</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">PaintCost</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="built_in">int</span> <span class="title">getCost</span>(<span class="params"><span class="built_in">int</span> area</span>)</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 派生类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span>, <span class="title">PaintCost</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getArea</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getCost</span>(<span class="params"><span class="built_in">int</span> area</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> area * <span class="number">70</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle Rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">         <span class="built_in">int</span> area;</span><br><span class="line">         Rect.setWidth(<span class="number">5</span>);</span><br><span class="line">         Rect.setHeight(<span class="number">7</span>);</span><br><span class="line">         area = Rect.getArea();</span><br><span class="line">         <span class="comment">// 打印对象的面积</span></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;油漆总成本： $&#123;0&#125;&quot;</span> , Rect.getCost(area));</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-多态性"><a class="header-anchor" href="#C-多态性">¶</a>C# 多态性</h2>
<p>多态是同一个行为具有多个不同表现形式或形态的能力。</p>
<p><strong>多态性</strong>意味着有多重形式。在面向对象编程范式中，多态性往往表现为&quot;一个接口，多个功能&quot;。</p>
<p>多态性可以是静态的或动态的。在<strong>静态多态性</strong>中，函数的响应是在编译时发生的。在<strong>动态多态性</strong>中，函数的响应是在运行时发生的。</p>
<p>在 C# 中，每个类型都是多态的，因为包括用户定义类型在内的所有类型都继承自 Object。</p>
<p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgdt-java.png" alt=""></p>
<p>现实中，比如我们按下 F1 键这个动作：</p>
<ul>
<li>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li>
<li>如果当前在 Word 下弹出的就是 Word 帮助；</li>
<li>在 Windows 下弹出的就是 Windows 帮助和支持。</li>
</ul>
<p>同一个事件发生在不同的对象上会产生不同的结果。</p>
<h3 id="动态多态性"><a class="header-anchor" href="#动态多态性">¶</a>动态多态性</h3>
<p>C# 允许您使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p>
<p>请注意，下面是有关抽象类的一些规则：</p>
<ul>
<li>您不能创建一个抽象类的实例。</li>
<li>您不能在一个抽象类外部声明一个抽象方法。</li>
<li>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</li>
</ul>
<p>下面的程序演示了一个抽象类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorphismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">int</span> <span class="title">area</span>()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>:  <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> length;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = a;</span><br><span class="line">         width = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> () <span class="comment">//子类重写父类中的抽象方法</span></span></span><br><span class="line">      &#123; </span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * length); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         <span class="built_in">double</span> a = r.area();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>,a);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当有一个定义在类中的函数需要在继承类中实现时，可以使用<strong>虚方法</strong>。</p>
<p>虚方法是使用关键字 <strong>virtual</strong> 声明的。</p>
<p>虚方法可以在不同的继承类中有不同的实现。</p>
<p>对虚方法的调用是在运行时发生的。</p>
<p>动态多态性是通过 <strong>抽象类</strong> 和 <strong>虚方法</strong> 实现的。</p>
<p>以下实例创建了 Shape 基类，并创建派生类 Circle、 Rectangle、Triangle， Shape 类提供一个名为 Draw 的虚拟方法，在每个派生类中重写该方法以绘制该类的指定形状。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 虚方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行基类的画图任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>() <span class="comment">//子类重写父类中的虚方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个圆形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个长方形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Triangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个三角形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List&lt;Shape&gt; 对象，并向该对象添加 Circle、Triangle 和 Rectangle</span></span><br><span class="line">        <span class="keyword">var</span> shapes = <span class="keyword">new</span> List&lt;Shape&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Rectangle(),</span><br><span class="line">            <span class="keyword">new</span> Triangle(),</span><br><span class="line">            <span class="keyword">new</span> Circle()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 foreach 循环对该列表的派生类进行循环访问，并对其中的每个 Shape 对象调用 Draw 方法 </span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> shape <span class="keyword">in</span> shapes)</span><br><span class="line">        &#123;</span><br><span class="line">            shape.Draw();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;按下任意键退出。&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-接口（Interface）"><a class="header-anchor" href="#C-接口（Interface）">¶</a>C# 接口（Interface）</h2>
<p>接口定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 <strong>“是什么”</strong> 部分，派生类定义了语法合同 <strong>“怎么做”</strong> 部分。</p>
<p>接口定义了属性、方法和事件，这些都是接口的成员。接口只包含了成员的声明。成员的定义是派生类的责任。接口提供了派生类应遵循的标准结构。</p>
<p>接口使得实现接口的类或结构在形式上保持一致。</p>
<p>抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。</p>
<p>接口本身并不实现任何功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约。</p>
<p>抽象类不能直接实例化，但允许派生出具体的，具有实际功能的类。</p>
<p>接口声明默认是 public 的，通常接口命令以 <strong>I</strong> 字母开头，</p>
<hr>
<p>以下实例定义了两个接口 IMyInterface 和 IParentInterface。</p>
<p>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员。</p>
<p>继承接口后，我们需要实现接口的方法，方法名必须与接口定义的方法名一致。</p>
<p>以下实例 IMyInterface 继承了 IParentInterface 接口，因此接口实现类必须实现 MethodToImplement() 和 ParentInterfaceMethod() 方法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">![<span class="number">0129</span>A8E9<span class="number">-30F</span>E<span class="number">-431</span>D<span class="number">-8</span>C48<span class="number">-399</span>EA4841E9D](C:/Users/<span class="number">86176</span>/Desktop/<span class="number">0129</span>A8E9<span class="number">-30F</span>E<span class="number">-431</span>D<span class="number">-8</span>C48<span class="number">-399</span>EA4841E9D.jpg)<span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IParentInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span> : <span class="title">IParentInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InterfaceImplementer iImp = <span class="keyword">new</span> InterfaceImplementer();</span><br><span class="line">        iImp.MethodToImplement();</span><br><span class="line">        iImp.ParentInterfaceMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MethodToImplement() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ParentInterfaceMethod() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-命名空间（Namespace）"><a class="header-anchor" href="#C-命名空间（Namespace）">¶</a>C# 命名空间（Namespace）</h2>
<p><strong>命名空间</strong>的设计目的是提供一种让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p>
<p>我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img0129A8E9-30FE-431D-8C48-399EA4841E9D.jpg" alt=""></p>
<p>下面的程序演示了命名空间的用法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      first_space.namespace_cl fc = <span class="keyword">new</span> first_space.namespace_cl();</span><br><span class="line">      second_space.namespace_cl sc = <span class="keyword">new</span> second_space.namespace_cl();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果:</span></span><br><span class="line">Inside first_space</span><br><span class="line">Inside second_space</span><br></pre></td></tr></table></figure>
<h3 id="using-关键字"><a class="header-anchor" href="#using-关键字">¶</a><em>using</em> 关键字</h3>
<p><strong>using</strong> 关键字表明程序使用的是给定命名空间中的名称。例如，我们在程序中使用 <strong>System</strong> 命名空间，其中定义了类 Console。我们可以只写：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine (<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>我们可以写完全限定名称，如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>您也可以使用 <strong>using</strong> 命名空间指令，这样在使用的时候就不用在前面加上命名空间名称。该指令告诉编译器随后的代码使用了指定命名空间中的名称。下面的代码演示了命名空间的应用。</p>
<p>让我们使用 using 指定重写上面的实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> first_space;</span><br><span class="line"><span class="keyword">using</span> second_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">abc</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">efg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      abc fc = <span class="keyword">new</span> abc();</span><br><span class="line">      efg sc = <span class="keyword">new</span> efg();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="嵌套命名空间"><a class="header-anchor" href="#嵌套命名空间">¶</a>嵌套命名空间</h3>
<p>可以使用点（.）运算符访问嵌套的命名空间的成员，如下所示：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;In SomeNameSpace&quot;</span>);</span><br><span class="line">            Nested.NestedNameSpaceClass.SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span>   </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NestedNameSpaceClass</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span> </span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;In Nested&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">In SomeNameSpace</span><br><span class="line">In Nested</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础指令</title>
    <url>/2024/10/22/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>一些Linux基础命令。</p>
<span id="more"></span>
<hr>
<h2 id="pwd命令"><a class="header-anchor" href="#pwd命令">¶</a>pwd命令</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示用户当前所处的目录</span></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure>
<h2 id="cd命令"><a class="header-anchor" href="#cd命令">¶</a>cd命令</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变目录位置至当前目录下的dir1子目录下</span></span><br><span class="line">cd dir1</span><br><span class="line"><span class="comment">//将当前工作目录改变到当前用户的主目录</span></span><br><span class="line">cd</span><br><span class="line">cd ~</span><br><span class="line"><span class="comment">//改变到当前目录</span></span><br><span class="line">cd .</span><br><span class="line"><span class="comment">//改变目录位置至当前目录的父目录（上一级目录）</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="comment">//改变目录位置至当前目录的父目录下的dir2子目录下</span></span><br><span class="line">cd ../dir2</span><br><span class="line"><span class="comment">//使用绝对路径 改变当前目录位置到用户目录下的demo03_ws/src</span></span><br><span class="line">cd /home/zhao/demo03_ws/src <span class="comment">//在任何位置下都可以直接跳转到指定的路径 但是要加上/home/zhao/</span></span><br></pre></td></tr></table></figure>
<h2 id="ls命令"><a class="header-anchor" href="#ls命令">¶</a>ls命令</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列出当前目录下的文件及目录</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment">//列出包括以“.”开始的隐藏文件在内的所有文件</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="comment">//依照文件最后修改时间的顺序列出文件</span></span><br><span class="line">ls -t</span><br><span class="line"><span class="comment">//列出当前目录下的文件名及其类型</span></span><br><span class="line">ls -F</span><br><span class="line"><span class="comment">//列出当前目录下所有文件的权限、所有者、文件大小、修改时间及名称</span></span><br><span class="line">ls -l</span><br><span class="line"><span class="comment">//同上，并显示出文件的所有者工作组名</span></span><br><span class="line">ls -lg</span><br><span class="line"><span class="comment">//显示出目录下以及其所有子目录的文件名</span></span><br><span class="line">ls -R</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/2024/01/28/HTML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>村雨的HTML学习笔记</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720221103083336.jpg" alt=""></p>
<span id="more"></span>
<hr>
<h1>HTML介绍</h1>
<p>HTML 是用来<strong>描述网页</strong>的一种语言。</p>
<ul>
<li>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li>
<li>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</li>
<li>标记语言是一套<strong>标记标签</strong> (markup tag)</li>
<li>HTML 使用标记标签来<strong>描述</strong>网页</li>
<li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li>
<li>HTML文档也叫做 <strong>web 页面</strong></li>
</ul>
<h2 id="一个简单的例子"><a class="header-anchor" href="#一个简单的例子">¶</a>一个简单的例子</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>//声明定义该文档是 HTML5 文档</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>//HTML页面的根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>//包含有关 HTML页面的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>//指定 HTML 页面的标题（显示在浏览器的标题栏或页面的选项卡中）</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>//HTML文档的主体，并且是所有可见内容的容器，例如标题、段落、图像、超链接、表格、列表等。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My First Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//定义了一个大标题</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//定义了一个段落</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-03_10-46-36.png"  />
<p>HTML 元素由<strong>开始标记、一些内容</strong>和<strong>结束标记</strong>定义：</p>
<p>格式：&lt;标记名&gt; 内容放在这里… &lt; /标记名&gt;</p>
<p>例如：标题：<h1>My First Heading</h1></p>
<p>​           段落：<p>My first paragraph.</p></p>
<p>其中br元素称为<strong>空元素</strong>，没有内容，没有结束标记。//换行符</p>
<hr>
<p>Web 浏览器（Chrome、Edge、Firefox、Safari）的用途是读取 HTML 文档并正确显示它们。</p>
<p>HTML页面结构的可视化：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-03_10-45-30.png" alt=""></p>
<h2 id="使用记事本学习HTML"><a class="header-anchor" href="#使用记事本学习HTML">¶</a>使用记事本学习HTML</h2>
<p>将下面代码保存在记事本中，用.htm 或 .html 作为文件扩展名，将编码设置为 <strong>UTF-8</strong>（这是 HTML 文件的首选编码）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My First Heading&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;My first paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在浏览器中查看HTML文档：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-03_10-53-18.png"  />
<hr>
<h1>HTML基础</h1>
<p>所有 HTML 文档都必须以文档类型声明<strong>开头</strong>：<code>&lt;!DOCTYPE html&gt;</code>。</p>
<p>HTML 文档本身以 开头<code>&lt;html&gt;</code>并以 结尾<code>&lt;/html&gt;</code>。</p>
<p>HTML 文档的可见部分位于<code>&lt;body&gt;</code>和之间<code>&lt;/body&gt;</code>。</p>
<hr>
<h2 id="HTML元素"><a class="header-anchor" href="#HTML元素">¶</a>HTML元素</h2>
<p><strong>HTML 标题</strong>用<code>&lt;h1&gt;</code>to<code>&lt;h6&gt;</code>标签定义。</p>
<p><code>&lt;h1&gt;</code>定义最重要的标题。<code>&lt;h6&gt;</code>定义最不重要的标题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;This is heading <span class="number">1</span>&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;This is heading <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;This is heading <span class="number">3</span>&lt;/h3&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>HTML 段落</strong>用<code>&lt;p&gt;</code>标签定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is another paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>HTML 链接</strong>是<code>&lt;a&gt;</code>标签定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.w3schools.com&quot;</span>&gt;This is a link&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>HTML 图像</strong>用<code>&lt;img&gt;</code>标签定义：</p>
<p>源文件 ( <code>src</code>)、替代文本 ( <code>alt</code>)、 <code>width</code>和<code>height</code>作为属性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;w3schools.jpg&quot;</span> alt=<span class="string">&quot;W3Schools.com&quot;</span> width=<span class="string">&quot;104&quot;</span> height=<span class="string">&quot;142&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>HTML 标签不区分大小写：<code>&lt;P&gt;</code>与 含义相同<code>&lt;p&gt;</code>。//但建议使用小写</p>
<hr>
<h2 id="HTML属性"><a class="header-anchor" href="#HTML属性">¶</a>HTML属性</h2>
<p>HTML 属性提供有关 HTML 元素的附加信息。</p>
<p><strong>href 属性</strong></p>
<p><code>&lt;a&gt;</code>标签定义了一个超链接。<code>href</code>属性指定链接转到的页面的 URL：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.w3schools.com&quot;</span>&gt;Visit W3Schools&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><strong>src属性</strong></p>
<p><code>&lt;img&gt;</code>标签用于在 HTML 页面中嵌入图像。<code>src</code>属性指定要显示的图像的路径：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>宽度和高度属性</strong></p>
<p><img>标签还应包含 width和 height属性，它们指定图像的宽度和高度（以像素为单位）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span> width=<span class="string">&quot;500&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>alt 属性</strong></p>
<p>如果由于某种原因无法显示图像，则alt<code>属性</code><img>` 可以指定图像的替代文本。</p>
<p>这可能是由于连接速度慢、src属性错误或者用户使用屏幕阅读器造成的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span> alt=<span class="string">&quot;Girl with a jacket&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_11-10-46.png" alt=""></p>
<p><strong>样式属性</strong></p>
<p><code>style</code>属性用于向元素添加样式，例如颜色、字体、大小等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;color:red;&quot;</span>&gt;This is a red paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p style="color:red;">This is a red paragraph.</p>
<p><strong>语言属性</strong></p>
<p>应该始终在标记<code>lang</code>内包含属性<code>&lt;html&gt;</code>，以声明网页的语言。</p>
<p>指定英语作为语言：(zh是中文)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>标题属性</strong></p>
<p><code>title</code>属性定义了有关元素的一些额外信息。</p>
<p>将鼠标悬停在元素上时，标题属性的值将显示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p title=<span class="string">&quot;I&#x27;m a tooltip&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_11-20-55.png" alt=""></p>
<hr>
<p>建议使用小写字母，为属性值加上引号。一般使用双引号。</p>
<p>若属性值本身包含双引号，则使用单引号；若属性值本身包含单引号，则使用双引号。</p>
<h2 id="HTML段落"><a class="header-anchor" href="#HTML段落">¶</a>HTML段落</h2>
<p>对于 HTML，无法通过在 HTML 代码中添加额外的空格或额外的行来更改显示。</p>
<p>当页面显示时，浏览器会自动删除任何<strong>多余的空格和行</strong>。</p>
<p><strong>HTML分割线</strong></p>
<p><code>&lt;hr&gt;</code>标签定义 HTML 页面中的内容中断，并且通常显示为水平直线。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;This is heading <span class="number">1</span>&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is some text.&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h2&gt;This is heading <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;This is some other text.&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-40-55.png" alt=""></p>
<p><code>&lt;hr&gt;</code>标签是一个空标签，这意味着它没有结束标签。</p>
<p><strong>HTML换行符</strong></p>
<p><code>&lt;br&gt;</code>元素定义换行符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is&lt;br&gt;a paragraph&lt;br&gt;with line breaks.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is<br>a paragraph<br>with line breaks.</p>
<p><code>&lt;br&gt;</code>标签是一个空标签，这意味着它没有结束标签。</p>
<p><strong><code>&lt;pre&gt;</code>元素</strong></p>
<p>使用<code>&lt;pre&gt;</code>元素定义预格式化文本。</p>
<p><code>&lt;pre&gt;</code>元素内的文本以固定大小和字体（通常是 Courier）显示，并且保留空格和换行符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">  My Bonnie lies over the ocean.</span><br><span class="line"></span><br><span class="line">  My Bonnie lies over the sea.</span><br><span class="line"></span><br><span class="line">  My Bonnie lies over the ocean.</span><br><span class="line"></span><br><span class="line">  Oh, bring back my Bonnie to me.</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-49-35.png" alt=""></p>
<h2 id="HTML样式"><a class="header-anchor" href="#HTML样式">¶</a>HTML样式</h2>
<p>HTML<code>style</code>属性用于向元素添加样式，例如颜色、字体、大小等。</p>
<p><strong>背景颜色</strong></p>
<p>CSS<code>background-color</code>属性定义 HTML 元素的背景颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;body style=<span class="string">&quot;background-color:powderblue;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-57-16.png" alt=""></p>
<p>为两个不同的元素设置背景颜色：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:powderblue;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:tomato;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-58-41.png" alt=""></p>
<p><strong>文字颜色</strong></p>
<p>CSS<code>color</code>属性定义 HTML 元素的文本颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:blue;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;color:red;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-59-43.png" alt=""></p>
<p><strong>字体</strong></p>
<p>CSS<code>font-family</code>属性定义 HTML 元素使用的字体。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;font-family:verdana;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;font-family:courier;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_18-01-30.png" alt=""></p>
<p><strong>字体大小</strong></p>
<p>CSS<code>font-size</code>属性定义 HTML 元素的文本大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;font-size:300%;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;font-size:160%;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_18-02-45.png" alt=""></p>
<p><strong>文本对齐</strong></p>
<p>CSS<code>text-align</code>属性定义 HTML 元素的文本水平对齐方式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;text-align:center;&quot;</span>&gt;Centered Heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;text-align:center;&quot;</span>&gt;Centered paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_18-04-00.png" alt=""></p>
<h2 id="HTML文本格式"><a class="header-anchor" href="#HTML文本格式">¶</a>HTML文本格式</h2>
<p>HTML格式化元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;- 加粗字体</span><br><span class="line">&lt;strong&gt;- 重要文字</span><br><span class="line">&lt;i&gt;- 斜体文本</span><br><span class="line">&lt;em&gt;- 强调文字</span><br><span class="line">&lt;mark&gt;- 标记文本</span><br><span class="line">&lt;small&gt;- 较小的文字</span><br><span class="line">&lt;del&gt;- 删除文本</span><br><span class="line">&lt;ins&gt;- 插入的文本</span><br><span class="line">&lt;sub&gt;- 下标文字</span><br><span class="line">&lt;sup&gt;- 上标文字</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><code>&lt;b&gt;</code>元素定义粗体文本，没有任何额外的重要性。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br></pre></td></tr></table></figure>
<p><b>This text is bold</b></p>
<hr>
<p><strong><code>&lt;strong&gt;</code>元素定义非常重要的文本，内容以粗体显示。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;This text is important!&lt;/strong&gt;</span><br></pre></td></tr></table></figure>
<p><strong>This text is important!</strong></p>
<hr>
<p><strong><code>&lt;i&gt;</code>元素定义斜体文本，没有任何额外的重要性。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;i&gt;This text is italic&lt;/i&gt;</span><br></pre></td></tr></table></figure>
<p><i>This text is italic</i></p>
<hr>
<p><strong><code>&lt;em&gt;</code>元素强调文本的语义，内容通常以斜体显示。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;em&gt;This text is emphasized&lt;/em&gt;</span><br></pre></td></tr></table></figure>
<p><em>This text is emphasized</em></p>
<hr>
<p><strong><code>&lt;small&gt;</code>元素定义较小的文本。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;small&gt;This is some smaller text.&lt;/small&gt;</span><br></pre></td></tr></table></figure>
<p><small>This is some smaller text.</small></p>
<hr>
<p><strong><code>&lt;mark&gt;</code>元素定义应标记或突出显示的文本。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Do <span class="keyword">not</span> forget to buy &lt;mark&gt;milk&lt;/mark&gt; today.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>Do not forget to buy <mark>milk</mark> today.</p>
<hr>
<p><strong><code>&lt;del&gt;</code>元素定义已从文档中删除的文本，会在删除的文本中划一条线。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; red.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>My favorite color is <del>blue</del> red.</p>
<hr>
<p><strong><code>&lt;ins&gt;</code>元素定义已插入到文档中的文本，会给插入的文本添加下划线。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; &lt;ins&gt;red&lt;/ins&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>My favorite color is <del>blue</del> <ins>red</ins>.</p>
<hr>
<p><strong><code>&lt;sub&gt;</code>元素定义下标文本。下标文本出现在法线下方半个字符处，有时会以较小的字体呈现。下标文本可用于化学式，例如 H<sub>2</sub>O。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;sub&gt;subscripted&lt;/sub&gt; text.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is <sub>subscripted</sub> text.</p>
<hr>
<p><strong><code>sup&gt;</code>元素定义上标文本。上标文本显示在正常线上方半个字符，并且有时以较小的字体呈现。上标文本可用于脚注，例如 XXX<sup> [1]</sup></strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;sup&gt;superscripted&lt;/sup&gt; text.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is <sup>superscripted</sup> text.</p>
<hr>
<h2 id="HTML引用"><a class="header-anchor" href="#HTML引用">¶</a>HTML引用</h2>
<p><strong><code>&lt;blockquote&gt;</code>元素定义从另一个源引用的内容，浏览器会将内容缩进。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Here is a quote from WWF<span class="number">&#x27;</span>s website:&lt;/p&gt;</span><br><span class="line">&lt;blockquote cite=<span class="string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span><br><span class="line">For <span class="number">60</span> years, WWF has worked to help people <span class="keyword">and</span> nature thrive. As the world<span class="number">&#x27;</span>s leading conservation organization, WWF works in nearly <span class="number">100</span> countries. At every level, we collaborate with people around the world to develop <span class="keyword">and</span> deliver innovative solutions that protect communities, wildlife, <span class="keyword">and</span> the places in which they live.</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>
<p>Here is a quote from WWF's website:</p><blockquote cite="http://www.worldwildlife.org/who/index.html">For 60 years, WWF has worked to help people and nature thrive. As the world's leading conservation organization, WWF works in nearly 100 countries. At every level, we collaborate with people around the world to develop and deliver innovative solutions that protect communities, wildlife, and the places in which they live.</blockquote>
<hr>
<p><strong><code>&lt;q&gt;</code>标签定义一个简短的引用，浏览器通常在引文两边插入引号。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;WWF<span class="number">&#x27;</span>s goal is to: &lt;q&gt;Build a future where people live in harmony with nature.&lt;/q&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>WWF's goal is to: <q>Build a future where people live in harmony with nature.</q></p>
<hr>
<p><strong><code>&lt;abbr&gt;</code>标签定义缩写或首字母缩略词，例如“HTML”、“CSS”、“Mr.”、“Dr.”、“ASAP”、“ATM”。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;The &lt;abbr title=<span class="string">&quot;World Health Organization&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="number">1948.</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>The <abbr title="World Health Organization">WHO</abbr> was founded in 1948.</p>
<p>注：将鼠标悬停在元素上时,可显示缩写词/首字母缩略词的描述。</p>
<hr>
<p><strong><code>&lt;address&gt;</code>标签定义文档或文章的作者/所有者的联系信息。</strong></p>
<p>联系信息可以是电子邮件地址、URL、实际地址、电话号码、社交媒体账号等。</p>
<p>元素中的文本<code>&lt;address&gt;</code>通常以斜体呈现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;</span><br><span class="line">Written by John Doe.&lt;br&gt;</span><br><span class="line">Visit us at:&lt;br&gt;</span><br><span class="line">Example.com&lt;br&gt;</span><br><span class="line">Box <span class="number">564</span>, Disneyland&lt;br&gt;</span><br><span class="line">USA</span><br><span class="line">&lt;/address&gt;</span><br></pre></td></tr></table></figure>
<address>
Written by John Doe.<br>
Visit us at:<br>
Example.com<br>
Box 564, Disneyland<br>
USA
</address>
<hr>
<p><strong><code>&lt;cite&gt;</code>标签定义创意作品的标题</strong>（例如，一本书、一首诗、一首歌、一部电影、一幅画、一件雕塑等）。</p>
<p>注：人名并非作品名称,元素中的文本通常以斜体呈现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;cite&gt;The Scream&lt;/cite&gt; by Edvard Munch. Painted in <span class="number">1893.</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>
<hr>
<p><strong><code>&lt;bdo&gt;</code>标签用于覆盖当前文本方向。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;bdo dir=<span class="string">&quot;rtl&quot;</span>&gt;This text will be written from right to left&lt;/bdo&gt;</span><br></pre></td></tr></table></figure>
<p><bdo dir="rtl">This text will be written from right to left</bdo></p>
<p>从左到右变成从右到左。</p>
<hr>
<h2 id="HTML注释"><a class="header-anchor" href="#HTML注释">¶</a>HTML注释</h2>
<p>注释不会显示在浏览器中，但它们可以帮助记录 HTML 源代码。</p>
<p>使用以下语法向 HTML 源添加注释:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!-- Write your comments here --&gt;</span><br></pre></td></tr></table></figure>
<!-- Write your comments here -->
<p>注：开始标记中有感叹号<code>!</code>，但结束标记中没有。</p>
<hr>
<p><strong>隐藏内容</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;p&gt;This is another paragraph &lt;/p&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;This is a paragraph too.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is a paragraph.</p><!-- <p>This is another paragraph </p> --><p>This is a paragraph too.</p>
<p><strong>隐藏多行</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;p&gt;Look at <span class="keyword">this</span> cool image:&lt;/p&gt;</span><br><span class="line">&lt;img border=<span class="string">&quot;0&quot;</span> src=<span class="string">&quot;pic_trulli.jpg&quot;</span> alt=<span class="string">&quot;Trulli&quot;</span>&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph too.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is a paragraph.</p>
<!--
<p>Look at this cool image:</p><img border="0" src="pic_trulli.jpg" alt="Trulli">
-->
<p>This is a paragraph too.</p>
<hr>
<h2 id="HTML颜色"><a class="header-anchor" href="#HTML颜色">¶</a>HTML颜色</h2>
<p>在 HTML 中，可以使用颜色名称来指定颜色。</p>
<p><strong>设置文本背景颜色</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt;Tomato&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Orange;&quot;</span>&gt;Orange&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt;DodgerBlue&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt;MediumSeaGreen&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Gray;&quot;</span>&gt;Gray&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:SlateBlue;&quot;</span>&gt;SlateBlue&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt;Violet&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:LightGray;&quot;</span>&gt;LightGray&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:Tomato;">Tomato</h1>
<h1 style="background-color:Orange;">Orange</h1>
<h1 style="background-color:DodgerBlue;">DodgerBlue</h1>
<h1 style="background-color:MediumSeaGreen;">MediumSeaGreen</h1>
<h1 style="background-color:Gray;">Gray</h1>
<h1 style="background-color:SlateBlue;">SlateBlue</h1>
<h1 style="background-color:Violet;">Violet</h1>
<h1 style="background-color:LightGray;">LightGray</h1>
<p>HTML 支持<a href="https://www.w3schools.com/colors/colors_names.asp">140 个颜色名称</a>。</p>
<hr>
<p><strong>设置文本颜色</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:Tomato;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;color:DodgerBlue;&quot;</span>&gt;Hello World&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;color:MediumSeaGreen;&quot;</span>&gt;Hello World&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h1 style="color:Tomato;">Hello World</h1>
<p style="color:DodgerBlue;">Hello World</p>
<p style="color:MediumSeaGreen;">Hello World</p>
<hr>
<p><strong>设置边框颜色</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;border:2px solid Tomato;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;border:2px solid DodgerBlue;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;border:2px solid Violet;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="border:2px solid Tomato;">Hello World</h1>
<h1 style="border:2px solid DodgerBlue;">Hello World</h1>
<h1 style="border:2px solid Violet;">Hello World</h1>
<hr>
<p><strong>RGB</strong></p>
<p>RGB 颜色值代表红色red、绿色green和蓝色blue。</p>
<p>每个参数（红色、绿色和蓝色）定义颜色的强度，其<strong>值介于 0 到 255 之间</strong>。</p>
<p>这意味着有 256 x 256 x 256 = 16777216 种可能的颜色！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(255, 0, 0);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(0, 0, 255);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(60, 179, 113);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">60</span>, <span class="number">179</span>, <span class="number">113</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(238, 130, 238);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">130</span>, <span class="number">238</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(255, 165, 0);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(106, 90, 205);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">106</span>, <span class="number">90</span>, <span class="number">205</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:rgb(255, 0, 0);">rgb(255, 0, 0)</h1>
<h1 style="background-color:rgb(0, 0, 255);">rgb(0, 0, 255)</h1>
<h1 style="background-color:rgb(60, 179, 113);">rgb(60, 179, 113)</h1>
<h1 style="background-color:rgb(238, 130, 238);">rgb(238, 130, 238)</h1>
<h1 style="background-color:rgb(255, 165, 0);">rgb(255, 165, 0)</h1>
<h1 style="background-color:rgb(106, 90, 205);">rgb(106, 90, 205)</h1>
<p><strong>灰色阴影</strong></p>
<p>通常使用所有三个参数的相同值来定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(60, 60, 60);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(100, 100, 100);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(140, 140, 140);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">140</span>, <span class="number">140</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(180, 180, 180);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(200, 200, 200);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(240, 240, 240);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:rgb(60, 60, 60);">rgb(60, 60, 60)</h1>
<h1 style="background-color:rgb(100, 100, 100);">rgb(100, 100, 100)</h1>
<h1 style="background-color:rgb(140, 140, 140);">rgb(140, 140, 140)</h1>
<h1 style="background-color:rgb(180, 180, 180);">rgb(180, 180, 180)</h1>
<h1 style="background-color:rgb(200, 200, 200);">rgb(200, 200, 200)</h1>
<h1 style="background-color:rgb(240, 240, 240);">rgb(240, 240, 240)</h1>
<p><strong>RGBA</strong></p>
<p>RGBA 颜色值是带有 Alpha 通道（不透明度）的 RGB 的扩展。</p>
<p>alpha 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.2);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.2</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.4);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.4</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.6);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.6</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.8);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.8</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 1);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">1</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:rgba(255, 99, 71, 0);">rgba(255, 99, 71, 0)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.2);">rgba(255, 99, 71, 0.2)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.4);">rgba(255, 99, 71, 0.4)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.6);">rgba(255, 99, 71, 0.6)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.8);">rgba(255, 99, 71, 0.8)</h1>
<h1 style="background-color:rgba(255, 99, 71, 1);">rgba(255, 99, 71, 1)</h1>
<hr>
<p><strong>十六进制颜色</strong></p>
<p>通过以下方式指定：</p>
<p><code>#rrggbb</code></p>
<p>其中 rr（红色）、gg（绿色）和 bb（蓝色）是 <strong>00 到 ff 之间</strong>的十六进制值（与十进制 0-255 相同）</p>
<p>例如，#ff0000 显示为红色，因为红色设置为其最高值 (ff)，而其他两个（绿色和蓝色）设置为 00。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#ff0000;&quot;</span>&gt;#ff0000&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#0000ff;&quot;</span>&gt;#<span class="number">0000f</span>f&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#3cb371;&quot;</span>&gt;#<span class="number">3</span>cb371&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#ee82ee;&quot;</span>&gt;#ee82ee&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#ffa500;&quot;</span>&gt;#ffa500&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#6a5acd;&quot;</span>&gt;#<span class="number">6</span>a5acd&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:#ff0000;">#ff0000</h1>
<h1 style="background-color:#0000ff;">#0000ff</h1>
<h1 style="background-color:#3cb371;">#3cb371</h1>
<h1 style="background-color:#ee82ee;">#ee82ee</h1>
<h1 style="background-color:#ffa500;">#ffa500</h1>
<h1 style="background-color:#6a5acd;">#6a5acd</h1>
<p><strong>灰色阴影</strong></p>
<p>通常使用所有三个参数的相同值来定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#404040;&quot;</span>&gt;#<span class="number">404040</span>&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#686868;&quot;</span>&gt;#<span class="number">686868</span>&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#a0a0a0;&quot;</span>&gt;#a0a0a0&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#bebebe;&quot;</span>&gt;<span class="meta">#bebebe<span class="string">&lt;/h1&gt;</span></span></span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#dcdcdc;&quot;</span>&gt;<span class="meta">#dcdcdc<span class="string">&lt;/h1&gt;</span></span></span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#f8f8f8;&quot;</span>&gt;#f8f8f8&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:#404040;">#404040</h1>
<h1 style="background-color:#686868;">#686868</h1>
<h1 style="background-color:#a0a0a0;">#a0a0a0</h1>
<h1 style="background-color:#bebebe;">#bebebe</h1>
<h1 style="background-color:#dcdcdc;">#dcdcdc</h1>
<h1 style="background-color:#f8f8f8;">#f8f8f8</h1>
<hr>
<p><strong>HSL</strong></p>
<p>hsl(<em>色调</em>,<em>饱和度</em>,<em>亮度</em>)</p>
<p>色调是色轮上从 0 到 360 的一个度数。0 是红色，120 是绿色，240 是蓝色。</p>
<p>饱和度是一个百分比值。 0% 表示灰度，100% 表示全色。</p>
<p>亮度也是一个百分比值。 0% 为黑色，100% 为白色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(240, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">240</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(147, 50%, 47%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">147</span>, <span class="number">50</span>%, <span class="number">47</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(300, 76%, 72%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">300</span>, <span class="number">76</span>%, <span class="number">72</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(39, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">39</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(248, 53%, 58%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">248</span>, <span class="number">53</span>%, <span class="number">58</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>
<h1 style="background-color:hsl(240, 100%, 50%);">hsl(240, 100%, 50%)</h1>
<h1 style="background-color:hsl(147, 50%, 47%);">hsl(147, 50%, 47%)</h1>
<h1 style="background-color:hsl(300, 76%, 72%);">hsl(300, 76%, 72%)</h1>
<h1 style="background-color:hsl(39, 100%, 50%);">hsl(39, 100%, 50%)</h1>
<h1 style="background-color:hsl(248, 53%, 58%);">hsl(248, 53%, 58%)</h1>
<p><strong>饱和度</strong></p>
<p>饱和度可以描述为颜色的强度。</p>
<p>100% 是纯色，没有灰色阴影。</p>
<p>50%是50%灰色，但你仍然可以看到颜色。</p>
<p>0%是完全灰色的；你再也看不到颜色了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 80%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">80</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 60%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">60</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 40%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">40</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 20%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">20</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>
<h1 style="background-color:hsl(0, 80%, 50%);">hsl(0, 80%, 50%)</h1>
<h1 style="background-color:hsl(0, 60%, 50%);">hsl(0, 60%, 50%)</h1>
<h1 style="background-color:hsl(0, 40%, 50%);">hsl(0, 40%, 50%)</h1>
<h1 style="background-color:hsl(0, 20%, 50%);">hsl(0, 20%, 50%)</h1>
<h1 style="background-color:hsl(0, 0%, 50%);">hsl(0, 0%, 50%)</h1>
<p><strong>亮度</strong></p>
<p>亮度可以描述为您想要赋予该颜色多少光。</p>
<p>0%表示没有光（黑色）。</p>
<p>50%表示50%光（既不暗也不亮）。</p>
<p>100%表示完全亮度（白色）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 0%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">0</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 25%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">25</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 75%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">75</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 90%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">90</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 100%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">100</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 100%, 0%);">hsl(0, 100%, 0%)</h1>
<h1 style="background-color:hsl(0, 100%, 25%);">hsl(0, 100%, 25%)</h1>
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>
<h1 style="background-color:hsl(0, 100%, 75%);">hsl(0, 100%, 75%)</h1>
<h1 style="background-color:hsl(0, 100%, 90%);">hsl(0, 100%, 90%)</h1>
<h1 style="background-color:hsl(0, 100%, 100%);">hsl(0, 100%, 100%)</h1>
<p><strong>灰色阴影</strong></p>
<p>通常通过将色调和饱和度设置为 0 并将亮度从 0% 调整到 100% 以获得更暗/更亮的阴影来定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 20%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">20</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 30%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">30</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 40%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">40</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 60%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">60</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 70%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">70</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 90%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">90</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 0%, 20%);">hsl(0, 0%, 20%)</h1>
<h1 style="background-color:hsl(0, 0%, 30%);">hsl(0, 0%, 30%)</h1>
<h1 style="background-color:hsl(0, 0%, 40%);">hsl(0, 0%, 40%)</h1>
<h1 style="background-color:hsl(0, 0%, 60%);">hsl(0, 0%, 60%)</h1>
<h1 style="background-color:hsl(0, 0%, 70%);">hsl(0, 0%, 70%)</h1>
<h1 style="background-color:hsl(0, 0%, 90%);">hsl(0, 0%, 90%)</h1>
<p><strong>HSLA</strong></p>
<p>HSLA 颜色值是 HSL 颜色值的扩展，带有 Alpha 通道 - 用于指定颜色的不透明度。</p>
<p>alpha 参数是 介于0.0（完全透明）和 1.0（完全不透明）之间的数值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.2);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.2</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.4);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.4</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.6);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.6</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.8);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.8</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 1);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">1</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsla(9, 100%, 64%, 0);">hsla(9, 100%, 64%, 0)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.2);">hsla(9, 100%, 64%, 0.2)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.4);">hsla(9, 100%, 64%, 0.4)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.6);">hsla(9, 100%, 64%, 0.6)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.8);">hsla(9, 100%, 64%, 0.8)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 1);">hsla(9, 100%, 64%, 1)</h1>
<hr>
<h2 id="HTML-CSS"><a class="header-anchor" href="#HTML-CSS">¶</a>HTML-CSS</h2>
<p>层叠样式表 (CSS) 用于格式化网页的布局。</p>
<p>CSS 节省了大量工作。它可以同时控制多个网页的布局。</p>
<p>应用于父元素的样式也将应用于父元素中的所有子元素。</p>
<p>因此，如果将正文文本的颜色设置为“蓝色”，正文中的所有标题、段落和其他文本元素也将获得相同的颜色（除非特别指定内容）！</p>
<h3 id="内联CSS"><a class="header-anchor" href="#内联CSS">¶</a>内联CSS</h3>
<p>用于将独特的样式应用于<strong>单个 HTML 元素</strong>，使用<code>style</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:blue;&quot;</span>&gt;A Blue Heading&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p style=<span class="string">&quot;color:red;&quot;</span>&gt;A red paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h1 style="color:blue;">A Blue Heading</h1>
<p style="color:red;">A red paragraph.</p>
<hr>
<h3 id="内部CSS"><a class="header-anchor" href="#内部CSS">¶</a>内部CSS</h3>
<p>用于定义<strong>单个 HTML 页面</strong>的样式。</p>
<p>在<code>&lt;head&gt;</code> 页面的某个<code>&lt;style&gt;</code>元素内定义。</p>
<p>将（该页面上）所有<code>&lt;h1&gt;</code>元素的文本颜色设置为蓝色，并将所有<code>&lt;p&gt;</code>元素的文本颜色设置为红色。此外，页面将以“粉蓝色”背景色显示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;<span class="comment">//内部CSS</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;background-color: powderblue;&#125;</span><br><span class="line">h1   &#123;color: blue;&#125;</span><br><span class="line">p    &#123;color: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-08-49.png" alt=""></p>
<hr>
<h3 id="外部CSS"><a class="header-anchor" href="#外部CSS">¶</a>外部CSS</h3>
<p>外部样式表用于定义许多 HTML 页面的样式，可以通过更改一个文件来更改整个网站的外观。</p>
<p>要使用外部样式表，要在每个 HTML 页面的 <code>&lt;head&gt;</code>部分中添加指向它的链接。</p>
<p>外部样式表可以在任何文本编辑器中编写。该文件不得包含任何 HTML 代码，并且必须以 .css 扩展名保存。</p>
<p>“styles.css”文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: powderblue;</span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引用“styles.css”文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;<span class="comment">//调用css文件</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;link&gt;</code>：这是HTML中的一个标签，用于定义文档与外部资源之间的关系。</li>
<li><code>rel=&quot;stylesheet&quot;</code>：这是<code>&lt;link&gt;</code>标签的属性之一，用于指定被链接文档与当前文档的关系。在这里，<code>stylesheet</code>表示被链接的文档是一个样式表。</li>
<li><code>href=&quot;styles.css&quot;</code>：这也是<code>&lt;link&gt;</code>标签的一个属性，用于指定被链接文档的URL或路径。在这里，<code>styles.css</code>是被链接的样式表文件的路径或URL。</li>
</ul>
<p>将当前HTML文档与名为<code>styles.css</code>的外部样式表文件关联起来，以应用样式表中定义的样式规则来渲染HTML文档中的元素。</p>
<hr>
<h3 id="CSS-颜色、字体和大小"><a class="header-anchor" href="#CSS-颜色、字体和大小">¶</a>CSS 颜色、字体和大小</h3>
<p>CSS<code>color</code>属性定义要使用的文本颜色。</p>
<p>CSS<code>font-family</code>属性定义要使用的字体。</p>
<p>CSS<code>font-size</code>属性定义要使用的文本大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![Snipaste_2024<span class="number">-02</span><span class="number">-08</span>_01<span class="number">-24</span><span class="number">-47</span>](C:/Users/<span class="number">86176</span>/Desktop/Snipaste_2024<span class="number">-02</span><span class="number">-08</span>_01<span class="number">-24</span><span class="number">-47.</span>png)&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">h1 &#123;<span class="comment">//定义一级标题的样式</span></span><br><span class="line">  color: blue;</span><br><span class="line">  font-family: verdana;</span><br><span class="line">  font-size: <span class="number">300</span>%;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;<span class="comment">//定义段落的样式</span></span><br><span class="line">  color: red;</span><br><span class="line">  font-family: courier;</span><br><span class="line">  font-size: <span class="number">160</span>%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-24-47.png" alt=""></p>
<hr>
<h3 id="CSS边框"><a class="header-anchor" href="#CSS边框">¶</a>CSS边框</h3>
<p>CSS<code>margin</code>属性定义边框外的<strong>边距</strong>（空间）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">p &#123;<span class="comment">//定义边框</span></span><br><span class="line">  border: <span class="number">2</span>px solid powderblue;<span class="comment">//边框的样式</span></span><br><span class="line">  margin: <span class="number">50</span>px;<span class="comment">//边距</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-27-18.png" alt=""></p>
<hr>
<h3 id="CSS填充"><a class="header-anchor" href="#CSS填充">¶</a>CSS填充</h3>
<p>CSS<code>padding</code>属性定义文本和边框之间的填充（空间）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  border: <span class="number">2</span>px solid powderblue;</span><br><span class="line">  padding: <span class="number">30</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_09-52-59.png" style="zoom:50%;" />
<hr>
<h3 id="链接外部CSS"><a class="header-anchor" href="#链接外部CSS">¶</a>链接外部CSS</h3>
<p>外部样式表可以通过完整的 URL 或路径来引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://www.w3schools.com/html/styles.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-36-37.png" alt=""></p>
<hr>
<h2 id="HTML链接"><a class="header-anchor" href="#HTML链接">¶</a>HTML链接</h2>
<p>HTML 链接是超链接。</p>
<p>可以单击链接并跳转到另一个文档，将鼠标移到链接上时，鼠标箭头会变成一只小手。</p>
<p><code>&lt;a&gt;</code>标签定义超链接。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.w3schools.com/&quot;</span>&gt;Visit W3Schools.com!&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.w3schools.com/">Visit W3Schools.com!</a></p>
<p><strong>注意</strong>：链接不一定是文本。链接可以是图像或任何其他 HTML 元素！</p>
<hr>
<h3 id="目标属性"><a class="header-anchor" href="#目标属性">¶</a>目标属性</h3>
<p>默认情况下，链接页面将显示在<strong>当前浏览器窗口</strong>中。要更改此设置，必须为链接指定另一个目标。</p>
<p><code>target</code>属性指定在哪里打开链接文档。</p>
<ul>
<li><code>_self</code>- 默认。在单击时的同一窗口/选项卡中打开文档</li>
<li><code>_blank</code>- 在<strong>新窗口</strong>或选项卡中打开文档</li>
<li><code>_parent</code>- 在父框架中打开文档</li>
<li><code>_top</code>- 在整个窗口中打开文档</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.villagerain.cn/&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;这里是村雨的个人博客&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.villagerain.cn/" target="_blank">这里是村雨的个人博客</a></p>
<hr>
<h3 id="相对URL"><a class="header-anchor" href="#相对URL">¶</a>相对URL</h3>
<p>上面的示例都在<code>href</code>属性中使用<strong>绝对 URL</strong>（完整网址）。</p>
<p><strong>本地链接（指向同一网站内页面的链接）使用相对 URL</strong>指定 （不带“<a href="https://www">https://www</a>”部分）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;Absolute URLs&lt;/h2&gt;<span class="comment">//指向不同的网站</span></span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;https://www.w3.org/&quot;</span>&gt;W3C&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;https://www.google.com/&quot;</span>&gt;Google&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Relative URLs&lt;/h2&gt;<span class="comment">//都指向W3school网站内页面</span></span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;html_images.asp&quot;</span>&gt;HTML Images&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;/css/default.asp&quot;</span>&gt;CSS Tutorial&lt;/a&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用图像作为链接"><a class="header-anchor" href="#使用图像作为链接">¶</a>使用图像作为链接</h3>
<p>要使用图像作为链接，只需将<code>&lt;img&gt;</code> 标签放在标签内即可<code>&lt;a&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;link&quot;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;smiley.gif&quot;</span> alt=<span class="string">&quot;HTML tutorial&quot;</span> style=<span class="string">&quot;width:42px;height:42px;&quot;</span>&gt;<span class="comment">//img标签</span></span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_10-16-52.png" alt=""></p>
<p>点击图像即可跳转对应网页。</p>
<hr>
<h3 id="链接到电子邮箱"><a class="header-anchor" href="#链接到电子邮箱">¶</a>链接到电子邮箱</h3>
<p><code>mailto:</code>在<code> href</code>属性内部创建一个打开用户电子邮箱的链接</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;mailto:someone@example.com&quot;</span>&gt;Send email&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="mailto:1796245865@qq.com">Send email</a></p>
<hr>
<h3 id="使用按钮作为链接"><a class="header-anchor" href="#使用按钮作为链接">¶</a>使用按钮作为链接</h3>
<p>要使用按钮作为链接，必须添加一些 JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.location=&#x27;https://villagerain.cn/&#x27;&quot;</span>&gt;</span>村雨的个人博客<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_10-30-56.png" alt=""></p>
<p><strong>点击按钮后跳转网站。</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_10-31-14.png" alt="Snipaste_2024-02-16_10-31-14"></p>
<hr>
<h3 id="链接书签"><a class="header-anchor" href="#链接书签">¶</a>链接书签</h3>
<p>如果网页很长，书签会很有用，以便读者可以跳转到网页的特定部分。</p>
<p>首先，使用<code>id</code>属性创建书签：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h2 id=<span class="string">&quot;C4&quot;</span>&gt;Chapter <span class="number">4</span>&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<h2 id="C4">Chapter 4</h2>
<p>然后，在同一页面中添加指向书签的链接（“跳转到第 4 章”）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;#C4&quot;</span>&gt;Jump to Chapter <span class="number">4</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="#C4">Jump to Chapter 4</a></p>
<p>当点击链接时，就会自动找到Chapter 4。</p>
<hr>
<h2 id="HTML图像"><a class="header-anchor" href="#HTML图像">¶</a>HTML图像</h2>
<p>HTML<code>&lt;img&gt;</code>标签用于在网页中嵌入图像。</p>
<p>从技术上讲，图像并未插入网页；图像链接到网页。<code>&lt;img&gt;</code>标签为引用的图像创建了一个保存空间。</p>
<p>该<code>&lt;img&gt;</code>标签是空的，仅包含属性，并且<strong>没有结束标签。</strong></p>
<p>该<code>&lt;img&gt;</code>标签有两个必需的属性：</p>
<ul>
<li>src - 指定图像的路径</li>
<li>alt - 指定图像的替代文本</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;url&quot;</span> alt=<span class="string">&quot;alternatetext&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg&quot;</span> alt=<span class="string">&quot;安度因&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg" alt="安度因" style="zoom:50%;" >
<hr>
<h3 id="图像尺寸"><a class="header-anchor" href="#图像尺寸">¶</a>图像尺寸</h3>
<p>使用<code>style</code>属性来指定图像的宽度和高度：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">style=<span class="string">&quot;width:500px;height:600px;&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用<code>width</code>和<code>height</code>属性来指定图像的宽度和高度：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">width=<span class="string">&quot;500&quot;</span> height=<span class="string">&quot;600&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：始终指定图像的宽度和高度。如果未指定宽度和高度，加载图像时网页可能会闪烁。</p>
<p>​            建议使用<code>style</code>属性。它可以防止样式表更改图像的大小。</p>
<hr>
<h3 id="图像浮动"><a class="header-anchor" href="#图像浮动">¶</a>图像浮动</h3>
<p>使用 CSS<code>float</code>属性让图像浮动到文本的右侧right或左侧left：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg&quot;</span> alt=<span class="string">&quot;安度因&quot;</span> style=<span class="string">&quot;float:left;width:150px;height:150px;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg" alt="安度因" style="float:left;width:150px;height:150px;">
<hr>
<h3 id="图像映射"><a class="header-anchor" href="#图像映射">¶</a>图像映射</h3>
<p>使用 HTML 图像映射，可以<strong>在图像上创建可单击区域</strong>。当点击对应区域时就会跳转到相应的页面。</p>
<p>由于涉及到像素点的位置，比较繁琐。更详细的内容请查看官网。</p>
<p><a href="https://www.w3schools.com/html/html_images_imagemap.asp">https://www.w3schools.com/html/html_images_imagemap.asp</a></p>
<p><code>&lt;map&gt;</code>标签定义图像映射。被定义图像具有可点击区域。这些区域是用一个或多个<code>&lt;area&gt;</code>标签定义的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;workplace.jpg&quot;</span> alt=<span class="string">&quot;Workplace&quot;</span> usemap=<span class="string">&quot;#workmap&quot;</span>&gt;<span class="comment">//整张图片</span></span><br><span class="line"></span><br><span class="line">&lt;map name=<span class="string">&quot;workmap&quot;</span>&gt;</span><br><span class="line">  &lt;area shape=<span class="string">&quot;rect&quot;</span> coords=<span class="string">&quot;34,44,270,350&quot;</span> alt=<span class="string">&quot;Computer&quot;</span> href=<span class="string">&quot;computer.htm&quot;</span>&gt;<span class="comment">//矩形电脑区域</span></span><br><span class="line">  &lt;area shape=<span class="string">&quot;rect&quot;</span> coords=<span class="string">&quot;290,172,333,250&quot;</span> alt=<span class="string">&quot;Phone&quot;</span> href=<span class="string">&quot;phone.htm&quot;</span>&gt;<span class="comment">//矩形手机区域</span></span><br><span class="line">  &lt;area shape=<span class="string">&quot;circle&quot;</span> coords=<span class="string">&quot;337,300,44&quot;</span> alt=<span class="string">&quot;Coffee&quot;</span> href=<span class="string">&quot;coffee.htm&quot;</span>&gt;<span class="comment">//圆形咖啡杯区域</span></span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>
<img src="C:/Users/86176/Desktop/Snipaste_2024-02-19_23-16-32.png" style="zoom: 80%;" />
<p>在该例子中，有三个图像映射的区域。当点击对应的区域，就会跳转到对应区域所指向的网页（href）</p>
<hr>
<h3 id="背景图片"><a class="header-anchor" href="#背景图片">¶</a>背景图片</h3>
<p>要在 HTML 元素上添加背景图片，要使用 HTML<code>style</code>属性和 CSS<code>background-image</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;background-image: url(&#x27;img_girl.jpg&#x27;);&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>还可以在<code>&lt;head&gt;</code>元素中的以下部分中指定背景图片 ：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">p &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;img_girl.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>如果希望<strong>整个页面</strong>都有背景图片，则必须在<code>&lt;body&gt;</code>元素上指定背景图片：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;img_girl.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>如果背景图像小于元素，图像将水平和垂直<strong>重复</strong>自身，直到到达元素的末尾。</p>
<p>要避免背景图像重复，可将该<code>background-repeat</code>属性设置为<code>no-repeat</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;example_img_girl.jpg&#x27;</span>);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>如果希望背景图片覆盖整个元素，可以将该<code>background-size</code>属性设置为 <code>cover.</code></p>
<p>另外，为了确保整个元素始终被覆盖，可以将 <code>background-attachment</code>属性设置为<code>fixed:</code></p>
<p>这样，背景图像将覆盖整个元素，不会拉伸（图像将保持其原始比例）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![Snipaste_2024<span class="number">-02</span><span class="number">-19</span>_23<span class="number">-51</span><span class="number">-27</span>](C:/Users/<span class="number">86176</span>/Desktop/Snipaste_2024<span class="number">-02</span><span class="number">-19</span>_23<span class="number">-51</span><span class="number">-27.</span>png)&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E9%A9%AC%E7%AB%9E%E5%A4%BA%E5%86%A0.jpg&#x27;</span>);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment: fixed; </span><br><span class="line">  background-size: <span class="number">100</span>% <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;马德里竞技<span class="number">20</span>/<span class="number">21</span>夺冠赛季&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;海神之子，永不言弃！&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-19_23-51-27.png" style="zoom:50%;" />
<p>如果希望背景图像拉伸以适合整个元素，可以将该<code>background-size</code>属性设置为 <code>100% 100%</code></p>
<hr>
<h3 id="图片元素"><a class="header-anchor" href="#图片元素">¶</a>图片元素</h3>
<p>HTML<code>&lt;picture&gt;</code>元素允许为不同的设备或屏幕尺寸显示不同的图片，为 Web 开发人员指定图像资源提供了更大的灵活性。</p>
<p><code>&lt;picture&gt;</code>元素包含一个或多个<code>&lt;source&gt;</code>元素，每个元素通过属性引用不同的图像<code>srcset</code> 。</p>
<p>这样浏览器就可以选择最适合当前视图和/或设备的图像。</p>
<p>每个<code>&lt;source&gt;</code>元素都有一个 <code>media</code>属性，用于定义图像何时最合适。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//针对不同的屏幕尺寸显示不同的图像：</span></span><br><span class="line">&lt;picture&gt;</span><br><span class="line">  &lt;source media=<span class="string">&quot;(min-width: 650px)&quot;</span> srcset=<span class="string">&quot;img_food.jpg&quot;</span>&gt;</span><br><span class="line">  &lt;source media=<span class="string">&quot;(min-width: 465px)&quot;</span> srcset=<span class="string">&quot;img_car.jpg&quot;</span>&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span>&gt;</span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：始终将某个<code>&lt;img&gt;</code>元素指定为<code>&lt;picture&gt;</code>元素的最后一个子元素。该<code>&lt;img&gt;</code>元素由不支持该<code>&lt;picture&gt;</code>元素的浏览器使用，或者如果没有<code>&lt;source&gt;</code>标签匹配时使用。</p>
<p>（本内容了解即可）</p>
<hr>
<h2 id="HTML网站图标"><a class="header-anchor" href="#HTML网站图标">¶</a>HTML网站图标</h2>
<p>将网站图标图像保存到网络服务器的根目录中，或者在<strong>根目录</strong>中创建一个名为 images 的文件夹，并将您的网站图标图像保存在此文件夹中。网站图标图像的通用名称是“favicon.ico”。</p>
<p>接下来，将一个<code>&lt;link&gt;</code>元素添加到“index.html”文件中的<code>&lt;title&gt;</code>元素后面。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;网站图标测试&lt;/title&gt;<span class="comment">//网站页面标题</span></span><br><span class="line">  &lt;link rel=<span class="string">&quot;icon&quot;</span> type=<span class="string">&quot;image/x-icon&quot;</span> href=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;你干嘛~&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;练习时长两年半。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>测试结果</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_10-41-11.png" alt=""></p>
<p><strong>注意</strong>：要将html文件和images文件夹要放在同一目录下，本例中我都放到了D盘根目录。</p>
<hr>
<h2 id="HTML表格"><a class="header-anchor" href="#HTML表格">¶</a>HTML表格</h2>
<h3 id="定义表格"><a class="header-anchor" href="#定义表格">¶</a>定义表格</h3>
<p><strong>表行</strong></p>
<p>每个表行以<code>&lt;tr&gt;</code>开头并以<code>&lt;/tr&gt;</code>标签结尾。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;<span class="comment">//表格</span></span><br><span class="line">  &lt;tr&gt;<span class="comment">//表示行的开始table row</span></span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;<span class="comment">//表中的数据table date</span></span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;<span class="comment">//表示行的结束</span></span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;<span class="comment">//表中的数据</span></span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p>一个表中可以有任意多的行，只需确保每行中的<strong>单元格数量相同</strong>即可。</p>
<hr>
<h3 id="表格标题"><a class="header-anchor" href="#表格标题">¶</a><strong>表格标题</strong></h3>
<p>希望单元格成为标题单元格时，使用表头<code>&lt;th&gt;</code>标签。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;<span class="comment">//表格</span></span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;<span class="comment">//标题单元格table head</span></span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>金球奖第一</th>
    <th>金球奖第二</th>
    <th>金球奖第三</th>
  </tr>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p>若要使第一列成为标题，则设置每行的第一个单元格为表头：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;<span class="comment">//设置为表头</span></span><br><span class="line">    &lt;td&gt;金球奖第二&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;金球奖第三&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;格里兹曼&lt;/th&gt;<span class="comment">//设置为表头</span></span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;<span class="number">1</span>&lt;/th&gt;<span class="comment">//设置为表头</span></span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>金球奖第一</th>
    <td>金球奖第二</td>
    <td>金球奖第三</td>
  </tr>
  <tr>
    <th>格里兹曼</th>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <th>1</th>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p><strong>对齐标题</strong></p>
<p>在网页中，默认情况下，表标题为粗体并居中。</p>
<p>要左对齐<strong>标题</strong>，使用 CSS中<code>text-align</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-03-58.png" alt=""></p>
<p><strong>多列标题</strong></p>
<p>使用元素 <code>&lt;th&gt;</code>上的属性<code>colspan</code>可以设置跨越两列或更多列的标题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th colspan=<span class="string">&quot;2&quot;</span>&gt;金球奖前二&lt;/th&gt;<span class="comment">//标题跨越两列</span></span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th colspan="2">金球奖前二</th>
    <th>金球奖第三</th>
  </tr>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p><strong>添加整个表格的标题</strong></p>
<p>使用<code>&lt;caption&gt;</code>标签：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;caption&gt;金球奖排行&lt;/caption&gt;<span class="comment">//在&lt;table&gt;标签下，&lt;tr&gt;标签上添加</span></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
    <caption>金球奖排行</caption>
    <tr>
    <th>金球奖第一</th>
    <th>金球奖第二</th>
    <th>金球奖第三</th>
  </tr>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<hr>
<h3 id="表格边框"><a class="header-anchor" href="#表格边框">¶</a>表格边框</h3>
<p>HTML 表格可以具有不同样式和形状的边框。</p>
<p>要添加边框，则在 <code>table</code>、<code>th</code>和 <code>td</code>元素上使用 CSS 属性<code>border</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;<span class="comment">//整个网页的代码</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;<span class="comment">//内部CSS</span></span><br><span class="line">table, th, td &#123;<span class="comment">//添加边框</span></span><br><span class="line">  border: <span class="number">1</span>px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在网页上添加表格与不添加表格的效果对比：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-14-26.png" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-14-37.png" alt=""></p>
<p><strong>设置表格为单边框</strong></p>
<p>将 CSS<code>border-collapse</code> 属性设置为<code>collapse</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">table, th, td &#123;</span><br><span class="line">  border: <span class="number">1</span>px solid black;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-17-21.png" alt=""></p>
<p><strong>设置单元格背景颜色</strong></p>
<p>在内部CSS中添加以下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  background-color: #<span class="number">96</span>D4D4;<span class="comment">//颜色可自行设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-24-29.png" alt=""></p>
<p><strong>设置圆桌边框</strong></p>
<p>添加<code>border-radius</code>属性，边框变为圆角：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">table, th, td &#123;</span><br><span class="line">  border: <span class="number">1</span>px solid black;</span><br><span class="line">  border-radius: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-26-48.png" alt=""></p>
<p><strong>设置边框样式</strong></p>
<p>使用<code>border-style</code>属性，可以设置边框的外观。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  border-style: dotted;<span class="comment">//设置为虚线</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-30-39.png" alt=""></p>
<p>其他样式：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-30-54.png" alt=""></p>
<p><strong>边框颜色</strong></p>
<p>通过<code>border-color</code>属性，可以设置边框的颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  border-color: #<span class="number">96</span>D4D4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-32-33.png" alt=""></p>
<hr>
<h3 id="表格大小"><a class="header-anchor" href="#表格大小">¶</a>表格大小</h3>
<p>HTML 表格的每列、行或整个表格可以有不同的大小。</p>
<p>让<code>&lt;style&gt;</code> 带有<code>width</code>或<code>height</code> 属性来指定行或列的大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;<span class="comment">//设置表格宽度为100%</span></span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th style=<span class="string">&quot;width:50%&quot;</span>&gt;金球奖第一&lt;/th&gt;<span class="comment">//设置第一列宽度为50%</span></span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr style=<span class="string">&quot;height:100px&quot;</span>&gt;<span class="comment">//设置第二行的列高为100px</span></span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table style="width:100%">
  <tr>
    <th style="width:50%">金球奖第一</th>
    <th>金球奖第二</th>
    <th>金球奖第三</th>
  </tr>
  <tr style="height:100px">
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p><strong>注意</strong>:使用百分比作为宽度的大小单位意味着该元素与其父元素（在本例中为<code>&lt;body&gt;</code>元素）相比有多宽 。</p>
<hr>
<h3 id="单元格填充和间距"><a class="header-anchor" href="#单元格填充和间距">¶</a><strong>单元格填充和间距</strong></h3>
<p>单元格填充是单元格边缘和单元格内容之间的空间，默认情况下，填充设置为 0。</p>
<p>要在单元格上添加填充，需使用 CSS<code>padding</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  padding: <span class="number">15</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-19-54.png" alt=""></p>
<p>要仅在内容上方添加填充，使用<code>padding-top</code>属性。</p>
<p>还支持<code>padding-bottom</code>、<code>padding-left</code>和<code>padding-right</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  padding-top: <span class="number">10</span>px;</span><br><span class="line">  padding-bottom: <span class="number">0</span>px;</span><br><span class="line">  padding-left: <span class="number">0</span>px;</span><br><span class="line">  padding-right: <span class="number">0</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-22-05.png" alt=""></p>
<p><strong>单元格间距</strong></p>
<p>单元格间距是每个单元格之间的空间，默认情况下，空间设置为 2 像素。</p>
<p>要更改表格单元格之间的间距，请使用元素<code> border-spacing</code>上的 CSS 属性<code>table</code> ：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">table &#123;</span><br><span class="line">  border-spacing: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-25-55.png" alt=""></p>
<hr>
<h3 id="列跨度和行跨度"><a class="header-anchor" href="#列跨度和行跨度">¶</a>列跨度和行跨度</h3>
<p>要使单元格跨越多列，使用<code>colspan</code>属性，<strong>表格标题</strong>一栏中已举例说明。</p>
<p>要使单元格跨越多行，使用<code>rowspan</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">    &lt;td&gt;德佩&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th rowspan=<span class="string">&quot;2&quot;</span>&gt;职业&lt;/th&gt;</span><br><span class="line">    &lt;td&gt;足球运动员&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;说唱歌手&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>姓名</th>
    <td>德佩</td>
  </tr>
  <tr>
    <th rowspan="2">职业</th>
    <td>足球运动员</td>
  </tr>
  <tr>
    <td>说唱歌手</td>
</tr>
</table>
<hr>
<h3 id="表格样式"><a class="header-anchor" href="#表格样式">¶</a>表格样式</h3>
<p><strong>斑马条纹</strong></p>
<p>如果在每隔一个表格行添加背景颜色，将获得漂亮的斑马条纹效果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数行有颜色</span></span><br><span class="line">  background-color: #D6EEEE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-40-58.png" alt=""></p>
<p><strong>垂直斑马条纹</strong></p>
<p>要制作垂直斑马条纹，需每隔一<strong>列</strong>设置样式，而不是每隔一行设置样式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">td:nth-<span class="built_in">child</span>(even), th:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数列和偶数列标题有颜色</span></span><br><span class="line">  background-color: #D6EEEE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-42-59.png" alt=""></p>
<p><strong>组合垂直和水平斑马纹</strong></p>
<p>结合上面两个示例中的样式，每隔一行和每一列都会有条纹：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数行有颜色</span></span><br><span class="line">  background-color: <span class="built_in">rgba</span>(<span class="number">150</span>, <span class="number">212</span>, <span class="number">212</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用rgba()来指定颜色的透明度：</span></span><br><span class="line">td:nth-<span class="built_in">child</span>(even),th:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数列和偶数列标题有颜色</span></span><br><span class="line">  background-color: <span class="built_in">rgba</span>(<span class="number">150</span>, <span class="number">212</span>, <span class="number">212</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-48-07.png" alt=""></p>
<p><strong>水平分割线</strong></p>
<p>如果仅在每个表格行的底部指定边框，将产生一个带有水平分隔线的表格。</p>
<p>将<code>border-bottom</code>属性添加到所有 <code>tr</code>元素以获取水平分隔线：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr &#123;</span><br><span class="line">  border-bottom: <span class="number">1</span>px solid <span class="meta">#ddd;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-52-08.png" alt=""></p>
<p><strong>悬浮表格</strong></p>
<p>使用 <code>tr:hover</code>选择器在<strong>鼠标悬停时</strong>突出显示表行：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr:hover &#123;background-color: #D6EEEE;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-53-32.png" alt=""></p>
<h3 id="表格列成组"><a class="header-anchor" href="#表格列成组">¶</a>表格列成组</h3>
<p>如果要设置<strong>表格前两列</strong>的样式，使用<code>&lt;colgroup&gt;</code> 和<code>&lt;col&gt;</code> 元素。</p>
<p><code>&lt;colgroup&gt;</code>元素应用作列规格的容器。</p>
<p>每个组都用一个元素指定<code>&lt;col&gt;</code>。</p>
<p><code>span</code>属性指定有多少列获得该样式。</p>
<p><code>style</code>属性指定列的样式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;</span><br><span class="line">  &lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;2&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-58-39.png" alt=""></p>
<p><strong>使用不同的样式设置更多列</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;</span><br><span class="line">&lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;<span class="comment">//第一列成组</span></span><br><span class="line">    &lt;col span=<span class="string">&quot;2&quot;</span> style=<span class="string">&quot;background-color: pink&quot;</span>&gt;<span class="comment">//第二三列成组（第一组的后面两列成组）</span></span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_23-04-50.png" alt=""></p>
<p><strong>空列成组</strong></p>
<p>如果要为表格中间的列设置样式，请 <code>&lt;col&gt;</code>在前面的列中插入一个“空”元素（没有样式）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span>&gt;<span class="comment">//一个道理</span></span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: pink&quot;</span>&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_23-07-34.png" alt=""></p>
<p><strong>隐藏列</strong></p>
<p>使用<code>visibility: collapse</code>属性隐藏列：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;</span><br><span class="line">&lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;visibility: collapse&quot;</span>&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_23-10-46.png" alt=""></p>
<hr>
<h2 id="HTML列表"><a class="header-anchor" href="#HTML列表">¶</a>HTML列表</h2>
<h3 id="无序列表"><a class="header-anchor" href="#无序列表">¶</a>无序列表</h3>
<p>无序列表以<code>&lt;ul&gt;</code>标签开头。每个列表项都以标签开头 <code>&lt;li&gt;</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line"> &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line"> &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
 <li>格里兹曼</li>
 <li>梅西</li>
 <li>C罗</li>
</ul>
<p>可以通过CSS<code>list-style-type</code>属性改变标签的<strong>样式</strong></p>
<p>例如，空心圆圈circle：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ul style=<span class="string">&quot;list-style-type:circle;&quot;</span>&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul style="list-style-type:circle;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<p>此外，还有实心圆圈disc、正方形square、无none。效果依次如下：</p>
<ul style="list-style-type:disc;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<ul style="list-style-type:square;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<ul style="list-style-type:none;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<hr>
<h3 id="嵌套列表"><a class="header-anchor" href="#嵌套列表">¶</a>嵌套列表</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;<span class="comment">//无序列表嵌套</span></span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西<span class="comment">//展开此标签</span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;呦西&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;球玉&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/li&gt;<span class="comment">//此标签结束</span></span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
  <li>格里兹曼</li>
  <li>梅西
    <ul>
      <li>呦西</li>
      <li>球玉</li>
    </ul>
  </li>
  <li>C罗</li>
</ul>
<hr>
<h3 id="有序列表"><a class="header-anchor" href="#有序列表">¶</a>有序列表</h3>
<p><code>&lt;ol&gt;</code>标签定义了一个有序列表。有序列表可以是数字的或字母的。</p>
<p>列表项默认会标有数字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<ol>
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>若想使用字母，需要使用<code>type</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ol type=<span class="string">&quot;A&quot;</span>&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<ol type="A">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>使用罗马数字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ol type=<span class="string">&quot;I&quot;</span>&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<ol type="I">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>其他标签头使用方法依次类推。</p>
<p><strong>控制列表计数</strong></p>
<p>默认情况下，有序列表会从 1 开始计数。如果想从指定的数字开始计数，可以使用<code>start</code>属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>格里兹曼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>梅西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>C罗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="50">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>有序也可以嵌套，与无序列表方法相同。</p>
<h3 id="描述列表"><a class="header-anchor" href="#描述列表">¶</a>描述列表</h3>
<p>标签<code>&lt;dl&gt;</code>定义描述列表，<code> &lt;dt&gt;</code>标签定义术语（名称），<code> &lt;dd&gt;</code>标签描述每个术语：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;格里兹曼&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;- 足球大师&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;梅西&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;- 没礼貌的小偷&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;C罗&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;- 不如格子&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>
<dl>
  <dt>格里兹曼</dt>
  <dd>- 足球大师</dd>
  <dt>梅西</dt>
  <dd>- 没礼貌的小偷</dd>
  <dt>C罗</dt>
  <dd>- 不如格子</dd>
</dl>
<hr>
<h2 id="块和内联"><a class="header-anchor" href="#块和内联">¶</a>块和内联</h2>
<p>每个 HTML 元素都有一个<strong>默认显示值</strong>，具体取决于元素的类型。</p>
<p>两个最常见的显示值是块和内联。</p>
<p><strong>块级元素</strong>总是从新行开始，浏览器会自动在元素前后添加一些空格（边距）。</p>
<p>块级元素始终占据可用的全部宽度（尽可能向左和向右延伸）。</p>
<p>两个常用的块级元素是：<code>&lt;p&gt;</code> 和<code>&lt;div&gt;</code>。</p>
<p><code>&lt;p&gt;</code>元素定义 HTML 文档中的一个段落。</p>
<p><code>&lt;div&gt;</code>元素定义 HTML 文档中的一个分区或一个部分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;格里兹曼&lt;/p&gt;</span><br><span class="line">&lt;div&gt;姆巴佩&lt;/div&gt;<span class="comment">//&lt;div&gt;元素通常用作其他 HTML 元素的容器。</span></span><br></pre></td></tr></table></figure>
<p>格里兹曼</p>
<div>姆巴佩</div>
<p><strong>HTML中的块级元素：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;address&gt; &lt;article&gt; &lt;aside&gt; &lt;blockquote&gt; &lt;canvas&gt; &lt;dd&gt; &lt;div&gt; &lt;dl&gt; &lt;dt&gt; &lt;fieldset&gt; &lt;figcaption&gt; &lt;figure&gt; &lt;footer&gt;&lt;form&gt; &lt;h1&gt;-&lt;h6&gt; &lt;header&gt; &lt;hr&gt; &lt;li&gt; &lt;main&gt; &lt;nav&gt; &lt;noscript&gt; &lt;ol&gt; &lt;p&gt; &lt;pre&gt; &lt;section&gt; &lt;table&gt; &lt;tfoot&gt; &lt;ul&gt; &lt;video&gt;</span><br></pre></td></tr></table></figure>
<p><strong>内联元素</strong></p>
<p>内联元素不会从新行开始。</p>
<p>内联元素仅占用必要的宽度。</p>
<p>例如段落内的 <span> 元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;格里兹曼&lt;span&gt;是足球大师&lt;/span&gt;&lt;/p&gt;<span class="comment">//&lt;span&gt;元素是一个内联容器，用于标记文本的一部分或文档的一部分。</span></span><br></pre></td></tr></table></figure>
<p>格里兹曼<span>是足球大师</span></p>
<p><strong>HTML中的内联元素</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a&gt; &lt;abbr&gt; &lt;acronym&gt; &lt;b&gt; &lt;bdo&gt; &lt;big&gt; &lt;br&gt; &lt;button&gt; &lt;cite&gt; &lt;code&gt; &lt;dfn&gt; &lt;em&gt; &lt;i&gt; &lt;img&gt; &lt;input&gt; &lt;kbd&gt; &lt;label&gt; &lt;map&gt;&lt;object&gt; &lt;output&gt; &lt;q&gt; &lt;samp&gt; &lt;script&gt; &lt;select&gt; &lt;small&gt; &lt;span&gt; &lt;strong&gt; &lt;sub&gt; &lt;sup&gt; &lt;textarea&gt; &lt;time&gt; &lt;tt&gt; &lt;var&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="HTML-Div分区"><a class="header-anchor" href="#HTML-Div分区">¶</a>HTML-Div分区</h2>
<p><code>&lt;div&gt;</code>元素用作其他 HTML 元素的容器,是块级元素，这意味着它占用所有可用宽度，并且前后带有换行符。</p>
<p><code>&lt;div&gt;</code>元素通常用于将网页的各个部分分组在一起。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  background-color: #FFF4A3;<span class="comment">//黄色</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="comment">//分区</span></span><br><span class="line">  &lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;London is the capital city of England.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;London has over <span class="number">13</span> million inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这样，只有div分区的部分具有div所定义的样式。</p>
<h3 id="居中对齐-div-元素"><a class="header-anchor" href="#居中对齐-div-元素">¶</a><strong>居中对齐<code>&lt;div&gt;</code>元素</strong></h3>
<p>如果希望<code>&lt;div&gt;</code>元素不是 100% 宽，并且想要将其居中对齐，需将 CSS <code>margin</code>属性设置为<code> auto</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  width:<span class="number">300</span>px;</span><br><span class="line">  margin:<span class="keyword">auto</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>可以在一个页面上拥有多个div分区，每个分区设置自己独特的样式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;background-color:#FFF4A3;&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;London is the capital city of England.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;London has over <span class="number">13</span> million inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;background-color:#FFC0C7;&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;Oslo&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;Oslo is the capital city of Norway.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Oslo has over <span class="number">600.000</span> inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;background-color:#D9EEE1;&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;Rome&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;Rome is the capital city of Italy.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Rome has almost <span class="number">3</span> million inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<div style="background-color:#FFF4A3;">
  <h2>London</h2>
  <p>London is the capital city of England.</p>
  <p>London has over 13 million inhabitants.</p>
</div>
<div style="background-color:#FFC0C7;">
  <h2>Oslo</h2>
  <p>Oslo is the capital city of Norway.</p>
  <p>Oslo has over 600.000 inhabitants.</p>
</div>
<div style="background-color:#D9EEE1;">
  <h2>Rome</h2>
  <p>Rome is the capital city of Italy.</p>
  <p>Rome has almost 3 million inhabitants.</p>
</div>
<h3 id="并排对齐-div-元素"><a class="header-anchor" href="#并排对齐-div-元素">¶</a><strong>并排对齐<code>&lt;div&gt;</code>元素</strong></h3>
<p>构建网页时，通常希望 <code>&lt;div&gt;</code>并排有两个或多个元素，如下所示：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-28_22-49-16.png" alt=""></p>
<p><strong>方法1：CSS-float属性</strong></p>
<hr>
<h2 id="HTML类"><a class="header-anchor" href="#HTML类">¶</a>HTML类</h2>
<p><code>class</code>属性用于指定 HTML 元素的类，不同的HTML 元素可以共享同一个类。</p>
<p><strong>语法</strong>：写一个句点 (.) 字符，后跟类名。然后，在大括号 {} 内定义 CSS 属性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.city &#123;<span class="comment">//city类</span></span><br><span class="line">  background-color: tomato;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.note &#123;<span class="comment">//note类</span></span><br><span class="line">  font-size: <span class="number">120</span>%;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><strong>绑定类</strong>：元素括号中加上class=“类名”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;city&quot;</span>&gt;<span class="comment">//该分区属于city类</span></span><br><span class="line">  &lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;London is the capital of England.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;city&quot;</span>&gt;<span class="comment">//该分区属于city类</span></span><br><span class="line">  &lt;h2&gt;Paris&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;Paris is the capital of France.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My &lt;span <span class="keyword">class</span>=<span class="string">&quot;note&quot;</span>&gt;Important&lt;/span&gt; Heading&lt;/h1&gt;<span class="comment">//该分区属于note类</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;This is some &lt;span <span class="keyword">class</span>=<span class="string">&quot;note&quot;</span>&gt;important&lt;/span&gt; text.&lt;/p&gt;<span class="comment">//该分区属于note类</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：类名区分大小写！</p>
<p><strong>一个HTML元素也可以绑定多个类</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h2 <span class="keyword">class</span>=<span class="string">&quot;city note&quot;</span>&gt;London&lt;/h2&gt;<span class="comment">//两个类名用空格分开即可</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="HTML-id"><a class="header-anchor" href="#HTML-id">¶</a>HTML-id</h2>
<p><code>id</code>属性用于指定 HTML 元素的<strong>唯一</strong>ID，用于指向样式表中的特定样式声明。</p>
<p>在 HTML 文档中不能有多个具有相同 id 的元素。</p>
<p><strong>语法</strong>：写入一个哈希字符 (#)，后跟一个 id 名称。然后，在大括号 {} 内定义 CSS 属性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#myHeader &#123;<span class="comment">//通过id来指定样式</span></span><br><span class="line">  background-color: lightblue;</span><br><span class="line">  color: black;</span><br><span class="line">  padding: <span class="number">40</span>px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 id=<span class="string">&quot;myHeader&quot;</span>&gt;My Header&lt;/h1&gt;<span class="comment">//设置元素h1的id为myHeader</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> ：id名称区分大小写，必须至少包含一个字符，不能以数字开头，并且不能包含空格（空格、制表符等）。</p>
<p><strong>类和id的区别</strong>：类名可以由多个 HTML 元素使用，而 id 名称只能由页面中的一个 HTML 元素使用。</p>
<p>id还可以实现书签的功能，具体语法在HTML链接一节。</p>
<hr>
<h2 id="HTML内嵌框架"><a class="header-anchor" href="#HTML内嵌框架">¶</a>HTML内嵌框架</h2>
<p>HTML <code>&lt;iframe&gt;</code> 用于在网页中显示网页。（在当前 HTML 文档中嵌入另一个文档。）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;https://www.bilibili.com/&quot;</span> style=<span class="string">&quot;border:none;&quot;</span> <span class="comment">//删除边框，还可以自定义其他CSS样式</span></span><br><span class="line">    height=<span class="string">&quot;500&quot;</span> width=<span class="string">&quot;800&quot;</span><span class="comment">//高度和宽度</span></span><br><span class="line">    title=<span class="string">&quot;B站&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<iframe src="https://www.bilibili.com/" style="border:none;" height="500" width="800" title="Iframe Example"></iframe>
<hr>
<h2 id="HTML其他"><a class="header-anchor" href="#HTML其他">¶</a>HTML其他</h2>
<h3 id="HTML-meta-元素"><a class="header-anchor" href="#HTML-meta-元素">¶</a>HTML -meta 元素</h3>
<p><code>&lt;meta&gt;</code>元素通常用于指定字符集、页面描述、关键字、文档作者和视口设置。</p>
<p>数据<strong>不会显示在页面上</strong>，但由浏览器（如何显示内容或重新加载页面）、搜索引擎（关键字）和其他 Web 服务使用。</p>
<p><strong>定义使用的字符集：</strong></p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
<p><strong>定义搜索引擎的关键字：</strong></p>
<p><code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, JavaScript&quot;&gt;</code></p>
<p><strong>定义网页的描述：</strong></p>
<p><code>&lt;meta name=&quot;description&quot; content=&quot;Free Web tutorials&quot;&gt;</code></p>
<p><strong>定义页面的作者：</strong></p>
<p><code>&lt;meta name=&quot;author&quot; content=&quot;John Doe&quot;&gt;</code></p>
<p><strong>每 30 秒刷新一次文档：</strong></p>
<p><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;</code></p>
<p><strong>设置视口以使您的网站在所有设备上看起来都不错：</strong></p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;<span class="comment">//示例</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Free Web tutorials&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;HTML, CSS, JavaScript&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;John Doe&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;All meta information goes inside the head section.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/86176/Desktop/Snipaste_2024-03-02_11-04-48.png" alt=""></p>
<p><strong>设置视口</strong></p>
<p>视口是网页的用户可见区域。它因设备而异 - 在手机上它会比在电脑屏幕上小。</p>
<p>应该在<strong>所有网页</strong>中包含以下元素：</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p>
<p>这为浏览器提供了如何控制页面尺寸和缩放的说明。</p>
<p><code>width=device-width</code>设置页面的宽度以遵循设备的屏幕宽度（这将根据设备而变化）。</p>
<p><code>initial-scale=1.0</code>设置浏览器首次加载页面时的初始缩放级别。</p>
<hr>
<h3 id="HTML-script元素"><a class="header-anchor" href="#HTML-script元素">¶</a>HTML -script元素</h3>
<p><code>&lt;script&gt;</code>元素用于定义客户端 JavaScript。</p>
<p>下面的 JavaScript 会写“Hello JavaScript!” 到 id=“demo” 的 HTML 元素中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function">function <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  document.<span class="built_in">getElementById</span>(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="string">&quot;Hello JavaScript!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>JavaScript的具体知识请看相关章节。</p>
<hr>
<h3 id="HTML-base标签"><a class="header-anchor" href="#HTML-base标签">¶</a>HTML -base标签</h3>
<p><code>&lt;base&gt;</code>为页面上所有的链接指定默认 URL 和默认目标：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;https://www.w3schools.com/&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;<span class="comment">//默认路径就是w3school 打开方式为新建窗口</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;<span class="comment">//之后的所有路径都将基于w3school去查询 打开方式都为新建窗口</span></span><br><span class="line">&lt;img src=<span class="string">&quot;images/stickman.gif&quot;</span> width=<span class="string">&quot;24&quot;</span> height=<span class="string">&quot;39&quot;</span> alt=<span class="string">&quot;Stickman&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;tags/tag_base.asp&quot;</span>&gt;HTML base Tag&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;base&gt;</code>标记必须具有 href 或 target 属性，或两者兼而有之。</p>
<p>html文档中<strong>只能有一个</strong><code>&lt;base&gt;</code>元素，并且它必须位于 <code>&lt;head&gt; </code>元素内。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL——34道查询练习题</title>
    <url>/2024/03/29/MySQL%E2%80%94%E2%80%9434%E9%81%93%E6%9F%A5%E8%AF%A2%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p><strong>村雨的34道MySQL查询练习题</strong></p>
<p>基于bilibili动力节点的教学视频</p>
<span id="more"></span>
<hr>
<h2 id="emp员工表"><a class="header-anchor" href="#emp员工表">¶</a><strong>emp员工表</strong></h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-34-29.png" alt=""></p>
<h2 id="dept部门表"><a class="header-anchor" href="#dept部门表">¶</a><strong>dept部门表</strong></h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-16.png" alt=""></p>
<h2 id="salgrade工资等级表"><a class="header-anchor" href="#salgrade工资等级表">¶</a><strong>salgrade工资等级表</strong></h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-52.png" alt=""></p>
<h2 id="1、取得每个部门最高薪水的人员名称"><a class="header-anchor" href="#1、取得每个部门最高薪水的人员名称">¶</a><strong>1、取得每个部门最高薪水的人员名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="comment">-- 按部门分组，找出每个部门的最高薪资</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">select</span> ename,t.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t <span class="comment">-- 将上面的查询结果作为新表t与emp表连接</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> t.deptno <span class="keyword">and</span> sal <span class="operator">=</span> max_sal; <span class="comment">-- 查询条件：emp表中薪水等于所属部门的最高薪水</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> deptno <span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="2-哪些人的薪水在部门的平均薪水之上"><a class="header-anchor" href="#2-哪些人的薪水在部门的平均薪水之上">¶</a><strong>2.哪些人的薪水在部门的平均薪水之上</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="comment">-- 按部门分组，求出每个部门的平均薪水</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,ename,sal</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal,deptno <span class="comment">-- 将上面的查询结果作为新表t和emp表连接</span></span><br><span class="line">      <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> t.deptno <span class="keyword">and</span> sal <span class="operator">&gt;</span> avg_sal; <span class="comment">-- 筛选出薪水大于所在部门平均薪水的员工</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> avg_sal     <span class="operator">|</span> deptno <span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> BLAKE <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> ALLEN <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+-------+---------+</span></span><br></pre></td></tr></table></figure>
<p><strong>将两张表连接后</strong>：可以看到每一行都有sal和员工所属部门的avg_sal，筛选出sal &gt; avg_sal的员工</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-30-50.png" alt=""></p>
<h2 id="3-取得部门中（所有人的）平均的薪水等级，如下"><a class="header-anchor" href="#3-取得部门中（所有人的）平均的薪水等级，如下">¶</a><strong>3.取得部门中（所有人的）平均的薪水等级，如下</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(grade) <span class="keyword">as</span> avg_grade</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal <span class="comment">-- 将emp表和salgrade表连接起来-非等值连接</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="comment">-- 按部门分组</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> deptno;<span class="comment">-- 按部门编号升序查询结果-默认是升序</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>    <span class="number">3.6667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>    <span class="number">2.8000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>    <span class="number">2.5000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="4-不准用分组函数（Max），取得所有员工中的最高薪水（给出两种解决方案）"><a class="header-anchor" href="#4-不准用分组函数（Max），取得所有员工中的最高薪水（给出两种解决方案）">¶</a><strong>4.不准用分组函数（Max），取得所有员工中的最高薪水（给出两种解决方案）</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">第一种：降序取第一行</span><br><span class="line"><span class="keyword">select</span> ename,sal </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>  <span class="comment">-- 按照工资降序查找，那么第一行便是最高薪水</span></span><br><span class="line">limit <span class="number">1</span>; <span class="comment">-- 只取前1行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"></span><br><span class="line">第二种：表的自连接</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> a.sal <span class="comment">-- distinct去重</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="operator">&lt;</span> b.sal; <span class="comment">-- 除了最高薪水都会被筛选出来</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> a.sal <span class="comment">-- 找出薪水不在这里面的员工，即只有最高薪水的员工不在</span></span><br><span class="line">              <span class="keyword">from</span> emp a</span><br><span class="line">              <span class="keyword">join</span> emp b</span><br><span class="line">              <span class="keyword">on</span> a.sal <span class="operator">&lt;</span> b.sal);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"></span><br><span class="line">第三种:使用组函数最简单</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal <span class="comment">-- 没有手动分组，整张表默认为一组。但是select后只能跟组函数</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="5-取得平均薪水最高的部门的部门编号（至少给出两种解决方案）"><a class="header-anchor" href="#5-取得平均薪水最高的部门的部门编号（至少给出两种解决方案）">¶</a><strong>5.取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">第一种：降序取第一行</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avg_sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">limit <span class="number">1</span>; <span class="comment">-- 取前1行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"><span class="number">1.</span>取得每个部门的平均薪水</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span>取得部门平均薪水中最高的薪水</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(avg_sal) <span class="keyword">as</span> max_avg_sal</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal </span><br><span class="line">     <span class="keyword">from</span> emp </span><br><span class="line">     <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t; <span class="comment">-- 把第一步的查询结果当作新表t</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> max_avg_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">3.</span>在emp表中筛选平均薪水等于第二步查询结果的部门</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line"><span class="keyword">having</span> avg_sal <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(avg_sal) <span class="keyword">as</span> max_avg_sal <span class="comment">-- 条件筛选</span></span><br><span class="line">                   <span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal </span><br><span class="line">                        <span class="keyword">from</span> emp </span><br><span class="line">                        <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="6-取得平均薪水最高的部门的部门名称"><a class="header-anchor" href="#6-取得平均薪水最高的部门的部门名称">¶</a><strong>6.取得平均薪水最高的部门的部门名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得平均薪水最高的部门</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avg_sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">limit <span class="number">1</span>; <span class="comment">-- 取前1行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span>将第一步的查询结果作为新表t和dept表连接</span><br><span class="line"><span class="keyword">select</span> dname,avg_sal</span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line">      <span class="keyword">order</span> <span class="keyword">by</span> avg_sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">      limit <span class="number">1</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="7-求平均薪水的等级最低的部门的部门名称"><a class="header-anchor" href="#7-求平均薪水的等级最低的部门的部门名称">¶</a><strong>7.求平均薪水的等级最低的部门的部门名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得部门的平均薪水</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span>取得部门平均薪水所对应的等级</span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,grade</span><br><span class="line"><span class="keyword">from</span> salgrade s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">      <span class="keyword">from</span> emp </span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> avg_sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+-------+</span></span><br><span class="line"><span class="number">3.</span>将第二步的查询结果与dept表连接</span><br><span class="line"><span class="keyword">select</span> dname,q.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> t.<span class="operator">*</span>,grade</span><br><span class="line"><span class="keyword">from</span> salgrade s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">      <span class="keyword">from</span> emp </span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line">      <span class="keyword">on</span> avg_sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal) <span class="keyword">as</span> q</span><br><span class="line"> <span class="keyword">on</span> d.deptno <span class="operator">=</span> q.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+-------------+-------+</span></span><br><span class="line"><span class="number">4.</span>使第三步的查询结果按薪资等级升序，取第一行</span><br><span class="line"><span class="keyword">select</span> dname,grade</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> dname,q.<span class="operator">*</span></span><br><span class="line">      <span class="keyword">from</span> dept d</span><br><span class="line">      <span class="keyword">join</span> (<span class="keyword">select</span> t.<span class="operator">*</span>,grade</span><br><span class="line">            <span class="keyword">from</span> salgrade s</span><br><span class="line">            <span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">                  <span class="keyword">from</span> emp </span><br><span class="line">                  <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line">                  <span class="keyword">on</span> avg_sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal) <span class="keyword">as</span> q</span><br><span class="line">       <span class="keyword">on</span> d.deptno <span class="operator">=</span> q.deptno) <span class="keyword">as</span> p</span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> grade</span><br><span class="line"> limit <span class="number">1</span>;</span><br><span class="line"> <span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> dname <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> SALES <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br></pre></td></tr></table></figure>
<h2 id="8-取得比普通员工（员工代码没有在mgr-字段上出现的）的最高薪水还要高的领导人姓名"><a class="header-anchor" href="#8-取得比普通员工（员工代码没有在mgr-字段上出现的）的最高薪水还要高的领导人姓名">¶</a>8.<strong>取得比普通员工（员工代码没有在mgr 字段上出现的）的最高薪水还要高的领导人姓名</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>先取得所有领导代码</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> mgr </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>; <span class="comment">-- 重点:使用 not in 的时候要确保所查范围中没有NULL</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> mgr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2.</span>不属于领导的就是普通员工，找出普通员工中的最高薪水</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr </span><br><span class="line">                    <span class="keyword">from</span> emp </span><br><span class="line">                    <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>); <span class="comment">-- 重点:使用 not in 的时候要确保所查范围中没有NULL</span></span><br><span class="line">                                            <span class="comment">-- 在 SQL 中与 NULL 的比较通常会返回未知，而不是 True 或 False</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">3.</span>取得大于第二步查询结果的领导名</span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr </span><br><span class="line">                                 <span class="keyword">from</span> emp </span><br><span class="line">                                 <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>));</span><br><span class="line"> <span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="9-取得薪水最高的前五名员工"><a class="header-anchor" href="#9-取得薪水最高的前五名员工">¶</a><strong>9.取得薪水最高的前五名员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">limit <span class="number">5</span>; <span class="comment">-- 取前5行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="10-取得薪水最高的第六到第十名员工"><a class="header-anchor" href="#10-取得薪水最高的第六到第十名员工">¶</a><strong>10.取得薪水最高的第六到第十名员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="comment">-- 10名员工的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">5</span>,<span class="number">5</span>; <span class="comment">-- 从第六名员工开始，也就是下标5；第六到第十长度为5</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="11-取得最后入职的5名员工"><a class="header-anchor" href="#11-取得最后入职的5名员工">¶</a><strong>11.取得最后入职的5名员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,hiredate</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hiredate <span class="keyword">desc</span> <span class="comment">-- 日期也可以排序</span></span><br><span class="line">limit <span class="number">5</span>; <span class="comment">-- 降序取前5行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> hiredate   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="12-取得每个薪水等级有多少员工"><a class="header-anchor" href="#12-取得每个薪水等级有多少员工">¶</a><strong>12.取得每个薪水等级有多少员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得每个员工的薪水等级</span><br><span class="line"><span class="keyword">select</span> ename,grade</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal; <span class="comment">-- 非等值连接</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="number">2.</span>对薪水等级进行分组，并对每个组计数</span><br><span class="line"><span class="keyword">select</span> grade,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_grade <span class="comment">-- 对每个组的全部元组进行计数，用*即可</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> grade</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> grade; <span class="comment">-- 按等级升序</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> grade <span class="operator">|</span> count_grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="13-面试题"><a class="header-anchor" href="#13-面试题">¶</a><strong>13.面试题</strong></h2>
<p>有 3 个表 <strong>S(学生表)</strong>，<strong>C（课程表）</strong>，<strong>SC（学生选课表）</strong></p>
<p><strong>S</strong>（SNO，SNAME）<code>代表</code>（学号，姓名）</p>
<p><strong>C</strong>（CNO，CNAME，CTEACHER）<code>代表</code>（课号，课名，教师）</p>
<p><strong>SC</strong>（SNO，CNO，SCGRADE）<code>代表</code>（学号，课号，成绩）</p>
<p><strong>导入三张表</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(</span><br><span class="line"> SNO <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> CNO <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> SCGRADE <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S</span><br><span class="line">(</span><br><span class="line"> SNO <span class="type">VARCHAR</span>(<span class="number">200</span> ),</span><br><span class="line"> SNAME <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> C</span><br><span class="line">(</span><br><span class="line"> CNO <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> CNAME <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> CTEACHER <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;张&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>, <span class="string">&#x27;王&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;李&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;赵&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;学生 1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;学生 2&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;学生 3&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;学生 4&#x27;</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;40&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;30&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;20&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;80&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;40&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;80&#x27;</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="S表、C表、SC表"><a class="header-anchor" href="#S表、C表、SC表">¶</a><strong>S表、C表、SC表</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">S表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> SNO  <span class="operator">|</span> SNAME  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> 学生 <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> 学生 <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> 学生 <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"></span><br><span class="line">C表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+----------+</span></span><br><span class="line"><span class="operator">|</span> CNO  <span class="operator">|</span> CNAME <span class="operator">|</span> CTEACHER <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> 语文  <span class="operator">|</span> 张       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> 政治  <span class="operator">|</span> 王       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> 英语  <span class="operator">|</span> 李       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> 数学  <span class="operator">|</span> 赵       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> 物理  <span class="operator">|</span> 黎明     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+----------+</span></span><br><span class="line"></span><br><span class="line">SC表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> SNO  <span class="operator">|</span> CNO  <span class="operator">|</span> SCGRADE <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">40</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> <span class="number">80</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> <span class="number">40</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">80</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br></pre></td></tr></table></figure>
<h3 id="问题-1-找出没选过黎明老师的所有学生姓名"><a class="header-anchor" href="#问题-1-找出没选过黎明老师的所有学生姓名">¶</a><strong>问题 1.找出没选过黎明老师的所有学生姓名</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>先取得黎明老师所教课程的课号</span><br><span class="line"><span class="keyword">select</span> cno</span><br><span class="line"><span class="keyword">from</span> c</span><br><span class="line"><span class="keyword">where</span> cteacher <span class="operator">=</span> <span class="string">&#x27;黎明&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> cno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2.</span>取得所有选了黎明老师课程的同学</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno <span class="operator">=</span> (<span class="keyword">select</span> cno</span><br><span class="line">              <span class="keyword">from</span> c</span><br><span class="line">              <span class="keyword">where</span> cteacher <span class="operator">=</span> <span class="string">&#x27;黎明&#x27;</span>) ;</span><br><span class="line"> <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> sno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">3.</span>哪位同学的学号不在第二步的查询结果当中，就说明该同学没有选黎明老师的课程</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sname <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> sc <span class="comment">-- 左外连接，将join左边的表看成主表，能够将s表中所有的数据都依次查询；能够查出学生4</span></span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">where</span> s.sno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> sno</span><br><span class="line">                  <span class="keyword">from</span> sc</span><br><span class="line">                  <span class="keyword">where</span> cno <span class="operator">=</span> (<span class="keyword">select</span> cno</span><br><span class="line">                               <span class="keyword">from</span> c</span><br><span class="line">                               <span class="keyword">where</span> cteacher <span class="operator">=</span> <span class="string">&#x27;黎明&#x27;</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure>
<h3 id="问题-2-列出-2-门以上（含-2-门）不及格学生姓名及平均成绩-巨难"><a class="header-anchor" href="#问题-2-列出-2-门以上（含-2-门）不及格学生姓名及平均成绩-巨难">¶</a><strong>问题 2:列出 2 门以上（含 2 门）不及格学生姓名及平均成绩(巨难)</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得不及格学生的学号</span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> sno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2.</span>计算不及格学生的不及格科目数量</span><br><span class="line"><span class="keyword">select</span> sno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> nopass_number</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> sno</span><br><span class="line">      <span class="keyword">from</span> sc</span><br><span class="line">      <span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.sno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+</span></span><br><span class="line"><span class="operator">|</span> sno  <span class="operator">|</span> nopass_number <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span>             <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+</span></span><br><span class="line"><span class="number">3.</span>将第二步的查询结果和s表相连，取得所要的学生姓名</span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> sno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> nopass_number</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> sno</span><br><span class="line">            <span class="keyword">from</span> sc</span><br><span class="line">            <span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> t</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> t.sno) <span class="keyword">as</span> q</span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> q.sno</span><br><span class="line"><span class="keyword">where</span> nopass_number <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">4.</span>再连接一张sc表，计算所要学生的平均成绩</span><br><span class="line"><span class="keyword">select</span> sname,<span class="built_in">avg</span>(scgrade) <span class="keyword">as</span> avg_grade</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> sno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> nopass_number</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> sno</span><br><span class="line">            <span class="keyword">from</span> sc</span><br><span class="line">            <span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> t</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> t.sno) <span class="keyword">as</span> q</span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> q.sno</span><br><span class="line"><span class="keyword">join</span> sc</span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">where</span> nopass_number <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.sname; <span class="comment">-- group by 要放在 where 后面</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span> avg_grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span>        <span class="number">46</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br></pre></td></tr></table></figure>
<h3 id="问题-3-既学过-1-号课程又学过-2-号课程所有学生的姓名"><a class="header-anchor" href="#问题-3-既学过-1-号课程又学过-2-号课程所有学生的姓名">¶</a><strong>问题 3:既学过 1 号课程又学过 2 号课程所有学生的姓名</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sname <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">FROM</span> s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="comment">-- 检查条件是否存在，而不关心具体返回的值是什么</span></span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">WHERE</span> sno <span class="operator">=</span> s.sno <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">WHERE</span> sno <span class="operator">=</span> s.sno <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure>
<p>EXISTS命令解析：（chatgpt解答）</p>
<ul>
<li><code>SELECT DISTINCT s.sname</code>: 这部分指定了要从数据库中返回的结果。<code>DISTINCT</code> 关键字用于确保返回的结果中不会包含重复的学生姓名。<code>s.sname</code> 表示从学生表 <code>s</code> 中选择学生姓名作为结果。</li>
<li><code>FROM s</code>: 这是查询的主要来源，它告诉数据库查询需要从哪个表中检索数据。在这里，我们从学生表 <code>s</code> 中检索数据。</li>
<li><code>WHERE EXISTS (...) AND EXISTS (...)</code>: 这是一个用 <code>EXISTS</code> 关键字组合的条件。它在每次查询中检查是否存在满足条件的记录，并根据其结果返回相应的行。</li>
<li><code>SELECT 1 FROM sc WHERE sno = s.sno AND cno = 1</code>: 这是第一个 <code>EXISTS</code> 子查询。它检查课程表 <code>sc</code> 中是否存在一行记录，其学生编号 (<code>sno</code>) 与学生表中当前学生的学生编号 (<code>s.sno</code>) 匹配，并且课程编号 (<code>cno</code>) 为 1。</li>
<li><code>SELECT 1 FROM sc WHERE sno = s.sno AND cno = 2</code>: 这是第二个 <code>EXISTS</code> 子查询，类似于第一个子查询，只不过检查的是课程编号为 2 的记录。</li>
<li><code>AND</code>: 这是一个逻辑运算符，表示两个条件都必须满足。换句话说，要返回学生的姓名，两个子查询都必须返回至少一行记录。</li>
<li>在 SQL 中，<code>SELECT 1</code> 是一个常见的用法，它的作用是在子查询中返回一个固定值 <code>1</code>。在这种情况下，它的实际作用是检查条件是否存在，而不关心具体返回的值是什么。因此，<code>SELECT 1</code> 可以用作条件是否满足的简单表示，而不会涉及到具体的数据。</li>
</ul>
<h2 id="14-列出所有员工及领导的姓名"><a class="header-anchor" href="#14-列出所有员工及领导的姓名">¶</a><strong>14.列出所有员工及领导的姓名</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="comment">-- 左外连接，将a表作为主表；将KING无上级的NULL也查出来。</span></span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> 员工   <span class="operator">|</span> 领导  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> FORD  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> JONES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> SCOTT <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> JONES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> CLARK <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br></pre></td></tr></table></figure>
<h2 id="15-列出受雇日期早于其直接上级的所有员工的编号-姓名-部门名称"><a class="header-anchor" href="#15-列出受雇日期早于其直接上级的所有员工的编号-姓名-部门名称">¶</a><strong>15.列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">select</span> a.empno,a.ename,dname</span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> dept d <span class="comment">-- 再连接一张dept表</span></span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> a.hiredate <span class="operator">&lt;</span> b.hiredate; <span class="comment">-- 查询条件</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> empno <span class="operator">|</span> ename <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="16-列出部门名称和这些部门的员工信息-同时列出那些没有员工的部门"><a class="header-anchor" href="#16-列出部门名称和这些部门的员工信息-同时列出那些没有员工的部门">¶</a><strong>16.列出部门名称和这些部门的员工信息,同时列出那些没有员工的部门</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">select</span> dname,e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 右外连接，将dept表作为主表；将没有员工的部门的NULL也查出来。</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OPERATIONS <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<h2 id="17-列出至少有5个员工的所有部门"><a class="header-anchor" href="#17-列出至少有5个员工的所有部门">¶</a><strong>17.列出至少有5个员工的所有部门</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d <span class="comment">-- 连接dept表，得到部门名</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dname <span class="comment">-- 按部门名字分组，可以看成每一个部门都是一个组，都是一张表</span></span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">5</span>; <span class="comment">-- 查询条件：每张表元组数大于等于5</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> dname    <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> RESEARCH <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES    <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="18-列出薪资比-SMITH-多的所有员工信息"><a class="header-anchor" href="#18-列出薪资比-SMITH-多的所有员工信息">¶</a><strong>18.列出薪资比&quot;SMITH&quot;多的所有员工信息</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>先取得SIMTH的薪资</span><br><span class="line"><span class="keyword">select</span> sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sal    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">2.</span>查询比薪资第一步查询结果高的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> sal</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<h2 id="19-列出所有-CLERK-办事员-的姓名及其部门名称-部门的人数"><a class="header-anchor" href="#19-列出所有-CLERK-办事员-的姓名及其部门名称-部门的人数">¶</a><strong>19.列出所有&quot;CLERK&quot;(办事员)的姓名及其部门名称,部门的人数</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得职位为CLERK的员工姓名</span><br><span class="line"><span class="keyword">select</span> ename,deptno</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> deptno <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="number">2.</span>将第一步的查询结果当作新表t与dept表连接，取得部门名</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> ename,deptno</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">3.</span>取得每个部门的员工人数</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="number">4.</span>将第二步的查询结果与第三步的查询结果作为新表q连接</span><br><span class="line"><span class="keyword">select</span> ename,dname,count_emp</span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> ename,deptno</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> q</span><br><span class="line"><span class="keyword">on</span> t.deptno <span class="operator">=</span> q.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="20-列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数"><a class="header-anchor" href="#20-列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数">¶</a><strong>20.列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得每个部门的最低薪资</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="number">2.</span>取得最低薪资大于<span class="number">1500</span>的工作</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job</span><br><span class="line"><span class="keyword">having</span> min_sal <span class="operator">&gt;</span> <span class="number">1500</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="number">3.</span>取得每份工作的雇员人数</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="number">4.</span>将第二步的查询结果与第三步的查询结果作为新表t连接</span><br><span class="line"><span class="keyword">select</span> e.job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal,count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> job) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> e.job <span class="operator">=</span> t.job</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.job</span><br><span class="line"><span class="keyword">having</span> min_sal <span class="operator">&gt;</span> <span class="number">1500</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="21-列出在部门-SALES-销售部-工作的员工的姓名-假定不知道销售部的部门编号"><a class="header-anchor" href="#21-列出在部门-SALES-销售部-工作的员工的姓名-假定不知道销售部的部门编号">¶</a><strong>21.列出在部门&quot;SALES&quot;&lt;销售部&gt;工作的员工的姓名,假定不知道销售部的部门编号</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>一开始不知道销售部的部门编号，所以要查询销售部的部门编号</span><br><span class="line"><span class="keyword">select</span> deptno</span><br><span class="line"><span class="keyword">from</span> dept</span><br><span class="line"><span class="keyword">where</span> dname <span class="operator">=</span> &quot;SALES&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">2.</span>经过第一步的查询结果后，已经知道销售部的部门编号，接下来直接查就可以了</span><br><span class="line"><span class="keyword">select</span> ename</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> (<span class="keyword">select</span> deptno</span><br><span class="line">                <span class="keyword">from</span> dept</span><br><span class="line">                <span class="keyword">where</span> dname <span class="operator">=</span> &quot;SALES&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+                </span></span><br></pre></td></tr></table></figure>
<h2 id="22-列出薪金高于公司平均薪金的所有员工-所在部门名称-上级领导名称-雇员的工资等级"><a class="header-anchor" href="#22-列出薪金高于公司平均薪金的所有员工-所在部门名称-上级领导名称-雇员的工资等级">¶</a><strong>22.列出薪金高于公司平均薪金的所有员工,所在部门名称,上级领导名称,雇员的工资等级</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得公司的平均薪资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2073.214286</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">2.</span>连接需要的表</span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>,dname <span class="keyword">as</span> <span class="string">&#x27;所在部门&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;上级领导&#x27;</span>,grade <span class="keyword">as</span> <span class="string">&#x27;工资等级&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> salgrade</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> 员工   <span class="operator">|</span> 所在部门   <span class="operator">|</span> 上级领导 <span class="operator">|</span> 工资等级 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> FORD     <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> SCOTT    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> CLARK    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line">注意到员工一栏没有KING，所以需要使用外连接：</span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>,dname <span class="keyword">as</span> <span class="string">&#x27;所在部门&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;上级领导&#x27;</span>,grade <span class="keyword">as</span> <span class="string">&#x27;工资等级&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> salgrade</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> 员工   <span class="operator">|</span> 所在部门   <span class="operator">|</span> 上级领导 <span class="operator">|</span> 工资等级 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> FORD     <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span> <span class="comment">-- 取得KING的信息</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> SCOTT    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> CLARK    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="number">3.</span>基于第二步的查询结果，筛选薪资大于公司平均薪资的元组</span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>,dname <span class="keyword">as</span> <span class="string">&#x27;所在部门&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;上级领导&#x27;</span>,grade <span class="keyword">as</span> <span class="string">&#x27;工资等级&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> salgrade</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal</span><br><span class="line"><span class="keyword">where</span> a.sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">             <span class="keyword">from</span> emp);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> 员工  <span class="operator">|</span> 所在部门   <span class="operator">|</span> 上级领导 <span class="operator">|</span> 工资等级 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> SALES      <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> RESEARCH   <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+----------+             </span></span><br></pre></td></tr></table></figure>
<h2 id="23-列出与-SCOTT-从事相同工作的其他所有员工及其所在部门的名称"><a class="header-anchor" href="#23-列出与-SCOTT-从事相同工作的其他所有员工及其所在部门的名称">¶</a><strong>23.列出与&quot;SCOTT&quot;从事相同工作的其他所有员工及其所在部门的名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询&quot;SCOTT&quot;的工作</span><br><span class="line"><span class="keyword">select</span> job</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> job     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> ANALYST <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span>将emp表和dept表连接</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">3.</span>筛选工作位第一步查询结果的员工</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> (<span class="keyword">select</span> job</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> dname    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> RESEARCH <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> RESEARCH <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line">注意到查询结果有<span class="string">&#x27;SCOTT&#x27;</span>,把他剔除</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> (<span class="keyword">select</span> job</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>)</span><br><span class="line">  <span class="keyword">and</span> ename <span class="operator">&lt;&gt;</span> <span class="string">&#x27;SCOTT&#x27;</span>; <span class="comment">-- 剔除条件</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> dname    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> RESEARCH <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="24-列出薪资等于部门30中员工的薪资的其他员工的姓名和薪资"><a class="header-anchor" href="#24-列出薪资等于部门30中员工的薪资的其他员工的姓名和薪资">¶</a><strong>24.列出薪资等于部门30中员工的薪资的其他员工的姓名和薪资</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询部门<span class="number">30</span>中员工的薪资</span><br><span class="line"><span class="keyword">select</span> sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span>查询其他薪资等于第一步查询结果的员工</span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="keyword">select</span> sal</span><br><span class="line">              <span class="keyword">from</span> emp</span><br><span class="line">              <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>)</span><br><span class="line">  <span class="keyword">and</span> deptno <span class="operator">&lt;&gt;</span> <span class="number">30</span>; <span class="comment">-- 剔除部门30的员工</span></span><br><span class="line"></span><br><span class="line">查询结果：<span class="keyword">Empty</span> <span class="keyword">set</span> </span><br></pre></td></tr></table></figure>
<h2 id="25-列出薪资高于在部门30工作的所有员工的薪资的员工姓名和薪资和所在部门的名称"><a class="header-anchor" href="#25-列出薪资高于在部门30工作的所有员工的薪资的员工姓名和薪资和所在部门的名称">¶</a><strong>25.列出薪资高于在部门30工作的所有员工的薪资的员工姓名和薪资和所在部门的名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询部门<span class="number">30</span>的员工薪资</span><br><span class="line"><span class="keyword">select</span> sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span>因为要高于所有员工，所以比<span class="built_in">max</span>(sal)还要高,故先要查询到<span class="built_in">max</span>(sal)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">3.</span>将emp表和dept表连接</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">4.</span>基于第三步的查询结果，筛选出薪资大于部门<span class="number">30</span>最高薪资的员工</span><br><span class="line"><span class="keyword">select</span> ename,sal,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------------+             </span></span><br></pre></td></tr></table></figure>
<h2 id="26-列出在每个部门工作的员工数量-平均工资和平均服务期限"><a class="header-anchor" href="#26-列出在每个部门工作的员工数量-平均工资和平均服务期限">¶</a><strong>26.列出在每个部门工作的员工数量,平均工资和平均服务期限</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询每个部门的员工数量（其实还存在着一个没有员工的<span class="number">40</span>部门）</span><br><span class="line"><span class="keyword">select</span> d.deptno,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp <span class="comment">-- count()条件改变为员工名</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 使用右外连接，将dept表看作主表；能够查出40部门</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="number">2.</span>基于第一步的查询结果，查询每个部门的平均工资</span><br><span class="line"><span class="keyword">select</span> d.deptno,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp,ifnull(<span class="built_in">avg</span>(sal),<span class="number">0</span>) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>    <span class="number">0.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+</span></span><br><span class="line"><span class="number">3.</span>基于第二步的查询结果，查询每个部门的平均服务期限</span><br><span class="line"><span class="keyword">select</span> d.deptno,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp,ifnull(<span class="built_in">avg</span>(sal),<span class="number">0</span>) <span class="keyword">as</span> avg_sal,</span><br><span class="line">       ifnull(<span class="built_in">avg</span>(timestampdiff(<span class="keyword">YEAR</span>, hiredate, now())), <span class="number">0</span>) <span class="keyword">as</span> avg_servicetime <span class="comment">-- 服务时间</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span> avg_sal     <span class="operator">|</span> avg_servicetime <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>         <span class="number">42.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>         <span class="number">40.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>         <span class="number">42.3333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>    <span class="number">0.000000</span> <span class="operator">|</span>          <span class="number">0.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+-----------------+</span></span><br></pre></td></tr></table></figure>
<p>计算两个日期的“年差”，差了多少年？</p>
<p>TimeStampDiff(间隔类型, 前一个日期, 后一个日期)</p>
<p>例如：timestampdiff(YEAR, hiredate, now())</p>
<p><strong>间隔类型</strong>：</p>
<p>SECOND   秒</p>
<p>MINUTE   分钟</p>
<p>HOUR   小时</p>
<p>DAY   天</p>
<p>WEEK   星期</p>
<p>MONTH   月</p>
<p>QUARTER   季度</p>
<p>YEAR   年</p>
<hr>
<h2 id="27-列出所有员工的姓名、部门名称和工资"><a class="header-anchor" href="#27-列出所有员工的姓名、部门名称和工资">¶</a><strong>27.列出所有员工的姓名、部门名称和工资</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,dname,sal</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="28-列出所有部门的详细信息和人数"><a class="header-anchor" href="#28-列出所有部门的详细信息和人数">¶</a><strong>28.列出所有部门的详细信息和人数</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.deptno,d.dname,d.loc,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 右外连接，为了查出部门40</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.deptno,d.dname,d.loc; <span class="comment">-- 因为要取得部门的所有信息，所以将dept表的所有字段都分组</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+-----------+ -- select后只能跟进行分组的字段和分组函数</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> dname      <span class="operator">|</span> loc      <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NEW</span> YORK <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span> DALLAS   <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> SALES      <span class="operator">|</span> CHICAGO  <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span> OPERATIONS <span class="operator">|</span> BOSTON   <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="29-列出各种工作的最低工资以及对应的雇员姓名"><a class="header-anchor" href="#29-列出各种工作的最低工资以及对应的雇员姓名">¶</a><strong>29.列出各种工作的最低工资以及对应的雇员姓名</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询每种工作的最低薪资</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="number">2.</span>将第一步的查询结果作为新表t与emp表连接</span><br><span class="line"><span class="keyword">select</span> t.job,t.min_sal <span class="keyword">as</span> min_sal,e.ename</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> job) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> e.job <span class="operator">=</span> t.job <span class="keyword">and</span> e.sal <span class="operator">=</span>t.min_sal; <span class="comment">-- 表连接兼筛选的条件</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span> ename  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span> SMITH  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> WARD   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> MARTIN <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span> CLARK  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span> KING   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> FORD   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<h2 id="30-列出各个部门的MANAGER-领导-的最低薪资"><a class="header-anchor" href="#30-列出各个部门的MANAGER-领导-的最低薪资">¶</a><strong>30.列出各个部门的MANAGER(领导)的最低薪资</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="31-列出所有员工的年薪-按年薪从低到高排序"><a class="header-anchor" href="#31-列出所有员工的年薪-按年薪从低到高排序">¶</a><strong>31.列出所有员工的年薪,按年薪从低到高排序</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,(sal<span class="operator">+</span>ifnull(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span> <span class="keyword">as</span> year_sal <span class="comment">-- 年薪=（月工资+津贴）*12</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> year_sal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> year_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>  <span class="number">9600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">11400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">13200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">15600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">18000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">21000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">22800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">29400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">31800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">34200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">35700.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">36000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">36000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="number">60000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="32-求出员工领导的薪水超过3000的员工名称和他的领导名称"><a class="header-anchor" href="#32-求出员工领导的薪水超过3000的员工名称和他的领导名称">¶</a><strong>32.求出员工领导的薪水超过3000的员工名称和他的领导名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">emp表自连接</span><br><span class="line"><span class="keyword">select</span> a.ename,b.ename</span><br><span class="line"><span class="keyword">from</span> emp a <span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">join</span> emp b <span class="comment">-- 领导表</span></span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">where</span> b.sal <span class="operator">&gt;</span> <span class="number">3000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> ename <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br></pre></td></tr></table></figure>
<p><strong>33.求出部门名称中带’S’字符的部门员工的工资合计、部门人数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="keyword">select</span> dname,ifnull(<span class="built_in">sum</span>(sal),<span class="number">0</span>) <span class="keyword">as</span> sum_sal,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 右外连接，为了查出40部门</span></span><br><span class="line"><span class="keyword">on</span>  e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> dname <span class="keyword">like</span> <span class="string">&#x27;%S%&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dname;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> sum_sal  <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">10875.00</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">9400.00</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OPERATIONS <span class="operator">|</span>     <span class="number">0.00</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="34-给任职日期超过30年的员工加薪10"><a class="header-anchor" href="#34-给任职日期超过30年的员工加薪10">¶</a><strong>34.给任职日期超过30年的员工加薪10%</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> emp  <span class="comment">-- 修改emp表</span></span><br><span class="line"><span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">*</span> <span class="number">1.1</span> </span><br><span class="line"><span class="keyword">where</span> timestampdiff(<span class="keyword">YEAR</span>, hiredate, now()) <span class="operator">&gt;</span> <span class="number">30</span>; <span class="comment">-- 工作年龄</span></span><br><span class="line"></span><br><span class="line"> 修改前：</span><br><span class="line"> <span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line">修改后：</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">880.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1760.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1375.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">3272.50</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1375.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">3135.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2695.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5500.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1650.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1210.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">1045.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1430.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<hr>
<p>34道MySQL查询练习题终于做完，从一开始的生疏到后来的得心应手，亲手实际果然是提高编程能力的最快途径！</p>
<p>——2024/4/3</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL无法连接</title>
    <url>/2024/10/02/Mysql%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天无意中点开了mysql客户端，发现输入密码后闪退，感觉是密码输错了。于是win+R调用命令行cmd输入mysql -u root -p打开Mysql，试了几次可能的密码都登录不上，报错<strong>ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost:3306’ (10061)</strong>，无法连接到Mysql。随后又打开navicat，依然无法连接。有点小慌，害怕是刚刚清理电脑C盘文件时误删除了什么东西。于是赶紧去google，找到一篇CSDN上的博客，第一步就解决了我的问题。</p>
<span id="more"></span>
<hr>
<p><a href="https://blog.csdn.net/huang6ing/article/details/103821495">ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost’ (10061)-CSDN博客</a></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-10-02_11-05-05.png" style="zoom:50%;" />
<p>简述：在<strong>开始</strong>处搜索计算机管理，点击服务，找到Mysql，右键启动，再重新登录Mysql，就可以了！</p>
<p>猜测大概是长时间不用Mysql，系统自动停止了服务，需要手动启动。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-10-02_11-43-19.png" style="zoom:50%;" />]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Next8.20.0博客升级计划</title>
    <url>/2024/09/15/Next8.2.0%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>当前最新的Next主题已经到了8.20.0版本，其中最吸引我的是支持在移动端显示侧边栏以及目录的功能。</p>
<p>原以为升级主题会很困难，查了一些资料后得知只需要下载最新的主题文件，在blog的根目录配置文件中选择想要的主题即可。</p>
<p>不过新的主题是默认配置，至于头像，背景，点击特效等等的自定义配置还需要重新搞一下，大体上就是对照着旧主题配置文件修改，或者直接重新来过也不是不行，只是需要花一点时间，慢慢来吧，先用着旧主题，抽空慢慢升级。</p>
<p>官方文档：<a href="https://theme-next.js.org/">NexT - Theme for Hexo (theme-next.js.org)</a></p>
<p>希望这一次能仔细研究官方文档。</p>
<span id="more"></span>
<hr>
<h2 id="进展"><a class="header-anchor" href="#进展">¶</a>进展</h2>
<h3 id="1-下载Next最新的主题，文件自动下载到blog-themes"><a class="header-anchor" href="#1-下载Next最新的主题，文件自动下载到blog-themes">¶</a>1.下载Next最新的主题，文件自动下载到blog\themes</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/next-theme/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-09-15_10-46-20.png" style="zoom:50%;" />
<p>将旧主题重命名为next_old，方便日后切换主题。</p>
]]></content>
      <categories>
        <category>Plan</category>
      </categories>
      <tags>
        <tag>博客问题</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS常用指令</title>
    <url>/2024/10/07/ROS%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>村雨学习ROS时记录的一些常用指令。</p>
<p>ROS学习文档：<a href="http://www.autolabor.com.cn/book/ROSTutorials/index.html">Introduction · Autolabor-ROS机器人入门课程《ROS理论与实践》零基础教程</a></p>
<p>ROS学习视频： <a href="https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?share_source=copy_web&amp;vd_source=3cf42fa3c3edbb189995b416184bb04c">https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?share_source=copy_web&amp;vd_source=3cf42fa3c3edbb189995b416184bb04c</a></p>
<span id="more"></span>
<hr>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">wget http://fishros.com/<span class="keyword">install</span> -O fishros &amp;&amp; bash fishros <span class="comment">#鱼香ros</span></span><br><span class="line">sudo apt update <span class="comment">#更新apt</span></span><br><span class="line">Ctrl + <span class="comment">#Vscode放大效果</span></span><br><span class="line">Ctrl - <span class="comment">#Vscode缩小效果</span></span><br><span class="line">code . <span class="comment">#在工作空间打开终端输入该指令，进入Vscode</span></span><br><span class="line">pwd <span class="comment">#获得当前文件夹路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">catkin_make <span class="comment">#编译</span></span><br><span class="line">Ctrl + Shift + B <span class="comment">#在Vscode中编译</span></span><br><span class="line"></span><br><span class="line">roscore <span class="comment">#启动ros核心</span></span><br><span class="line">source ./devel/setup.bash <span class="comment">#刷新环境变量</span></span><br><span class="line">rosrun 包名 文件名（节点名） <span class="comment">#执行ros程序</span></span><br><span class="line"></span><br><span class="line">rqt_graph 或 rosrun rqt_graph rqt_graph <span class="comment">#打开计算图</span></span><br><span class="line">rostopic echo 话题名 <span class="comment">#查阅消息</span></span><br><span class="line">rosservice call 服务名 tab两次 <span class="comment">#查阅服务</span></span><br><span class="line">rosparam <span class="keyword">list</span> <span class="comment">#查看参数列表</span></span><br><span class="line">rosparam get /参数 <span class="comment">#查看参数的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建工作空间</span></span><br><span class="line">mkdir -p demo03_ws/src</span><br><span class="line">cd demo03_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2024/07/21/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>鉴于我已经有其他编程语言的基础，这里只摘录了我认为比较生熟的知识点。</p>
<span id="more"></span>
<hr>
<h2 id="Python基本语法"><a class="header-anchor" href="#Python基本语法">¶</a>Python基本语法</h2>
<h3 id="注释"><a class="header-anchor" href="#注释">¶</a>注释</h3>
<p>Python中单行注释以 <strong>#</strong> 开头，多行注释可以用多个 <strong>#</strong> 号。</p>
<p>还可以用三个单引号 <strong>‘’’</strong> 或三个双引号 <strong>“”&quot;</strong> 来定义，这种注释方式并不能嵌套使用。</p>
<p>单行注释可以<strong>嵌套</strong>在多行注释中，而且不会引起语法错误。</p>
<h3 id="行与缩进"><a class="header-anchor" href="#行与缩进">¶</a>行与缩进</h3>
<p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p>
<p><strong>缩进的空格数</strong>是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="comment">#可运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)    </span><br><span class="line"><span class="comment">#缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure>
<h3 id="多行语句"><a class="header-anchor" href="#多行语句">¶</a>多行语句</h3>
<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>
<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ****，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="同一行显示多条语句"><a class="header-anchor" href="#同一行显示多条语句">¶</a>同一行显示多条语句</h3>
<p>Python 可以在同一行中使用多条语句，语句之间使用分号 <strong>;</strong> 分割。</p>
<h3 id="print-输出"><a class="header-anchor" href="#print-输出">¶</a>print 输出</h3>
<p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=“”</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></table></figure>
<h3 id="读取键盘输入"><a class="header-anchor" href="#读取键盘输入">¶</a>读取键盘输入</h3>
<p>Python 提供了 <a href="https://www.runoob.com/python3/python3-func-input.html">input() 内置函数</a>从标准输入读入一行文本，默认的标准输入是键盘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请输入：菜鸟教程</span></span><br><span class="line"><span class="comment">#你输入的内容是:  菜鸟教程</span></span><br></pre></td></tr></table></figure>
<h3 id="import-与-from…import"><a class="header-anchor" href="#import-与-from…import">¶</a>import 与 from…import</h3>
<p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p>
<p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p>
<p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p>
<p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p>
<h3 id="数字-Number-类型"><a class="header-anchor" href="#数字-Number-类型">¶</a>数字(Number)类型</h3>
<p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li><strong>bool</strong> (布尔), 如 True。</li>
<li><strong>float</strong> (浮点数), 如 1.23、3E-2</li>
<li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<hr>
<h3 id="字符串-String"><a class="header-anchor" href="#字符串-String">¶</a>字符串(String)</h3>
<ul>
<li>
<p>Python 中<strong>单引号</strong> <strong>’</strong> 和<strong>双引号</strong> <strong>&quot;</strong> 使用完全相同。</p>
</li>
<li>
<p>使用三引号(<strong>‘’’</strong> 或 <strong>“”&quot;</strong>)可以指定一个多行字符串。</p>
</li>
<li>
<p>转义符 <code>\</code>。</p>
</li>
<li>
<p>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r&quot;this is a line with \n&quot;</strong> 则 <strong>\n</strong> 会显示，<strong>并不是换行</strong>。</p>
</li>
<li>
<p>按字面意义级联字符串，如 <strong>&quot;this &quot; &quot;is &quot; “string”</strong> 会被自动转换为 <strong>this is string</strong>。</p>
</li>
<li>
<p>字符串可以用 <strong>+</strong> 运算符<strong>连接</strong>在一起，用 ***** 运算符重复。</p>
</li>
<li>
<p>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</p>
</li>
<li>
<p>Python 中的字符串不能改变，不能向一个索引位置赋值。</p>
</li>
<li>
<p>Python <strong>没有单独的字符类型</strong>，一个<strong>字符</strong>就是长度为 1 的<strong>字符串</strong>。</p>
</li>
<li>
<p>字符串切片 <strong>str[start:end]</strong>，其中 start（包含）是切片开始的索引，end（不包含）是切片结束的索引。</p>
</li>
<li>
<p>字符串的切片可以加上<strong>步长</strong>参数 step，语法格式如下：str[start:end:step]</p>
</li>
<li>
<p>字符串索引：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-07-21_10-25-25.png" alt=""></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;字符串&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第六个的字符（不包含第六个）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nrunoob&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure>
<h2 id="基本数据类型"><a class="header-anchor" href="#基本数据类型">¶</a>基本数据类型</h2>
<p>Python 中的<strong>变量不需要声明</strong>。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p>在 Python 中，<strong>变量就是变量，它没有类型</strong>，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p>
<h3 id="多个变量赋值"><a class="header-anchor" href="#多个变量赋值">¶</a>多个变量赋值</h3>
<p>Python允许你同时为多个变量赋值。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p>
<p>您也可以为多个对象指定多个变量。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="数值运算"><a class="header-anchor" href="#数值运算">¶</a>数值运算</h3>
<ul>
<li>数值的除法包含两个运算符：<strong>/</strong> 返回一个浮点数，<strong>//</strong> 返回一个整数。</li>
<li>在混合计算时，Python会把整型转换成为浮点数。</li>
<li><code>**</code>表示平方</li>
<li>Python支持复数，复数由实数部分和虚数部分构成，可以用 <strong>a + bj</strong>，或者 <strong>complex(a,b)</strong> 表示， 复数的实部 <strong>a</strong> 和虚部 <strong>b</strong> 都是浮点型。</li>
</ul>
<h3 id="bool（布尔类型）"><a class="header-anchor" href="#bool（布尔类型）">¶</a>bool（布尔类型）</h3>
<ul>
<li>
<p>布尔类型只有两个值：True 和 False。</p>
</li>
<li>
<p><strong>bool 是 int 的子类</strong>，因此布尔值可以被看作整数来使用，其中 True 等价于 1。</p>
</li>
<li>
<p>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会<strong>将 True 视为 1，False 视为 0</strong>。</p>
</li>
<li>
<p>可以使用 <code>bool()</code> 函数将其他类型的值转换为布尔值。</p>
<p><strong>注意:</strong> 在 Python中，所有<strong>非零</strong>的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p>
</li>
</ul>
<h3 id="List（列表）"><a class="header-anchor" href="#List（列表）">¶</a>List（列表）</h3>
<p>List（列表） 是 Python 中<strong>使用最频繁</strong>的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表是写在<strong>方括号</strong> <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被<strong>索引和截取</strong>，列表被截取后返回一个包含所需元素的新列表。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-07-21_10-34-50.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]  <span class="comment"># 定义一个列表</span></span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 打印整个列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 打印列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 打印列表第二到第四个元素（不包含第四个元素）</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 打印列表从第三个元素开始到末尾</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])     <span class="comment"># 打印列表从第一个元素到第五个元素，步长为2（a,c,e）</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 打印tinylist列表两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 打印两个列表拼接在一起的结果</span></span><br></pre></td></tr></table></figure>
<p>与Python字符串不一样的是，<strong>列表中的元素是可以改变</strong>的，可以给其赋值和更新。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line">list1.append(<span class="string">&#x27;Baidu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;更新后的列表 : &quot;</span>, list1)</span><br><span class="line"><span class="comment">#更新后的列表 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;, &#x27;Baidu&#x27;]</span></span><br><span class="line">list1[<span class="number">0</span>] = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;修改第一个元素后的列表：&quot;</span>,list1)</span><br><span class="line"><span class="comment">#修改第一个元素后的列表： [&#x27;Python&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;, &#x27;Baidu&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;原始列表 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除第三个元素 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="comment">#原始列表 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 1997, 2000]</span></span><br><span class="line"><span class="comment">#删除第三个元素 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 2000]</span></span><br></pre></td></tr></table></figure>
<h4 id="嵌套列表"><a class="header-anchor" href="#嵌套列表">¶</a>嵌套列表</h4>
<p>使用嵌套列表即<strong>在列表里创建其它列表</strong>，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Tuple（元组）"><a class="header-anchor" href="#Tuple（元组）">¶</a>Tuple（元组）</h3>
<p>元组（tuple）与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组写在<strong>小括号</strong> <strong>()</strong> 里，元素之间用逗号隔开。</p>
<p>元组中的元素类型也可以不相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure>
<p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p>
<p>其实，可以把字符串看作一种特殊的元组。</p>
<hr>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>
<p>如果你想<strong>创建只有一个元素的元组</strong>，需要注意<strong>在元素后面添加一个逗号</strong>，以<strong>区分它是一个元组</strong>而不是一个普通的值，这是因为在没有逗号的情况下，Python会将括号解释为数学运算中的括号，而不是元组的表示。</p>
<p>如果<strong>不添加逗号</strong>，如下所示，<strong>它将被解释为一个普通的值</strong>而不是元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#type(example)用于查看一个变量的类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>string、list 和 tuple 都属于 sequence（序列）。</p>
<h4 id="修改元组"><a class="header-anchor" href="#修改元组">¶</a>修改元组</h4>
<p>元组中的元素值是不允许修改的，但我们<strong>可以对元组进行连接组合</strong>，如下实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line"><span class="built_in">print</span> (tup3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="删除元组"><a class="header-anchor" href="#删除元组">¶</a>删除元组</h4>
<p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span> (tup)</span><br><span class="line"><span class="keyword">del</span> tup <span class="comment">#删除tup元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除后的元组 tup : &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (tup)</span><br><span class="line"></span><br><span class="line"><span class="comment">#以上实例元组被删除后，再次输出变量会有异常信息，输出如下所示：</span></span><br><span class="line">(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">删除后的元组 tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;d:\PythonLearning\test.py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> (tup)</span><br><span class="line">           ^^^</span><br><span class="line">NameError: name <span class="string">&#x27;tup&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h3 id="Set（集合）"><a class="header-anchor" href="#Set（集合）">¶</a>Set（集合）</h3>
<p>Python 中的集合（Set）是一种<strong>无序</strong>、可变的数据类型，用于存储唯一的元素。</p>
<p>集合中的<strong>元素不会重复</strong>，并且可以进行<strong>交集、并集、差集</strong>等常见的集合操作。</p>
<p>在 Python 中，集合使用大括号 <strong>{}</strong> 表示，元素之间用逗号 <strong>,</strong> 分隔。</p>
<p>另外，也可以使用 <strong>set()</strong> 函数创建集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;            <span class="comment"># 直接使用大括号创建集合</span></span><br><span class="line">set2 = <span class="built_in">set</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])      <span class="comment"># 使用 set() 函数从列表创建集合</span></span><br></pre></td></tr></table></figure>
<p>**注意：**创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;执行结果</span></span><br><span class="line"><span class="string">&#123;&#x27;Zhihu&#x27;, &#x27;Baidu&#x27;, &#x27;Taobao&#x27;, &#x27;Runoob&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;&#125;</span></span><br><span class="line"><span class="string">Runoob 在集合中</span></span><br><span class="line"><span class="string">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;r&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;z&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="集合的基本操作"><a class="header-anchor" href="#集合的基本操作">¶</a>集合的基本操作</h4>
<h5 id="1、添加元素"><a class="header-anchor" href="#1、添加元素">¶</a>1、添加元素</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</span></span><br><span class="line">s.add( x )</span><br><span class="line"></span><br><span class="line"><span class="comment">#还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等。x可以有多个，用逗号分开。</span></span><br><span class="line">s.update( x )</span><br></pre></td></tr></table></figure>
<h5 id="2、移除元素"><a class="header-anchor" href="#2、移除元素">¶</a>2、移除元素</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span></span><br><span class="line">s.remove( x )</span><br><span class="line"></span><br><span class="line"><span class="comment">#此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span></span><br><span class="line">s.discard( x )</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以设置随机删除集合中的一个元素，多次执行测试结果都不一样。</span></span><br><span class="line">s.pop() </span><br></pre></td></tr></table></figure>
<h5 id="3、计算集合元素个数"><a class="header-anchor" href="#3、计算集合元素个数">¶</a>3、计算集合元素个数</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(s)</span><br></pre></td></tr></table></figure>
<h5 id="4、清空集合"><a class="header-anchor" href="#4、清空集合">¶</a>4、清空集合</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure>
<h5 id="5、判断元素是否在集合中存在"><a class="header-anchor" href="#5、判断元素是否在集合中存在">¶</a>5、判断元素是否在集合中存在</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。</span></span><br><span class="line">x <span class="keyword">in</span> s</span><br></pre></td></tr></table></figure>
<h3 id="Dictionary（字典）"><a class="header-anchor" href="#Dictionary（字典）">¶</a>Dictionary（字典）</h3>
<p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p>
<p><strong>列表是有序的</strong>对象集合，<strong>字典是无序的</strong>对象集合。两者之间的区别在于：字典当中的元素是通过<strong>键</strong>来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2, key3 : value3&#125;</span><br></pre></td></tr></table></figure>
<p><strong>键(key)必须使用不可变类型</strong></p>
<p>在同一个字典中，键(key)<strong>必须是唯一的</strong>。</p>
<p>值可以取任何数据类型，但<strong>键</strong>必须是不可变的，如<strong>字符串，数字</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125; <span class="comment">#空字典</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看字典的数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Length:&quot;</span>, <span class="built_in">len</span>(<span class="built_in">dict</span>))</span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">dict</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;执行结果</span></span><br><span class="line"><span class="string">1 - 菜鸟教程</span></span><br><span class="line"><span class="string">2 - 菜鸟工具</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;runoob&#x27;, &#x27;code&#x27;: 1, &#x27;site&#x27;: &#x27;www.runoob.com&#x27;&#125;</span></span><br><span class="line"><span class="string">dict_keys([&#x27;name&#x27;, &#x27;code&#x27;, &#x27;site&#x27;])</span></span><br><span class="line"><span class="string">dict_values([&#x27;runoob&#x27;, 1, &#x27;www.runoob.com&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改字典"><a class="header-anchor" href="#修改字典">¶</a>修改字典</h4>
<p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>] = <span class="number">8</span>               <span class="comment"># 更新 Age</span></span><br><span class="line">tinydict[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;菜鸟教程&quot;</span>  <span class="comment"># 添加信息</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;School&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;School&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>]:  <span class="number">8</span></span><br><span class="line">tinydict[<span class="string">&#x27;School&#x27;</span>]:  菜鸟教程</span><br></pre></td></tr></table></figure>
<h4 id="删除字典元素"><a class="header-anchor" href="#删除字典元素">¶</a>删除字典元素</h4>
<p>能<strong>删除单一的元素</strong>也能<strong>清空字典</strong>，清空只需一项操作。</p>
<p>显式删除一个字典用del命令，如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> tinydict[<span class="string">&#x27;Name&#x27;</span>] <span class="comment"># 删除键 &#x27;Name&#x27;</span></span><br><span class="line">tinydict.clear()     <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> tinydict         <span class="comment"># 删除字典</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;School&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;School&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#但这会引发一个异常，因为用执行 del 操作后字典不再存在：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/runoob-test/test.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">NameError: name <span class="string">&#x27;tinydict&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h4 id="字典键的特性"><a class="header-anchor" href="#字典键的特性">¶</a>字典键的特性</h4>
<p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p>
<p>两个重要的点需要记住：</p>
<ol>
<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，<strong>后一个值会被记住</strong>。</li>
<li><strong>键必须不可变</strong>，所以可以用数字，字符串或元组充当，而用列表就不行。</li>
</ol>
<h3 id="数据类型转换"><a class="header-anchor" href="#数据类型转换">¶</a>数据类型转换</h3>
<h4 id="隐式类型转换"><a class="header-anchor" href="#隐式类型转换">¶</a>隐式类型转换</h4>
<p>在隐式类型转换中，Python 会<strong>自动</strong>将一种数据类型转换为另一种数据类型，不需要我们去干预。</p>
<p>对两种不同类型的数据进行运算，<strong>较低</strong>数据类型（整数）就会<strong>转换为较高</strong>数据类型（浮点数）以避免数据丢失。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#该函数可以查看括号中数据的类型</span></span><br><span class="line"><span class="built_in">type</span>(num_int)</span><br></pre></td></tr></table></figure>
<p><strong>整型</strong>和<strong>字符串类型</strong>运算结果<strong>会报错</strong>，输出 TypeError。 Python 在这种情况下无法使用隐式转换。</p>
<p>但是，Python 为这些类型的情况提供了一种解决方案，称为<strong>显式转换</strong>。</p>
<h4 id="显式类型转换"><a class="header-anchor" href="#显式类型转换">¶</a>显式类型转换</h4>
<p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。</p>
<p>可以使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="number">1</span>)   <span class="comment"># x 输出结果为 1</span></span><br><span class="line">y = <span class="built_in">int</span>(<span class="number">2.8</span>) <span class="comment"># y 输出结果为 2</span></span><br><span class="line">z = <span class="built_in">int</span>(<span class="string">&quot;3&quot;</span>) <span class="comment"># z 输出结果为 3</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="number">1</span>)     <span class="comment"># x 输出结果为 1.0</span></span><br><span class="line">y = <span class="built_in">float</span>(<span class="number">2.8</span>)   <span class="comment"># y 输出结果为 2.8</span></span><br><span class="line">z = <span class="built_in">float</span>(<span class="string">&quot;3&quot;</span>)   <span class="comment"># z 输出结果为 3.0</span></span><br><span class="line">w = <span class="built_in">float</span>(<span class="string">&quot;4.2&quot;</span>) <span class="comment"># w 输出结果为 4.2</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">str</span>(<span class="string">&quot;s1&quot;</span>) <span class="comment"># x 输出结果为 &#x27;s1&#x27;</span></span><br><span class="line">y = <span class="built_in">str</span>(<span class="number">2</span>)    <span class="comment"># y 输出结果为 &#x27;2&#x27;</span></span><br><span class="line">z = <span class="built_in">str</span>(<span class="number">3.0</span>)  <span class="comment"># z 输出结果为 &#x27;3.0&#x27;</span></span><br><span class="line"></span><br><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_str = <span class="string">&quot;456&quot;</span></span><br><span class="line">num_str = <span class="built_in">int</span>(num_str)    <span class="comment"># 强制转换为整型</span></span><br><span class="line">num_sum = num_int + num_str</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_int 与 num_str 相加结果为:&quot;</span>,num_sum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_sum))</span><br><span class="line"></span><br><span class="line"><span class="comment">#num_int 与 num_str 相加结果为: 579</span></span><br><span class="line"><span class="comment">#sum 数据类型为: &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Python逻辑运算符"><a class="header-anchor" href="#Python逻辑运算符">¶</a>Python逻辑运算符</h2>
<p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">逻辑表达式</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">and</td>
<td style="text-align:left">x and y</td>
<td style="text-align:left">布尔&quot;与&quot; - 如果 <strong>x 为 False</strong>，x and y <strong>返回 x</strong> 的值，否则返回 y 的计算值。</td>
<td style="text-align:left">(a and b) 返回 20。</td>
</tr>
<tr>
<td style="text-align:left">or</td>
<td style="text-align:left">x or y</td>
<td style="text-align:left">布尔&quot;或&quot; - 如果 <strong>x 是 True</strong>，<strong>返回 x</strong> 的值，否则它返回 y 的计算值。</td>
<td style="text-align:left">(a or b) 返回 10。</td>
</tr>
<tr>
<td style="text-align:left">not</td>
<td style="text-align:left">not x</td>
<td style="text-align:left">布尔&quot;非&quot; - 如果 <strong>x 为 True</strong>，<strong>返回 False</strong> 。如果 x 为 False，它返回 True。</td>
<td style="text-align:left">not(a and b) 返回 False</td>
</tr>
</tbody>
</table>
<h2 id="Python与数学"><a class="header-anchor" href="#Python与数学">¶</a>Python与数学</h2>
<h3 id="数学函数"><a class="header-anchor" href="#数学函数">¶</a>数学函数</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs(x)</a></td>
<td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html">ceil(x)</a></td>
<td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td style="text-align:left">cmp(x, y)</td>
<td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td>
<td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td>
<td style="text-align:left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td>
<td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td>
<td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td>
<td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td>
<td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td>
<td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td>
<td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td>
<td style="text-align:left">x**y 运算后的值。</td>
</tr>
<tr>
<td style="text-align:left">[round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td>
<td style="text-align:left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td>
<td style="text-align:left">返回数字x的平方根。</td>
</tr>
</tbody>
</table>
<h3 id="随机数函数"><a class="header-anchor" href="#随机数函数">¶</a>随机数函数</h3>
<p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p>
<p>Python包含以下常用随机数函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td>
<td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td>
</tr>
<tr>
<td style="text-align:left">[randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td>
<td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td>
<td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td>
</tr>
<tr>
<td style="text-align:left">[seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td>
<td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td>
<td style="text-align:left">将序列的所有元素随机排序</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td>
<td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td>
</tr>
</tbody>
</table>
<h3 id="三角函数"><a class="header-anchor" href="#三角函数">¶</a>三角函数</h3>
<p>Python包括以下三角函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html">acos(x)</a></td>
<td style="text-align:left">返回x的反余弦弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html">asin(x)</a></td>
<td style="text-align:left">返回x的反正弦弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html">atan(x)</a></td>
<td style="text-align:left">返回x的反正切弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html">atan2(y, x)</a></td>
<td style="text-align:left">返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html">cos(x)</a></td>
<td style="text-align:left">返回x的弧度的余弦值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html">hypot(x, y)</a></td>
<td style="text-align:left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html">sin(x)</a></td>
<td style="text-align:left">返回的x弧度的正弦值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html">tan(x)</a></td>
<td style="text-align:left">返回x弧度的正切值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html">degrees(x)</a></td>
<td style="text-align:left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html">radians(x)</a></td>
<td style="text-align:left">将角度转换为弧度</td>
</tr>
</tbody>
</table>
<h3 id="数学常量"><a class="header-anchor" href="#数学常量">¶</a>数学常量</h3>
<table>
<thead>
<tr>
<th style="text-align:left">常量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pi</td>
<td style="text-align:left">数学常量 pi（圆周率，一般以π来表示）</td>
</tr>
<tr>
<td style="text-align:left">e</td>
<td style="text-align:left">数学常量 e，e即自然常数（自然常数）。</td>
</tr>
</tbody>
</table>
<h1>Python条件控制</h1>
<h2 id="if-语句"><a class="header-anchor" href="#if-语句">¶</a>if 语句</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure>
<p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p>
<p><strong>注意：</strong></p>
<ul>
<li>1、每个条件后面要使用<strong>冒号 :</strong>，表示接下来是满足条件后要执行的语句块。</li>
<li>2、使用缩进来划分语句块，<strong>相同缩进数的语句</strong>在一起组成一个语句块。</li>
<li>3、在 Python 中没有 <strong>switch…case</strong> 语句，但在 Python3.10 版本添加了 <strong>match…case</strong>，功能也类似。</li>
</ul>
<p><strong>实例</strong>：狗的年龄计算判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你家狗狗的年龄: &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你是在逗我吧!&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相当于 14 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相当于 22 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    human = <span class="number">22</span> + (age -<span class="number">2</span>)*<span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对应人类年龄: &quot;</span>, human)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 退出提示</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;点击 enter 键退出&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="match…case"><a class="header-anchor" href="#match…case">¶</a>match…case</h2>
<p>match 后的对象会<strong>依次与 case 后的内容进行匹配</strong>，如果匹配成功，则执行匹配到的表达式，否则直接跳过，<strong>_</strong> 可以匹配一切。</p>
<p>语法格式如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个 case 也可以设置多个匹配条件，条件使用 ｜ 隔开，例如：</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>|<span class="number">403</span>|<span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Not allowed&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>case _:</strong> 类似于 C 和 Java 中的 <strong>default:</strong>，当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功。</p>
<h1>Python循环语句</h1>
<h2 id="while-循环"><a class="header-anchor" href="#while-循环">¶</a>while 循环</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure>
<p>同样需要注意冒号和缩进。另外，在 <strong>Python 中没有 do…while 循环</strong>。</p>
<p>以下实例使用了 while 来计算 1 到 100 的总和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure>
<h3 id="while-循环使用-else-语句"><a class="header-anchor" href="#while-循环使用-else-语句">¶</a>while 循环使用 else 语句</h3>
<p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p>
<p>语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure>
<p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。</p>
<h3 id="斐波那契数列实例"><a class="header-anchor" href="#斐波那契数列实例">¶</a>斐波那契数列实例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fibonacci series: 斐波纳契数列</span></span><br><span class="line"><span class="comment"># 两个元素的总和确定了下一个数</span></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>其中代码 <strong>a, b = b, a+b</strong> 的计算方式为先计算右边表达式，然后同时赋值给左边。</p>
<p>例如：先得到b和a+b的值，然后再把b赋值给a,把a+b赋值给b。</p>
<h3 id="end-关键字"><a class="header-anchor" href="#end-关键字">¶</a>end 关键字</h3>
<p>关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符，实例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fibonacci series: 斐波纳契数列</span></span><br><span class="line"><span class="comment"># 两个元素的总和确定了下一个数</span></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(b, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line"><span class="comment">#运行结果    </span></span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">377</span>,<span class="number">610</span>,<span class="number">987</span>,</span><br></pre></td></tr></table></figure>
<h2 id="for-语句"><a class="header-anchor" href="#for-语句">¶</a>for 语句</h2>
<p>Python for 循环可以<strong>遍历</strong>任何可迭代对象，如一个列表或者一个字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure>
<p>for 循环实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="built_in">print</span>(site)</span><br><span class="line"><span class="comment">#site是个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">Baidu</span><br><span class="line">Google</span><br><span class="line">Runoob</span><br><span class="line">Taobao</span><br></pre></td></tr></table></figure>
<h2 id="for…else"><a class="header-anchor" href="#for…else">¶</a>for…else</h2>
<p>在 Python 中，for…else 语句用于在循环结束后执行一段代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="comment"># 循环主体</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环结束后执行的代码</span></span><br></pre></td></tr></table></figure>
<p>当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，</p>
<p>如果在循环过程中遇到了 <strong>break 语句</strong>，则会<strong>中断循环</strong>，此时不会执行 else 子句。</p>
<h2 id="range-函数"><a class="header-anchor" href="#range-函数">¶</a>range() 函数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果你需要遍历数字序列，可以使用内置 range() 函数。它会生成数列，例如:</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)<span class="comment">#前5个，从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用 range() 指定区间的值：</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">9</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i)<span class="comment">#从数字5开始，到数字8（不包括数字9）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使 range() 以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做&#x27;步长&#x27;):</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i)<span class="comment">#从数字0开始，到数字9（不包括数字10），步长为3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1>Python函数</h1>
<h2 id="语法"><a class="header-anchor" href="#语法">¶</a>语法</h2>
<p>Python 定义函数使用 def 关键字，一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（参数列表）:</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>
<p>实例：比较两个数，并返回较大的数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数的定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(a, b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<h2 id="参数传递"><a class="header-anchor" href="#参数传递">¶</a>参数传递</h2>
<p>在 python 中，<strong>类型属于对象</strong>，对象有不同类型的区分，<strong>变量是没有类型的</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;Runoob&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上代码中，<strong>[1,2,3]</strong> 是 List 类型，<strong>“Runoob”</strong> 是 String 类型，而变量 a 是没有类型，它仅仅是一个对象的引用（一个指针），可以指向 List 类型对象，也可以指向 String 类型对象。</p>
<h3 id="可更改-mutable-与不可更改-immutable-对象"><a class="header-anchor" href="#可更改-mutable-与不可更改-immutable-对象">¶</a>可更改(mutable)与不可更改(immutable)对象</h3>
<p>在 python 中，strings, tuples, 和 numbers 是<strong>不可更改</strong>的对象，而 list,dict 等则是<strong>可更改</strong>的对象。</p>
<ul>
<li>**不可变类型：**变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 <strong>5 被丢弃</strong>，不是改变 a 的值，相当于新生成了 a。</li>
<li>**可变类型：**变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li>**不可变类型：**类似 <strong>C++ 的值传递</strong>，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li>
<li>**可变类型：**类似 <strong>C++ 的引用传递</strong>，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
<p><strong>python 中一切都是对象</strong>，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>
<h3 id="不定长参数"><a class="header-anchor" href="#不定长参数">¶</a>不定长参数</h3>
<p>你可能需要一个函数能处理比当初声明时更多的参数。加了**星号 *** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vartuple)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">输出: </span><br><span class="line"><span class="number">70</span></span><br><span class="line">(<span class="number">60</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>加了<em><em>两个星号 <em>*</em></em> 的参数会以</em><em>字典</em>*的形式导入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, **vardict </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo(<span class="number">1</span>, a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">输出: </span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果单独出现星号 *<strong><strong>，则星号 ***** 后的参数</strong>必须用关键字</strong>传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b,*,c</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line"></span><br><span class="line">x = test(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>)<span class="comment">#关键字传入</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<h2 id="匿名函数"><a class="header-anchor" href="#匿名函数">¶</a>匿名函数</h2>
<p>Python 使用 <strong>lambda</strong> 来创建匿名函数。所谓匿名，意即不再使用 <strong>def</strong> 语句这样标准的形式定义一个函数。</p>
<p>ambda 函数的语法只包含一个语句，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>
<p>设置参数 a 加上 10:</p>
<h3 id="实例"><a class="header-anchor" href="#实例">¶</a>实例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a : a + <span class="number">10</span> </span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<h1>Python栈和队列</h1>
<p>Python中列表是可变的，这是它区别于字符串和元组的最重要的特点，一句话概括即：<strong>列表可以修改，而字符串和元组不能。</strong></p>
<p>以下是 Python 中列表的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">list.append(x)</td>
<td style="text-align:left"><strong>把一个元素添加到列表的结尾</strong>，相当于 a[len(a):] = [x]。</td>
</tr>
<tr>
<td style="text-align:left">list.extend(L)</td>
<td style="text-align:left">通过<strong>添加指定列表的所有元素</strong>来扩充列表，相当于 a[len(a):] = L。</td>
</tr>
<tr>
<td style="text-align:left">list.insert(i, x)</td>
<td style="text-align:left"><strong>在指定位置插入一个元素</strong>。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td>
</tr>
<tr>
<td style="text-align:left">list.remove(x)</td>
<td style="text-align:left"><strong>删除列表中值为 x 的第一个元素</strong>。如果没有这样的元素，就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.pop([i])</td>
<td style="text-align:left"><strong>从列表的指定位置移除元素，并将其返回。<strong>如果</strong>没有指定索引</strong>，a.pop()<strong>返回最后一个元素</strong>。元素随即从列表中被移除。（方法中 <strong>i 两边的方括号表示这个参数是可选的</strong>，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td>
</tr>
<tr>
<td style="text-align:left">list.clear()</td>
<td style="text-align:left"><strong>移除列表中的所有项</strong>，等于del a[:]。</td>
</tr>
<tr>
<td style="text-align:left">list.index(x)</td>
<td style="text-align:left"><strong>返回列表中第一个值为 x 的元素的索引</strong>。如果没有匹配的元素就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.count(x)</td>
<td style="text-align:left"><strong>返回 x 在列表中出现的次数</strong>。</td>
</tr>
<tr>
<td style="text-align:left">list.sort()</td>
<td style="text-align:left"><strong>对列表中的元素进行排序</strong>。（从小到大）</td>
</tr>
<tr>
<td style="text-align:left">list.reverse()</td>
<td style="text-align:left"><strong>颠倒列表中的元素。</strong></td>
</tr>
<tr>
<td style="text-align:left">list.copy()</td>
<td style="text-align:left"><strong>返回列表的浅复制</strong>，等于a[:]。</td>
</tr>
</tbody>
</table>
<h2 id="栈"><a class="header-anchor" href="#栈">¶</a>栈</h2>
<h3 id="将列表当做栈使用"><a class="header-anchor" href="#将列表当做栈使用">¶</a>将列表当做栈使用</h3>
<p>在 Python 中，可以使用列表（list）来实现栈的功能。栈是一种<strong>后进先出</strong>（LIFO, Last-In-First-Out）数据结构，意味着最后添加的元素最先被移除。列表提供了一些方法，使其非常适合用于栈操作，特别是 <strong>append()</strong> 和 <strong>pop()</strong> 方法。</p>
<p>用 append() 方法可以把一个元素添加到栈顶，用不指定索引的 pop() 方法可以把一个元素从栈顶释放出来。</p>
<h4 id="栈操作"><a class="header-anchor" href="#栈操作">¶</a>栈操作</h4>
<ul>
<li><strong>压入（Push）</strong>: 将一个元素添加到栈的顶端。</li>
<li><strong>弹出（Pop）</strong>: 移除并返回栈顶元素。</li>
<li><strong>查看栈顶元素（Peek/Top）</strong>: 返回栈顶元素而不移除它。</li>
<li><strong>检查是否为空（IsEmpty）</strong>: 检查栈是否为空。</li>
<li><strong>获取栈的大小（Size）</strong>: 获取栈中元素的数量。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、创建一个空栈</span></span><br><span class="line">stack = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、压入（Push）操作</span></span><br><span class="line">stack.append(<span class="number">1</span>)</span><br><span class="line">stack.append(<span class="number">2</span>)</span><br><span class="line">stack.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(stack)  <span class="comment"># 输出: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、弹出（Pop）操作</span></span><br><span class="line">top_element = stack.pop()</span><br><span class="line"><span class="built_in">print</span>(top_element)  <span class="comment"># 输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(stack)        <span class="comment"># 输出: [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、查看栈顶元素（Peek/Top）</span></span><br><span class="line">top_element = stack[-<span class="number">1</span>] <span class="comment">#访问列表的最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(top_element)  <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、检查是否为空（IsEmpty）</span></span><br><span class="line">is_empty = <span class="built_in">len</span>(stack) == <span class="number">0</span> <span class="comment">#`==`判断栈中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"><span class="built_in">print</span>(is_empty)  <span class="comment"># 输出: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6、获取栈的大小（Size）</span></span><br><span class="line">size = <span class="built_in">len</span>(stack) <span class="comment">#返回栈中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(size)  <span class="comment"># 输出: 2</span></span><br></pre></td></tr></table></figure>
<h5 id="完整实例"><a class="header-anchor" href="#完整实例">¶</a><strong>完整实例</strong></h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>: <span class="comment">#栈类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = [] <span class="comment">#使用列表用作栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.stack.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> self.stack.pop() <span class="comment">#如果栈不为空，会移除并返回队列中的最后一个元素。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;pop from empty stack&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>] <span class="comment">#如果栈不为空，会返回队列中的最后一个元素。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;peek from empty stack&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) == <span class="number">0</span> <span class="comment">#`==`判断栈中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) <span class="comment">#返回栈中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">stack = Stack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈顶元素:&quot;</span>, stack.peek())  <span class="comment"># 输出: 栈顶元素: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈大小:&quot;</span>, stack.size())    <span class="comment"># 输出: 栈大小: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;弹出元素:&quot;</span>, stack.pop())  <span class="comment"># 输出: 弹出元素: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈是否为空:&quot;</span>, stack.is_empty())  <span class="comment"># 输出: 栈是否为空: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈大小:&quot;</span>, stack.size())    <span class="comment"># 输出: 栈大小: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">栈顶元素: <span class="number">3</span></span><br><span class="line">栈大小: <span class="number">3</span></span><br><span class="line">弹出元素: <span class="number">3</span></span><br><span class="line">栈是否为空: <span class="literal">False</span></span><br><span class="line">栈大小: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="队列"><a class="header-anchor" href="#队列">¶</a>队列</h2>
<h3 id="将列表当作队列使用"><a class="header-anchor" href="#将列表当作队列使用">¶</a>将列表当作队列使用</h3>
<p>在 Python 中，列表（list）可以用作队列（queue），但由于列表的特点，直接使用列表来实现队列并不是最优的选择。</p>
<p>队列是一种<strong>先进先出</strong>（FIFO, First-In-First-Out）的数据结构，意味着<strong>最早添加的元素最先被移除</strong>。</p>
<p>使用列表时，如果频繁地在列表的开头插入或删除元素，性能会受到影响，因为这些操作的时间复杂度是 O(n)。为了解决这个问题，Python 提供了 collections.deque，它是<strong>双端队列</strong>，可以<strong>在两端高效地添加和删除元素</strong>。</p>
<h4 id="使用-collections-deque-实现队列"><a class="header-anchor" href="#使用-collections-deque-实现队列">¶</a>使用 collections.deque 实现队列</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个空队列</span></span><br><span class="line">queue = deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向队尾添加元素</span></span><br><span class="line">queue.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)  <span class="comment"># 输出: 队列状态: deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从队首移除元素</span></span><br><span class="line">first_element = queue.popleft()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除的元素:&quot;</span>, first_element)  <span class="comment"># 输出: 移除的元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)            <span class="comment"># 输出: 队列状态: deque([&#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看队首元素（不移除）</span></span><br><span class="line">front_element = queue[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队首元素:&quot;</span>, front_element)    <span class="comment"># 输出: 队首元素: b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查队列是否为空</span></span><br><span class="line">is_empty = <span class="built_in">len</span>(queue) == <span class="number">0</span> <span class="comment">#`==`判断队列中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列是否为空:&quot;</span>, is_empty)     <span class="comment"># 输出: 队列是否为空: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取队列大小</span></span><br><span class="line">size = <span class="built_in">len</span>(queue) <span class="comment">#返回队列中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, size)            <span class="comment"># 输出: 队列大小: 2</span></span><br></pre></td></tr></table></figure>
<h4 id="使用列表实现队列"><a class="header-anchor" href="#使用列表实现队列">¶</a>使用列表实现队列</h4>
<p>虽然 deque更高效，但如果坚持使用列表来实现队列，也可以这么做。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 创建队列</span></span><br><span class="line">queue = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 向队尾添加元素</span></span><br><span class="line">queue.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)  <span class="comment"># 输出: 队列状态: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 从队首移除元素</span></span><br><span class="line">first_element = queue.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除的元素:&quot;</span>, first_element)  <span class="comment"># 输出: 移除的元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)            <span class="comment"># 输出: 队列状态: [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 查看队首元素（不移除）</span></span><br><span class="line">front_element = queue[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队首元素:&quot;</span>, front_element)    <span class="comment"># 输出: 队首元素: b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 检查队列是否为空</span></span><br><span class="line">is_empty = <span class="built_in">len</span>(queue) == <span class="number">0</span> <span class="comment">#`==`判断队列中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列是否为空:&quot;</span>, is_empty)     <span class="comment"># 输出: 队列是否为空: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6. 获取队列大小</span></span><br><span class="line">size = <span class="built_in">len</span>(queue) <span class="comment">#返回队列中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, size)            <span class="comment"># 输出: 队列大小: 2</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="完整实例-v2"><a class="header-anchor" href="#完整实例-v2">¶</a><strong>完整实例</strong></h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>: <span class="comment">#队列类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.queue = [] <span class="comment">#使用列表用作队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.queue.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty(): <span class="comment">#如果队列不为空，会移除并返回队列中的第一个元素。</span></span><br><span class="line">            <span class="keyword">return</span> self.queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;dequeue from empty queue&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty(): <span class="comment">#如果队列不为空，会返回队列中的第一个元素。</span></span><br><span class="line">            <span class="keyword">return</span> self.queue[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;peek from empty queue&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.queue) == <span class="number">0</span> <span class="comment">##`==`判断队列中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.queue) <span class="comment">#返回队列中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">queue = Queue()</span><br><span class="line">queue.enqueue(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.enqueue(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.enqueue(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队首元素:&quot;</span>, queue.peek())    <span class="comment"># 输出: 队首元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, queue.size())    <span class="comment"># 输出: 队列大小: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除的元素:&quot;</span>, queue.dequeue())  <span class="comment"># 输出: 移除的元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列是否为空:&quot;</span>, queue.is_empty())  <span class="comment"># 输出: 队列是否为空: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, queue.size())    <span class="comment"># 输出: 队列大小: 2</span></span><br></pre></td></tr></table></figure>
<p>虽然可以使用列表来实现队列，但<strong>使用 collections.deque 会更高效和简洁</strong>。</p>
<p>它提供了 O(1) 时间复杂度的添加和删除操作，非常适合队列这种数据结构。</p>
<h2 id="列表推导式"><a class="header-anchor" href="#列表推导式">¶</a>列表推导式</h2>
<p>列表推导式提供了从序列创建列表的简单途径。</p>
<p>将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#让3乘列表中的每一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">[<span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#让队列中的每个元素平方</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[x, x**<span class="number">2</span>] <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">[[<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">16</span>], [<span class="number">6</span>, <span class="number">36</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用if语句过滤部分元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &gt; <span class="number">3</span>]</span><br><span class="line">[<span class="number">12</span>, <span class="number">18</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &lt; <span class="number">2</span>]</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h2 id="del-语句"><a class="header-anchor" href="#del-语句">¶</a>del 语句</h2>
<p>使用 del 语句可以从一个列表中<strong>根据索引来删除一个元素，而不是值来删除元素</strong>。这与使用 pop() 返回一个值不同。</p>
<p>可以用 del 语句从列表中删除一个切割，或清空整个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>] <span class="comment">#删除索引从2到3的所有元素（不包括4）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[:] <span class="comment">#删除从开始到结束的所有元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以用 del 删除实体变量：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</span><br></pre></td></tr></table></figure>
<h1>Python模块</h1>
<p>模块是一个包含所有你定义的函数和变量的文件，<a href="http://xn--g6qy6dca976psl2a.py">其后缀名是.py</a>。模块可以被别的程序引入，以使用该模块中的函数等功能。</p>
<h2 id="import-语句"><a class="header-anchor" href="#import-语句">¶</a>import 语句</h2>
<p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]</span><br></pre></td></tr></table></figure>
<p>一个模块只会被导入一次，不管你执行了多少次 <strong>import</strong>。这样可以防止导入模块被一遍又一遍地执行。</p>
<p><strong>特点：</strong></p>
<ul>
<li>模块的所有功能都被导入，但需要通过 <code>module_name.</code> 前缀来访问。</li>
<li>不会污染当前命名空间，因为所有功能都在模块的命名空间下。</li>
</ul>
<h2 id="from-…-import-语句"><a class="header-anchor" href="#from-…-import-语句">¶</a>from … import 语句</h2>
<p>Python 的 from 语句让你<strong>从模块中导入一个指定的部分</strong>到当前命名空间中，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>
<h2 id="from-…-import-语句-v2"><a class="header-anchor" href="#from-…-import-语句-v2">¶</a>from … import * 语句</h2>
<p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong></p>
<ul>
<li>你可以直接使用模块中的所有公共功能，而<strong>不需要模块名前缀</strong>。</li>
<li>可能会污染当前命名空间，因为<strong>如果导入的模块与当前命名空间中已有的变量或函数名称冲突，它们会被覆盖</strong>。</li>
<li>可读性较差，因为<strong>很难判断某个功能是从哪里导入</strong>的。</li>
</ul>
<h2 id="name-属性"><a class="header-anchor" href="#name-属性">¶</a>__name__属性</h2>
<h3 id="name-变量的作用"><a class="header-anchor" href="#name-变量的作用">¶</a><code>__name__</code> 变量的作用</h3>
<ul>
<li><code>__name__</code> 是一个内置变量，用来标识当前模块的名字。</li>
<li>如果一个模块（或脚本）是被直接运行的，那么 <code>__name__</code> 的值将被设置为 <code>'__main__'</code>。</li>
<li>如果一个模块是被另一个模块导入的，那么 <code>__name__</code> 的值将是该模块的名字。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;程序自身在运行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我来自另一模块&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<p><strong>1.直接运行这个脚本</strong>：</p>
<ul>
<li>当你直接运行包含这段代码的 Python 脚本时，<code>__name__</code> 的值将是 <code>'__main__'</code>。</li>
<li>因此，<code>if</code> 条件成立，输出会是 <code>'程序自身在运行'</code>。</li>
</ul>
<p><strong>2.作为模块被导入</strong>：</p>
<ul>
<li>如果这个脚本被另一个 Python 脚本导入作为模块，那么 <code>__name__</code> 的值将是该模块的名字（即文件名，不包括扩展名）。</li>
<li>在这种情况下，<code>if</code> 条件不成立，<code>else</code> 分支会执行，输出 <code>'我来自另一模块'</code>。</li>
</ul>
<h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3>
<p>该结构通常用于<strong>区分模块是直接运行还是被导入</strong>，从而<strong>控制模块的行为</strong>，确保<strong>只有在模块作为主程序运行时，特定的代码才会执行</strong>。</p>
<h1>异常处理</h1>
<p>异常捕捉可以使用 <strong>try/except</strong> 语句。</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/07/try_except.png" alt="img" style="zoom:50%;" />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>)) <span class="comment">#将字符串转换为整数，其实我们输入的内容都是字符串，例如7</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的不是数字，请再次尝试输入！&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="try-except…else"><a class="header-anchor" href="#try-except…else">¶</a>try/except…else</h2>
<p><strong>try/except</strong> 语句还有一个可选的 <strong>else</strong> 子句，如果使用这个子句，那么必须放在所有的 except 子句之后。</p>
<p>else 子句将在 try 子句没有发生任何异常的时候执行。</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/07/try_except_else.png" alt="img" style="zoom:50%;" />
<p>使用 else 子句比把所有的语句都放在 try 子句里面要好，这样可以避免一些意想不到，而 except 又无法捕获的异常。</p>
<h2 id="try-finally-语句"><a class="header-anchor" href="#try-finally-语句">¶</a>try-finally 语句</h2>
<p>try-finally 语句无论是否发生异常都将执行最后的代码。</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/07/try_except_else_finally.png" alt="img" style="zoom:50%;" />
<h2 id="抛出异常"><a class="header-anchor" href="#抛出异常">¶</a>抛出异常</h2>
<p>在 Python 中，<code>raise</code> 语句用于主动抛出一个指定的异常。</p>
<p>可以用来引发一个异常，从而控制程序的流程，或者在特定条件下终止程序的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_positive</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;这个数字不是正数！&quot;</span>) <span class="comment">#抛出异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    check_positive(-<span class="number">5</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e: <span class="comment">#捕捉异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;捕获到异常:&quot;</span>, e)</span><br></pre></td></tr></table></figure>
<p>有时，你可能想要捕获一个异常，然后再次抛出它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ZeroDivisionError(<span class="string">&quot;除数不能为零！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;捕获到异常:&quot;</span>, e)</span><br><span class="line">        <span class="comment"># 再次抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = divide(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;在外部捕获到的异常:&quot;</span>, e)</span><br></pre></td></tr></table></figure>
<p>在这个例子中，如果除数为零，程序会主动抛出 <code>ZeroDivisionError</code>。</p>
<p>这个异常会被 <code>try-except</code> 结构内部捕获，并且在捕获后，异常会被再次抛出，并在外部捕获到。</p>
<h1>Python面向对象</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span> <span class="comment">#两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>): <span class="comment">#虽然它以双下划线开头，但这并不意味着它是私有的，只是一个约定俗成的标识。</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line">s = student(<span class="string">&#x27;ken&#x27;</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">3</span>) <span class="comment">#类的实例化</span></span><br><span class="line">s.speak()</span><br><span class="line"></span><br><span class="line"><span class="comment">#多继承示例</span></span><br><span class="line"><span class="comment">#另一个类，多继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span>%(self.name,self.topic))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker,student):</span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">&quot;Tim&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure>
<p>在 Python中，self 是一个惯用的名称，用于表示<strong>当前调用者</strong>的类的实例（对象），代表当前对象的地址。</p>
<p>类有一个名为 <code>__</code>init<code>__</code>() 的特殊方法（<strong>构造方法</strong>），该方法在类实例化时会<strong>自动调用</strong>。</p>
<p>在类的内部，类方法必须包含参数 <strong>self</strong>，且为<strong>第一个参数</strong>，<strong>self</strong> 代表的是类的实例。</p>
<p><strong>self</strong> 的名字并不是规定死的，也可以使用 <strong>this</strong>，但是最好还是按照约定使用 <strong>self</strong>。</p>
<p><strong>两个下划线</strong>开头，声明该方法为<strong>私有方法</strong>，只能在类的内部调用 ，不能在类的外部调用。</p>
<h2 id="方法重写"><a class="header-anchor" href="#方法重写">¶</a>方法重写</h2>
<p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br><span class="line"><span class="built_in">super</span>(Child,c).myMethod() <span class="comment">#用子类对象调用父类已被覆盖的方法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记</title>
    <url>/2024/03/26/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>村雨的MySQL学习笔记</strong></p>
<p>前言：开学一个月以来，利用零散的时间总算学完了MySQL。当然，也只是初步地学习完一些基本知识，还需加以扩展和练习。</p>
<p>本笔记基于bilibili动力节点的教学视频，主讲人是杜老师，我很喜欢。</p>
<p>相关的学习资料：<a href="https://pan.baidu.com/s/1Mbs1UaRGjxidwvLyBIcXhg">https://pan.baidu.com/s/1Mbs1UaRGjxidwvLyBIcXhg</a><br>
提取码：1796</p>
<span id="more"></span>
<hr>
<h1>MySQL</h1>
<h2 id="1-数据库常见概念"><a class="header-anchor" href="#1-数据库常见概念">¶</a>1.数据库常见概念</h2>
<h3 id="1-1概念"><a class="header-anchor" href="#1-1概念">¶</a>1.1概念</h3>
<p><strong>数据库</strong>：DataBase，简称<strong>DB</strong>。按照一定格式存储数据的一些文件的组合。</p>
<p>顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p>
<p><strong>数据库管理系统</strong>：DataBaseManagement，简称<strong>DBMS</strong>。</p>
<p>数据库管理系统专门用来管理数据库中的数据，可以对数据进行<strong>增删改查。</strong></p>
<p><strong>常见的数据库管理系统</strong>：MySQL、Oracle、MS SqlServer、DB2、sybase等…</p>
<p><strong>SQL</strong>：结构化查询<strong>语言</strong></p>
<p>程序员需要学习SQL语句，学会编写SQL语句，然后DBMS负责执行SQL语句，最终来完成在数据库中对数据的增删改查操作。</p>
<p>SQL是一套标准，这个SQL在mysql中可以使用，同时在Oracle中也可以使用，还可以在DB2中使用。</p>
<p><strong>三者之间的关系？</strong><br>
DBMS—&gt;执行SQL —&gt;操作DB</p>
<h3 id="1-2-SQL语句分类"><a class="header-anchor" href="#1-2-SQL语句分类">¶</a>1.2 SQL语句分类</h3>
<p><strong>DQL</strong>：数据<strong>查询</strong>语言（凡是<strong>带有select关键字</strong>的都是查询语句）select…</p>
<p><strong>DML</strong>：数据<strong>操作</strong>语言（凡是对表当中的数据进行<strong>增删改</strong>的都是DML）</p>
<p>insert增   delete删    update改</p>
<p>主要是操作表中的数据。</p>
<p><strong>DDL</strong>：数据定义语言（凡是带有<strong>create、drop、alter</strong>的都是DDL）</p>
<p>DDL主要操作的是<strong>表的结构</strong>，不是表中的数据。</p>
<p>create：新建，等同于增   drop：删除   alter：修改<br>
（这个增删改和DML不同，这个主要是对<strong>表结构</strong>进行操作）</p>
<p><strong>TCL</strong>：事务控制语言</p>
<p>事务提交：commit;<br>
事务回滚：rollback;</p>
<p><strong>DCL</strong>：数据控制语言。</p>
<p>授权：grant  撤销权限：revoke</p>
<h3 id="1-3MYSQL中的数据类型"><a class="header-anchor" href="#1-3MYSQL中的数据类型">¶</a>1.3MYSQL中的数据类型</h3>
<p><strong>varchar(最长255)</strong>: <strong>可变长度的字符串</strong>，比较智能，节省空间。会根据实际的数据长度动态分配空间。</p>
<p>优点：节省空间<br>
​		缺点：需要动态分配空间，<strong>速度慢</strong>。</p>
<p><strong>char(最长255)</strong><br>
:<strong>定长字符串</strong>，不管实际的数据长度是多少，分配固定长度的空间去存储数据。</p>
<p>优点：不需要动态分配空间，<strong>速度快。</strong><br>
​		缺点：使用不当可能会导致空间的浪费。</p>
<p><strong>varchar和char应该怎么选择？</strong><br>
​</p>
<p>性别字段选什么？因为性别是固定长度的字符串，所以选择char。<br>
​</p>
<p>姓名字段选什么？每一个人的名字长度不同，所以选择varchar。</p>
<p><strong>int(最长11)</strong>：数字中的整数型。等同于java中的int。</p>
<p><strong>bigint</strong>：数字中的长整型。等同于java中的long。</p>
<p><strong>float</strong>：单精度浮点型数据</p>
<p><strong>double</strong>：双精度浮点型数据</p>
<hr>
<p><strong>date</strong>：短日期类型</p>
<p><strong>datetime</strong>：长日期类型</p>
<p>date是<strong>短日期</strong>，默认为：%Y%m%d（<strong>年月日</strong>），datetime为<strong>长日期</strong>，默认为：%Y%m%d %h:%i:%s（<strong>年月日时分秒</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">例如：<span class="type">date</span>：<span class="string">&#x27;2024-05-23&#x27;</span>    datetime：<span class="string">&#x27;2024-05-23 11:17:23&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> datediff(now(),datetime) <span class="keyword">from</span> t_lend <span class="keyword">where</span> <span class="keyword">no</span> <span class="operator">=</span> <span class="number">6</span>; <span class="comment">-- 获得目标时间与当前时间的差值，返回天数</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>clob</strong>：字符大对象，最多可以存储4G的字符串。（Character Large OBject）</p>
<p>比如：<strong>存储一篇文章</strong>，存储一个说明。<strong>超过255个字符的</strong>都要采用CLOB字符大对象来存储。</p>
<p><strong>blob</strong>：二进制大对象，专门用来<strong>存储图片、声音、视频等流媒体数据</strong>。（Binary Large OBject）</p>
<p>往BLOB类型的字段上插入数据的时候，例如插入一个图片、视频等等，需要使用IO流才行。</p>
<p>表中数据类型的使用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">t_movie 电影表（专门存储电影信息的表）</span><br><span class="line">编号<span class="keyword">no</span>(<span class="type">bigint</span>)   名字name(<span class="type">varchar</span>)   故事情节storyplot(<span class="type">clob</span>)	</span><br><span class="line">上映日期playtime(<span class="type">date</span>)   时长<span class="type">time</span>(<span class="keyword">double</span>)   海报image(<span class="type">blob</span>)</span><br><span class="line">类型type(<span class="type">char</span>)							</span><br></pre></td></tr></table></figure>
<h3 id="1-4SQL脚本的执行"><a class="header-anchor" href="#1-4SQL脚本的执行">¶</a>1.4SQL脚本的执行</h3>
<p>xxxx.sql这种文件被称为sql脚本文件，其中编写了大量的sql语句。</p>
<p>我们执行sql脚本文件的时候，该文件中所有的sql语句会全部执行。</p>
<p>批量执行SQL语句，可以使用sql脚本文件。</p>
<p>mysql&gt; <code>source</code> D:\course\03-MySQL\document\vip.sql</p>
<p>比如你在实际的工作中，第一天到公司，项目经理会给你一个xxx.sql文件，你执行这个脚本文件，你电脑上的数据库数据就有了。</p>
<h3 id="1-5数据库和表的导入导出"><a class="header-anchor" href="#1-5数据库和表的导入导出">¶</a>1.5数据库和表的导入导出</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据导出：</span></span><br><span class="line">	在windows的dos命令窗口中：</span><br><span class="line">		mysqldump bjpowernode<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456</span><br><span class="line">	可以导出指定的表吗？</span><br><span class="line">		mysqldump bjpowernode emp<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="comment">-- 导出emp表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据导入：</span></span><br><span class="line">	注意：需要先登录到mysql数据库服务器上。</span><br><span class="line">	创建数据库：<span class="keyword">create</span> database bjpowernode;</span><br><span class="line">	使用数据库：use bjpowernode;</span><br><span class="line">	然后初始化数据库：source D:\bjpowernode.sql (拉取)</span><br></pre></td></tr></table></figure>
<h3 id="1-6数据库常用命令"><a class="header-anchor" href="#1-6数据库常用命令">¶</a>1.6数据库常用命令</h3>
<p><strong>exit</strong> --退出数据库</p>
<p><strong>show databases;</strong> --查看mysql中有哪些数据库。(mysql自带四个数据库)</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_11-16-59.png" alt=""></p>
<p><strong>use test;</strong> --表示正在使用一个名字叫做test的数据库。</p>
<p><strong>create database 数据库名;</strong> --创建数据库</p>
<p><strong>show tables;</strong> --查看某个数据库下有哪些表。（mysql自带很多张表）</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_11-35-14.png" style="zoom: 50%;" />
<p><strong>select * from 表名;</strong> --查看表中所有数据</p>
<p><strong>desc 表名;</strong> -查看表的结构</p>
<p><strong>select version();</strong> --查看mysql数据库的版本号</p>
<p><strong>select database();</strong> --查看当前使用的是哪个数据库</p>
<p><strong>\c</strong> --用来<strong>终止</strong>一条命令的输入。</p>
<p><strong>注意</strong>：不区分大小写</p>
<hr>
<p><strong>SQL中的注释语句（三种）</strong></p>
<p>一、<strong>单行注释</strong><br>
采用 “–”(双减号)进行单行注释，注意：&quot;–&quot;与注释内容<strong>要用空格隔开</strong>才会生效</p>
<p>二、<strong>多行注释</strong><br>
采用 /<em>…</em>/进行多行注释</p>
<p>三，（单行）注释<br>
在mysql数据库中就可使用&quot;#&quot;进行单行注释。</p>
<p>&quot;#&quot;与注释内容之间有没有空格注释效果都会生效。</p>
<p>除此之外，数据库可视化管理工具SQLyog如果连接的是mysql数据库，而mysql数据库支持SQL，那么mysql就支持使用SQL标准注释和&quot;#“注释，那么在SQLyog中也就可以使用SQL标准注释和”#&quot;注释。</p>
<h3 id="1-7模式"><a class="header-anchor" href="#1-7模式">¶</a>1.7模式</h3>
<p><strong>一个数据库中可以建立多个模式</strong>，一个模式下通常包含多个表、视图和索引等数据库对象。</p>
<p>对于<strong>模式的理解</strong>：</p>
<p>例如你的数据库里面有很多的表。就以一个学校作为例子吧：</p>
<p>有很多表分别用于存储学生、课程、成绩、学分等信息。</p>
<p>还有很多表用于存储 老师、工资、奖金等信息。</p>
<p>还有很多表用于存储学校的固定资产、流动资产、财务相关信息。</p>
<p>如果这么多的表，都混杂在一起。管理起来非常麻烦。</p>
<p>通过 create schema ， 划分区域，</p>
<p>把学生的，创建一个 schema 叫 <strong>Student</strong></p>
<p>教师的，创建一个 schema 叫 <strong>Teacher</strong></p>
<p>学校财务的，创建一个 schema 叫 <strong>School</strong></p>
<p>这样，对于专门负责学生信息管理的，就只负责 Student 这个 schema，表名全部是 <strong>Student.具体表名</strong>。</p>
<p>对于，负责教师系统开发的人来说，程序里面的表名，都是<strong>Teacher.具体表名</strong>。</p>
<p>学校财务的也是一样，查询的时候，是：SELECT * FROM <strong>School.具体表名</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.定义模式</span></span><br><span class="line"><span class="keyword">create</span> schema <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">authorization</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">-- 如果没有指定模式名，默认为用户名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.删除模式</span></span><br><span class="line"><span class="keyword">drop</span> schema <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> cascade(级联)<span class="operator">/</span>restrict(限制);</span><br><span class="line"><span class="comment">-- 使用级联：表示在删除模式的同时把该模式下所有的数据库对象都删除</span></span><br><span class="line"><span class="comment">-- 使用限制：只有在该模式下没有任何数据库对象时才能执行删除语句</span></span><br><span class="line"><span class="comment">-- 后续的删除表同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.在某个模式下创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span>.<span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(</span><br><span class="line">	<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [列级完整约束性条件],</span><br><span class="line">	<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [列级完整约束性条件],</span><br><span class="line">	...</span><br><span class="line">	[表级完整约束性条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>当我们用Create User创建数据库用户时，我们可以为该用户指定一个已经存在的Schema作为默认Schema，</p>
<p>如果我们不指定，则该用户所默认的Schema即为dbo模式。</p>
<h2 id="2-表及增、删、改"><a class="header-anchor" href="#2-表及增、删、改">¶</a>2.表及增、删、改</h2>
<p>数据库中最基本的单元是表：<strong>table</strong></p>
<p>任何一张表都有行和列</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_11-30-14.png" alt=""></p>
<p>行（row）：数据\记录</p>
<p>列（column）：字段</p>
<hr>
<p>自己导入的<strong>bjpowernode表</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-10-05.png" style="zoom:67%;" />
<p><strong>emp员工表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-34-29.png" alt=""></p>
<p>EMPNO：员工编号   ENAME：姓名   JOB：岗位   MGR：上级领导编号</p>
<p>HIREDATE：入职日期   SAL：工资   COMM：津贴   DEPTNO：部门编号</p>
<p><strong>dept部门表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-16.png" alt=""></p>
<p>DEPTNO：部门编号   DNAME：部门名称   LOC：部门地点</p>
<p><strong>salgrade工资等级表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-52.png" alt=""></p>
<p>GRADE：工资等级   LOSAL：最低工资   HISAL：最高工资</p>
<hr>
<p>以上三个表的结构：</p>
<p><strong>emp员工表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-52-40.png" alt=""></p>
<p><strong>dept部门表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-53-38.png" alt=""></p>
<p><strong>salgrade工资表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-54-21.png" alt=""></p>
<hr>
<p>给查询的<strong>列起别名</strong>：<strong>select 原名 as 别名 from dept;</strong> （as关键字也可以省略，用空格代替）</p>
<p>例如将dname改为supername</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-32-30.png" alt=""></p>
<p><strong>注意</strong>：只是将查询后表的结果修改，原表不会发生实际变化。<strong>select永远不能进行实质的修改操作</strong>。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-37-26.png" alt=""></p>
<p>若<strong>别名中含有空格或者别名是中文</strong>，会编译错误。</p>
<p>解决方法：将别名用<strong>单引号</strong>括住（数据库标准），也可以使用双引号（在mysql中可以使用）。</p>
<hr>
<p><strong>字段参与数学运算</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-46-26.png" style="zoom:50%;" />
<p>将工资乘12：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-47-07.png" style="zoom:50%;" />
<hr>
<h3 id="2-1创建一个表create"><a class="header-anchor" href="#2-1创建一个表create">¶</a>2.1创建一个表create</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 学号、姓名、年龄、性别、邮箱地址</span></span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">		<span class="keyword">no</span> <span class="type">int</span>,</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">		sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">		age <span class="type">int</span>(<span class="number">3</span>),</span><br><span class="line">		email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">	);</span><br><span class="line"><span class="comment">-- 完整性约束在第八部分具体解释</span></span><br></pre></td></tr></table></figure>
<p>（<strong>以下内容了解即可</strong>）</p>
<p>快速创建表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<p>将一个查询结果当做一张新建的表，可以实现表的快速复制。</p>
<p>将查询结果直接插入到一张表中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp2 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<h3 id="2-2删除一个表drop"><a class="header-anchor" href="#2-2删除一个表drop">¶</a>2.2删除一个表drop</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 当这张表不存在的时候会报错！</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果这张表存在的话，删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student; <span class="comment">-- 即使表不存在也不会报错</span></span><br></pre></td></tr></table></figure>
<p>对表结构的修改需要使用：<strong>alter</strong>-属于DDL语句</p>
<p><strong>desc</strong> t_student    查看表结构</p>
<h3 id="2-3插入数据insert"><a class="header-anchor" href="#2-3插入数据insert">¶</a>2.3插入数据insert</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>); <span class="comment">-- 字段名和值要对应</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>,name,sex,age,email)</span><br><span class="line">	<span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(email,name,sex,age,<span class="keyword">no</span>) <span class="comment">-- 可以乱序,但要一一对应</span></span><br><span class="line">	<span class="keyword">values</span>(<span class="string">&#x27;lisi@123.com&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>) <span class="keyword">values</span>(<span class="number">3</span>); <span class="comment">-- 只插入一个字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;lisi@123.com&#x27;</span>); <span class="comment">-- 省略字段名，但是值要全部写出来</span></span><br></pre></td></tr></table></figure>
<p>insert语句一旦执行成功了，必然会多一条记录。没有给其它字段指定值的话，<strong>默认值是NULL</strong>。</p>
<p><strong>一次插入多条数据</strong></p>
<p>insert into t_user(字段名1,字段名2) values(),(),(),();</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user( <span class="comment">-- 建一个新表t_user</span></span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    birth <span class="type">date</span>, <span class="comment">-- 日期类型，默认：%Y%m%d（年月日）   日期格式：1980-10-11</span></span><br><span class="line">    create_time datetime</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,birth,create_time) <span class="keyword">values</span> <span class="comment">-- 插入三条数据</span></span><br><span class="line">		(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;1980-10-11&#x27;</span>,now()), </span><br><span class="line">		(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;1981-10-11&#x27;</span>,now()),</span><br><span class="line">		(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;1982-10-11&#x27;</span>,now());</span><br></pre></td></tr></table></figure>
<p>数据库命名规范：所有的标识符都用小写字母，单词与单词之间用下划线衔接。</p>
<p>date是<strong>短日期</strong>，默认为：%Y%m%d（<strong>年月日</strong>），datetime为<strong>长日期</strong>，默认为：%Y%m%d %h:%i:%s（<strong>年月日时分秒</strong>）</p>
<h3 id="2-4修改数据update"><a class="header-anchor" href="#2-4修改数据update">¶</a>2.4修改数据update</h3>
<p>update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3… where 条件;</p>
<p>若没有<strong>where条件限制</strong>，会导致对应字段的数据全部更新。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span>, birth <span class="operator">=</span> <span class="string">&#x27;2000-10-11&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span>, birth <span class="operator">=</span> <span class="string">&#x27;2000-10-11&#x27;</span>, create_time <span class="operator">=</span> now() <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-5删除数据delete"><a class="header-anchor" href="#2-5删除数据delete">¶</a>2.5删除数据delete</h3>
<p><strong>delete</strong>语句删除数据的原理：</p>
<p>表中的数据被删除了，但是这个数据在硬盘上<strong>真实的存储空间不会被释放。</strong></p>
<p>缺点是：删除效率比较低。</p>
<p>优点是：<strong>支持回滚rollback</strong>，后悔了可以恢复数据。</p>
<p><strong>truncate</strong>语句删除数据的原理：</p>
<p>这种删除效率比较高，表被一次截断，物理删除。</p>
<p>缺点：不支持回滚rollback。</p>
<p>优点：快速删除。</p>
<h4 id="2-5-1delete"><a class="header-anchor" href="#2-5-1delete">¶</a>2.5.1delete</h4>
<p>delete from 表名 where 条件;</p>
<p>没有条件，整张表的数据会全部删除！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-2truncate"><a class="header-anchor" href="#2-5-2truncate">¶</a>2.5.2truncate</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp2; <span class="comment">-- （属于DDL操作。）</span></span><br></pre></td></tr></table></figure>
<h3 id="2-6修改基本表"><a class="header-anchor" href="#2-6修改基本表">¶</a>2.6修改基本表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.增加一列，其数据类型为字符型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Student <span class="keyword">add</span> Semail <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line"><span class="comment">-- 2.修改某个字段的数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Student <span class="keyword">alter</span> <span class="keyword">column</span> Sbirthdate type <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 3.为某个字段增加唯一性约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Course <span class="keyword">add</span> <span class="keyword">unique</span>(Cname);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> <span class="comment">-- 删除某一列</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> <span class="comment">-- 删除指定的完整性约束</span></span><br><span class="line">rename <span class="keyword">column</span> <span class="comment">-- 修改字段名</span></span><br></pre></td></tr></table></figure>
<h2 id="3-表查询"><a class="header-anchor" href="#3-表查询">¶</a>3.表查询</h2>
<h3 id="3-1简单查询"><a class="header-anchor" href="#3-1简单查询">¶</a>3.1简单查询</h3>
<p><strong>select  字段  from  表名;</strong></p>
<p>例如查询部门名称：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-02-55.png" alt=""></p>
<p><strong>查询多个字段</strong>：<strong>select  字段1,字段2，字段3…  from  表名;</strong></p>
<p>例如查询部门编号和部门名称：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-07-10.png" alt=""></p>
<p><strong>查询所有字段</strong>：<strong>select * from 表名;</strong>（效率低，可读性差，实际开发中不建议）</p>
<hr>
<h3 id="3-2条件查询"><a class="header-anchor" href="#3-2条件查询">¶</a>3.2条件查询</h3>
<p><strong>where</strong> 后接条件语句</p>
<p><strong>= 等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资等于800的员工姓名和编号：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"><span class="comment">-- 查询SMITH的编号和薪资：</span></span><br><span class="line">		<span class="keyword">select</span> empno,sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>字符串使用单引号</span><br></pre></td></tr></table></figure>
<p><strong>&lt;&gt;或!= 不等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资不等于800的员工姓名和编号：</span></span><br><span class="line">	<span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">!=</span> <span class="number">800</span>;</span><br><span class="line">	<span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;&gt;</span> <span class="number">800</span>; <span class="operator">/</span><span class="operator">/</span> 小于号和大于号组成的不等号</span><br></pre></td></tr></table></figure>
<p><strong>&lt; 小于</strong>  <strong>&lt;= 小于等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资小于等于3000的员工姓名和编号：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>
<p>**&gt; 大于 ** <strong>&gt;= 大于等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资大于等于3000的员工姓名和编号：</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>
<p><strong>between … and …  在两个值之间, 等同于 &gt;= and &lt;=</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资在2450和3000之间的员工信息：（包括2450和3000）</span></span><br><span class="line"><span class="comment">-- 第一种方式：&gt;= and &lt;=</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;=</span> <span class="number">2450</span> <span class="keyword">and</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br><span class="line"><span class="comment">-- 第二种方式：between … and …	</span></span><br><span class="line">        <span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">2450</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br><span class="line">        （必须遵循左小右大）</span><br></pre></td></tr></table></figure>
<p><strong>is null 为空（is not null 不为空）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询哪些员工的津贴/补助为null：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal,comm <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 查询哪些员工的津贴/补助不为null：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal,comm <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line">		（使用 <span class="keyword">is</span> ，不可以使用 ... <span class="operator">=</span> <span class="keyword">null</span>）</span><br></pre></td></tr></table></figure>
<p><strong>and 并且  、or 或者</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资大于2500，并且部门编号为10或20的员工：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">2500</span> <span class="keyword">and</span> (deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> deptno <span class="operator">=</span> <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- and和or同时出现，and优先级较高。如果想让or先执行，需要加“小括号”,以后在开发中，如果不确定优先级，就加小括号就行了。</span></span><br></pre></td></tr></table></figure>
<p><strong>in 包含，相当于 or ; not in 不包含</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询工作岗位是MANAGER或者是SALESMAN的员工:</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);<span class="operator">/</span><span class="operator">/</span>依旧是或者的意思</span><br><span class="line"><span class="comment">-- 查询工作岗位不是MANAGER或者不是SALESMAN的员工:</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>not 取非，主要用在 is 或 in 中</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-3模糊查询"><a class="header-anchor" href="#3-3模糊查询">¶</a>3.3模糊查询</h3>
<p><strong>like</strong>;<strong>not like</strong></p>
<p>模糊查询支持**%或下划线**匹配</p>
<p>%匹配任意<strong>多个</strong>字符</p>
<p>下划线：任意<strong>一个</strong>字符。</p>
<p>（%是一个特殊符号，_ 也是一个特殊符号）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">找出名字中含有O的：</span><br><span class="line">	<span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%O%&#x27;</span>;</span><br><span class="line">找出名字中第二个字母是A的：</span><br><span class="line">    <span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br><span class="line">找出名字中以K开始的：</span><br><span class="line">    <span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;K%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">找出名字中有“_”的：</span><br><span class="line">	<span class="keyword">select</span> name <span class="keyword">from</span> t_student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%_%&#x27;</span>; <span class="comment">-- 这样不行</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> name <span class="keyword">from</span> t_student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>; <span class="comment">-- \转义字符，右下斜杠</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4排序"><a class="header-anchor" href="#3-4排序">¶</a>3.4排序</h3>
<p><strong>order by</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工薪资并排序：</span></span><br><span class="line"><span class="keyword">select</span>  ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal; <span class="operator">/</span><span class="operator">/</span> 默认是升序！！！</span><br></pre></td></tr></table></figure>
<p>指定降序：<strong>desc</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p>指定升序：<strong>asc</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		ename,sal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		sal <span class="keyword">asc</span>, ename <span class="keyword">asc</span>; <span class="comment">-- sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。</span></span><br></pre></td></tr></table></figure>
<p>了解：<strong>根据字段的位置</strong>也可以进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>; <span class="comment">-- 这里的2表示第二列，在bjpowernode表中指sal</span></span><br></pre></td></tr></table></figure>
<p>不建议在开发中这样使用，<strong>不健壮</strong>，列的顺序可能会被修改。</p>
<p>综合使用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工薪资在1250到3000并按照薪资降序排列：</span></span><br><span class="line"> <span class="keyword">select</span> </span><br><span class="line">    ename,sal</span><br><span class="line"> <span class="keyword">from</span> </span><br><span class="line">    emp</span><br><span class="line"> <span class="keyword">where</span> </span><br><span class="line">    sal <span class="keyword">between</span> <span class="number">1250</span> <span class="keyword">and</span> <span class="number">3000</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-5去重distinct"><a class="header-anchor" href="#3-5去重distinct">¶</a>3.5去重distinct</h3>
<p>将查询结果去重，但原表的数据不会被改变。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将部门的工作进行去重：</span></span><br><span class="line">       <span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：distinct关键字只能出现在字段的最前面</span></span><br><span class="line"><span class="comment">-- 例如将部门工作和部门编号进行联合去重：</span></span><br><span class="line">       <span class="keyword">select</span> <span class="keyword">distinct</span> job,deptno <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 允许使用分组函数，例如统计工作岗位的数量：</span></span><br><span class="line">       <span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> job) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<h3 id="3-6分页"><a class="header-anchor" href="#3-6分页">¶</a>3.6分页</h3>
<p><strong>limit</strong>的作用：将查询<strong>结果集</strong>的一部分取出来。通常使用在分页查询中。</p>
<p>完整用法：limit startIndex, length		startIndex是<strong>起始下标</strong>，length是<strong>取出内容的长度</strong>。起始<strong>下标从0开始</strong>。</p>
<p>默认用法：limit 5; 这是取前5.</p>
<p><strong>按照薪资降序，取出工资排名在前5名的员工</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">select</span> </span><br><span class="line">		ename,sal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">		sal <span class="keyword">desc</span></span><br><span class="line">	limit <span class="number">5</span>; <span class="comment">-- 取前5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在mysql中limit在order by之后执行！！！！！！</span></span><br></pre></td></tr></table></figure>
<p><strong>取出工资排名在[3-5]名的员工：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		ename,sal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		sal <span class="keyword">desc</span></span><br><span class="line">	limit</span><br><span class="line">		<span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 0,1,2,3,4</span></span><br><span class="line"><span class="comment">-- 2表示起始位置从下标2开始，就是第三条记录。</span></span><br><span class="line"><span class="comment">-- 3表示取出内容的长度。</span></span><br></pre></td></tr></table></figure>
<p>每页显示3条记录：</p>
<p>第1页：limit 0,3		[0 1 2]</p>
<p>第2页：limit 3,3		[3 4 5]</p>
<p>第3页：limit 6,3		[6 7 8]</p>
<p>每页显示pageSize条记录</p>
<p>第pageNo页：limit (pageNo - 1) * pageSize  , pageSize</p>
<h2 id="4-函数"><a class="header-anchor" href="#4-函数">¶</a>4.函数</h2>
<h3 id="4-1单行处理函数"><a class="header-anchor" href="#4-1单行处理函数">¶</a>4.1单行处理函数</h3>
<p>单行处理函数的特点：<strong>一个输入对应一个输出。</strong></p>
<p>和单行处理函数相对的是：多行处理函数。（特点：<strong>多个输入对应一个输出。</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- lower 转换为小写：</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">lower</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp; <span class="comment">-- as---&gt;起别名</span></span><br><span class="line"><span class="comment">-- upper 转换为大写：</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">upper</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- substr 取子串 substr(被截取的字符串, 起始下标从1开始,截取的长度):</span></span><br><span class="line">	<span class="keyword">select</span> substr(ename, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 注意：起始下标从1开始，没有0。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出名字中第一个字母是A的员工:</span></span><br><span class="line">			第一种方式：模糊查询</span><br><span class="line">				<span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;A%&#x27;</span>; <span class="comment">-- 使用like</span></span><br><span class="line">			第二种方式：substr函数</span><br><span class="line">				<span class="keyword">select</span> </span><br><span class="line">					ename </span><br><span class="line">				<span class="keyword">from</span> </span><br><span class="line">					emp </span><br><span class="line">				<span class="keyword">where</span> </span><br><span class="line">					substr(ename,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- concat函数进行字符串的拼接：</span></span><br><span class="line">	<span class="keyword">select</span> concat(empno,ename) <span class="keyword">from</span> emp;<span class="operator">/</span><span class="operator">/</span>将员工编号和员工姓名拼接</span><br><span class="line"><span class="comment">-- length 取长度:</span></span><br><span class="line">	<span class="keyword">select</span> length(ename) <span class="keyword">as</span> ename_length <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- trim 去空格:</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;  KING&#x27;</span>; <span class="comment">-- 字符串中有空格，查不到</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span><span class="built_in">trim</span>(<span class="string">&#x27;  KING&#x27;</span>); <span class="comment">-- 使用trim函数，自动去掉空格</span></span><br><span class="line"><span class="comment">-- str_to_date 将字符串转换成日期</span></span><br><span class="line"><span class="comment">-- date_format 格式化日期</span></span><br><span class="line"><span class="comment">-- format 设置千分位</span></span><br><span class="line"><span class="comment">-- round 四舍五入：</span></span><br><span class="line">		<span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名;</span><br><span class="line">		<span class="keyword">select</span> ename <span class="keyword">from</span> emp;</span><br><span class="line">		<span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">from</span> emp; <span class="comment">-- select后面直接跟“字面量/字面值”，会将所有行都变成该值</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">1</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留1个小数</span></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留2个小数</span></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留到整数</span></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">-1</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留到十位</span></span><br><span class="line"><span class="comment">-- rand() 生成随机数：</span></span><br><span class="line">		<span class="keyword">select</span> round(rand()<span class="operator">*</span><span class="number">100</span>,<span class="number">0</span>) <span class="keyword">from</span> emp; <span class="operator">/</span><span class="operator">/</span> <span class="number">100</span>以内的随机数</span><br><span class="line"><span class="comment">-- ifnull 可以将 null 转换成一个具体值：</span></span><br><span class="line">		<span class="comment">-- ifnull是空处理函数。专门处理空的。</span></span><br><span class="line">		<span class="comment">-- 注意：在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL</span></span><br><span class="line">		<span class="comment">--       NULL和另一个值的比较运算的结果为UNKNOWN</span></span><br><span class="line">		<span class="comment">--       在查询语句中，只有使where子句和having短语中的条件为true的元组才会被选中作为输出结果</span></span><br><span class="line">		<span class="keyword">select</span> ename, sal <span class="operator">+</span> comm <span class="keyword">as</span> salcomm <span class="keyword">from</span> emp; <span class="comment">-- comm是补助，部分员工补助为null，和薪资相加还会显示为null</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">select</span> ename, (sal <span class="operator">+</span> ifnull(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span> <span class="keyword">as</span> salcomm <span class="keyword">from</span> emp; <span class="comment">-- 算年薪，判断comm是否为null，若是转化为0</span></span><br><span class="line"></span><br><span class="line">case...when...then...when...then...else...end; 多层命令</span><br><span class="line"><span class="comment">-- 当员工的工作岗位为MANAGER时，薪资上涨10%，为SALESMAN时，薪资上涨50%，其他员工正常：</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">           ename,</span><br><span class="line">           job,</span><br><span class="line">           sal <span class="keyword">as</span> oldsal,</span><br><span class="line">           (<span class="keyword">case</span> job <span class="keyword">when</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">then</span> sal<span class="operator">*</span><span class="number">1.1</span> <span class="keyword">when</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">then</span> sal<span class="operator">*</span><span class="number">1.5</span> <span class="keyword">else</span> sal <span class="keyword">end</span>) <span class="keyword">as</span> newsal</span><br><span class="line">         <span class="keyword">from</span></span><br><span class="line">           emp;</span><br></pre></td></tr></table></figure>
<h3 id="4-2分组函数"><a class="header-anchor" href="#4-2分组函数">¶</a>4.2分组函数</h3>
<p>多行处理函数的特点：输入多行，最终输出一行。</p>
<p><strong>count</strong>   计数</p>
<p><strong>sum</strong>   求和</p>
<p><strong>avg</strong>   平均值</p>
<p><strong>max</strong>   最大值</p>
<p><strong>min</strong>   最小值</p>
<p>注意：分组函数在使用的时候必须先进行分组，然后才能使用。<strong>如果没有对数据进行分组，整张表将默认为一组</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出最高工资：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 找出最低工资：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计算工资和：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计算平均工资：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计算员工数量：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">count</span>(ename) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的问题</strong>：</p>
<p>第一点：分组函数<strong>自动忽略NULL</strong>，你不需要提前对NULL进行处理。</p>
<p>第二点：分组函数中count(<code>*</code>)和count(具体字段)有什么区别？</p>
<p><strong>count(具体字段)</strong>：表示统计<strong>该字段下</strong>所有<strong>不为NULL的元素的总数。</strong></p>
<p><strong>count(*)</strong>：统计表中<strong>所有字段的总行数</strong>。（只要有一行数据count则++）</p>
<p>因为<strong>任意一行记录都不可能全为NULL</strong>，一行数据中有一列不为NULL，那么这行数据就是有效的。</p>
<p>第三点：分组函数<strong>不能够直接使用在where子句中</strong>。</p>
<h3 id="4-3group-by"><a class="header-anchor" href="#4-3group-by">¶</a>4.3group by</h3>
<p><strong>找出每个工作岗位的工资和</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实现思路：先按照工作岗位分组，然后对每个组的工资求和。</span></span><br><span class="line">		<span class="keyword">select</span> </span><br><span class="line">			job,<span class="built_in">sum</span>(sal)</span><br><span class="line">		<span class="keyword">from</span></span><br><span class="line">		    emp</span><br><span class="line">		<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">			job;</span><br><span class="line"><span class="comment">-- 执行顺序：</span></span><br><span class="line"><span class="comment">-- 先从emp表中查询数据。根据job字段进行分组。然后对每一组的数据进行sum(sal)</span></span><br></pre></td></tr></table></figure>
<p>在一条select语句当中，如果有group by语句的话，select后面只能跟：<strong>参加分组的字段</strong>，以及<strong>分组函数</strong>。其它的一律不能跟。</p>
<p><strong>找出每个部门的最高薪资</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实现思路：先按照部门编号分组，然后求每一组工资的最大值。</span></span><br><span class="line">	    <span class="keyword">select</span> </span><br><span class="line">	        deptno,<span class="built_in">max</span>(sal) </span><br><span class="line">	    <span class="keyword">from</span> </span><br><span class="line">	        emp </span><br><span class="line">	    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">	        deptno;</span><br></pre></td></tr></table></figure>
<h3 id="4-4联合分组"><a class="header-anchor" href="#4-4联合分组">¶</a>4.4联合分组</h3>
<p><strong>找出“每个部门，不同工作岗位”的最高薪资</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 技巧：把两个字段联合成1个字段看。（两个字段联合分组）</span></span><br><span class="line">		<span class="keyword">select</span> </span><br><span class="line">			deptno, job, <span class="built_in">max</span>(sal)</span><br><span class="line">		<span class="keyword">from</span></span><br><span class="line">			emp</span><br><span class="line">		<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">			deptno, job</span><br><span class="line">		<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		    deptno <span class="keyword">asc</span>; <span class="comment">-- 按照部门编号升序排列</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5having"><a class="header-anchor" href="#4-5having">¶</a>4.5having</h3>
<p>使用having可以对分完组之后的数据<strong>进一步过滤</strong>。</p>
<p>having不能单独使用，having不能代替where，having必须和group by<strong>联合使用</strong>。</p>
<p><strong>找出最高薪资大于3000的部门</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deptno,<span class="built_in">max</span>(sal) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    emp </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    sal <span class="operator">&gt;</span> <span class="number">3000</span> <span class="comment">-- where子句中可以使用字段，但不可使用分组函数</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deptno;</span><br></pre></td></tr></table></figure>
<p><strong>找出平均薪资高于2500的部门</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deptno,<span class="built_in">avg</span>(sal) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deptno</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    <span class="built_in">avg</span>(sal) <span class="operator">&gt;</span> <span class="number">2500</span>; <span class="comment">-- 本例中就不可以使用where，因为where子句中无法使用分组函数avg()</span></span><br></pre></td></tr></table></figure>
<p>where和having，优先选择where，where实在完成不了，再选择having。</p>
<h3 id="4-6总结sql执行顺序"><a class="header-anchor" href="#4-6总结sql执行顺序">¶</a>4.6总结sql执行顺序</h3>
<p>语法顺序：select  --&gt; from --&gt; where --&gt; group by --&gt; having --&gt; order by</p>
<p>执行顺序：from --&gt; where --&gt; group by --&gt; having --&gt; select --&gt; order by</p>
<ol>
<li>从某张表中查询数据。</li>
<li>先经过where条件筛选出有价值的数据。</li>
<li>对这些有价值的数据进行分组。</li>
<li>分组之后可以使用having继续筛选。</li>
<li>select查询出来。</li>
<li>最后进行排序。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除MANAGER岗位之外，</span></span><br><span class="line"><span class="comment">-- 要求按照平均薪资降序排：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		job, <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">		job <span class="operator">&lt;&gt;</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line">	<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">		job</span><br><span class="line">	<span class="keyword">having</span></span><br><span class="line">		<span class="built_in">avg</span>(sal) <span class="operator">&gt;</span> <span class="number">1500</span></span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		avgsal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="5-连接查询"><a class="header-anchor" href="#5-连接查询">¶</a>5.连接查询</h2>
<p>从一张表中单独查询，称为<strong>单表查询</strong>。</p>
<p>将emp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。<strong>两张表都有相同字段</strong>deptno部门编号。</p>
<p>这种跨表查询，多张表联合起来查询数据，被称为<strong>连接查询</strong>。</p>
<p>当两张表进行连接查询，<strong>没有任何条件限制</strong>的时候，最终查询结果条数，是两张表条数的乘积，这种现象被称为：<strong>笛卡尔积现象</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    ename,dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    emp, dept; <span class="comment">-- 两张表的每行数据将进行对乘。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-1内连接之等值连接"><a class="header-anchor" href="#5-1内连接之等值连接">¶</a>5.1内连接之等值连接</h3>
<p><strong>查询每个员工所在部门名称，显示员工名和部门名</strong>：</p>
<p>将emp e表和dept d表进行连接。条件是：e.deptno = d.deptno  （部门编号相同）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL92语法：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		e.ename,d.dname</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp e, dept d   <span class="comment">-- 使用空格起别名</span></span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">		e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- sql92的缺点：结构不清晰，表的连接条件和后期进一步筛选的条件，都放到了where后面。</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">-- SQL99语法：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		e.ename,d.dname</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp e</span><br><span class="line">	<span class="keyword">inner</span> <span class="keyword">join</span>   <span class="comment">-- inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）</span></span><br><span class="line">		dept d</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		e.deptno <span class="operator">=</span> d.deptno; <span class="comment">-- 条件是等量关系，所以被称为等值连接。</span></span><br><span class="line"><span class="comment">-- sql99优点：表连接的条件是独立的，连接之后，如果还需要进一步筛选，可以往后继续添加where。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2内连接之非等值连接"><a class="header-anchor" href="#5-2内连接之非等值连接">¶</a>5.2内连接之非等值连接</h3>
<p><strong>找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; <span class="comment">-- 条件不是等量关系，称为非等值连接。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-3内连接之自连接"><a class="header-anchor" href="#5-3内连接之自连接">¶</a>5.3内连接之自连接</h3>
<p><strong>查询所有员工的上级领导，要求显示员工名和对应的领导名</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 技巧：一张表看成两张表。</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a.mgr <span class="operator">=</span> b.empno; <span class="comment">-- 员工的领导编号 = 领导的员工编号</span></span><br></pre></td></tr></table></figure>
<p>缺点：公司中最高领导KING没有上级，内连接无法显示NULL，需要使用外连接。</p>
<h3 id="5-4外连接"><a class="header-anchor" href="#5-4外连接">¶</a>5.4外连接</h3>
<p>内连接：（A和B连接，AB两张表<strong>没有主次关系是平等的</strong>）</p>
<p>内连接的特点：将能够匹配上ON后面的条件的数据查询出来。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- outer是可以省略的，带着可读性强。</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
<p>right的含义：表示将join关键字右边的这张表<strong>看成主表</strong>，能够<strong>将这张表的数据全部查询出来</strong>，捎带着关联查询左边的表。</p>
<p>在外连接中，两张表连接时<strong>产生了主次关系</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	dept d </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="comment">-- 将join左边的表看成主表</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
<p>带有right的是右外连接，又叫做<strong>右连接</strong>。</p>
<p>带有left的是左外连接，又叫做<strong>左连接</strong>。</p>
<p>任何一个右连接都有左连接的写法，， 任何一个左连接都有右连接的写法。</p>
<p><strong>案例：查询所有员工的上级领导，要求显示员工名和对应的领导名</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="comment">-- 将join左边的员工表看成主表，把所有员工都查出来，即使KING的上级为NULL</span></span><br><span class="line">	emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a.mgr <span class="operator">=</span> b.empno; <span class="comment">-- 员工的领导编号 = 领导的员工编号</span></span><br></pre></td></tr></table></figure>
<p>使用外连接可以显示公司最高领导KING的上级为NULL。</p>
<h3 id="5-5多表连接"><a class="header-anchor" href="#5-5多表连接">¶</a>5.5多表连接</h3>
<p><strong>三张表，四张表怎么连接？</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		a</span><br><span class="line">	<span class="keyword">join</span></span><br><span class="line">		b</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		a和b的连接条件</span><br><span class="line">	<span class="keyword">join</span></span><br><span class="line">		c</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		a和c的连接条件</span><br><span class="line">     <span class="keyword">join</span></span><br><span class="line">		d</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		a和d的连接条件</span><br></pre></td></tr></table></figure>
<p><strong>找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,e.sal,d.dname,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure>
<p><strong>找出每个员工的部门名称以及工资等级，还有上级领导，要求显示员工名、领导名、部门名、薪资、薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,e.sal,d.dname,s.grade,l.ename</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="comment">-- 左外连接，为了显示KING的上级NULL</span></span><br><span class="line">	emp l</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.mgr <span class="operator">=</span> l.empno;</span><br></pre></td></tr></table></figure>
<h2 id="6-子查询"><a class="header-anchor" href="#6-子查询">¶</a>6.子查询</h2>
<p>select语句中<strong>嵌套</strong>select语句，被嵌套的select语句称为子查询。</p>
<p>子查询可以出现在 select后面，from 后面，where 后面。</p>
<h3 id="6-1where子句中的子查询"><a class="header-anchor" href="#6-1where子句中的子查询">¶</a>6.1where子句中的子查询</h3>
<p><strong>找出比最低工资高的员工姓名和工资</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">   ename,sal </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">   emp </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">   sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure>
<h3 id="6-2from子句中的子查询"><a class="header-anchor" href="#6-2from子句中的子查询">¶</a>6.2from子句中的子查询</h3>
<p>from后面的子查询，可以将子查询的查询结果当做一张临时表。（技巧）</p>
<p><strong>找出每个岗位的平均工资的薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	t.<span class="operator">*</span>, s.grade <span class="comment">-- 查询t表的全部字段和s表的grade字段</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> job,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job) t <span class="comment">-- 将括号中的sql查询结果看作是t表</span></span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; <span class="comment">-- t表和s表的连接条件 </span></span><br></pre></td></tr></table></figure>
<h3 id="6-3带有exists谓词的子查询"><a class="header-anchor" href="#6-3带有exists谓词的子查询">¶</a>6.3带有exists谓词的子查询</h3>
<p>这篇文章讲的就很好：</p>
<p><a href="https://blog.csdn.net/weixin_43987915/article/details/113761623?spm=1001.2014.3001.5506">最明白的 not exists 双层嵌套讲解 SQL 查询语句_not exist 嵌套-CSDN博客</a></p>
<h2 id="7-union的用法"><a class="header-anchor" href="#7-union的用法">¶</a>7.union的用法</h2>
<p>union的作用是：<strong>合并</strong>查询结果集，完成<strong>拼接</strong>。</p>
<p><strong>查询工作岗位是MANAGER和SALESMAN的员工</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="comment">-- 第一个sql语句没有分号</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>; <span class="comment">-- 最后一个sql语句有分号</span></span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-06-04_10-35-19.png" alt=""></p>
<p>优点：对于表连接，每连接一次新表，都要进行笛卡尔积匹配，而且匹配次数会成倍的翻。</p>
<p><strong>union可以减少匹配次数，效率更高。</strong></p>
<p>例如：a表 连接 b表 连接 c表</p>
<p>a表-10条记录   b表-10条记录   c表-10条记录</p>
<p>表连接的匹配次数：10<code>*</code>10<code>*</code>10=1000次</p>
<p>union的匹配次数：a表连接b表—&gt;10<code>*</code>10=100次   a表连接c表—&gt;10<code>*</code>10=100次</p>
<p>​                                 100+100=200次</p>
<p><strong>使用union时的注意事项</strong>：</p>
<p>合并查询结果集时，两个结果集的字段列数要相同，此外，字段的数据类型也要一致（mysql中不报错，oracle中会报错）。</p>
<p>使用union将多个查询结果合并起来时，<strong>系统会自动去掉重复元组</strong>。如果要保留重复元组，可使用<code>union all</code>。</p>
<p><strong>注</strong>：除了<strong>union</strong>(求并集[或])，还有<strong>intersect</strong>(求交集[且])，以及<strong>except</strong>(求差集[A-B])。</p>
<h2 id="8-约束"><a class="header-anchor" href="#8-约束">¶</a>8.约束</h2>
<p>在创建表的时候，可以给表中的字段加上一些约束，来保证表中数据的完整性、有效性。</p>
<h3 id="8-1约束类型"><a class="header-anchor" href="#8-1约束类型">¶</a>8.1约束类型</h3>
<p>非空约束：not null</p>
<p>唯一性约束: unique</p>
<p>主键约束: primary key （简称PK）</p>
<p>外键约束：foreign key（简称FK）</p>
<p>检查约束：<strong>check</strong>（mysql不支持，oracle支持）</p>
<p>我们这里重点学习四个约束：<strong>not null，unique，primary key，foreign key</strong>。</p>
<h3 id="8-2not-null"><a class="header-anchor" href="#8-2not-null">¶</a>8.2not null</h3>
<p>非空约束not null约束的字段不能为NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">		id <span class="type">int</span>,</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">-- not null只有列级约束，没有表级约束</span></span><br><span class="line">	);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id) <span class="keyword">values</span>(<span class="number">3</span>); <span class="comment">-- 只插入id，不插入name，name字段不被默认为NULL</span></span><br><span class="line">	<span class="comment">-- 报错：ERROR 1364 (HY000): Field &#x27;name&#x27; doesn&#x27;t have a default value</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3unique"><a class="header-anchor" href="#8-3unique">¶</a>8.3unique</h3>
<p>唯一性约束unique约束的<strong>字段不能重复</strong>，但是<strong>可以为NULL</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>,</span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;wangwu@123.com&#x27;</span>); <span class="comment">-- wangwu</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_vip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;wangwu@sina.com&#x27;</span>); <span class="comment">-- 重复的wangwu</span></span><br><span class="line"><span class="comment">-- 报错：ERROR 1062 (23000): Duplicate entry &#x27;wangwu&#x27; for key &#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id) <span class="keyword">values</span>(<span class="number">4</span>); <span class="comment">-- 只插入id，不插入name，name字段被默认为NULL</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id) <span class="keyword">values</span>(<span class="number">5</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> email            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> zhangsan <span class="operator">|</span> zhangsan<span class="variable">@123</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> lisi     <span class="operator">|</span> lisi<span class="variable">@123</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> wangwu   <span class="operator">|</span> wangwu<span class="variable">@123</span>.com   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------------------+</span></span><br><span class="line"><span class="comment">-- name字段虽然被unique约束了，但是可以为NULL</span></span><br></pre></td></tr></table></figure>
<h4 id="8-3-1联合唯一"><a class="header-anchor" href="#8-3-1联合唯一">¶</a>8.3.1联合唯一</h4>
<p>例如name和email两个字段联合起来具有唯一性。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	<span class="keyword">unique</span>(name,email) <span class="comment">-- 约束没有添加在列的后面，这种约束被称为表级约束。</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@sina.com&#x27;</span>);</span><br><span class="line">	<span class="comment">-- name和email两个字段联合起来具有唯一性</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@sina.com&#x27;</span>); <span class="comment">-- 重复插入</span></span><br><span class="line">	<span class="comment">-- 报错：ERROR 1062 (23000): Duplicate entry &#x27;zhangsan-zhangsan@sina.com&#x27; for key &#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在mysql当中，如果一个字段<strong>同时被not null和unique约束</strong>的话，该字段自动变成<strong>主键</strong>字段。（注意：在oracle中不一样）</p>
<h3 id="8-4primary-key"><a class="header-anchor" href="#8-4primary-key">¶</a>8.4primary key</h3>
<p>主键值是每一行记录的<strong>唯一</strong>标识。主键值是每一行记录的<code>身份证号</code>。</p>
<p>主键的特征：not null + unique（主键值<strong>不能为NULL</strong>，同时也<strong>不能重复</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">		<span class="comment">-- 1个字段作为主键，叫做：单一主键</span></span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">			id <span class="type">int</span> <span class="keyword">primary</span> key,  <span class="comment">-- 列级约束 </span></span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">            <span class="keyword">primary</span> key(id)  <span class="comment">-- 表级约束</span></span><br><span class="line">		);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">-- 错误：不能重复</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">		ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;2&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span> <span class="comment">-- id=2重复</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">-- 错误：不能为NULL</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhaoliu&#x27;</span>); <span class="comment">-- id不能为NULL</span></span><br><span class="line">		ERROR <span class="number">1364</span> (HY000): Field <span class="string">&#x27;id&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br></pre></td></tr></table></figure>
<h4 id="8-4-1复合主键"><a class="header-anchor" href="#8-4-1复合主键">¶</a>8.4.1复合主键</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">		<span class="comment">-- id和name联合起来作为主键：复合主键</span></span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">			id <span class="type">int</span>,</span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">			email <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">			<span class="keyword">primary</span> key(id,name)</span><br><span class="line">		);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 错误：不能重复</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry &#x27;1-lisi&#x27; for key &#x27;PRIMARY&#x27; -- id=1，name为lisi的数据已经存在</span></span><br></pre></td></tr></table></figure>
<p>在实际开发中不建议使用复合主键，<strong>建议使用单一主键</strong>。</p>
<p>因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一个表中主键约束能加两个吗？</span></span><br><span class="line">		<span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">			id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">primary</span> key</span><br><span class="line">		);</span><br><span class="line">		ERROR <span class="number">1068</span> (<span class="number">42000</span>): Multiple <span class="keyword">primary</span> key defined <span class="comment">-- 多个主键报错</span></span><br></pre></td></tr></table></figure>
<p>结论：在一张表中，主键约束只能添加1个。（<strong>主键只能有1个</strong>）</p>
<p><strong>主键分类</strong></p>
<p><strong>自然</strong>主键：主键值是一个自然数，和业务没关系。</p>
<p><strong>业务</strong>主键：主键值和业务紧密关联，例如拿银行卡账号做主键值，这就是业务主键。</p>
<h4 id="8-4-2主键自增"><a class="header-anchor" href="#8-4-2主键自增">¶</a>8.4.2主键自增</h4>
<p>在mysql当中，有一种机制，可以帮助我们自动维护一个主键值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, <span class="comment">-- auto_increment表示自增，从1开始，以1递增！</span></span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">结果：</span><br><span class="line">		<span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line">		<span class="operator">|</span> id <span class="operator">|</span> name     <span class="operator">|</span></span><br><span class="line">		<span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br></pre></td></tr></table></figure>
<h3 id="8-5foreign-key"><a class="header-anchor" href="#8-5foreign-key">¶</a>8.5foreign key</h3>
<p>如果一个实体的某个字段指向另一个实体的主键，该字段就叫做<strong>外键</strong>。</p>
<p>被指向的实体，称之为主实体（主表），也叫父实体（父表）。</p>
<p>负责指向的实体，称之为从实体（从表），也叫子实体（子表）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class( <span class="comment">-- 班级表作为主表</span></span><br><span class="line">	classno <span class="type">int</span> <span class="keyword">primary</span> key, <span class="comment">-- 班号作为主键</span></span><br><span class="line">	classname <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student( <span class="comment">-- 学生表作为子表</span></span><br><span class="line">	<span class="keyword">no</span> <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, <span class="comment">-- 学号作为主键且自增 </span></span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	cno <span class="type">int</span>,</span><br><span class="line">	<span class="keyword">foreign</span> key(cno) <span class="keyword">references</span> t_class(classno) <span class="comment">-- 学生的班号参照班级表的班号（在主表中是主键），这里学生的班号作为外键</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_class(classno, classname) <span class="keyword">values</span>(<span class="number">100</span>, <span class="string">&#x27;北京市大兴区亦庄镇第二中学高三1班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_class(classno, classname) <span class="keyword">values</span>(<span class="number">101</span>, <span class="string">&#x27;北京市大兴区亦庄镇第二中学高三1班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;lilei&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;hanmeimei&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">101</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">101</span>);</span><br></pre></td></tr></table></figure>
<p><strong>外键值可以为空</strong>，可以理解为：一名学生必定会关联到一个存在的班级，但是来了一个转校生，他还没有分班，现在属于学生子表，还没有关联到班级主表中的任何一条记录。</p>
<p>t_class是父表，t_student是子表（理解记忆）</p>
<p><strong>删除表</strong>的顺序：先删子，再删父。</p>
<p><strong>创建表</strong>的顺序：先创建父，再创建子。</p>
<p><strong>删除数据</strong>的顺序：先删子，再删父。</p>
<p><strong>插入数据</strong>的顺序：先插入父，再插入子</p>
<p>子表中的外键引用父表中的某个字段，<strong>被引用的这个字段不一定是主表的主键</strong>，但是<strong>要具有unique约束（数据不重复</strong>）。</p>
<h2 id="9-存储引擎"><a class="header-anchor" href="#9-存储引擎">¶</a>9.存储引擎</h2>
<p>存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）</p>
<p>实际上存储引擎是一个表<strong>存储/组织数据</strong>的方式。</p>
<p>不同的存储引擎，表<strong>存储数据</strong>的方式不同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t_student;</span><br><span class="line"><span class="comment">-- 可以在建表的时候给表指定存储引擎。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_student` (</span><br><span class="line">  `<span class="keyword">no</span>` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `cno` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`<span class="keyword">no</span>`),</span><br><span class="line">  KEY `cno` (`cno`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `t_student_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`cno`) <span class="keyword">REFERENCES</span> `t_class` (`classno`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="comment">-- 这里可以查看引擎</span></span><br></pre></td></tr></table></figure>
<p>在建表的时候可以在最后的小括号&quot;)&quot;的右边使用：</p>
<p>ENGINE来<strong>指定存储引擎</strong>。mysql默认的存储引擎是：<strong>InnoDB</strong></p>
<p>CHARSET来<strong>指定</strong>这张表的<strong>字符编码方式</strong>。mysql默认的字符编码方式是：<strong>utf8</strong> (qbk支持中文)</p>
<h3 id="9-1mysql支持的存储引擎"><a class="header-anchor" href="#9-1mysql支持的存储引擎">¶</a>9.1mysql支持的存储引擎</h3>
<p><code>show engines \G </code>  查看mysql支持哪些存储引擎</p>
<p>mysql的版本不同支持存储引擎的情况不同。</p>
<h3 id="9-2MyISAM存储引擎"><a class="header-anchor" href="#9-2MyISAM存储引擎">¶</a>9.2MyISAM存储引擎</h3>
<p>使用三个文件表示每个表：</p>
<ol>
<li>格式文件 — 存储表结构的定义（mytable.frm）</li>
<li>数据文件 — 存储表行的内容（mytable.MYD）</li>
<li>索引文件 — 存储表上索引（mytable.MYI）：索引可以看作是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</li>
</ol>
<p>MyISAM存储引擎特点：</p>
<ol>
<li>可被转换为压缩表、只读表来节省空间。</li>
<li>MyISAM不支持事务机制，安全性较低。</li>
</ol>
<h3 id="9-3InnoDB存储引擎"><a class="header-anchor" href="#9-3InnoDB存储引擎">¶</a>9.3InnoDB存储引擎</h3>
<p>这是mysql默认的存储引擎，是一个<strong>重量级</strong>的存储引擎。</p>
<p>InnoDB<strong>支持事务</strong>，支持数据库崩溃后的自动恢复机制。</p>
<p>InnoDB存储引擎最主要的特点是：<strong>非常安全</strong>。</p>
<p>它管理的表具有下列主要特征：</p>
<ol>
<li>
<p>每个 InnoDB表在数据库目录中以.frm 格式文件表示</p>
</li>
<li>
<p>InnoDB的<strong>表空间tablespace</strong> 用于存储表的内容（表空间是一个逻辑名称。表空间存储数据和索引。）</p>
</li>
<li>
<p>提供一组用来记录事务性活动的日志文件</p>
</li>
<li>
<p>用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</p>
</li>
<li>
<p>提供全 ACID 兼容</p>
</li>
<li>
<p>在 MySQL 服务器崩溃后提供自动恢复</p>
</li>
<li>
<p>多版本（MVCC）和行级锁定</p>
</li>
<li>
<p>支持外键及引用的完整性，包括级联删除和更新</p>
<p>InnoDB最大的特点就是支持事务以保证数据的安全。</p>
<p>效率不是很高，并且不能压缩，也不能转换为只读表，不能很好的节省存储空间。</p>
</li>
</ol>
<h3 id="9-4MEMORY存储引擎"><a class="header-anchor" href="#9-4MEMORY存储引擎">¶</a>9.4MEMORY存储引擎</h3>
<p>使用MEMORY存储引擎的表，其<strong>数据存储在内存中</strong>，且行的长度固定，这两个特点使得 MEMORY 存储引擎非常<strong>快</strong>。</p>
<p>MEMORY 存储引擎管理的表具有下列特征：</p>
<ol>
<li>在数据库目录内，每个表均以.frm 格式的文件表示。</li>
<li>表数据及索引被存储在内存中。（目的就是快，查询快）</li>
<li>表级锁机制。</li>
<li>不能包含 TEXT 或 BLOB 字段。</li>
</ol>
<p>MEMORY 存储引擎以前被称为HEAP 引擎。</p>
<p>MEMORY引擎优点：<strong>查询效率是最高的</strong>。不需要和硬盘交互。</p>
<p>MEMORY引擎缺点：<strong>不安全</strong>，关机之后数据消失。因为数据和索引都是在内存当中。</p>
<h2 id="10-事务"><a class="header-anchor" href="#10-事务">¶</a>10.事务</h2>
<p>一个事务其实就是一个完整的业务逻辑。是一个最小的工作单元，不可再分。</p>
<p><strong>什么是一个完整的业务逻辑</strong>：</p>
<p>假设转账，从A账户向B账户中转账10000元。将A账户的钱减去10000元（update语句）<br>
，将B账户的钱加上10000元（update语句）<br>
。</p>
<p>这就是一个完整的业务逻辑。</p>
<p>以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。</p>
<p>这两个update语句<strong>要求必须同时成功或者同时失败</strong>，这样才能保证钱的数量是正确的。</p>
<p>insert   delete   update  <strong>只有</strong>这三个命令和事务有关系，其它命令都没有关系。</p>
<p>做某件事的时候需要多条DML语句共同联合起来才能完成，所以才需要事务的存在。</p>
<p>事务：就是<strong>批量的DML语句同时成功，或者同时失败</strong></p>
<h3 id="10-1InnoDB实现事务"><a class="header-anchor" href="#10-1InnoDB实现事务">¶</a>10.1InnoDB实现事务</h3>
<p>InnoDB存储引擎：提供一组用来<strong>记录事务性活动的日志文件</strong></p>
<p>在事务的执行过程中，<strong>每一条DML语句</strong>的操作都会记录到 “事务性活动的日志文件” 中。</p>
<p>在事务的执行过程中，我们可以<strong>提交事务</strong>，也可以<strong>回滚事务</strong>。</p>
<p>提交事务： <strong>commit</strong>;</p>
<ul>
<li>清空事务性活动的日志文件，将数据<strong>全部彻底持久化</strong>到数据库表中。</li>
<li>提交事务标志着，事务的结束。并且是一种<strong>全部成功的结束</strong>。</li>
</ul>
<p>回滚事务：<strong>rollback</strong>;   (永远只能回滚到上一次的提交点）</p>
<ul>
<li>将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</li>
<li>回滚事务标志着，事务的结束。并且是一种<strong>全部失败的结束</strong>。</li>
</ul>
<p>在mysql中，每执行一条DML语句，系统会自动提交事务，这与实际开发中<strong>多条DML语句联合工作</strong>不符</p>
<p>故要将mysql的自动提交机制<strong>关闭</strong>：start transaction;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_bak;</span><br><span class="line">		<span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction; <span class="comment">-- 关闭自动提交机制，开启我们自己的事务</span></span><br><span class="line">	Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> dept_bak <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;tj&#x27;</span>);</span><br><span class="line">	Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> dept_bak <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;tj&#x27;</span>);</span><br><span class="line">	Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_bak;</span><br><span class="line">	<span class="operator">+</span><span class="comment">--------+-------+------+</span></span><br><span class="line">	<span class="operator">|</span> DEPTNO <span class="operator">|</span> DNAME <span class="operator">|</span> LOC  <span class="operator">|</span></span><br><span class="line">	<span class="operator">+</span><span class="comment">--------+-------+------+</span></span><br><span class="line">	<span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> abc   <span class="operator">|</span> tj   <span class="operator">|</span></span><br><span class="line">	<span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> abc   <span class="operator">|</span> tj   <span class="operator">|</span></span><br><span class="line">	<span class="operator">+</span><span class="comment">--------+-------+------+</span></span><br><span class="line">	<span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>; <span class="comment">-- 回滚事务</span></span><br><span class="line">	Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_bak;</span><br><span class="line">	<span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) <span class="comment">-- 因为一直都没有提交事务，回滚到插入数据之前的节点</span></span><br></pre></td></tr></table></figure>
<h3 id="10-2事务的四个特性"><a class="header-anchor" href="#10-2事务的四个特性">¶</a>10.2事务的四个特性</h3>
<p><strong>A：原子性</strong>   说明事务是最小的工作单元，不可再分。</p>
<p><strong>C：一致性</strong>   所有的事务要求在同一个事务当中，所有的操作必须同时成功，或者同时失败，以保证数据的一致性。</p>
<p><strong>I：隔离性</strong>   A事务和B事务之间具有一定的隔离。</p>
<p>教室A和教室B之间有一道墙，那么这道墙就是隔离性。</p>
<p><strong>D：持久性</strong>   事务<strong>最终结束</strong>的一个保障。事务提交，就相当于将没有保存到硬盘上的数据保存到硬盘上。</p>
<h3 id="10-3事务的隔离性"><a class="header-anchor" href="#10-3事务的隔离性">¶</a>10.3事务的隔离性</h3>
<h4 id="10-3-1事务与事务之间的四个隔离级别"><a class="header-anchor" href="#10-3-1事务与事务之间的四个隔离级别">¶</a>10.3.1事务与事务之间的四个隔离级别</h4>
<p><strong>读未提交：read uncommitted（最低的隔离级别，没有提交就读到了）</strong></p>
<ul>
<li>事务A可以读取到事务B<strong>未提交</strong>的数据。</li>
<li>存在的问题是：<strong>脏读现象</strong>(Dirty Read)，我们称读到了脏数据。</li>
<li>这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步。</li>
</ul>
<p><strong>读已提交：read committed（提交之后才能读到）</strong></p>
<ul>
<li>
<p>事务A只能读取到事务B<strong>提交之后</strong>的数据。</p>
</li>
<li>
<p>解决了脏读的现象。</p>
</li>
<li>
<p>不可重复读取数据。</p>
<p>例如：在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取的时候，读到的数据是4条，3不等于4，称为不可重复读取。</p>
</li>
<li>
<p>这种隔离级别是<strong>比较真实</strong>的数据，每一次读到的数据是绝对的真实。</p>
</li>
<li>
<p>oracle数据库默认的隔离级别是：read committed</p>
</li>
</ul>
<p><strong>可重复读：repeatable read（提交之后也读不到，永远读取的都是刚开启事务时的数据）</strong></p>
<ul>
<li>
<p><strong>事务A开启之后</strong>，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变，这就是可重复读。</p>
</li>
<li>
<p>可重复读可能会出现<strong>幻影读</strong>。每一次读取到的数据都是幻象，不够真实。</p>
<p>例如：早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是早晨9点的，读到的是假象。</p>
</li>
<li>
<p>mysql中默认的事务隔离级别：repeatable read</p>
</li>
</ul>
<p><strong>序列化/串行化：serializable（最高的隔离级别）</strong></p>
<ul>
<li>这是最高的隔离级别，效率最低。但是解决了以上的所有问题。</li>
<li>这种隔离级别表示<strong>事务排队</strong>，不能并发！</li>
<li>synchronized，线程同步（事务同步的）每一次读取到的数据都是最真实的，并且效率是最低的。</li>
</ul>
<h4 id="10-3-2验证各种隔离级别"><a class="header-anchor" href="#10-3-2验证各种隔离级别">¶</a>10.3.2验证各种隔离级别</h4>
<p>mysql查看隔离级别：select @@transaction_isolation;</p>
<p><strong>验证：read uncommited</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted; <span class="comment">-- 设置全局事务的隔离性为读未提交</span></span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;                                     use bjpowernode;</span><br><span class="line">													</span><br><span class="line"><span class="keyword">start</span> transaction;                                   <span class="keyword">start</span> transaction; <span class="comment">-- 开启事务  </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 第一次查表是空</span></span><br><span class="line">													</span><br><span class="line">												<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>); <span class="comment">-- 事务B向表中插入数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 第二次查表可以看到事务B插入的数据</span></span><br></pre></td></tr></table></figure>
<p><strong>验证：read commited</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed; <span class="comment">-- 设置全局事务的隔离性为读已提交</span></span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;</span><br><span class="line">													use bjpowernode;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">													<span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 空</span></span><br><span class="line">													<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 空</span></span><br><span class="line">													<span class="keyword">commit</span>; <span class="comment">-- 事务B将数据提交</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 事务A才能看到事务B插入的数据</span></span><br></pre></td></tr></table></figure>
<p><strong>验证：repeatable read</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;</span><br><span class="line">													use bjpowernode;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">													<span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; </span><br><span class="line">													<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line">													<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">													<span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 永远读取的都是刚开启事务时的数据，事务B提交数据之后也读不到</span></span><br></pre></td></tr></table></figure>
<p><strong>验证：serializable</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level serializable;</span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;</span><br><span class="line">													use bjpowernode;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">													<span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">-- 直到事务A提交，事务B都无法进行操作                       </span></span><br><span class="line">                                                          <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 操作被隔断，需要等事务A彻底完成                                          </span></span><br></pre></td></tr></table></figure>
<h2 id="11-索引"><a class="header-anchor" href="#11-索引">¶</a>11.索引</h2>
<p>索引<strong>在表的字段上添加</strong>，是<strong>提高查询效率</strong>的一种机制。</p>
<p>一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引。</p>
<p>索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p>
<p>MySQL在查询方面主要就是<strong>两种方式</strong>：全表扫描  ；根据索引检索。</p>
<p>在mysql数据库当中索引也是需要排序的，并且这个所以的排序和<strong>TreeSet数据结构</strong>相同。</p>
<p>TreeSet（TreeMap）底层是一个自平衡的二叉树。在mysql当中索引是一个<strong>B-Tree数据结构</strong>。</p>
<p>遵循<strong>左小右大</strong>的原则存放数据，采用<strong>中序遍历</strong>方式遍历取数据。</p>
<p><strong>索引的实现原理</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-25_11-09-21.png" style="zoom: 50%;" />
<ul>
<li>
<p>Tip1：在任何数据库当中<strong>主键都会自动添加索引对象</strong>，id字段上自动有索引，因为id是主键。</p>
<p>另外在mysql当中，一个字段上如果有<strong>unique约束</strong>的话，也会自动创建索引对象</p>
</li>
<li>
<p>Tip2：在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个物理存储编号。</p>
</li>
<li>
<p>Tip3：在mysql当中，索引是一个单独的对象，在不同的存储引擎中以不同的形式存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中索引存储在一个逻辑名称叫做tablespace当中。在MEMORY存储引擎当中索引被存储在内存当中。不管索引存储在哪里，索引在mysql当中都是一个<strong>树的形式</strong>。</p>
</li>
</ul>
<p><strong>什么条件下</strong>会考虑给字段添加索引：</p>
<ol>
<li>数据量庞大。</li>
<li>该字段经常出现在where的后面，以<strong>条件</strong>的形式存在，也就是说<strong>这个字段总是被扫描</strong>。</li>
<li>该字段有很少的<strong>DML</strong>(insert delete update)操作。（因为DML之后，索引需要重新排序）</li>
</ol>
<ul>
<li>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</li>
<li><strong>建议通过主键查询</strong>，建议通过unique约束的字段进行查询，效率是比较高的。</li>
</ul>
<h3 id="11-1索引的创建和删除"><a class="header-anchor" href="#11-1索引的创建和删除">¶</a>11.1索引的创建和删除</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建索引：</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line">	<span class="comment">-- 给emp表的ename字段添加索引，起名：emp_ename_index</span></span><br><span class="line">删除索引：</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> index emp_ename_index <span class="keyword">on</span> emp;</span><br><span class="line">	<span class="comment">-- 将emp表上的emp_ename_index索引删除。</span></span><br><span class="line">修改索引：</span><br><span class="line">     mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> index emp_ename_index rename <span class="keyword">to</span> new_index;</span><br><span class="line">     <span class="comment">-- 对旧索引重新命名</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 查看一个SQL语句是否使用了索引进行检索</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> 。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+-</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> 。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ALL</span></span><br><span class="line">	扫描<span class="number">14</span>条记录，说明没有使用索引。<span class="comment">-- 后面没有截取到row</span></span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+-----------------</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys   <span class="operator">|</span> key             。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+-----------------</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> emp_ename_index <span class="operator">|</span> emp_ename_index 。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+-----------------</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ref</span></span><br><span class="line">	扫描到<span class="number">1</span>条记录，说明使用了索引。<span class="comment">-- 后面没有截取到row</span></span><br></pre></td></tr></table></figure>
<h3 id="11-2索引失效"><a class="header-anchor" href="#11-2索引失效">¶</a>11.2索引失效</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">失效的第<span class="number">1</span>种情况：模糊匹配</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%T&#x27;</span>;</span><br><span class="line">    <span class="comment">/*ename上即使添加了索引，也不会走索引</span></span><br><span class="line"><span class="comment">	原因是因为模糊匹配当中以“%”开头，任意一个数据都可被查到。</span></span><br><span class="line"><span class="comment">	所以尽量避免模糊查询的时候以“%”开始*/</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%T&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">type<span class="operator">=</span><span class="keyword">ALL</span>,没有使用索引。</span><br><span class="line"></span><br><span class="line">失效的第<span class="number">2</span>种情况：使用<span class="keyword">or</span>且只有一端有索引</span><br><span class="line">	<span class="comment">/*如果使用or，那么要求or两端的条件字段都要有索引，才会走索引，</span></span><br><span class="line"><span class="comment">	如果其中一边有一个字段没有索引，那么另一个字段上的索引也不会实现。*/</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+------+---------</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys   <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+------+---------</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> emp_ename_index <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+------+---------</span></span><br><span class="line">type<span class="operator">=</span><span class="keyword">ALL</span>,没有使用索引。</span><br><span class="line"></span><br><span class="line">失效的第<span class="number">3</span>种情况：使用复合索引时没有用左侧的字段查询</span><br><span class="line">	<span class="comment">/*复合索引：</span></span><br><span class="line"><span class="comment">		两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">create</span> index emp_job_sal_index <span class="keyword">on</span> emp(job,sal); <span class="comment">-- 只有使用job字段才能使用索引</span></span><br><span class="line">	</span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-------------------+---------------</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys     <span class="operator">|</span> key           </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-------------------+---------------</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> emp_job_sal_index <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-------------------+---------------</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ref</span>，使用了索引。</span><br><span class="line">	</span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>; <span class="comment">-- 使用sal字段</span></span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ALL</span>,没有使用索引。</span><br></pre></td></tr></table></figure>
<h2 id="12-视图"><a class="header-anchor" href="#12-视图">¶</a>12.视图</h2>
<p>视图view:站在不同的角度去看待同一份数据。</p>
<p>基本表删除后，由该基本表导出的所有视图均无法使用。但是视图的定义没有从数据字典中清除，需要显式地使用drop view语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表复制：</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> dept2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept; <span class="comment">-- 快速复制</span></span><br><span class="line"><span class="comment">-- dept2表中的数据：</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> DEPTNO <span class="operator">|</span> DNAME      <span class="operator">|</span> LOC      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NEW</span> YORK <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span> DALLAS   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> SALES      <span class="operator">|</span> CHICAGO  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span> OPERATIONS <span class="operator">|</span> BOSTON   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图对象：</span></span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">view</span> dept2_view <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2;</span><br><span class="line"><span class="comment">-- 删除视图对象：</span></span><br><span class="line">	<span class="keyword">drop</span> <span class="keyword">view</span> dept2_view;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：只有DQL语句才能以view的形式创建。</span></span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">view</span> view_name <span class="keyword">as</span> <span class="comment">-- 这里的语句必须是DQL语句，也就是select语句;</span></span><br></pre></td></tr></table></figure>
<h3 id="12-1视图的作用"><a class="header-anchor" href="#12-1视图的作用">¶</a>12.1视图的作用</h3>
<p>我们可以面向视图对象进行增删改查。</p>
<p>对视图对象的增删改查，<strong>会导致原表也被改动</strong>，会影响到原表中的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 面向视图查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2_view; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 面向视图插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept2_view(deptno,dname,loc) <span class="keyword">values</span>(<span class="number">60</span>,<span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询原表数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2; <span class="comment">-- 原表也被插入数据</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> DEPTNO <span class="operator">|</span> DNAME      <span class="operator">|</span> LOC      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NEW</span> YORK <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span> DALLAS   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> SALES      <span class="operator">|</span> CHICAGO  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span> OPERATIONS <span class="operator">|</span> BOSTON   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">60</span> <span class="operator">|</span> SALES      <span class="operator">|</span> BEIJING  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 面向视图删除</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> dept2_view;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询原表数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2; <span class="comment">-- 原表也被删除</span></span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 创建视图对象</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> </span><br><span class="line">	emp_dept_view <span class="comment">-- 使以后的表操作更加简单，便利</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		e.ename,e.sal,d.dname</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp e</span><br><span class="line">	<span class="keyword">join</span></span><br><span class="line">		dept d</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		e.deptno <span class="operator">=</span> d.deptno; <span class="comment">-- 将emp表和dept表连接后的表作为视图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询视图对象</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp_dept_view;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> sal     <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 面向视图更新</span></span><br><span class="line"><span class="keyword">update</span> emp_dept_view </span><br><span class="line"><span class="keyword">set</span> sal <span class="operator">=</span> <span class="number">1000</span> </span><br><span class="line"><span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;ACCOUNTING&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option; <span class="comment">-- 对该视图进行更新操作时，会自动检查where子句的条件。同样适用于插入和删除操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 原表数据被更新</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+----</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+----</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">1000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">1000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+----</span></span><br></pre></td></tr></table></figure>
<h3 id="12-2视图在开发中的作用"><a class="header-anchor" href="#12-2视图在开发中的作用">¶</a>12.2视图在开发中的作用</h3>
<p>假设<strong>有一条非常复杂的SQL语句</strong>，而这条SQL语句需要在不同的位置上<strong>反复使用</strong>。</p>
<p>每一次使用这个sql语句的时候都需要重新编写，很长，很麻烦，怎么办？</p>
<p>可以把这条复杂的SQL语句以视图对象的形式新建，在需要编写这条SQL语句的位置直接使用视图对象，可以大大<strong>简化开发</strong>，并且利于后期的维护，修改数据的时候也只需要修改视图。</p>
<p>可以对视图进行增删改查等操作。视图不是在内存当中，视图对象也是以文件形式<strong>存储在硬盘上的，不会消失</strong>。</p>
<p>视图并不等同于派生表。</p>
<h2 id="13-数据库三范式"><a class="header-anchor" href="#13-数据库三范式">¶</a>13.数据库三范式</h2>
<p><strong>第一范式</strong>：要求任何一张表<strong>必须有主键</strong>，每一个<strong>字段</strong>原子性<strong>不可再分</strong>。</p>
<p><strong>第二范式</strong>：建立在第一范式的基础之上，要求所有非主键字段<strong>完全依赖主键</strong>，<br>
<strong>不要产生部分依赖</strong>。</p>
<p><strong>第三范式</strong>：建立在第二范式的基础之上，要求所有非主键字段<strong>直接依赖主键</strong>，<br>
<strong>不要产生传递依赖</strong>。</p>
<p>设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</p>
<h3 id="13-1第一范式"><a class="header-anchor" href="#13-1第一范式">¶</a>13.1第一范式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生编号    学生姓名    联系方式</span><br><span class="line"><span class="comment">------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>		张三		zs<span class="variable">@gmail</span>.com,<span class="number">1359999999</span></span><br><span class="line"><span class="number">1002</span>		李四		ls<span class="variable">@gmail</span>.com,<span class="number">13699999999</span></span><br><span class="line"><span class="number">1001</span>		王五		ww<span class="variable">@163</span>.net,<span class="number">13488888888</span></span><br><span class="line">	</span><br><span class="line">以上是学生表，满足第一范式吗？</span><br><span class="line">	不满足。第一：没有主键；第二：联系方式可以分为邮箱地址和电话</span><br><span class="line">修改：</span><br><span class="line">学生编号(pk)          学生姓名	 邮箱地址		 联系电话</span><br><span class="line"><span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>				张三		zs<span class="variable">@gmail</span>.com	<span class="number">1359999999</span></span><br><span class="line"><span class="number">1002</span>				李四		ls<span class="variable">@gmail</span>.com	<span class="number">13699999999</span></span><br><span class="line"><span class="number">1003</span>				王五		ww<span class="variable">@163</span>.net		<span class="number">13488888888</span></span><br></pre></td></tr></table></figure>
<h3 id="13-2第二范式"><a class="header-anchor" href="#13-2第二范式">¶</a>13.2第二范式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生编号 		学生姓名 	教师编号 教师姓名</span><br><span class="line"><span class="comment">----------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>			张三		<span class="number">001</span>		王老师</span><br><span class="line"><span class="number">1002</span>			李四		<span class="number">002</span>		赵老师</span><br><span class="line"><span class="number">1003</span>			王五		<span class="number">001</span>		王老师</span><br><span class="line"><span class="number">1001</span>			张三		<span class="number">002</span>		赵老师</span><br><span class="line">这张表描述了学生和老师的关系：<span class="number">1</span>个学生有多个老师，<span class="number">1</span>个老师有多个学生</span><br><span class="line">这是非常典型的`多对多`关系</span><br><span class="line"></span><br><span class="line">以上的表是否满足第一范式？</span><br><span class="line">没有主键，不满足第一范式</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">学生编号<span class="operator">+</span>教师编号(pk)		       学生姓名       教师姓名</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>			<span class="number">001</span>				张三			王老师</span><br><span class="line"><span class="number">1002</span>			<span class="number">002</span>				李四			赵老师</span><br><span class="line"><span class="number">1003</span>			<span class="number">001</span>				王五			王老师</span><br><span class="line"><span class="number">1001</span>			<span class="number">002</span>				张三			赵老师</span><br><span class="line">学生编号和教师编号，两个字段联合做主键——复合主键</span><br><span class="line"></span><br><span class="line">以上的表是否满足第二范式？</span><br><span class="line">不满足，“张三”依赖<span class="number">1001</span>，“王老师”依赖<span class="number">001</span>，显然产生了部分依赖。</span><br><span class="line"></span><br><span class="line">产生部分依赖有什么缺点？</span><br><span class="line">数据冗余了，空间浪费了。“张三”重复了，“王老师”重复了。</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">使用三张表来表示`多对多`的关系</span><br><span class="line">学生表</span><br><span class="line">学生编号(pk)		     学生名字</span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="number">1001</span>					张三</span><br><span class="line"><span class="number">1002</span>					李四</span><br><span class="line"><span class="number">1003</span>					王五</span><br><span class="line"></span><br><span class="line">教师表</span><br><span class="line">教师编号(pk)		 教师姓名</span><br><span class="line"><span class="comment">--------------------------------------</span></span><br><span class="line"><span class="number">001</span>					王老师</span><br><span class="line"><span class="number">002</span>					赵老师</span><br><span class="line"></span><br><span class="line">学生教师关系表</span><br><span class="line">id(pk)			        学生编号(fk)			      教师编号(fk)</span><br><span class="line"><span class="comment">-------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>						<span class="number">1001</span>						<span class="number">001</span></span><br><span class="line"><span class="number">2</span>						<span class="number">1002</span>						<span class="number">002</span></span><br><span class="line"><span class="number">3</span>						<span class="number">1003</span>						<span class="number">001</span></span><br><span class="line"><span class="number">4</span>						<span class="number">1001</span>						<span class="number">002</span></span><br></pre></td></tr></table></figure>
<p>多对多，要使用三张表，关系表中要有两个外键。</p>
<h3 id="13-3第三范式"><a class="header-anchor" href="#13-3第三范式">¶</a>13.3第三范式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生编号（PK） 	    学生姓名   班级编号  	 班级名称</span><br><span class="line"><span class="comment">---------------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>				张三		<span class="number">01</span>			一年一班</span><br><span class="line"><span class="number">1002</span>				李四		<span class="number">02</span>			一年二班</span><br><span class="line"><span class="number">1003</span>				王五		<span class="number">03</span>			一年三班</span><br><span class="line"><span class="number">1004</span>				赵六		<span class="number">03</span>			一年三班</span><br><span class="line"></span><br><span class="line">以上表的设计是描述班级和学生的关系，很显然是`<span class="number">1</span>对多`关系。</span><br><span class="line">一个班级有多个学生。</span><br><span class="line"></span><br><span class="line">以上表是否满足第一范式？</span><br><span class="line">满足第一范式，有主键。</span><br><span class="line"></span><br><span class="line">以上表是否满足第二范式？</span><br><span class="line">满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第三范式？</span><br><span class="line">第三范式要求：不要产生传递依赖</span><br><span class="line">一年一班依赖<span class="number">01</span>，<span class="number">01</span>依赖<span class="number">1001</span>，产生了传递依赖</span><br><span class="line">不符合第三范式的要求，产生了数据的冗余</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">班级表：一</span><br><span class="line">班级编号(pk)				      班级名称</span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line"><span class="number">01</span>								一年一班</span><br><span class="line"><span class="number">02</span>								一年二班</span><br><span class="line"><span class="number">03</span>								一年三班</span><br><span class="line"></span><br><span class="line">学生表：多</span><br><span class="line">学生编号（PK）        学生姓名       班级编号(fk)</span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>				张三			<span class="number">01</span>			</span><br><span class="line"><span class="number">1002</span>				李四			<span class="number">02</span>			</span><br><span class="line"><span class="number">1003</span>				王五			<span class="number">03</span>			</span><br><span class="line"><span class="number">1004</span>				赵六			<span class="number">03</span>		</span><br></pre></td></tr></table></figure>
<p>一对多，使用两张表，对应多的表加外键。</p>
<p>如果有一张字段很多，数据庞大的表，建议把一张表拆成两张，其中一张表的字段添加上外键和唯一性约束。（fk+unique）</p>
<p><strong>关于三范式的实际使用</strong></p>
<p>数据库三范式是理论上的，实践和理论有时候会存在偏差。</p>
<p>最终目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</p>
<p>因为在sql当中，<strong>表和表之间连接次数越多，效率越低。（笛卡尔积）</strong></p>
<p><strong>有时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，并且对于开发人员来说，sql语句的编写难度也会降低。</strong></p>
<hr>
<h2 id="14-DBA常用命令"><a class="header-anchor" href="#14-DBA常用命令">¶</a>14.DBA常用命令</h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-26_10-54-44.png" alt=""></p>
<h2 id="15-自主存取控制"><a class="header-anchor" href="#15-自主存取控制">¶</a>15.自主存取控制</h2>
<h3 id="15-1授予权限grant"><a class="header-anchor" href="#15-1授予权限grant">¶</a>15.1授予权限grant</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把查询Student表的权限授给用户U1</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> U1</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">grant</span> option; <span class="comment">-- 允许该用户把这种权限再授予给其他用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把Student表的全部操作权限授予给用户U2和用户U3</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> U2,U3;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把查询Student表的权限授给所有用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> public;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把查询Student表和修改学号的权限授给用户U4</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span>(Sno)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> U1;</span><br></pre></td></tr></table></figure>
<h3 id="15-2收回权限revoke"><a class="header-anchor" href="#15-2收回权限revoke">¶</a>15.2收回权限revoke</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把用户U4修改学号的权限收回</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">update</span>(sno)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">from</span> U4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回所有用户对Student表的查询权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">from</span> public;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以在用户名后加cascade，表示级联收回该用户及其赋予用户的权限</span></span><br></pre></td></tr></table></figure>
<h3 id="15-3创建数据库的权限"><a class="header-anchor" href="#15-3创建数据库的权限">¶</a>15.3创建数据库的权限</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 首先以超级用户system登录,再创建超级用户system2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> system2 </span><br><span class="line"><span class="keyword">with</span> superuser password <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建具有createdb权限的用户U1和普通用户U2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> U1 </span><br><span class="line"><span class="keyword">with</span> createdb password <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> U2 </span><br><span class="line">password <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以U1用户登录，创建数据库U1DB</span></span><br><span class="line"><span class="keyword">create</span> database U1DB;</span><br></pre></td></tr></table></figure>
<h3 id="15-4数据库角色"><a class="header-anchor" href="#15-4数据库角色">¶</a>15.4数据库角色</h3>
<p><strong>角色是权限的集合</strong>，可以为一组具有相同权限的用户创建一个角色。</p>
<p>使用角色来管理数据库权限<strong>可以简化授权的过程</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个角色</span></span><br><span class="line"><span class="keyword">create</span> role R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使角色R1拥有Student表的select、update、insert权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span>,<span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将角色R1授予王平、张明、赵玲，使他们具有角色R1所包含的全部权限</span></span><br><span class="line"><span class="keyword">grant</span> R1</span><br><span class="line"><span class="keyword">to</span> 王平、张明、赵玲;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次性收回王平的这三个权限</span></span><br><span class="line"><span class="keyword">revoke</span> R1</span><br><span class="line"><span class="keyword">from</span> 王平;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给角色R1增加delete权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回角色R1的select权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">from</span> R1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone问题</title>
    <url>/2024/01/18/git-clone%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>昨天晚上看到一位陌生人的博客加载十分流畅，切换页面时不需要重新加载侧边栏。</p>
<p>在该博客中找到教程，需要下载<strong>pjax插件</strong>。</p>
<p>但是在git clone插件的时候却出现了连接不到该地址的报错。</p>
<span id="more"></span>
<p>经过各种查询最终得知，我的deploy地址是ssh形式而非https。</p>
<p>ssh：git@github.com:theme-next/theme-next-pjax.git</p>
<p>https：<a href="https://github.com/theme-next/theme-next-pjax.git">https://github.com/theme-next/theme-next-pjax.git</a></p>
<p><strong>将https形式改为ssh</strong></p>
<p>git clone <a href="mailto:git@github.com">git@github.com</a>:theme-next/theme-next-pjax source/lib/pjax</p>
<p>连接成功！</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-18_00-18-25.png" alt=""></p>
]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>博客问题</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下对于当前成绩的思考</title>
    <url>/2024/04/07/%E5%89%8D%E4%B8%89%E5%AD%A6%E6%9C%9F%E7%9A%84%E7%BB%A9%E7%82%B9%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p><strong>停止精神内耗，只管前进。</strong></p>
<p>————2024/4/7 晚</p>
<span id="more"></span>
<hr>
<p>今天上午公布了前三学期的成绩以及排名。相较于上学期的12名，我又上涨了3名来到第9名。这一次前面的8位同学全部都是转专业而来。虽然略有欣喜，但一想到只有专业前三才能保研到外校，剩下的人都只能被锁在长大，失望便涌上心头。残酷的事实是我再怎么努力追赶，也无法冲进前三。中午去问了学长，得知这样的离谱政策依旧在实施。所以摆在我面前的只有两条路，保研本校或者考研985。</p>
<p>下午一直在刷知乎，企图找到和我同样境遇的人。但是什么样的回答都有，导致我越看反而越焦虑，我不知道我到底该做出什么样的抉择。<br>
但是转头一想，我真的稳了吗？我真的已经能够保研本校了吗？——显然不是的。这才仅仅过了三个学期，还有三个学期的仗要打。我真的有点操之过急了。</p>
<p>其实答案早就有了，高考出分后我在知乎写的那篇文章上，就已经有了。“希望未来能继续努力，考研去实现我的梦想。”</p>
<p>等到明年的这个时候，或许我会开始复习考研知识，看看自己的实力到底如何，有没有信心。如果觉得可以一试，那就十月份报名考研，如果觉得自己能力不够，那就留在长大。没有什么选择是绝对正确的，我只相信一切都将是最好的安排。不要再被这样的事情耗费我的心力了，先将它抛之脑后，认真做事吧。</p>
<p>接下来的计划就是:<br>
好好学习，稳固绩点，不要挂科。学好英语，学好数学，学好技术。努力使自己积极乐观，充满动力。</p>
<p>结语——<strong>只有拥有足够强烈的使命感甚至是宿命感才能做出些什么，要把人生当做是一段波澜壮阔的征程，勇敢前行。</strong></p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2024十一月初总结</title>
    <url>/2024/11/05/%E5%8D%81%E4%B8%80%E6%9C%88%E5%88%9D%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e4b6dc76c0db7ec57c87cb5903884fd4bf0ac1f5ea841c547ba91cdf3cca7f35">60fd0739c5a82ca45262b2f3393acd53e987f4c909755e6196174e7512ad2b38c446e459fdb628f65d09d140f97dc6aaeba41cac45e2ceabf9129b584a8da5089232002bf19f7192d4ae3be9783d57c5b7b558ca7ffefc499c165e8d6e135b36082a7f0aa7c0e81dd0f036eb03522705e61881fc6d11751c8e3430b576985a1b32f6c17f411e8945fbbcd51607020b64fff753cb9a3b4db4736c23b274776de0baa4508d04176968ee897b4df30a9b7e58360b4af528268284891673241a4945ab330448aed82262320e41a2aa16a41928068272e46cbec91eacad3d6681eb82cfcc61247dd858b9ad13538ac0c3836a69b6ecdab20d9b8d820f92db5ae6346346eeacc2afc32f0d393ccb070009866960cb6c1be8627fbfe15017c27ea5f75a6a931bfdfd32e2dd8a0f2b85efe50862da5c769f4d132cc85349ceda09eb2becb3b7a0198fdaa8acc6856a42fb41425b782abec7d1359df114fdf9dc8fb47075123c5f30746ede493da833a4df43e01c25ca29686ee040b63b22985fa4af5e1408a8cc20033d9b7743633ef1e57175bf26aebdbf279ba4ce6f49959a669cc4f2cf0365e463b8e34a53afd1074916c5ce9a13e21b93ee9e187bc277a44004dc3da61df6e93b54bd87ffa0766e2cca3580c9e2c6be39e99f7ba7530623369a6dc7e34758aad0a6a6f3dcf3e543e198d4f11ff3486c6a8414ffa99b1964140dd217634f5153ce718fe395ef7c6377b910c4bd85279e90bc0df4750d608e134e7bd820d28321c78c03596ebcead13f21a30a2e5849b9f238cb9e2c610fa3266b1af14d6be83f783bfe11b8ba75f69a4e3ee9dda3d459be399bfff8a9b2adf25d1083660adddde9326ecb7c956f73efb7d4dde56d84463d8ef199556889f459675bb7eae9800285e5e7c6bfc6da6707f532a82451cbb41736bc91ad705f0cf857da7d9f73b323e737e27c178ea0a1f014d3536c66fba22f5ae6da28f396d1f7995dd66265052753262a307bfee7929a23e03da34510e2cbe6b815506d9c9b354969de10a2bb8dbd5653a64431ceb6645ed01c94cec3819a217a6886e4435c2f10976904e7429a8c2a528572dc325a003897de24de597bda53057eee80c4094fe48a87187bbeff52f20a6027424a95d8f1fbf8e486079e3175412e3e96380715223595e8b92851bda911cd81f275bac0b0bc5093afdef49470d90229db3da24a7c0b1c3b033be761cff8a4ce50b40b787f6a9cc51db05324bb516eb9879fdcec36ff9c5a91bb44f4221a0c8f2d33b52dd23faecc08f2ad7c772803ff1318c08719d735558dc1e8754de6b38ad6b41ace4b3b8c2a4ab9544a07367570882fb3d46a6b463102ec0278e62c11b3ec4e479332e3ea849f2bf6fce341bd037828c266d9b24e7fb816e83fa068105974d71603f418ce263afebe2518e1fd9281559116ec6c95ef9fcc3ffa5310f5e369e5fc5fabc5cc13f407e6620a2ccf8ad0c046e8bdbaf4481742f50bff0a31da2ecdbbf8a5a87eaf6f7fd39795f8cb011243a67e46d818f5443e5b4ea0833639af061809fe4a8811cb83957aea90d51283b674f165c1452bac2ecb7de7b0aec58ab0654d61472a13e0fa075af1753586151388944ddc90f97221b800f7ce394159721d6c4787c72e090b0f660c9f70ea924ca64cd477c682766640884cf9924b68f0fff09cc53ec1c3a642dbc582a33576b0cae4ed6720ee0519323a60643ca7b23672ad57759ab1ab7288111196efc38f491b3cb12f747983340e559702f0b0358e8fbebc5bbc4a565856f1f73300b63330e0fa386231acb90d26e9a66baf6adb5105aa36cc954901b78ccebcb3cd5ba1976f6ca8c4c8f85432868e37d1e4c283da7972a92d10fd381d559c67c0a144cf9492152630ec4ef34675d8070d091b1f45cddd8d1974a891b228eacd114b3ea69839317cf80105023b58df5102dcd3a703502e9504dd3f30a3c9b7819aaa17be96162623e226f50318fc9ab450a7b2892d041c440717abca564af24fe021be58dfd85a27de90797ef242e61d17c035fd829d1b547caa9b5515ae7a2f8dcb2b3c2d78dcf1873e7cdf8ace5edcae62bb4008f2d73375c10b2368cd7f9f10ce40db07d5ceb42367cfef786a10ff86a078f9f0e37d412c7a978b09f7c813a8367a820d9a74625caf3353585daff5cb4f933f38935e4b08ba36703736213582fbce12d123740637d6e56c2e7bf21546b667cea16e7e93ae3b6d7943349364e7b9904b7eabffe368a70ab7df0666bfd3b875e92fa06daafa3b882bd20c3642d446908f7ec918f556a194a7736cd8eb2b709e00731795bde0562e125a86512d1217232645ff348c6d9f987996b3c38f67ebaba98dca1b3c274125f065beb92b75a990b44f1a1d30fbd9a1f3c760ee86fe1a339c9c72964f51f60f2c17fd9427ba5913bc20f6fb91d069d2845e569e126ce28327ca98e38e6f99b5cb3bfaaebf4bca74bc2f857ea2d7247c3e489831d0b5507be9aceffdc940473dcb340294b8b76e95d39c9769a97a86daa1525a1383b3f172cabc78a60713af0febb44b716ac777beec26e1edd09f9f32b62399f0dea73debb90f28d615799bf81d1ed8cca089ed5731cb615ec44c4773edc462fec22220c89f9b9083719a822ef33d9f733f8ac526385ad82266e7fa13c0a6430315bea0919716870666325b7676222223819792a1a983ebf35964c4f9bb76f4c36cfa9b183f8f4c17f6fd7228814f16cc7ba690fdaec2dd59a03b7aaa997b39beb417fcefc0d1a56d27425a87c5da1eeb726391adaa5e285ff294a4ef799d2aa6493c841af7dd375ce35f9358a956aca37110d163eb5202f510b3ebaa70696c9bccd54939470feb62e36542b88a750c666a918ce645957edb454b46cccfb8bfe3ca5f84e860efe871371562c288afa27e9cf7f24446b747652ecf9d0f6ca625129ba817dd7d6dfb9ae8ae941b653024e2766eb9420fb72dca85cb6e3ecd1fb27cde954fb8b6fa9b1bb5360bedfdcf39cf07d530f78636bab7ede9c8685c6e8f33442071c506541f198a48fc1c8de33d627a7792e43fba2e60b7aea451b9cc2051468b3655ccd60da615e8ac2e0281df5dca419ed2d6888807e7a110600a4cbe46a0263d14c6fc270c6f3495f661be2229d8eed28b7068ee79708fae7dc4d88ea4e71d60dd96a51d6d827c034dfc41791d5219676a402440c73fe640fbe624fc627f1007b0e58dd81f164181bdc62c24a1676445c9f8c86bc81140e3b88db9f2d81f44860f9ff544ff99cfea56827f7a7797155c3c5eea438b634a975469d609345ee7f60ecb1f97088b9ccce1eff7077229f1d0f41a0efb071e26ee47e62399b2d19277cb68c59d6feebabcf1ac6fc1c93b4c7256ad7097673b05a55ecb9339b4bcde5474cdb26922289c7bab2811547dbef89eb4566740b1dc8174b414ad9d4dda932b18f712dcadb1406ce98203173230482fbf6188b1a5cdc67e57f6eba9d5b239e6fc917d75342a233a1159279bc1a2c5cac3cc9ce50966a2d53576bb5ac406bcc25829f5b985e8020770e1ba83f556c464cc1c44b6a1ada953211202edaa2e59419645ba1aeeaae2bed98d3c72b29dba8bdff513a892ee002ee9e7f20e3d94adc575854c6822d8437224ef382bb9287a188728e6456877e8ee531aff4b769684efa257f5380ea66c4b8ea478a2c5a6a9b609f09261774f633fca7fb8ebf7529cc8c24b508cf717ea37519e5f921e9a1eac6a2bde71f8b5de47152efae35ae3b3c651845701320fb8540bca62db03aa36d8a4a1a52eec633e1d6030fedcbab87bdd3cdd46e1eeca6de32f9463126c81cdc3dddd58f377707ebba001fafd6cb8e34757c6e792bb5801a8aabe4b6c763979f4f78bae228bdfea5d7d5620353d68b983e5fcbf3f961334f1792c9b93da868119481ec8ca3400cabcb043a6cc5f443b76a6b9cfac97d39894ab9955f2711a0bba6c0b3528c54568bcb27281701e54e01bdc0e1e5d9da5071946bb9662b172f4f1614db3539e85d2c958d9d01ac8585e5d57835b541cb27fdf021e805e3e8a14fd46aeaae9915ad9dfd3d53e2187692cde2ca42d4845026650256ef0aff4ccc2d2cebf784832374e3f66386d62e32206828bb6c2c786e888dd31f1d5d406c50bbf7c927f22d826196b84012971a66daa6f1d3367da24717338de28a3c82325542a766ddaea12d270a2fee09d81273ed5597cbdd43eef549a93ecf3f6616e3167e496c5ac27e17bb0a40def00717502c818ace8b96a29e767e19eb74fcd11db82daad636c858db7c0652401fb5ef46b0651b7cb4250283640254d5d41f172a3fe285c080ddc2d64735dce055d718811a0224bca21c10dd1819f1c8de12187d45828b45c6b45b6cce3e1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>博客上传问题</title>
    <url>/2024/01/17/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%97%AE%E9%A2%98%E5%BE%97%E4%BB%A5%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>下午打开博客的时候突然发现烟花特效消失，于是赶紧去重新修改文件，但是最后上传的时候又给我报错。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-28-43.png" alt=""></p>
<span id="more"></span>
<p>这个报错从搭建博客的时候就不时出现，最近的一次是在11号晚上。</p>
<p>那次我修改了上传github的方式，将https改为ssh，然后就没有再出现这个问题。</p>
<p>但是今天下午五点半我用同样的方法却无法奏效。</p>
<p>然后就是不断地百度，查CSDN。</p>
<p>一开始以为是自己的deploy方式出错，然后重新把github与博客进行绑定，但还是无济于事。</p>
<p>于是翻到最开始的博客搭建教程，发现输入ssh -T git@github.com时，无法连接到github。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-36-58.png" alt=""></p>
<p>然后又是去各种搜索，最后终于找到解决方法。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-38-55.png" alt=""></p>
<p>按照上述教程将22端口换至443端口。</p>
<p>最后终于弄好了!</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-40-18.png" alt=""></p>
<p>然后就是再次上传，看到Deploy done: <strong>git</strong>时给我激动坏了！</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-41-41.png" alt=""></p>
<hr>
<p>从五点半到七点半，这一个问题就搞了两个小时。中途几度绝望，因为博客无法上传就意味着博客无法更新内容，就意味着最终博客会被弃用。从12月29日到1月15日，这半个月里，我抽出时间搭建了属于我自己的博客，期间遇到不少困扰我的问题，但最终都会在网上找到答案。或许我遇到的问题在这个世界上早就有人遇到过，最后还提供了解决方法共享在网上。所以啊，要好好利用互联网这个最强大的学习工具。遇到的问题总会有解决的方法，事虽难，做则可成！</p>
]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>博客问题</tag>
      </tags>
  </entry>
  <entry>
    <title>大三上开学感想</title>
    <url>/2024/09/05/%E5%A4%A7%E4%B8%89%E4%B8%8A%E5%BC%80%E5%AD%A6%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="3e29edb2805d5daa527b8e04a3cf8f181a198f8827c42cb298743e5f63ab0384">60fd0739c5a82ca45262b2f3393acd5331a643f82cc90bcc50b07e0ca1292855090b932f614a4683a486b535812b54746288569d8da9ed6dd18f2bb49e64e047fa0a8f9787a6da6fe5e247692ab971c387732afc5d18303fe8f314e8691000706fd73bb233d17fc90ed8a8e2ba29fc76c004183222016bd24c0de5c1a2e549e9f0f0dd9a2ceb9d65e58d7515a86c1796a5faee9d2b4a5d48d2d3e977059d69f52a8088683e3ab441b304d5721ba10ae80366b30d4e5e67978548d85291152f0b795e8c3d4faba022163dc92e0ceae7d99033096f44941432c1f41199605559cbae60e8a50f7203e1ed13e646a3d1b819d59fc40455493b40933155fa02dc0565a639588cdbaa45d337478592583faf5b5a64e64e9abaf390f7978aedad7e216d9f28bc9d3675dd5e85c549675686e8b7b478ca2df7b2e3064b772b634c6d36469536a2792c8d9565d8c2219f287bc9127a8ed50cddec33c6d080850958ac7bb4df595161847544e3cd5fd016639766ff9b6bb140857e7f6dce903bbc8cd765414928c05238d74bc6aa700936ef7ad977935bc7efbce9a61c580c97b743e775bf0ed1c286622fc16a9d8b11e22f97a98383d8d04918044b46d43e1fd0ae77725d21bb857620401188dee45b97657a35b9ad1bfa0578eebfefcbb2327fb30825f52439d0724989aec61648820f135e2e3b8542eec36d757480db7b421817de4037ff282532be2399b0865f253906c879f736214627ac0c8857ccbb73348797c53aef1a74ea06e3f68104a87b363d6437461fca29c5900fefd200d277f508e0d0bc581cd2868a9db58143d734e6531847509eb09372af944f546f8afa769e5fd76f5636f670f7c396b73d836611920e32923dd5086879bd35f9508fc17ebaee8a975bc4e439e8174144d08ce6413515fe04a2b6004727db30378ec016cc98022e12d519df36bbdae734e0066bdcdc73433b027b695a4f04fd87d50d6404ce6f4d70539dcaeaf6a02d065893ce17f21673b0a1ef65f97f2a0331aaeb144ad3cbb79046c414e05dde3cb66cc2b2b0c012fa78b418f816dd50954b6901e40038042ce12d5e0f1844d1f0f75ddc83c22b429b7a08668ecaef6ddb8c8cafa0804f983658232866aabb2ed4b82d50b65c972971ec21bd4bce56a991d8feb2e8534fc8ae14bb4df1412002eff86a3b3a61ffa8a74ec7d2ff344ed81ecddcfe9f2d6b48860bf3d1a1d8142b5813ba4ac3b155f65d65ca376d6f7385effcb8370df56a80b96154ec2b8fb0b7150ae5f8e07ca71b9ef093445bf67e50e19df2ebb6b67aedde5c8c6387d54295928b97851bac786616bc616d2a6bae85b3f0704f2bbc9a19e3f2a841116cbcbaab06d84b65c72af00a8695d39dfd8fd8d2416b90f0e9b27cec6836321b904223151825673c8a0c4fc75c0548404f662f49e6ec4ab01c015a965c39b24d77f8e46cf040e63eec09b4f706c61d75b6d3b2e8666a20e31a24418c0325bab15d26c2419059df78d6ee5792d9b6e874d8ffd5a4b8efdf0589fdb4bae0bb9f235b3ecc3c75893c98fb98d2456607bfe30df1bdc56dc135051934656696f33491534979f736c67315870aafb80ef363fa4124acc70e3bf1669f46ffba759e3ac9d6a298fe90ff73ed514799427376fa84ecee985d32c40a53ab935d42ea9aef43e996386e71826caf12a50aab061444e54a7375d3c3bce0fc015966d5703414157283339f7685d0e9e0d17d18ead23477597ff6c2c5f14d14576c839690d219fe2cc6468aef8852401e0e743393cd044c521e4cdafaa90d95238d1205a42fea2c65c51adda190a0cf5b089245a04eed5337c044b6b76203b744ac44e0b9c4aa2223fa583a75be2c32b9fd1cb6bea45941b3d9aa3e6b9c28f676cea27adc1340173485838573113d6678e5f6fff26475f04482003f3e9735ba1035062d9a20839c45ef40a43caaf3e9defb97fddbeb838fb10f986547f8e06077567601521da05ddd5a78662d05f57286b6f36a39ab633453eb83906b5a3d138dc7415ad6d201ab35468bf738a03715e550c203ac7ceb5ee4ba1b3f0a5879d5bfea9875d569aa5e406bb1cb32ca42ec1c67622c047503eb3995130aa7aa833551033a888c61b13d41a2c5dc4720787b3a7b6d856ce2594bb76546484f7817d15255f907272a6be98945b67cef0eca3c84b8edd710b9b3fb5f1311e4c4b664b9d78621d680500219b1eea655b6af89c798fdd24a65078f3b4af87d58e4cd454319d6dd3c7552b6238b4499298f92a0ec81a3d1356b97cdd15b3d8e3da34075498ae70fc183fab3857399f0a9642f85e8a3457f5bb0e71e0f66dbf45ee7ed6f2860a79457faa1d4a3e45119421e0eff09bc6aae9583b6b4f618f3d788889586416dc7b3dcd627b5739f3cb9677d5e0d513dbf130e08cfdf215f3f8d3906c82bf0581c5f6605deb187bf61b10a3f6945ebe782e17610dc8a8decf218ea84ca62fa0df7dd1977b7f8c5134108e728c1d03fe4130583a5104feab63f9a6813b98010347b152daa96ecc57e060cc12561200087b37076dc6e579957f05cf6fc571aee89c9be2b9a510fcb1eb258c61de21b24007fb76a6ed40a24357dc75dc32e26ab645c0e719492b946bf5aecd30757dc26409a660c95f765db63492cb27ff792875edaf66ba22f1300079abfaf75028369ce3a00f1b4698ff562c5162161d14c109a86f2e56dae3aea51d717de00457015d2b1cd336dd2b30afc6466402d4325e351b9bf510eca887f012e72975f7c1517d0d3658c53eef3d457de19a0f50a3bbda568500683e55bca71e4b05cca3f11c18ba13addbf30e7ba1c1aa58af8a9a8767ad344f41884eebfb433ea36893eeac1c88ae6401b9722157aa2b398079c9e63e155b45b3910442b0e6c1599ad1aaccf9b85f2784ec73e9a4953985c5b4d6eb5c658631596b74e4b8c86bf83f8db3002697c89ccbe5d41494313e718af2b89c05d5211a01328e25eeef1af3e69558550d6cb2a41f2bc0e88e5395f41af49a43be8a74806420e02d77da764e154db58f24c43bc0a8c86116acb7483bd07f9fff19eb9879567c752169a7e9b0a056ff93af405fa5e865018ac0541b90765aa982707f3dfd16d5ee0e478dce2b8d8a32ae5b7abe7e12c80153d1914cfb60445e1a591734c5d139ac2b8eef8225466941d33d4518b793400481b0c831ba1a510761d42a1240ecc73f1f55de0c393582c8c40da30ee9f060bcb0f15242a5cdaf0fa443c0ad8eb228c4304333e56ffdd97965c42fbdfd7fcd915bcdce285809001bcabccb09dfc3367923abf57e507547f5ff40d9d85a62c6a2e7aa05a74e097988bc38d7e2a943013c805761dbf40f3fb6e3face14dce272217210a3d70c2b3d629741b3327f6dc6f54c91b89c3f56873bd487f19dc498bea4e993e7b3517ab5f8a9956e2f618f891845484187adddfc847371edca9f16a6f80fdc8e868459913c3d79017d66e3661184010c384d9dff72e2294b5d70817dccabc23fc4539cb543b5889101904846de13b6859cc1d8f7d6f781b507e7e262d98ab0e90861755de71097e4726a7848f55e1127d29d6734a6b42bfd438f4424f5aae5c607f6e5bc4fe09e0c26f14e44f5802bfc4eccce01fc01152c6dd099f610b576d54bfdccb088213beefb4ef32048825f11d0b84da742e9566440de42307e93d4e142337e4dff3ce06aec59bc5dc18f770f5bd7e560fbef335792d63349a340fca58aecc0ecb98be329ec963f81f7d62af3d136ed5274510db386097e1486e11f6bcff84d7a6efdc1e6a8e5113b44cbe2024f5845b5d37f1a48a635011712762eac5b78b2e60faac1a05bd039800e8a11b151d7aec9283f08abee2be644d517d168d585e1df87d1bcb8736b5ea99d31152b842e9bf6df1d59e775bd8441251726eefb1b55ccb943c4d96b8cc4c0cb0db3fa99d4e5cc4e9d84c9173f0ce4c245a96e82de92f3317e48cf10f6cb1ff75a397d5118ef65193df73537f042a6febab5fc8bbe6074a973abb7e958174ea9f94e1f3fae07fa24be881101d3e874f95d91700e85969ab49d77be7c29582b71c9d3f0a75431ccb101ce11a7f34552a226328d1c1f91b496f31669049c4a7766a7552bbbdac01ffd91a1d98675895dc4540f7fa38e612147798c9f8d415a7c1ee41d6897d7545b2b33c2fbcf394e807882c18045c50c790fc8e971073650e25d486c4bc594d8c5446d73529c0f9e9aeceec4da3fa57c05b0d0478da5c9b1c7b0a0e9c0b4c38bf35aa08248383842e7a2d010230aaa60c7b61ff304c74b34b202abe3e6ded69fb2ee36ea3a468cec8dcd247c1e21886acf1267b8d239fc9cad3b8ce68e0bfe77de3ab4f9dbd35b2925381f6bc8421d3856b80f3fe904eff18d1b8b53881a61735e8bd3df960a291c6e03b32af904bb8111059d25bb97f9e034954a50f06b8dd96c50fc3c553f9e5ed6ae9d7da359d131a93467c6612c9e8a0bcaf60b8ce0fbd8b616f4a31c1e16323bd8f6862c41f80f15f68cac3a96d55e482547fbb3d74969467f892e9224ae949f51d04c1b7197779701e20a9a059815ae729bbdac72f6f9348555427ef1b810ddfacc35e3b5a64ad1640596472f5d41d9bfda409fa21f166e66774c57208bd0e299f32685173b7ac91589d4bd564ddf77da5b0cadea02405a6f782286a3da9a45ac275b38128780f2ba7a6d834d4f2f94b2be11b80668522c4a19de5ba6f5da2f66dfce45364e3276a105cda428396896914a098d976794498a65f1623bddb548f3a9009085d7c9d3f6e89427041c61c77e36e47797d27a61dfb6c257f078b3086368a6713978d20826c43c6214c354c84559cc15a7e0bf47b8e578e0d46d87be765231b6509cc5bdf7a5424495dbf0e91c574cca92692cc8f325fe3e3e8edbc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二上总结</title>
    <url>/2024/01/09/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="b382b2539b5bea0597fc43976010e3d886d75480bdc740295fc4201f468a3747"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二上期末感想</title>
    <url>/2024/01/06/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E6%9C%9F%E6%9C%AB%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>过度地陷入自我怀疑和对过去已经发生的事情的无止境纠结，可我明明知道自己没有犯错。</p>
<p>从高中到现在，这种疯狂的歇斯底里的如同噩梦般的焦虑便不时地产生，但每一次的结局都是我把该做的做到了最好。</p>
<p>明知道自己不会犯那种小错误，从小到大的训练养成的肌肉记忆也不会允许我犯那样的低级失误。</p>
<p>可我总是会假想自己犯错，因为过于追求完美而容不得一点差错。</p>
<p>无论如何，这种令我痛苦的焦虑必然会影响到我。我真的需要专注，需要静下心来去做好现阶段的事情。</p>
<p>已经发生的无法改变的事情，就让它过去，放过自己吧。</p>
<p><strong>活在当下</strong>，这四个字是那么的简单却又那么的重要。</p>
<p>或许等到一切尘埃落定，再回过头来，才会发现这时的自己有多么可笑吧。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下五月总结</title>
    <url>/2024/05/31/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E4%BA%94%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>匆忙的五月即将结束，崭新的六月马上来临！</p>
<p>————2024/5/30</p>
<span id="more"></span>
<hr>
<p>今天上午结束了为期两周的数据库课设，也总算是有了让我喘息的时间，在这个闲暇的短暂而宝贵的夜晚，写个总结吧。</p>
<p>整个五月可以说是忙碌的，五一假后便又是继续两周的数据库实验，虽说实验不难，但是前期要做的准备工作有很多，例如如何将数据成功导入数据库，这是实验的起点。还记得刚开始十分迷茫，对着所谓的实验指导书亦步亦趋却毫无效果，网上查了一些资料也都是鱼龙混杂，最后还是问了班里的一位同学，结合他的建议又继续在网上查找资料，所幸最后顺利完成。这个实验带来的压力还挺大的，不是指它本身有多么困难以至于无从下手，而是每一次的实验都要提前自己做完，然后在相应的时间去找老师验收。这个等待验收的过程是无比煎熬的，因为我不知道我做的是否正确，我是否能正确回答老师的提问。如果说数据库实验是餐前小菜，那么接下来两周的数据库课设便是一道硬菜了。</p>
<p>还是熟悉的老样子，老师只管下发任务，至于如何完成是学生自己的事。我从上上周的周日开始做课设，先是在CSDN找相应的教程，但是发现大都不符合我想要的效果，而且纯文字图片看上去就很复杂晦涩。最后终于在B站找到了一个大体上相符的教学视频，于是我认真地把视频看完，然后开始着手做我的课设，每天修修改改，一直做到了昨天，大概持续了10天的样子。但平心而论，如果让我彻底地真正地一个人做这个课设，我是绝对做不出来的。例如如何将winforms编程模块与mysql数据库相连，这同时也是整个课设的起点，然而，视频里教学的是与sqlserver连接，对应的代码经过我修改后还是用不了。那天晚上急的我焦头烂额，疯狂地查找资料却根本看不懂，最后没办法了我打算也使用sqlserver，但这个软件却安装失败了。电脑也没有电了，我只能上床睡觉，很是绝望。但是我怎么可能睡得着呢，于是我刷着那个视频的评论区，终于在最下面，发现了一条评论，发了使用mysql的连接代码，于是我决定第二天先试一试这段代码，如果还是不行就想办法重新安装sqlserver。运气很好，第二天早上用这段代码完美连接上mysql数据库。我使用管理员账号登录系统后，当“登录成功”的消息框弹出时，我激动坏了，因为一切又都充满了希望。（晚上12点了，明晚再写吧。）</p>
<p>在做课设的过程中，自然会遇到不少问题。比如要实现数据备份和数据恢复这个功能，我查了好多资料，都是直接备份数据库，而且需要在命令行界面执行代码，很少复杂。那天晚上始终没有什么头绪，走了很多弯路，想不到任何方法。然而第二天一早去教室后静下心来，慢慢思考，突然灵光乍现，想到可以创建一张专门用来备份数据的表，于是这个本来很复杂的问题就被轻松解决了。总之，我认为这次课设对于我的帮助是很大的。从一开始只会跟着视频一行一行抄代码，到后来可以自己独立地编写一个功能模块，或许这就是学习编程的快乐所在吧，把陌生的看起来很复杂的东西一层层剖析开来，最终完全掌握并为我所用。在学习的过程中，遇到问题是难免的，有时可以轻松地在网上找到答案，但也有时耗费数小时也只会是徒劳。迷茫、惊慌、不知所措会在这时将我团团包围。但若在此时放弃，之前所做的一切都将功亏一篑，逃避只是暂时的，迟早有一天这个难题会再度降临，若那时已经无处可逃，那又该如何呢？所以啊，静下心来，慢慢思考，开拓思维，<strong>事情再难也总会有解决的办法</strong>，倘若随随便便就被一点点困难给吓倒，那谈何光明的未来。</p>
<p>总之，这个持续了一个月的数据库实验及课设已经彻底结束，我分别拿到了100和95的高分，也算是对得起自己。</p>
<p>明天就是崭新的六月了，迎接我的便是一场又一场的考试。做好时间规划，认真复习，结局是好是坏并不那么重要，关键是我到底有没有认真地去对待。加油吧，<strong>想清楚自己到底想要什么</strong>，并为之努力和奋斗。做什么、如何做<strong>无关于他人，仅在于自己</strong>。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下六月中总结</title>
    <url>/2024/06/19/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%85%AD%E6%9C%88%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>上午结束了概率论的期末考试，休息了一下午，写个总结给自己鼓鼓劲吧。</p>
<p>————2024/6/17</p>
<span id="more"></span>
<hr>
<p>这半个月以来，经历了大大小小的四场考试，那么就让我细细说来。</p>
<p><strong>第一场</strong>——数据库期末。经过上个月的数据库实验，一些重要的sql语句早已烂熟于心，但荒谬的是这门课的考试更多是以概念为核心。考试是开卷的形式，于是我花了两三天时间把课本过了一遍，最后也如同我想象中那般，在书上基本可以找到答案。然而题量却大的惊人，一共一个半小时的时间，有10道选择，一堆简答题，写sql语句，写触发器语句，画E-R图等等。即使我已经很熟悉课本，看一眼题目就知道对应的知识点大致在书上的哪一块，但每一道题都得写很长很长的一段话，于是在过去四十多分钟后，我才艰难地把简答题写完。画E-R图那一题更加恶心，三个实体，每个实体都有一堆属性，而且全部都是中文，一共要画两个局部图和一个总体图，由于时间实在是不够，再加上我并不确定我画的是否正确，于是干脆只画了一个局部图，又画了两个框架图上去。最后一题是查询，大概是要使用关系代数，但是题目上除了说明要查询的内容之外什么都没写，因为我对关系代数比较生疏，同样再加上时间没剩多少，于是索性用sql语句写了（实体和属性依然是中文）。写完后就收卷了，这场考试就这么潦草地收场了。后来我特意去问老师最后一题可不可以使用sql语句，但是直到现在她也没有回我，甚至在考完试不久后就迫不及待地把课程群解散了，好可笑。</p>
<p>第二场——习思想期中。这种思政课的考试很水，通常都是提前发下来题库，学生只要把题都刷了，就会考的很好。所以我也是如此对待这门课程，花了两三天时间把题刷完，然后回看了一两遍。最后只用5分钟考了99分，可惜错的那一分是二选一自己改错了，没有相信自己的直觉。</p>
<p>第三场——英语六级。很遗憾，我的第一次英语六级考试似乎以失败告终了。虽然在三个多月前就开始背单词，一共四千多个，直到考前还剩下五百多个，但是要复习的单词达到了将近三千个。没错，我并没有完全地将背单词这项任务坚持下去，这已经导致了我并没有充足的信心去参加考试。刷过的真题也仅限于在准备之前的学术英语阅读时的三套，甚至一套听力都没有完整地听过。于是，选词填空还是好多词都不认识，听力前两篇什么都没听懂，任凭一句又一句的对话从我耳边溜走。第三篇听力时才进入状态，但估计也对不了几道。阅读其实还可以，不算难，但在写题的时候还是感觉差点什么，我无法很专注地去快速浏览题目和文章，常常会在一个地方纠结很久。最可笑的是，六级考试的顺序是先写作文，然后再听力，最后是阅读和翻译，然而我并不清楚。所以在开考时，我先翻到了阅读部分，幸运的是我坐在第一排，前面的老师看到我的操作后将我制止，及时纠正我的错误行为。后来一想也挺后怕的，要是我坐在后排，直接开始写阅读，没有老师制止我，那么等到半个小时后放听力，我的作文将会是一片空白，结局会更加惨烈。不知道能不能考过吧，但即使能过，也就是400多分，很失望，特别失望，希望12月份那一次可以好好准备，脑子清醒点。</p>
<p>第四场——概率论与数理统计。由于期中考试并没有考好，大概七十多分，于是我很想把这次期末考好。先把笔记大致过了一遍，然后准备开始写复习题，然而考试前五天我才发现复习题足足有十套，还有一套21年的真题和一套期中试题。最初的打算是努努力把所有题都写了，但途中发现我对知识点掌握的并不娴熟，我需要一边翻笔记才能一边做题，有时候还得看着答案做。第一套写的很慢很慢，于是我决定能写多少写多少，重要的是掌握解题的方法，毕竟大多都是同类型的题目。最后我写了完整的五套，把十套的选择和填空都写了。考前一天的晚上，我重新回顾笔记，开始背一些重要的公式。结局还行，所有题都写了，并在最后五分钟检查卷子的时候发现了第一个填空题的错误，然后迅速地将其改正。希望会有一个令我满意的分数。至此，我大学期间所有的数学课程正式结束。除了大一上没好好学，高数上考的一团糟之外，其他课程好像学的也还可以，但对于数学的学习远未结束，下学期的大学生数学竞赛以及一年后的考研数学，还需下一番功夫。</p>
<p>我知道我时常陷入迷茫，心不在焉、患得患失。我害怕失败，害怕自己因不够细心而导致全盘皆输；我太过于追求完美但同时又不够自信；我渴望建立一个理想的生活，但常常发现理想与现实总有大大小小的不能接受的差别。但无论如何，请一定守住内心中的美好、尽量远离一切消极的腐朽的思想、保持一个乐观愉快的心情、照顾好自己的身体、珍惜当下。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下四月总结</title>
    <url>/2024/05/06/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%9B%9B%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>今天刚结束了五一假期，我觉得还是很有必要写一个<strong>四月总结</strong>。</p>
<p>————2024/5/6</p>
<span id="more"></span>
<hr>
<p>四月可以说是让我极度迷茫的一个月。算是认真准备的大英竞赛在开考十分钟前才发现忘带耳机，于是听力只能外放。高中让我无比自信的英语，在那两个小时里却使我万分折磨。即使我拼命地写，却还是空了三十多分的题，剩下没空的那些题写的也是一塌糊涂。似乎我的所有努力都付诸东流。即使在考前我就做好了心理准备，但当我真正不得不面临失败时，我却无法接受。</p>
<p>带着遗憾、悲愤的心情，下午我又去参加了概率论的期中考试。这场考试我自以为做好了充足的准备，把笔记和作业都认真地过了一遍，好像是志在必得。然而，三道大题我只做出来一道，这一道的最终结果还缺少了两处取值范围，前面的选填好像也有错的题。我又一次对自己产生了疑问，为什么我做不出来，为什么啊？几天后从老师口中得知，大家考的都不错，依然有考满分的同学。似乎别人的成功将我自己的失败无限放大，那一阵子我都特别消极，感觉自己就是一个失败者。想起大一下学期为了弥补落后的绩点，努力学习，最终高数拿到98分的自己，现在的我到底是怎么了。</p>
<p>好像，我确实不够努力。</p>
<p>对于大英竞赛的准备，也仅限于做了十套左右的听力，没有完完整整地做完过一套真题，没有进行过限时训练，没有思考过怎么才能把题做完，只是单纯地以为自己只有听力差，忽视了其他方面的学习。</p>
<p>对于概率论，我完全放弃了在教室听课，因为学校老师讲的快且讲不好。于是我从B站找视频自学，也把每一章的笔记都认真整理了。每一次的作业也都认真写了。但除此之外，我好像没再努力了。在教室，由于落后老师的讲课进度，听不懂他在说什么，于是我索性就不听，在下面做自己的事情，大多数时候都是玩手机，同时还得提防着老师不时的点人。做好的笔记平时也从不点开，只是在考前过了一遍，这就导致我在考试的时候忘记了分布函数是如何写范围的，要是我平时多看看，那么唯一会的一道大题也就不会错了。</p>
<p>总而言之，我太过自视清高了，以为自己稍微学一学就能考好，把那些暗地里比我努力十倍的同学不放在眼里，真是可笑。</p>
<p>但是不论怎样，失败并非世界末日，接下来我能做的就是更加努力，真正的努力。</p>
<p><strong>菜，就多练</strong>啊。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下学期总结</title>
    <url>/2024/07/13/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>简短的学期总结。</p>
<p>真是觉得现在的自己写不出什么像样的文字了，有时间去读一读书吧。</p>
<span id="more"></span>
<hr>
<p>今天，已经是我回家的第二天，闲来无事，写一个学期总结。</p>
<p>我的大二下就这么过去了，好快，好快。这个学期可能是我目前最轻松的一个学期了，因为我没有选任何额外的专业课。这也就意味着除了后面的实验课，我没有其他的早八，可以每天九点起床，洗个澡再去上课。每天的生活就是宿舍-教室-食堂三点一线，时不时还会去东门买点小吃。我已经记不清看了多少场球赛了，上半学期是马竞的欧冠淘汰赛，下半学期又是法国的欧洲杯。为了防止睡过头而错过比赛，我都会提前在KFC买好咖啡，直接熬一个通宵，然后第二天如果没课就睡到十一点多。最拼命的一次就是看马竞vs国米，马竞主场逆转国米，给我激动坏了，本来五点多就结束的比赛，我硬是刷赛后新闻到七点才睡觉，然后九点多又爬起来去上计组。我的足球生活很是惬意，我加了一个马竞up的球迷群，每天都会在群里聊天；我又开始玩起了实况足球，最开始是国服，后来又下载了国际服，每天都会打活动（其实挺花时间的）。</p>
<p>我清楚的知道，这个学期的我有点松懈。第一次参加竞赛（大英）便惨败而归；概率论的期中仅仅只有62分；计组的期中也只考了七十多分；第一次英语六级感觉也是遭遇滑铁卢。不过幸好，我及时醒悟，全力为期末考试做好准备。截至目前，还剩毛概和体育课没有出成绩，但我本学期的绩点已经破天荒地来到4.09，平均绩点也上升到3.59，破3.6已经是志在必得。可能是这学期的课比较简单？也不知道其他同学的成绩如何，罢了，我不想去操心别人。在社交上，这学期通过体育课认识了几个不错的朋友，与之前有过矛盾的一个朋友也算是破镜重圆。</p>
<p>马上，我就要升入大三，至于保研本校还是考研985，我还没有想好，还需要一些时间让我去思考。当下我唯一能确定的就是，我必须得<strong>全方面</strong>地提升我的个人能力——心态，自律，口才，勇气，决心，专业知识······我必须不断地进步，不能再懈怠，不能再患得患失，踌躇不前。我得利用好剩下一年多的时间去完善自己，让自己具有竞争力。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下三月总结</title>
    <url>/2024/04/02/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%BC%80%E5%AD%A6%E4%B8%80%E4%B8%AA%E6%9C%88%E5%90%8E%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong>最近有些浮躁，有些焦虑，写个总结重启一下</strong>。</p>
<p>————2024/4/2 晚</p>
<span id="more"></span>
<hr>
<p>过去的这一个月其实挺清闲的。因为这学期没有选额外专业课的原因，我每天都可以睡到早上九点钟，很是奢侈。于是晚睡没有了压力，最近这些天几乎都是晚上一点后才会休息。</p>
<p>三月份做了好多我认为有意义的事情。刚开学几天就把寒假一直在学的HTML尽数补全、去看了很好看的《沙丘2》、熬了一整夜亲眼见证了马竞逆转国米、利用零碎时间把MySQL基础学完、去看了从初中一直在追的怪兽电影《哥斯拉大战金刚2》、开始做MySQL的查询习题、概率论的笔记也写到了第四章。</p>
<p>然而在教室上课的收获却少之又少。专业课和概率论都是看b站的网课，因为那些老师的讲课水平真的不太行，在他们的课上最多听个乐。唯一让我觉得开心的是毛概的老师讲的很好，她也是我班的代理班主任，没有只是照着ppt念，有着清晰的讲课思路。还记得第一堂课上她对我们说：“希望这门课不只是一门获取成绩的手段，还能够提高你们的人文素养。”所以啊，到底什么课才是水课呢。</p>
<p>前不久已经开始了各大高校的研究生复试，有春风得意，也有名落孙山。研究生这个字眼离我越来越近，一年后的今天，我会选择什么样的道路呢。上学期的排名仍然没有出，但我觉得我应该还在线内。接下来的计划也一定是让绩点稳中有进。我已经逐渐开始意识到，课业成绩仅仅能够体现做题的能力，大学的大多数考试，无非就是背题库。即使我觉得可笑，但我又不得不这样去做。所以我将更侧重于专业技能和个人知识素养的提升上，绩点的维持只会是顺手而为。听说在保研和考研复试中，科研和竞赛都挺重要的，但是我孤身一人，没有遇到志同道合的朋友，当然，我自身也没有足够的实力，于是现在根本不知道怎么去参与这些事情。所以还是认真学习，同时不断地扩展自己的知识体系，自身足够强大才是关键。接下来的一个月，<strong>专注自己的道路，保持良好的学习节奏，继续努力沉淀</strong>吧，会赢的！</p>
<p>我总觉得，<strong>人是要往高处走的，即使是粉身碎骨</strong>。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下开学前的总结与展望</title>
    <url>/2024/02/23/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%BC%80%E5%AD%A6%E5%89%8D%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%8E%E5%B1%95%E6%9C%9B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="7c3615c403e6c6488b8170359192d00d719511ce53e4c587aa1dceb9522e8964"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二学年成绩感想</title>
    <url>/2024/09/14/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%88%90%E7%BB%A9%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d6b1f03c142adcabbdbd31b47129f284b22551f56e32decaed4715f2a9a83a61">60fd0739c5a82ca45262b2f3393acd53fc8e7e15d1c545acc2197dc8f5c7cf9c3804eb77684d95844cfa50a923752dcb12d413e9d35611828e3da0c9351f7f0c29623364e01d7bbf0f2af25a84601302e73645863318a932e0ee20708643cc0a631fc49f26bc4c775803357f96df75fb5c6680b0112ab4ee25f5363229f2d0f2efbff1c288319710be2fa0b7790e2badb165de9b57a51443a434c635481ae0e10841f51cdc4df79da8633cda17a7fe270ffdb243766043bb123b78d61102381baf040d3b04e690b663a3c5267e8f2c984117adbf6b966c13269a87bb81fe87f0a97e5fec44c6ea805c131982112c7e99e064bbdcf10cbc01c1ca8b47cf6e4559e7bdb9d740282345459ca7ab4c407c9bd214a49713c5df6665bdc24a8baab9eef3a9d0a64532cb7931b18d398ff23ae9c75f3b0bd8ffb58f3a76a4f0061330982d2ca89a0ed139651694fa261db2b954f404c2b625256635507f43f8d8b4f3a79f84dea55c6f2ac44d3d6771af65cd90c18827476e31553fd33c50db39ac8e783242e7147511050f5fb54d6f284d29657d513100a0c0e6323a8ab23f6658c57d5ff93cd39040bf1ebaa120a28dd3c1d1ee33e5f20fa092710336675d5678dfdacc0f41f827c250224d6bd7453ef88d8645cb4787be743cce1f70cf376d8fb42d66c1f6035e3d363e840c1afe2ee985f0549deb7faa88f3d7ecd157cf259d95c121dc43348ca6541b83d15b6b95426451295e95641a430419bf1a641d1a8747242a87325523617511ccbc9aa4fa9468948fb5a21395951cf1c527b1772523404a6c3fbf7de097994c838dad9e70992f452a54707b176bcc22967f3d4b8a459328a4276370f9b1ec734dfb441131fdc05c995a42db1b8063a52c027068bff7a82cbe568d7e91bccc37eb59847ce4a21d98cabd6446a60bbf25eb41957863068431e511bfe45bfe29cc76aa8bde45d28989bd640f64dfdd52896b232e2f5020db9d0fbd14b6005ebfbbd395144b9ec36249bdce7be7219faa3b83b2f2471cf487ea9413d5799bdb11586c8423c7313d6bbf559e90e611a01e0bbb4c581ee5676a4d811c40cd2a452365b6d0231ed710d35bda0ff528d9d046c72bd35a474be711b28d4df12d82e965b4062c09fb42243f8195b15adb2ecd0af67c3bde4ba6f887ce4b0e138df897c35fcd0afed2c431e1021d1077636ca5d773739343004d5aa08668dde8d17364185b6c03c4bbca3229bcfbd4b5c9c50f5c6255e8eb90f8ef2dc840704ed9470998b003f28b87eafeed21649e378692b2195dfe02008ac805d147aacad489ac9c71fabe01124ad7e447209d143edfb843b691bb28e004c3907b378c82c95f105b81ba548b7ed9e4e04bc8ab9ea1c4e9ff2dfc5b9c45d9c004c7316e7796683caa346dcee0680be74bbfe69eacedcadfd6ba60b5351cd9a51aa7148af33e968457ffc7bf14897fa793907166c53c225125285142b4d1e615a80a8a8563a1832a635bbe5a60025c25585ddb795e21e186de7e4104d0f15a83b126bbb54d3af68541021b44bfc9cf61be10da25a68b0b5b273d8133d478c831d4b1da82baec44aa1d27fbb424895a9c2544461f55e617059841a924ccb20308f4b247f8e840de59734c9143a8bad45c1da5a283ded41cd25f62cae50d497adda2f88ec4650696997575bd738bfa2fbbdcfe73365db6e352ecac0279ee6df2f294d4a957acddcfa70c809e1336d0ff1753869294f0204b09ba52a4d3b4a803657ca83083221f5db624aa6e7168015be9eb4fb09bb6cd8c1579f480b1ad893da1741f248047a45e1031543f71497b9e6cc9ce3fcd299e01348f246751d7338ccd2efb5831a7a4b94af32fac8fecbdff56d28e92a7008dcfed855f447b63465a9615d9e64a26803b27430505e56df8095b913daf186fc4e49318a354e904a3401ba7e0828e77d3f27616cbd5fc4b119a3c72b060f5ce3a8936803798b147749ac3cb51207804f03f6a989347bf9ae328f9d287a97b42f16de81ba29aa28ea6a7b136c5fa0083a363a898d00d0d288cf13db5e738fae3d7df4a156de1fccf240b4e3640aef47452890a313095c0c511ee908f0295745f314ea1046f5dffffb467447ddeb723272c9b789673e58279b7a688ed91a8588a040530106811863c5de233f93d451e4fc184006d16a25e77373bc4e7bedd8223ec3c08090b41b1e0e37097bfaf9012dbac4d2220957f35a72cf62d7875802fa6155aa4572c040c12c6423e5e3a95960dbb62e5b6125e3143070419bb06b267b33738794262307d95bd0fe1412fd96265b2aa0f0a72231636aa6960a34d075c20afe457a315352c72b8b77edbd48ba2e13629a69b536edce8f666c0927df2934958919d41c5f179273ee41444838d31fadb14d4557dd569bae98a0543a460968c7e12dbfb5d5b151aecadf3bee835b8978a9cf773860776d5ea05bd4fd37d65b1db931d8ec732ac73ab6d705a447ccd0914921326df84502630c05ab4b53924213224ee755a0e92cb78f5ed28f54f1b6f75487e63c462429c9392b17aa69367b1d028b0af9f2324d6c19db1deccdabcf5d966775ec3b1140f24d023e44bf99e4b29a8207c39617ced7c4b95603c2249d348c14d4130dadb3f9dbb816c8703ade1ec046727a3f4e5a3d1ba53219b0a3b77e5df6ce3d76c0b9232a3e1cf5217ce04190b0b676eae855a1a57f1a08ed8cb81879cc1d5581a1bb97f8331461a5a6ba3d60ad3a35b58cfec35cef2fdfc8198b18bb95ba1f9d3b815c45cea470bbcd4d644d17cd91600341b5f469c68f7b23b91dd969a8a5f2c7fe669a0a846d64cbb1d7410bf7972c5c457adc29d55b7cabaf9c09efd588d7f9cb5b8a794326aa15e5fce0b2f6eabecf4c3c59615772fde92a5cedb793e999f7efd404577bf269825499fdfe95047c295552d8435253daaa18b29b934d27c9cff9ce5f1af00efefd68dc209ac75a65f36037dd8d4be6a8040ef414463ec75eb352ad508973e234c65108d1c57973530494aa9172ae682b49ca4c56bbdcf288db372c3f3769dc3434a637c52fbcfabbf30bc934dba0d059a8c66cf2b2421679d2b0d35d1d32a8e660bf2cb9e8325e719ebe69101841eb0dde6038c97715a7c10d74946f59d29e64ece3755a14e8c2ce47c33f17941a1e8c0771859daafbb7fe796650183d291d2ec8e014ca5ec79e17ca7b41aacfd73c756ba1102610a1759164aa0fb5474c4281d70b631c431488526f6e06a9d0339bc7c40c4405e14673bc547971d80478ad32efa5012270f1734c2eaa34d24d8cda3fb0e3f027a7134dcf0b0edc53a5a47fbb41df8e4d75107176a83a7c8e11d24b6b6b6bb1fd01d85714b3b8d2955c64b350c00d4e05f40112c7c92a474b595444c267a7da7b4525a7abf280ab4e2f0698491e094ffa87fef49d50ad620930b04de22f529de2338e3ffdd6ebe8a71ff256738465c69c5ccbe2966818312ed6e1d51d3551c94bd93421f0d0123b079b0ef1cadda335c0b756709033d8186181293bb8b42579747b27853fbd584aa95c8c0244da9bf7d117137f853f164b17bb39d42c1ac19ccf331d5f2e01d2764ab9ba7507e93d69280de5e74bfce9824b8fd2f795cdab90766b70f5caf70b9611cbe6ceed2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>实况足球有感</title>
    <url>/2024/07/14/%E5%AE%9E%E5%86%B5%E8%B6%B3%E7%90%83%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e542f22c531659fd6f6e923314459c359bdcfb7466a70721fe38f08491b7def7">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b6069b7c0b0c4d4d1dfddf52e75e42c1d4cb514423e02e552d43b16841882c833e7bac32fd5e2b2e928e5fcb69b3e3a306e4d28f036090eeb6eb8bbbfee0240327426948c73f3f2bb6a3d3f87a16a487c05b97e79b8ff10ff3cca256a30a56aa5eb0d11a7316d5b58fe39a0a1848a0a83d35b9de45ee6a10e8f3ad507648b1290b718b38040849f3258e8f2ee8477b007cd0cda2db660cbd70985f26fb4af65834461c50f5de3c0f4fb9c15ac5694819605ea23bfdf8a9dc9b02ad41231448fe328df45ee117d9904782efbba411a5de27bf2c2c1ad1278f21af4f1a6f1c48c75bc2727f8a55cd000db26a96671710cc580c27f7c6345e8382451cbf08d383bb4c5ebf0af907a7bad2349da053e7d10613620ddc2dbece5f0629611a6bc2e5c3beabb417dc37c2b7b5902a652ca1ba9cead33fe6ae10869c9dd919080db28ae51652a47fb84765c67d69b4f53befda8e1aab8d64eabaf545608a9a83a099c9427cc0be043781f080fdcdb860bcb034b1434b11dbd640ac77d574a3696dbca417259c7edf77e1c589a6995b2e7af68cb7994a276965877e77e2c52bf663f87e3b3c7f6d8212297af6c273d699d95b8f61e4ab6e54ae09da55b9d8db8b01771dc478e0adfe6b36f1fd4a80d3eb08b82342d48ccef4e2a12c41cad57b77a956d745dea507b9a701ed33f7820d7763ef16d04db3e56b99b69ee0405316ba4ca6725f15b4abae4d7091201ed0f893358964ca6feb95c325b8aaefcaae1d39ff05050bb596798457def1069411d6de7324380940e3611c84017525e03bf474b5f61875bd3f5d587e3a0142c631679f5a4ef021013429ce6049404ab3061f6161cb6abeb744e59eb0195bdaadbc60b252328ec46f8bc78546d160fb2baa641197fc3597af73a8fd14912b80f26dd0119b21321687d38fd5b8675d503d4201acf8108b67f5dd2e429bf7500aadebbe59c7cb889926ce5c51c96f2ab693e4231a6539d491eb231f82b7820d7c56c8ac6a30e780f9449cfb10d30921f5e53c4daedb0fb48b02d490c4634f835fa1ee8d5506e9de2df69ff8e44903a44c1f26b4e0184a5d61f45929691fb8d7f197ca1db3292a42c226eeddaf3ab0271ee4e3ec42eabddfededb312259acd30e4ccaf69a9749b49a7a0db0d5a402e7ca93915093bf47df1b443ac1e9a935db3db3adb52f655b601b502df2c2134d914e398acc3bf6460ceae083f03db9100e191e00d98b31a9fda5781e4031c633ca2854e7752dae2eba2f2b6d5311635f2b412fc4e7e90a238d268edd53d91d3bdd8c90f58081705153111df60f2ca968d2a2481939aa9fa00fa6dba031186f3736b4cf4f854991b062f8e1f0f046de1a01e101af49f33a2638abae0a54b84f6bf5017b8ede63c154ddfefd4bbc64d56d59d4d5f93f84a85ea9bfe66e2bbbfb7f6fe5b8bbd20b4719e408fa9ff6a1f8d8d9df53324a2d62867f7bcd49ece6333167401c3f6719e5d3a4a505eacf0c5045710428944a46b858ff55943d6a7479ca7bd1864f644f221069f6b702dcd77e2efa1f49f5c0a2c63e0ed33059fd3e6fd4f4eb17c0581772d533cdec0ec2bf858a4462e3b19aa172915c7f5ab278d76726ca2d03be2c58d764e0e5b3de86d7221f880944c4a55a031144d7d98f8bea9f07bba3df44c29c169e97561d5ff53111869c2eb966a728c244abe6e24aa2f24cd6f51e33968b3254d318764bf1d48cc01d5f6e9ccae598ff86d9759fc8bbdd4a674dabe2b0a347072358331c220d8d7b69c192560d3a0e54e95ee53d6ed3a2016d643da26ba72837bc8aab899e11b9a10e7dd266c91a46412c59acb9c9382e396e326d4e5eedd19c303e11f1e83ba99534ba2b5e1c676e2c833f3b2d3a6bdb0f4cf0380506fd2afb092c8cbf940a67a84dabd7a93a21d88b6a1b011ba6ce36f6dc3c52d726886d6322eb2d44d3d569ddcd224b3d4ea273fd74c73c384bba088ccf3ba91cc84b1d63670aec9ce5436cbf43790903bd1fdd88e3bbee438d7b1ef1e1bfd0f92f587c0f3c394371b604d962944530fed03a53f75352e77edb08afc84b6dcb5809000932ea30f505cd24bee8d440f1f07c79d767e8ed453c3f3842f5eb400a798abad256fb7d3f2bf44e0911b5537f668bb0695d9f7d8b21ab7134ba5c41dc27cbe984b8ab3c5085c15dfc8db525c341e8fb4a05656d987121471531a073b62d1f7dd94d035af959a38ab2ad25b6e79ac2be9b266ab773d87cadeb5afc0b9d3ea812ed203f8741d516660096edf1f62b7d7ea181b1c3fa1b7634cf6f61de9cb4b30c93947c6b55fa34e834c786d38cc940a2aa9c58c167c0fe34699654ab998e7641e71bc8a5e28cd88ad8e9f2b0125fd3493093fdfbec82a6dffaef2fbd401cf8d7c9288ffc86526a6976f9ace4245bcc6fa2faee237efad1c14c4cc297c147530cbbf2e80eb8bd817655528300c35879bd02c311664bdfbb73bb87e598bfbccaa49a47bb0cdda75b9e3aac8b8558157e72210b71c9a64c7abb18fee215808668eebe5b8ab25c60df9da46e2c079299f4f9d0671da50b4668c7d0052eb941698758ced7babe39b663d7a9d94da6a29f5723c93a91e17d1e258a5e94c0ecace100fb2da16d39426313b17f8375d4363943771243cb103a5d5f8263f0c7ba3f427a7208130b63cfa3ac3d0f517fbbd77f2332dbc5ddb9873988789b6315ce346b6b922159bd7ff2a919fde75d62f7b700a47236fd8d0ff7bf8567a9b483404eaac19393be84f7cbc684810dab6dcfa160d1ee2228ee02a8591b25730c3f04e4a23be3d56b9944a095eb7866b6cd1120c071b023aed21ecfa889ac1d20e95c266b0350a3c2c405bc44cf4ab6e5ddef72f26162f27e0d98239022a8e780532398766922a41e6a1b92b41d3ae8f8c0a59315a38aba65fa189d53fbf4dfbab73e6005252c4475c3820b47c7011fbba84f71f43a636cc4e47f6e166646cfff90ad58efd6fbf52a84b01b068150af2431560f64ad3f10d08cea4500ec57b861cccb2a508208c9eb1e420b8f88cace05ec9fca62b6ab18cd4348ce237081d5e7226fcf43daf9af336dd1a3809d75ea13b25a9e403330e782e056f006e04e0dbc098b31cd588922514215f5c7797e0539bc66401d04cacb78d8d0c4a74ccaa00254d8caef3b0eef7e747ab4ac45d2f2b80e9435edf297d0f7b41e48e654d75a0230654a0fe28953999cf44960af66b9b3e787aa0510b21d48aacdf8e8bf4dcf3b8278a71b2c524b3f07a7341778831dc9ceba55519b8f50fc18c181703f2f36a5bc3355dceacdcf5bda047e95407ab74fda08e58cb7e26a067c5d65c3f20102ca4c6652854ee9d55e31c4dff8e55df8589f6ef463d83dc993ecfb14c7db91d708a71c58e44c5a82af5ea0a7acf20bedd48dae2e14748320116358d492ab0458eb0f66cc848d7146bc2ebf7f5ea4373ca32dc97b0efea63eeeef9482882b4764db81a8a51bb497b6911093a6d56df92917b6334ad3e5947e68d6ccc7dc5e701960e9fe477e2b465378020340eee5f9934abbe49777ac997bab786838fb6821003a4fdffe577e52769dc75ac89d3aa191fb7a8288d06999790056f0c59cee04041f7c6d17de5724b56ff29cc7546e0e28385a9a477f271015f5dae423e4277f4ad2bc0eeaeae2f2ada7a48d3193691d4cd3dec7ce44ff229f77b860a4c09749d4e3074c57b95901db81b2a529853b8cbc28f4c885e03f47167f2ab73b12722989553a916c0b13f5c3e0f1df607379e4c10d380381e5c92aac4027ed63c95e22aca31784b05e7fdf5bef781e2d4615d46d78ca04b46737f73b7b6ae1ee929adfccb892223896b4d66b7a3f42b8814f7ca5a6fc4dae64c696eb1fddaa0b2afdf8c849c299e334fc3528e3c0f4b0a16c18df468c8281ea210a495228b8634c33e7d906302363480c9be0699e597bea5b946527f5565facca345e89a217d57b9907cc3c41cf719f39812d0f5af089d76550e9aa5c627fa55e7f8893365d0c036af4fe4a024b5b80d7970b096865e61a1a44a819d124057c41ad8b8e2db79ac3655109908d9b8c6221a2c2fe2717bda06d47f76a4a40ade249f4a8e27603db242bb2316338202e317cf5d3eb8c01bad321515dabc5431806b317e89b463b0415ae1a1b9ab82e0611fad2489afb7c17a4218a17b723716e28452ef1e79ae4a830023009e0dbbb11559b50e20ac46e4c486a0be765484c78ed519bcefaed549299fd51daebe28934c198a3e0c073430f3912b073fb8cddc4ab409f6b4d80f1c490718d7e5b8f3e48f5dc490ec37f95c78847d56549823ddd006dfbcb22d7acf777e425b28be43832a434c0934ed20e18fab3a09f83259d970d834594e25142fda6bf0ea48957959af15620a15213d2b7848be1392af478a164c477edacc701909376baef5b46913b6976cddb75e65169905171b4dbcb596efbeae4844bbd6c1f9c8f226ef53bc87d8f4eebf780bfd30a4b0363ec542e474ae93d7cfbaa2b949d3133751abdf43ddb4c85ba8d1619b100e25ae55f07f85cabea4789156f0ee25c4ef52d95b5ff4fb11fedbb13deadcb675a1857e8143d42282defc51698d9c4acfb946516ac1d82739d1aba90398188fbb142e146afa05c7d43a5ba7aec303afbf1d6fbf2421efc4395fb06298e546c246907d3f68b22f321b4c1b06ecd99d6d0948d65e3d12f3ef36b377667c23cb238f3a47b88741443679757f374347188b27ef0d8d3ef5e7484948a8d11efd63b8ab09f37d47beb82116e168313e0bffec4e6e93cf22db993a14759b9b887f3fcb0c924008dbb23f5db6928035c77a8d32561b1695c8dc37061363364fd5915c7a532c015780ed99c6564ae03285c2c2a2e5b36e382e81aaedeb5cbea3fb135ee1e907cf37b39087d9d41fb054772c1dc6c8bc768cb11f587160ed05145f7751e29904be497c522b10c954c40a152cd45388573cee7e1034a2b501d75c036019c55291e1f76abdef4633757dd78a992ebd66e8aca281d821232b4e501a75216086aa5f55355853218c60ecff0aa1a6f3610410950ee2b0dec27b5376d1a4525297debf72149436e8a3e28b644317100966a66a2f8bd959056e8485c1be883b3a383f1020de7976e75e4bccf91350acb43eb59fb2248ebd486323212807015be2ff79b1e462bb5ab1f175909548cb92dec3c0068dd8dd3060f8885ec923e40b9ed90016f5e8608d0ed96611832709b3a606b86d03ce1775e466cb2e52b2dc3c63c573825abc4d6b2b3fcf14329bfb5d0a7e0b3bb6a3e6c3984520de51a56e7a6bb82f1b4001040268e3998462d6ac0d49856c45a7fb6c912855c69c825229b243de398d1ffa7525d2d53869bdfa9bfe280b59bc0c31e78e795f4add6a216a28926b3c75ef7057b3180f837e25ca1b9507925afd18bb06f9789993f7f7ee213cb37beb0d676dc7401d6141bfff86444e62478efdd709841259cca211aa5544d1d951438e825654419a49437c91b65252a6115e189bf9e2665122b0f3864b8e2234687acc8c4fb9235fa8f2eb9619e78d59487538554aa5d7ff3e4d933ebf7fca98c40d407dfd3dd42e286efdea2894c6026f9250b2c42ada4c0bd698c1d6095e788f6d14d7937cda555f48080b332dd3e4cb59e6f28c92cbbce276385fa0457e930a18c31dc1b3296eb4189ca1d68d4b11b935425cabbd17f57b3509ced4a8235cdd003580c1b6b71059460265211e708a9f1bb269446e3637cc407fc6d4f66632bef996e47524e0f3c52b6be05a94e1d0b20ab9b5ae47c6958df050832ff1a87a80dc3f65d9c74f3864e9332645f1b7e886069cc0da8dc251863189950293e934102f083a0904719092f274450e749896ebd204ebb0abd3fa8119905e8efbfef23f254652923387ffe18a151f9b9ec01436298c6a5262f90e67c1e3fb98d0195b508ee521e29e5dd9ea5c129746912760835699ec388247c596da339fb591edf16f2e98fa912d763387d5121d9b52cf1caf7db0ec5cef6dd29d1da84e663627bc6a7a33c16a033b071db975a4f2ac0b0fe9badcb4a1aac63389e3b9162aaad21d0d5d17b75b7bba194da1edc9d4354d7d3f101abec04cc23ed1a7b5d0f3eaf23f1c2c465ad3388a2a5ae119c188df0a79bd44eb43a0d72dffeb20397db25fbd1b8665b8123a152de62ed0f6ed68b76851a631feeef187b5269aaee3075c29b30541dfb40943637a4f2586d5f122990f76f634ab18364dfdf4aba4d53dc9dac13363506856a24ca04279aa54a65431d22e76e49342720f93e7c2f5b7668f244e5474700b1bfddb4ef4b12fec34d207a9c62cb0d70c6abf88822551ca15b654fa4dcc720987f334f8b9067fd7cafee6fe1859ec43ed6cee49ffac8275f6b4f94f9ffbaf949a1c5f1f956e68e2770abbe7eac7b47932caf6b6378ff319a793d0aaaedcda7e5fb85aa54a1247ba5c6ac29d6ea180e97c2d9bc64dd9f5676244a03cf0f936d0e9422bab4c292a1ccad7bf196e4523f140d4760b7391077addfcef32697ca3f45569ced556bee046480f67950b856a16573634c6f1dacfb300f085fad50ceba1475dbdb211d0934cf5cabd4682cf77ef9ed5ff7bffeb3f260c7a3e4be9fe789f5fb953cb2d8b00a33651e8ebaafaa373cf2d4b101330567f125d2e8957f093fa2290fd31211ed6ad1e9ae675aa7f65995a10c87e2317dedb98e74b286ba65dbd52f5c002b0f2078892862aef6f5b652dffe2d5860300165d407a4b93cd5abbabae529213631c55b36e6b07b7091bdb34d5445c1adb8c9f9281b22c5cc98c3d11ef1604648b5fc9211b8b3f62481abead73f2c6577e28c13c5232b5b1c31f542b8d717bf305d64cc398ea152cd9ba6e0c0d7249d091306da65ce3b21c63efbd798ba0b9da549d702aad98b167086b6b846b2e2be2ecd1555023b738f663987042092b24842fac0e98438125d6a8700eeb19a31d20ec6c6273254c2da2d647cbf01c503e09818d10d61edb792645499fe175e59685933bea3ba4edca286c120c46597944383acecfdd71bb3f624ca83aef299ec7665ff99ca61f1f8efd559272afee34449c531574c8a4386b4f035760737cc828a8f867e124c46b7dd14fb5cb060f351e534e12fbd85517cc62b7f32002326bcdc479708447a4c1d67e880470594b0331487c61fdbf27fc4aba322acf26d21951c61986c6f422553bd8c96976d5afb632bc24b87ccaef222b957e061da925573476334ca72d5b366891a8ebf141638c63dbe6d54e7cb92aa8e047b40681e8fa67595034e169e00b8311ff01137eab9fa6f1c87d79bd6eb9f4fee793f4f3a47f315972480223d59ea9be5efce4500e2b9f641d47f2cd93bfd8ac4d1a7ffc88c7c8cc5297e3ec1cbc01b76ecbc628d987ff906b26e58fe7b3d163a4629fdc4d737bc0cb02aa13b0df9f44987527a9d87528248a870fb6e735743a16bf1718bbcb1ebad37a7d29a2673376a41a5de1ee8bf2086796fac389c176a33b9baaeb18248f367014706f943837d52e75321f7f8138234dfc48ba2808ddf95e65cc5a49788afc234bdf50991e1eb648b67af9b2275e08910c952e066004c5346d8b0502f4bd62f86720f070b67d00c1c26bbcca16f059281e27b8ae5c011ee83389228fa96ee0b02bf93904352179764c1ae4885bb22dea62fc80de514970909161bb587aa0a687e8899b2e42f1e39aaa7f6cdc2c9b967121b0e7c5d8a2e8b7acc0bfa53c86b673e75a33f05dc84cd7cbcc331170c2cc171d8682d2734110a47272812c59cce9a800a8e2225ccb17e25d6649c15230feb8b872fc71415c1bedc034ae6e40c49d09f97424595648b14a6dcc8a948e1a103ba75db8c2b4a796e2f770179a0d43a9920d4dfe29f0fdca72a1e9481cf0c2b22c24caaca1c5985bdcc793f33a2761a48ab63b9564c106464acf004e75c5a21b512a98f65c3de35ac221f962382cf09ab8e35fee8b3a78ec790c74aa76f695aba4168fc837d61eeb5e24421f16acbbf44c5b8f67a0c85e63232a52e140f1900cb5273127b24df072025e85bdee13814c1d19928d11cd1b472b2c5f4397e3f7e81f4b04ef8e3365558836b9f28e187c59916677d719f451a4241aaaa01a5c48fa15773d90777755d048eed24e0b93d4bb611b6520e0870b623a000c2c35dc77997bb0626b333d447abaa6c4fe23a331382ca8242a5d8d03e108bb544679d4eef3cc8660cfe144b8b240548231f796246964a288c3fc350df54e506352cce9f28e1e3ff1614714bbc2c091963095ac4207d0fdf70c24dc580636841ed735773ffcebfad9f6c915db897a653f7ea009d201a2d838a9d48847911996807b76dfc033fe5f938f03042ed6feef8f34055b4db848e462ccac0d627cd0cf8c5b3bfb9af92ee9317ec701b8614a6a9c6b1566882b15c7a10ff7ba1fbcc932fdc00c7a6105976646ac5f802fbcf6618e9a36120832ef8e007d789b335486eea8364d6128ad4b4511c1181f405e3cdb5cb9e87a33f35113195e91154fc65f7e73c1ad4a809afbad4538ec3ad8bb2c5428ebbcff9b47449154d2f621c597183aa457ba527c05ece32cb7a31fd033a8b3a2f231c89abe59a1b6dae6d63b7f4c4e8da1fb26c34be936a794ceffddb486dde5535e2bd54642e3c0c196074790764f123e19a1319dafe43946e2a708cd6e63b98d377eca49a524401df77576b1386540eb475e54e98e578c312267c7cbede52d11eaf2b2b59768516e6ac3a78369b74af545707e6012a1fe5fe9eaff76206b210d53abe655720e02d4bb06d0a67e34adb403673ea809690313d5cd9100f824dc443b4c9686c796268b025f51e180cbcb8840eef4d300294fa077d0a2a8749dd625d2297e61cf188dcf85f211e7e22a41c3795d86f3171e7d5acb44804778d40170c311017cc445f2e955a27f69712ed4c3ddb34ee83b663283460ab793fd45567ba3fcbd0e837d7c8dff6475f3917acd67dde4570b57a083c1a6efd2a25d92b88bb3c98d1f5b916cfdbe8d859ffc11b72be194a75b4cfd8e390fe6e1d42325f31df9a531f0571ebcdd0c78df27c921762ee3eb725cb62f4b6c449d29fbd2186d92253139ea124f99c27b28317f7fa26e21ab386d07b9d70ee28024f9441ec3df729413e5d78b896825167a0082c7f681bbe212c8af1111daf9dfb35ba05a6560ef46fa5bf1ee43e33bd1fdbd3a3d53e55fee298f8b8c48e07cf8372f01701b9e8e060abfdf94cc0adafef7607e90f212cc28f131c9d5a84fb55b44eb554bc622a72ca24a7c0f1b3e514ee5fa92ce51603ba53b094a12ea0ed8903b5e78827da545e48b3de094938de2f8e91239d3c42468766455f73123d0bfd000249b80a25fe3f2e4815265953931ee5d84bb895d1e705a5b160e3600a93e1e8c12acadb3e308c0fef3f3892d3b5652876c50e92befe6d37a4f7d6ecd653edf7da289fcb38ef638e2174de2a2bc1448db5a8a7f9830f59cdf801724523ebc57e6cc6a6fe33290b465c7f61ed31f1f8194fc1eab63407c184e0fd4935c590717b7b74fc10a5f8ce8584f4409d740be08d3ce91413de9a29b918a5148177274502f3c882a353bf807e9ac699d9c233fff2de099dcefc9c4da725ccba1452b9dda6ff5216a8f14f423abcf24baff4fd7cfb4b16ac98151bb06ec47837bfd1119d337b9a0427df38f660b47a60f9d150ec37d173e2f0490d3301682395ad2fea2cb3cad945cde4cb8e04ae7f1e33daaac1d41221bd5b93e0c1732e5459b44548878e648a4120b995d66c889b773020e591cd0ca7ddde999cb1c54977d2b86cbbd3e65951749f4ae702c13bab810e9db0a9bcd0f53e9202f13aba5fbe618afe379c87baca2a444c48f3c4fd05ec6fa494652c662b9b2b195d29f1caedf433041b5081e18a7126f1f72896bbf136ecf3f7dd39214b666174845f166022518a9506530746df61a8fcd46fc41e00b0ad38131dcd7a98aa18f2624dd73625be2bb7ead12110177ea24ba9c39d55dae0bcfacec03469e18d20b5cc8361b3aa2f3178c547c0a1a413217b5795b673d842a5fe817c169828257aa2c58de9ccfeecb87da0d27f16ec3359e1ba8eb6eca13fa7f229d25173e7b3089ed8d418192824c7bd1a6a82ab0ccc88bd7d74b736a8808182b88b6ce0c556d84603ce9d4e732797a9d169cc1e4898fb6e9954cf668412592fa170e8e7d70a367201cc806b997ae7dabc566e747838f149eb001f3dc8b4367060febd6f7c581c83af9973ef3326086c51e4552c6080610237e5f72b5d79671a4b1650d1bb452c78ecb44918871b357c27ac2f0fec75d61cb8ffec4a78ef590b363a24194d4495922e085cc453513cb47535477b46de9d8780592163f09b8fe899ec9bc991cd33a02ff688142d7e214c90e288be3e4907097c60bb8b3282fd4ebe2baee4c14055429bc266febddc169f7e564e682bc1804c8ba5e1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>实况足球</tag>
      </tags>
  </entry>
  <entry>
    <title>大学物理下不理想成绩的反思</title>
    <url>/2024/01/12/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E4%B8%8B%E4%B8%8D%E7%90%86%E6%83%B3%E6%88%90%E7%BB%A9%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="282517c806c6bd51a778f05d0bb6dfe6325b4011fef006a7613dabcbd0f12258">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b6069c3822921fefc82050a64f15064072fe939bceb416e76afb24c5b5d808dc4d5b8d328de1094718662950a221e971458f0c219e8284f6469f33d3fc54880071615e76ac53123f4b10ec39a155a0ebdcfa9bdced8f9ee5e3a8db89d41612f3d1fc7e44ef6aa0c48e26275ba558302ace998685a4db0a24bdde87eb76d376f8c26cbe0f5d85d710ea8625c6ace70ad5092674165db6680d4f0781c0aa1f32d412020539f2ac8560e184a3cf6ac055bb016804506dfed1f055fdd198cca89abdab5c6f71cb8e713dfcfda4c9697fd3638874e69573a01118a92c2187e4fb01e1dc2176048032816e5cdaee22c9421dd806a10683b983f25a14761814ca33493ab0265ed10d5a4d737417e4d5980bc582be66f1e05dafaa869fb14f070aeb7a5d6fe200410ecc0a968ca14155a52eec7ee7fd60160a19f82826b29271fbc3c77de72c6bac06594994e5c4879ea0c7703c8927be3db135960dd71f7864dc04c25df8de9466755e9dd44d86577f4ae77486c45d470782c100d298b68e7be6f7f8527b33cd75a8044c90ef52f5d8b0d51416f4aeef18cbdb395e5774a967fafe04d14870849372658f087af5c78175aea0800e21caecbd3a51a3512a82e9a87ad8f8afd6362a61d66afa9a4fb3f23966cb4c8c78ad837feffa26af6835989bcdeca6288f83a2c02f75f69e0975c9629224f9c71cb9b9295867708aa6f2917df1262946e0e323970f943568c69d502299411a535456bd1278a6845babb0c419132912eb381a558e03bba07bf8cd61bdd4187f06aac52defe65473ead0d6b08f1081395db996efec79cf8ced6366f17743388a86c32e2793280dd22acc8cd79900768ba3f7d8c6d85319fcd4113d208351859e6c7553b9e6813f68724f1009675e0f594ec2712bb19b0a1fd76a5d332bb38554559e128256a92e4d7034839bfb4bbc3a534df8f6e3b5b8f796e670579e97b57aa52d1b4418cfb41404c7bb50c7e7816ce8dd7c4732540f6559cabb37c6411f270844ccfcdf8bb5a701b976ba5890937c6c5f1d89c9ca062b366ec69478557a4a11add8f7e7df68df930b17006b2eade28767272cd501d1d8707db6ba0a2536f526dd400620790864f23efe7c1bb56ff17944a7c35e86cedcdac451170d1b42757ec83e22c9c3861a321e4ef71c4b1a0ed58384b4db1bc3671ccb6e38c14b37dfd4ccb0b8cb75505de7a0bae0959f41a864bdeb5a619f1094a293e7a389c3c43a07e5ac23ccef67c2996861332621d4b72ec754fdb8b5c97d2b9222816e6013c2b6b749f4d066fa131f02ded5899b229334576cf490265d2f76f94f1eceea58526871893edfa02984454f05b4771cc045eda85d8fe3ea61e8332d6a9ec7241311d140b408d0e3c0e8075feac8b582a5c1ad09c2f9902aeb5f13017e37a2190334e98bb13993422f108eccd0af6e30a9642c8ab1536b54317c09b5fd26d6b192ac01105b5d9e9aba79f0eaf4a815b9c307941e6e9ccb9119befd23266a28bcffb3210ef4dc8764d7ac21dcc40b956b272f439b9ffc47eb3362bdb5b9c70aab383e14cdb650f379ed2ce22224b2e4b8ee0f5d95c9e2b2dfb31aab6982649aa79eab0c378fac2d89751285d0ff5f697539307534d9c049534d92e9726ba3e1e280af04122beb2db645324062a9a5e9cfb6d0aca8cd2e140e9a67270667b8ad815dbb0215a71be0823ed37b6d59e036c4b9cdaef88d204d0a4c456f4d8af58e1999f138f433c9fbe2b12781f2c06d92d116f52d111ed0b71147c93e4f6f9aefc1171e5f517b874f287176230aa94e34d94b122ee5201af57675c23a900f75fe5969e23095f6e2384eb7dd572a342b9357e8861a3e36df285f90be6e83f5f37359f373d7daf72c5764ba6dddc247ffb70b005536d8e65516bff1d7520277c89cc9b85f250f546e3106d8da4d5f57a1cf332479251423863d0432152a4ba4f0217df962262ecede0a64cab020c209b42d1daffad2a3bd9bd794af8971eeb3a803f359f362e3b19ea8a45ebe1def3b0c95e5bf7eade041038bc19315f112404377f1770c91e1ddce78e77e13e6de57287938343928f4e13b0e069e7e677a9d8dcdc06ec010e46b58642b4b9a42e270d4d49f3b7cf403bda7317b4b9714f561a8a955caf6533d4669819f89fd21c908775e737c6f2da8485029d5963f3752752902cfa83d6d80400f4fd3b2737989c5e04f2969a1a46dea0d61c7f58d3f32c253eefc047a50dde0e6f8e61e88b55317a1b44d85d47c1b294bb918f1cd29643d5d7bb34a98e3bd6ba460b6a009eb493ef272842604432e6c3b1b4d967362c7449411663b916b0005133e9b1ffa246bac10a14532c171baaf6aa34d26f2aceca5aa052852f743e92266647c1f3ffc719025b3d51a7cc078fcdd58ee924a22f1da8f1168017c5cbef7560ca5a7a34bbdc3f2344ea968bbcd5059d5e9df5ed84cb20b7197b28e2cd5bf69aa360281c2de5c7c5cf0b3e297bfdeb89de0907bb918cf5c3adacfcf6906a4396e75551d7411a3ecd4e4393b6a9f8fce1ccc27dd96a85781e933ac89ae09b30c8296442d01b943aaff2a8b475fff150fe0e278d865995e2016b3bda0c1911f107c24f51a20b0eb865da2be6856c33</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面对失败</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>心里话</title>
    <url>/2024/09/19/%E5%BF%83%E9%87%8C%E8%AF%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d3d9af19cf50542454e2f6634336c5c0e226f0db406ccaacf8de3be1ccfe1990"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-实验中遇到的问题</title>
    <url>/2024/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong>吐槽一下</strong>：老师就光给了所谓的实验指导，里面甚至还有错误，一切都得靠自己去摸索，去谷歌，去求助同学，真的是费时又费力。</p>
<p>为什么不能给一个详细的操作步骤呢，有时候在网上真的找不到解决问题的方法，会因为一个报错卡住好长时间，热情逐渐被磨灭。</p>
<p>所以老师的作用到底体现在了哪里？</p>
<span id="more"></span>
<hr>
<h1>一、数据导入遇到的一系列问题</h1>
<h2 id="1-要先建立没有外键的表"><a class="header-anchor" href="#1-要先建立没有外键的表">¶</a>1.要先建立没有外键的表</h2>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-23-31.png" style="zoom: 50%;" />
<p>例如在本实验中，要先建立没有箭头指向的表，也就是REGION表和PART表，它们不用参考其他的表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 地区表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> REGION(</span><br><span class="line">    R_REGIONKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    R_NAME <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    R_COMMENT <span class="type">varchar</span>(<span class="number">152</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 零件表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> PART(</span><br><span class="line">    P_PARTKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    P_NAME <span class="type">varchar</span>(<span class="number">55</span>),</span><br><span class="line">    P_MFGR <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    P_BRAND <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    P_TYPE <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">    P_SIZE <span class="type">int</span>,</span><br><span class="line">    P_CONTAINER <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    P_RETAILPRICE <span class="type">real</span>,</span><br><span class="line">    P_COMMENT <span class="type">varchar</span>(<span class="number">23</span>)</span><br><span class="line">);</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 国家表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> NATION(</span><br><span class="line">    N_NATIONKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    N_NAME <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    N_REGIONKEY <span class="type">int</span>,</span><br><span class="line">    N_COMMENT <span class="type">varchar</span>(<span class="number">152</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(N_REGIONKEY) <span class="keyword">references</span> REGION(R_REGIONKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 供应商表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> SUPPLIER(</span><br><span class="line">    S_SUPPKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    S_NAME <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    S_ADDRESS <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    S_NATIONKEY <span class="type">int</span>,</span><br><span class="line">    S_PHONE <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    S_ACCTBAL <span class="type">real</span>,</span><br><span class="line">    S_COMMENT <span class="type">varchar</span>(<span class="number">101</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(S_NATIONKEY) <span class="keyword">references</span> NATION(N_NATIONKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> CUSTOMER(</span><br><span class="line">    C_CUSTKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    C_NAME <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">    C_ADDRESS <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    C_NATIONKEY <span class="type">int</span>,</span><br><span class="line">    C_PHONE <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    C_ACCTBAL <span class="type">real</span>,</span><br><span class="line">    C_MKTSEGMENT <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    C_COMMENT <span class="type">varchar</span>(<span class="number">117</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(C_NATIONKEY) <span class="keyword">references</span> NATION(N_NATIONKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 供应商-零件表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> PARTSUPP(</span><br><span class="line">    PS_PARTKEY <span class="type">int</span>,</span><br><span class="line">    PS_SUPPKEY <span class="type">int</span>,</span><br><span class="line">    PS_AVAILQTY <span class="type">int</span>,</span><br><span class="line">    PS_SUPPLYCOST <span class="type">real</span>,</span><br><span class="line">    PS_COMMENT <span class="type">varchar</span>(<span class="number">199</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(PS_PARTKEY,PS_SUPPKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(PS_PARTKEY) <span class="keyword">references</span> PART(P_PARTKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(PS_SUPPKEY) <span class="keyword">references</span> SUPPLIER(S_SUPPKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ORDERS(</span><br><span class="line">    O_ORDERKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    O_CUSTKEY <span class="type">int</span>,</span><br><span class="line">    O_ORDERSTATUS <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    O_TOTALPRICE <span class="type">real</span>,</span><br><span class="line">    O_ORDERDATE <span class="type">date</span>,</span><br><span class="line">    O_ORDERPRIORITY <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    O_CLERK <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    O_SHIPPRIORITY <span class="type">int</span>,</span><br><span class="line">    O_COMMENT <span class="type">varchar</span>(<span class="number">79</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(O_CUSTKEY) <span class="keyword">references</span> CUSTOMER(C_CUSTKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单明细表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> LINEITEM(</span><br><span class="line">    L_ORDERKEY <span class="type">int</span>,</span><br><span class="line">    L_PARTKEY <span class="type">int</span>,</span><br><span class="line">    L_SUPPKEY <span class="type">int</span>,</span><br><span class="line">    L_LINENUMBER <span class="type">int</span>,</span><br><span class="line">    L_QUANTITY <span class="type">decimal</span>,</span><br><span class="line">    L_EXTENDEDPRICE <span class="type">real</span>,</span><br><span class="line">    L_DISCOUNT <span class="type">real</span>,</span><br><span class="line">    L_TAX <span class="type">real</span>,</span><br><span class="line">    L_RETURNFLAG <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    L_LINESTATUS <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    L_SHIPDATE <span class="type">date</span>,</span><br><span class="line">    L_COMMITDATE <span class="type">date</span>,</span><br><span class="line">    L_RECEIPTDATE <span class="type">date</span>,</span><br><span class="line">    L_SHIPINSTRUCT <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    L_SHIPMODE <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    L_COMMENT <span class="type">varchar</span>(<span class="number">44</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(L_ORDERKEY, L_LINENUMBER),</span><br><span class="line">    <span class="keyword">foreign</span> key(L_ORDERKEY) <span class="keyword">references</span> ORDERS(O_ORDERKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(L_PARTKEY) <span class="keyword">references</span> PART(P_PARTKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(L_SUPPKEY) <span class="keyword">references</span> SUPPLIER(S_SUPPKEY)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="2-建完表后需要调整表结构，以便之后导入数据。"><a class="header-anchor" href="#2-建完表后需要调整表结构，以便之后导入数据。">¶</a>2.建完表后需要调整表结构，以便之后导入数据。</h2>
<p>本实验中要部分导入的数据和表结构不符合，需要调整。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-35-16.png" alt=""></p>
<p>但是老师给出的sql命令语句是错误的，需要自己重新写。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调整表结构</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> PART modify <span class="keyword">column</span> P_TYPE <span class="type">varchar</span>(<span class="number">25</span>) after P_MFGR;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> PART modify <span class="keyword">column</span> P_RETAILPRICE <span class="type">real</span> after P_TYPE;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> CUSTOMER modify <span class="keyword">column</span> C_NATIONKEY <span class="type">int</span> after C_NAME;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ORDERS modify <span class="keyword">column</span> O_ORDERDATE <span class="type">date</span> after O_CUSTKEY;</span><br></pre></td></tr></table></figure>
<h2 id="3-将CSV文件导入数据库"><a class="header-anchor" href="#3-将CSV文件导入数据库">¶</a>3.将CSV文件导入数据库</h2>
<h3 id="1-将CSV文件的编码格式改为UTF-8"><a class="header-anchor" href="#1-将CSV文件的编码格式改为UTF-8">¶</a><strong>1.将CSV文件的编码格式改为UTF-8</strong></h3>
<p>mysql默认的编码格式UTF-8,所以得把要导入文件的编码格式都改为UTF-8。</p>
<p>操作：将csv文件的后缀改为txt，用记事本打开，选择<code>另存为</code>,在右下方将编码格式改为UTF-8，再将后缀改回csv，保存。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-40-00.png" alt=""></p>
<h3 id="2-导入数据前的准备工作"><a class="header-anchor" href="#2-导入数据前的准备工作">¶</a><strong>2.导入数据前的准备工作</strong></h3>
<h4 id="1-查看是否允许从外部路径导入文件"><a class="header-anchor" href="#1-查看是否允许从外部路径导入文件">¶</a>1.查看是否允许从外部路径导入文件</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输入指令</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结果</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> require_secure_transport <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> secure_file_priv         <span class="operator">|</span>       <span class="operator">|</span> <span class="comment">-- 这里要为空才可以，表示可以从任意的外部路径向数据库中导入数据</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<p>最开始会出现secure_file_priv=‘系统给的默认路径’，表示系统只能从默认路径中导入数据。</p>
<p>但是我后来将csv文件移动到该目录下，依然无法导入，可能还存在些问题。</p>
<p><strong>修改方式</strong>：复制系统给的默认路径，在我的电脑里找到该路径。</p>
<p>或者在我的电脑里输入C:\ProgramData\MySQL\MySQL Server 8.0\my.ini</p>
<p>能够看到一个my.ini配置文件，右键属性，点击安全，编辑。选中Users，勾选完全控制，点击应用，确定。</p>
<p>之后才有权限修改my.ini文件。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-57-47.png" style="zoom: 50%;" />
<p>打开my.ini文件，搜索[mysqld]，找到secure-file-priv=‘系统给的默认路径’，将引号里的内容全部删掉，空格也不要有。</p>
<p>即<code>secure-file-priv=''</code></p>
<p><strong>关键一步</strong>：重启mysql，并不是exit退出再登录。而是在计算机管理中，点击服务，找到mysql，右键重新启动。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-04-51.png" style="zoom:50%;" />
<p>然后再重新登录mysql。</p>
<h4 id="2-查看是否允许本地导入"><a class="header-anchor" href="#2-查看是否允许本地导入">¶</a>2.查看是否允许本地导入</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输入指令</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;local_infile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结果</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;local_infile&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> local_infile  <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span> <span class="comment">-- 这里要为on</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改为on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile<span class="operator">=</span><span class="keyword">on</span>;</span><br></pre></td></tr></table></figure>
<p>最开始local_infile=off，需要执行指令修改为on。</p>
<h3 id="3-导入数据"><a class="header-anchor" href="#3-导入数据">¶</a>3.导入数据</h3>
<p>一般来说已经可以导入数据了，但是我执行导入数据的语句后依然会报错，要么就是没有权限导入，要么就是找不到文件。</p>
<p><strong>解决方法</strong>：从命令行中进入mysql，同时设置local-infile变量为1</p>
<p>win + R进入指令框，输入cmd打开命令行。但是我在登录mysql的时候，会报错<code>'mysql' 不是内部或外部命令，也不是可运行的程序</code></p>
<p>因为我一直在使用mysql的客户端，似乎没有配置过环境变量。</p>
<hr>
<p>命令行中的mysql实际上是一个可执行程序。</p>
<p>出现报错的原因是，系统找不到mysql.exe这个程序。</p>
<p><strong>解决办法</strong>：给系统一个目录，让系统可以找到。</p>
<p>把mysql.exe所在的目录，添加到环境变量中即可。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-21-49.png" style="zoom:50%;" />
<p>复制该路径，搜索高级系统设置</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-24-15.png" style="zoom:50%;" />
<p>点击环境变量</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-26-49.png" alt=""></p>
<p>在用户变量找到Path，点击编辑，将复制的路径添加到里面。重启cmd命令行，即可运行mysql。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通常登录mysql的指令</span></span><br><span class="line">C:\Users\<span class="number">86176</span><span class="operator">&gt;</span>mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="comment">-- 输入密码即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入数据时要执行的指令</span></span><br><span class="line">C:\Users\<span class="number">86176</span><span class="operator">&gt;</span>mysql <span class="operator">-</span>h localhost <span class="operator">-</span>u root <span class="comment">--local-infile=1 -p</span></span><br><span class="line">Enter password: <span class="comment">-- 输入密码即可</span></span><br></pre></td></tr></table></figure>
<p>现在就彻底地完成了所有导入数据前的准备工作。可以进行数据导入了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 导入CSV数据</span></span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;C:\\Users\\86176\\Desktop\\database\\lineitem.csv&#x27;</span> # 文件路径</span><br><span class="line"><span class="keyword">into</span> <span class="keyword">table</span> LINEITEM           # 表名</span><br><span class="line"><span class="type">character</span> <span class="keyword">set</span> utf8                 # 编码</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>           # 分隔符</span><br><span class="line">lines terminated <span class="keyword">by</span> <span class="string">&#x27;\r\n&#x27;</span>;        # 换行符，windows下是\r\n</span><br></pre></td></tr></table></figure>
<p>第一行的文件路径要把<code>\</code>都改为<code>\\</code></p>
<p><strong>注意</strong>：导入数据的顺序和建表的顺序要一致，即先导入没有外键的表的数据，否则会出现空表。</p>
<h1>二、mysql登录不上 ERROR 1045 (28000)</h1>
<p>在登录mysql的时候，突然登不上了。</p>
<p>使用mysql客户端输入密码后会直接闪退，使用命令行输入mysql -u root -p，在输入密码后会出现以下报错。</p>
<p>ERROR 1045 (28000): Access denied for user ‘user’@‘localhost’ (using password: YES)</p>
<p>折腾半天后，我认为是系统可能把我的登录密码给抹除了，所以需要强行地修改密码。</p>
<p>在CSDN找到一篇文章完美的解决了我的问题。</p>
<p><a href="https://blog.csdn.net/m0_46308522/article/details/128851046?spm=1001.2014.3001.5506">https://blog.csdn.net/m0_46308522/article/details/128851046?spm=1001.2014.3001.5506</a></p>
<p>以下修改方式适用于mysql8.0版本：</p>
<p>Step1.停止 MySQL 服务</p>
<p>需要在计算机管理中点击服务，找到mysql，点击停止服务。</p>
<p>Step2.创建一个名为 <code>mysql-init.txt</code> 的文本文件，里面有一行内容</p>
<p><code>ALTER USER 'root'@'localhost' IDENTIFIED BY '你想设置的密码';</code>，然后保存</p>
<p>说明：</p>
<ul>
<li>后续会调用这个文件，以设置为 <strong>‘你想设置的密码’</strong>。</li>
<li>这个文件可以放在任意路径下，为便于后续的步骤，我直接放在 C 盘根目录下了</li>
</ul>
<p>Step3.</p>
<p>1.以管理员身份运行 cmd</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgeff35470f3481f589cdfb6eff1d94cb7.png" alt=""></p>
<p>2.切换到 MySQL 8.0 程序所在的 bin 目录，可以输入该指令：cd C:\Program Files\MySQL\MySQL Server 8.0\bin</p>
<p>3.输入 <code>mysqld --defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 8.0\my.ini&quot; --init-file=C:\\mysql-init.txt</code></p>
<p>我尝试的时候直接复制粘贴即可，但可能不适用于所有人。</p>
<p>具体的输入指令：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-13_14-30-37.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-13_14-30-50.png" alt="Snipaste_2024-05-13_14-30-50" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-13_14-31-02.png" alt="Snipaste_2024-05-13_14-31-02" style="zoom:50%;" />
<p>4.输入完上述命令后，回车。发现光标停留在空行上，这说明修改成功，如下图所示：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img6dc858dd50ecddebe9e62a9b7574e535.png" alt=""></p>
<p>5.关闭当前命令行，必须关闭，否则无法启动 MySQL 服务</p>
<p>6.删除 <code>mysql-init.txt</code> 文件</p>
<p>7.在计算机管理—服务中启动mysql，然后再次登录（使用新设置的密码），发现可以登录成功</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库课设报告（图书管理系统）</title>
    <url>/2024/05/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A%EF%BC%88%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
    <content><![CDATA[<p>村雨的数据库大作业——图书管理系统</p>
<p>重点在于系统测试图，其余概念性的东西可忽略不看，都是些废话。</p>
<span id="more"></span>
<hr>
<h2 id="一、图书定义"><a class="header-anchor" href="#一、图书定义">¶</a>一、图书定义</h2>
<p>随着信息技术的快速发展，人们对于便利生活的向往日益趋增。因此，本文通过设计一个图书管理系统，来实现读者的自助借书和还书需求，读者还可以快速地查找到自己需要的书籍。同时，为了实现信息的高效管理，还增添了图书和借书卡的管理功能。图书馆管理员可以轻松完成图书基本情况的录入、修改、删除等基本操作，也可以为读者快速地办理借书卡。除此之外，为了保证信息的安全，针对图书管理设计了数据备份和数据恢复功能。最后，本系统将对所有的借书记录进行保存，并对超期的借书记录自动给出提示信息，保证图书的“安全”。</p>
<h2 id="二、需求分析"><a class="header-anchor" href="#二、需求分析">¶</a>二、需求分析</h2>
<h3 id="一、系统的综合需求"><a class="header-anchor" href="#一、系统的综合需求">¶</a>一、系统的综合需求</h3>
<p>读者和图书馆管理员可以使用自己的账号登录图书管理系统，进入各自的功能模块。读者可以浏览图书信息，通过查询书名找到自己需要的书籍并完成借阅，还可以实时地看到自己的借书记录有无超期，及时还书。图书馆管理员可以对图书的信息进行录入、修改、删除，为了保证信息的安全，管理员还可以对当前的图书信息进行数据备份，在需要的时候进行数据恢复。同时，管理员可以通过书号查询和书名查询对图书进行高效的检索。在借书卡功能模块，管理员可以为读者办理借书卡，还可以对借书卡账户进行修改和注销。最后，管理员可以查看所有的借书记录，避免书籍的流失。</p>
<h3 id="二、系统的逻辑模型"><a class="header-anchor" href="#二、系统的逻辑模型">¶</a>二、系统的逻辑模型</h3>
<h4 id="1-数据流程图"><a class="header-anchor" href="#1-数据流程图">¶</a>1.数据流程图</h4>
<p><strong>顶层数据流图</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-30_11-02-39.png" alt=""></p>
<p><strong>图书信息数据流图</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-30_11-04-06.png" alt=""></p>
<p><strong>借、还书信息数据流图</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-30_11-06-33.png" alt=""></p>
<p><strong>借书卡信息数据流图</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-30_11-07-53.png" alt=""></p>
<h4 id="2-数据项与数据结构"><a class="header-anchor" href="#2-数据项与数据结构">¶</a>2.数据项与数据结构</h4>
<h5 id="1-t-admin表"><a class="header-anchor" href="#1-t-admin表">¶</a>1.t_admin表</h5>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>长度</th>
<th>描述</th>
<th>完整性约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>varchar</td>
<td>20</td>
<td>管理员登录账号</td>
<td>主键</td>
</tr>
<tr>
<td>psw</td>
<td>varchar</td>
<td>20</td>
<td>管理员登录密码</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="2-t-user表"><a class="header-anchor" href="#2-t-user表">¶</a>2.t_user表</h5>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>长度</th>
<th>描述</th>
<th>完整性约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>varchar</td>
<td>20</td>
<td>用户登录账号</td>
<td>主键</td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>20</td>
<td>用户姓名</td>
<td></td>
</tr>
<tr>
<td>sex</td>
<td>char</td>
<td>2</td>
<td>用户性别（男或女）</td>
<td></td>
</tr>
<tr>
<td>psw</td>
<td>varchar</td>
<td>20</td>
<td>用户登录密码</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="3-t-book表"><a class="header-anchor" href="#3-t-book表">¶</a>3.t_book表</h5>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>长度</th>
<th>描述</th>
<th>完整性约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>varchar</td>
<td>20</td>
<td>书号（ISBN）</td>
<td>主键</td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>20</td>
<td>书名</td>
<td></td>
</tr>
<tr>
<td>kind_id</td>
<td>int</td>
<td></td>
<td>种类编号</td>
<td>外键（参考t_kind表的id字段）</td>
</tr>
<tr>
<td>author</td>
<td>varchar</td>
<td>20</td>
<td>作者</td>
<td></td>
</tr>
<tr>
<td>press</td>
<td>varchar</td>
<td>20</td>
<td>出版社</td>
<td></td>
</tr>
<tr>
<td>number</td>
<td>int</td>
<td></td>
<td>库存</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="4-t-kind表"><a class="header-anchor" href="#4-t-kind表">¶</a>4.t_kind表</h5>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>长度</th>
<th>描述</th>
<th>完整性约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td></td>
<td>种类编号</td>
<td>主键</td>
</tr>
<tr>
<td>kind</td>
<td>varchar</td>
<td>20</td>
<td>种类名</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="5-t-lend表"><a class="header-anchor" href="#5-t-lend表">¶</a>5.t_lend表</h5>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>长度</th>
<th>描述</th>
<th>完整性约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>no</td>
<td>int</td>
<td></td>
<td>借书编号(自动递增)</td>
<td>主键</td>
</tr>
<tr>
<td>uid</td>
<td>varchar</td>
<td>20</td>
<td>借书用户账号</td>
<td>外键（参考t_user表的id字段）</td>
</tr>
<tr>
<td>bid</td>
<td>varchar</td>
<td>20</td>
<td>书号</td>
<td></td>
</tr>
<tr>
<td>bname</td>
<td>varchar</td>
<td>20</td>
<td>书名</td>
<td></td>
</tr>
<tr>
<td>datetime</td>
<td>datetime</td>
<td></td>
<td>借书日期</td>
<td></td>
</tr>
<tr>
<td>overtime</td>
<td>char</td>
<td>3</td>
<td>是否超期</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="6-t-lend-all表"><a class="header-anchor" href="#6-t-lend-all表">¶</a>6.t_lend_all表</h5>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>长度</th>
<th>描述</th>
<th>完整性约束</th>
</tr>
</thead>
<tbody>
<tr>
<td>no</td>
<td>int</td>
<td></td>
<td>借书编号（自动递增）</td>
<td>主键</td>
</tr>
<tr>
<td>uid</td>
<td>varchar</td>
<td>20</td>
<td>借书用户账号</td>
<td>外键（参考t_user表的id字段）</td>
</tr>
<tr>
<td>bid</td>
<td>varchar</td>
<td>20</td>
<td>书号</td>
<td></td>
</tr>
<tr>
<td>bname</td>
<td>varchar</td>
<td>20</td>
<td>书名</td>
<td></td>
</tr>
<tr>
<td>datetime</td>
<td>datetime</td>
<td></td>
<td>借书日期</td>
<td></td>
</tr>
<tr>
<td>overtime</td>
<td>char</td>
<td>3</td>
<td>是否超期</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="3-数据处理"><a class="header-anchor" href="#3-数据处理">¶</a>3.数据处理</h4>
<table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>处理过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>添加图书</td>
<td>管理员添加记录到t_book表中</td>
</tr>
<tr>
<td>2</td>
<td>修改图书</td>
<td>管理员在t_book表中修改记录</td>
</tr>
<tr>
<td>3</td>
<td>删除图书</td>
<td>管理员在t_book表中删除记录</td>
</tr>
<tr>
<td>4</td>
<td>查看图书</td>
<td>管理员或用户查看t_book表</td>
</tr>
<tr>
<td>4</td>
<td>数据备份</td>
<td>管理员将t_book表复制到t_backup表</td>
</tr>
<tr>
<td>5</td>
<td>数据恢复</td>
<td>管理员删除当前t_book表，将t_backup表复制到新建的t_book表，删除t_backup表</td>
</tr>
<tr>
<td>6</td>
<td>删除备份</td>
<td>管理员删除t_backup表</td>
</tr>
<tr>
<td>7</td>
<td>书号查询</td>
<td>管理员或用户根据书号在t_book表中查找记录</td>
</tr>
<tr>
<td>8</td>
<td>书名查询</td>
<td>管理员或用户根据书名在t_book表中查找记录（模糊查询）</td>
</tr>
<tr>
<td>9</td>
<td>借出图书</td>
<td>用户添加记录到t_lend表和t_lend_all表中</td>
</tr>
<tr>
<td>10</td>
<td>归还图书</td>
<td>用户在t_lend表中删除记录</td>
</tr>
<tr>
<td>11</td>
<td>查看借书记录</td>
<td>用户查看t_lend表，管理员查看t_lend_all表</td>
</tr>
<tr>
<td>12</td>
<td>办理借书卡</td>
<td>管理员添加记录到t_user表中</td>
</tr>
<tr>
<td>13</td>
<td>修改借书卡信息</td>
<td>管理员在t_user表中修改记录</td>
</tr>
<tr>
<td>14</td>
<td>注销账户</td>
<td>管理员在t_user表中删除记录</td>
</tr>
</tbody>
</table>
<h2 id="三、系统设计"><a class="header-anchor" href="#三、系统设计">¶</a>三、系统设计</h2>
<h3 id="1-概念结构设计（E-R图）"><a class="header-anchor" href="#1-概念结构设计（E-R图）">¶</a>1.概念结构设计（E-R图）</h3>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-30_10-40-53.png" alt=""></p>
<h3 id="2-逻辑结构设计（关系模式）"><a class="header-anchor" href="#2-逻辑结构设计（关系模式）">¶</a>2.逻辑结构设计（关系模式）</h3>
<p>（在报告第五部分<strong>已修改</strong>）</p>
<p>用户：user(<strong>uid</strong>,uname,sex,upsw)</p>
<p>图书：book(<strong>bid</strong>,bname,kind_id,author,press,number)</p>
<p>图书种类：kind(<strong>id</strong>,kind)</p>
<p>借书还书：lend(<strong>no</strong>,<strong>uid,bid</strong>,bname,datetime,overtime)</p>
<p>对图书分类：book_kind((<strong>id</strong>,<strong>bid</strong>,kind)</p>
<h3 id="3-系统功能模块"><a class="header-anchor" href="#3-系统功能模块">¶</a>3.系统功能模块</h3>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_20-55-29.png" alt=""></p>
<h2 id="四、详细设计"><a class="header-anchor" href="#四、详细设计">¶</a>四、详细设计</h2>
<h3 id="一、建表语句"><a class="header-anchor" href="#一、建表语句">¶</a>一、建表语句</h3>
<p><strong>符合数据库设计三范式</strong></p>
<p><strong>第一范式（1NF）</strong>：原子性（存储的数据应该具有“不可再分性”）</p>
<p><strong>第二范式（2NF）</strong>：唯一性 (消除非主键部分依赖联合主键中的部分字段)（一定要在第一范式已经满足的情况下）</p>
<p><strong>第三范式（3NF）</strong>：独立性，消除传递依赖(非主键值不依赖于另一个非主键值)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- t_admin管理员表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_admin`  (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `psw` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- t_book图书表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book`  (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `kind_id` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `press` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `number` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  INDEX `id`(`id` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- t_kind图书种类表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_kind`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `kind` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- t_lend借书表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_lend`  (</span><br><span class="line">  `<span class="keyword">no</span>` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `bid` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `bname` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `datetime` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `overtime` <span class="type">char</span>(<span class="number">3</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`<span class="keyword">no</span>` <span class="keyword">DESC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `user_id`(`uid` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `book_id`(`bid` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user_id` <span class="keyword">FOREIGN</span> KEY (`uid`) <span class="keyword">REFERENCES</span> `t_user` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">11</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- t_lend_all借书记录表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_lend_all`  (</span><br><span class="line">  `<span class="keyword">no</span>` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `bid` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `bname` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `datetime` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `overtime` <span class="type">char</span>(<span class="number">3</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`<span class="keyword">no</span>` <span class="keyword">DESC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `user_id_all`(`uid` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `book_id_all`(`bid` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user_id_all` <span class="keyword">FOREIGN</span> KEY (`uid`) <span class="keyword">REFERENCES</span> `t_user` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">11</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- t_user用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user`  (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">2</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `psw` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `sex` <span class="keyword">CHECK</span> ((`sex` <span class="operator">=</span> _utf8mb4<span class="string">&#x27;男&#x27;</span>) <span class="keyword">or</span> (`sex` <span class="operator">=</span> _utf8mb4<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>
<h3 id="二、触发器语句"><a class="header-anchor" href="#二、触发器语句">¶</a>二、触发器语句</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- update触发器(t_lend表)</span></span><br><span class="line">delimiter ;;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT `update_overtime_status`</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE</span><br><span class="line"><span class="keyword">EVERY</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">HOUR</span> STARTS <span class="string">&#x27;2024-05-26 17:53:33&#x27;</span></span><br><span class="line">DO <span class="keyword">UPDATE</span> t_lend</span><br><span class="line">  <span class="keyword">SET</span> overtime <span class="operator">=</span> <span class="keyword">CASE</span> </span><br><span class="line">                    <span class="keyword">WHEN</span> DATEDIFF(NOW(), datetime) <span class="operator">&gt;</span> <span class="number">7</span> <span class="keyword">THEN</span> <span class="string">&#x27;已超期&#x27;</span></span><br><span class="line">                    <span class="keyword">ELSE</span> <span class="string">&#x27;未超期&#x27;</span></span><br><span class="line">                 <span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- before触发器(t_lend表)</span></span><br><span class="line">delimiter ;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `before_insert_t_lend` BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> `t_lend` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">BEGIN</span></span><br><span class="line">    IF DATEDIFF(NOW(), NEW.datetime) <span class="operator">&gt;</span> <span class="number">7</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">SET</span> NEW.overtime <span class="operator">=</span> <span class="string">&#x27;已超期&#x27;</span>;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">SET</span> NEW.overtime <span class="operator">=</span> <span class="string">&#x27;未超期&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 启用事件调度器</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> event_scheduler <span class="operator">=</span> <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- -- 创建定时任务(t_lend表)</span></span><br><span class="line">delimiter ;;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT `update_overtime_status`</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE</span><br><span class="line"><span class="keyword">EVERY</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">HOUR</span> STARTS <span class="string">&#x27;2024-05-26 17:53:33&#x27;</span></span><br><span class="line">DO <span class="keyword">UPDATE</span> t_lend</span><br><span class="line">  <span class="keyword">SET</span> overtime <span class="operator">=</span> <span class="keyword">CASE</span> </span><br><span class="line">                    <span class="keyword">WHEN</span> DATEDIFF(NOW(), datetime) <span class="operator">&gt;</span> <span class="number">7</span> <span class="keyword">THEN</span> <span class="string">&#x27;已超期&#x27;</span></span><br><span class="line">                    <span class="keyword">ELSE</span> <span class="string">&#x27;未超期&#x27;</span></span><br><span class="line">                 <span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- update触发器(t_lend_all表)</span></span><br><span class="line">delimiter ;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `before_insert_t_lend_all` BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> `t_lend_all` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">BEGIN</span></span><br><span class="line">    IF DATEDIFF(NOW(), NEW.datetime) <span class="operator">&gt;</span> <span class="number">7</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">SET</span> NEW.overtime <span class="operator">=</span> <span class="string">&#x27;已超期&#x27;</span>;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">SET</span> NEW.overtime <span class="operator">=</span> <span class="string">&#x27;未超期&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- before触发器(t_lend_all表)</span></span><br><span class="line">delimiter ;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `before_insert_t_lend_all` BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> `t_lend_all` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">BEGIN</span></span><br><span class="line">    IF DATEDIFF(NOW(), NEW.datetime) <span class="operator">&gt;</span> <span class="number">7</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">SET</span> NEW.overtime <span class="operator">=</span> <span class="string">&#x27;已超期&#x27;</span>;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">SET</span> NEW.overtime <span class="operator">=</span> <span class="string">&#x27;未超期&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建定时任务(t_lend_all表)</span></span><br><span class="line">delimiter ;;</span><br><span class="line"><span class="keyword">CREATE</span> EVENT `update_overtime_status_all`</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE</span><br><span class="line"><span class="keyword">EVERY</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">HOUR</span> STARTS <span class="string">&#x27;2024-05-28 11:35:25&#x27;</span></span><br><span class="line">DO <span class="keyword">UPDATE</span> t_lend_all</span><br><span class="line">  <span class="keyword">SET</span> overtime <span class="operator">=</span> <span class="keyword">CASE</span> </span><br><span class="line">                    <span class="keyword">WHEN</span> DATEDIFF(NOW(), datetime) <span class="operator">&gt;</span> <span class="number">7</span> <span class="keyword">THEN</span> <span class="string">&#x27;已超期&#x27;</span> </span><br><span class="line">                    <span class="keyword">ELSE</span> <span class="string">&#x27;未超期&#x27;</span></span><br><span class="line">                 <span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
<h2 id="五、系统测试和实际运行"><a class="header-anchor" href="#五、系统测试和实际运行">¶</a>五、系统测试和实际运行</h2>
<h3 id="1、开发平台和工具选择"><a class="header-anchor" href="#1、开发平台和工具选择">¶</a>1、开发平台和工具选择</h3>
<p>本图书管理系统使用C#和Windows Forms（WinForms）开发，理由如下：</p>
<p><strong>1.开发效率高</strong>：</p>
<ul>
<li>Visual Studio IDE：Visual Studio 提供了强大的集成开发环境（IDE），支持拖放式的界面设计，使开发者可以快速设计用户界面和编写代码。</li>
<li><strong>丰富的控件库</strong>：WinForms 提供了大量预定义的控件，可以直接用于创建各种用户界面元素，减少了开发的复杂度。</li>
</ul>
<p><strong>2.强大的编程语言：</strong></p>
<ul>
<li><strong>C#语言优势</strong>：C#是一种强类型、面向对象的编程语言，具有现代编程语言的所有优点，如垃圾回收、异常处理、LINQ（语言集成查询）等，能提高代码的安全性和可维护性。</li>
<li><strong>.NET Framework 支持</strong>：利用 .NET 框架，开发者可以访问丰富的类库和功能，简化开发流程和增强应用程序的功能。</li>
</ul>
<p><strong>3.良好的性能和兼容性：</strong></p>
<ul>
<li><strong>运行效率高</strong>：WinForms 应用程序在Windows操作系统上运行效率较高，适合开发需要高响应速度的桌面应用。</li>
<li><strong>兼容性强</strong>：WinForms 已经经过多年发展，具有很好的向后兼容性和稳定性，适用于各种Windows操作系统版本。</li>
</ul>
<p><strong>4.便于维护和扩展：</strong></p>
<ul>
<li><strong>模块化设计</strong>：使用C#和WinForms开发的应用程序可以方便地进行模块化设计，便于日后维护和功能扩展。</li>
<li><strong>丰富的第三方库支持</strong>：有很多第三方库和工具可以与C#和WinForms集成，帮助开发者实现更多功能，如图表展示、数据库连接等。</li>
</ul>
<p><strong>5.良好的数据库支持：</strong></p>
<ul>
<li><strong>数据库集成</strong>：C#与WinForms结合时，能够很方便地与各种数据库进行连接，如SQL Server、MySQL、SQLite等，满足图书管理系统的数据存储需求。</li>
<li><strong>数据绑定功能</strong>：WinForms 提供了强大的数据绑定功能，可以轻松地将数据库中的数据与界面控件进行绑定，简化数据展示和操作。</li>
</ul>
<h3 id="2、系统测试"><a class="header-anchor" href="#2、系统测试">¶</a>2、系统测试</h3>
<h4 id="1-登录界面"><a class="header-anchor" href="#1-登录界面">¶</a><strong>1.登录界面</strong></h4>
<p>使用管理员账号登录图书管理系统，成功连接到本地MySQL数据库。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_21-49-45.png" style="zoom:80%;" />
<h4 id="2-管理员操作界面"><a class="header-anchor" href="#2-管理员操作界面">¶</a><strong>2.管理员操作界面</strong></h4>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_21-59-49.png" style="zoom:80%;" />
<h4 id="3-图书管理界面"><a class="header-anchor" href="#3-图书管理界面">¶</a><strong>3.图书管理界面</strong></h4>
<p>点击<code>图书管理</code>，进入图书管理界面</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-00-40.png" alt="Snipaste_2024-05-29_22-00-40" style="zoom:80%;" />
<h4 id="4-进行图书管理操作"><a class="header-anchor" href="#4-进行图书管理操作">¶</a><strong>4.进行图书管理操作</strong></h4>
<p>点击<code>添加图书</code>，添加一本新书，书名为《数据库原理与应用》</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-11-55.png" style="zoom:80%;" />
<p>点击<code>修改图书</code>修改其作者为王珊，库存为36</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-12-32.png" style="zoom:80%;" />
<p>输入数据库，点击<code>书名查询</code>,进行模糊查询</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-17-46.png" style="zoom: 80%;" />
<p>点击<code>数据备份</code>，将当前图书信息进行备份</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-19-54.png" alt=""></p>
<p>点击<code>删除图书</code>，将《数据库原理与应用》删除</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-20-19.png" alt="Snipaste_2024-05-29_22-20-19"></p>
<p>点击<code>数据恢复</code>，《数据库原理与应用》被恢复</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-31-11.png" alt="Snipaste_2024-05-29_22-31-11"></p>
<h4 id="5-进行借书卡管理操作"><a class="header-anchor" href="#5-进行借书卡管理操作">¶</a><strong>5.进行借书卡管理操作</strong></h4>
<p>在管理员操作界面点击<code>查看借书卡信息</code></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-38-54.png" style="zoom:80%;" />
<p>点击<code>办理借书卡</code>，为迪丽热巴办理借书卡</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-40-03.png" alt="Snipaste_2024-05-29_22-40-03" style="zoom:80%;" />
<p>再次点击<code>查看借书卡信息</code>，迪丽热巴的借书卡已经办好</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-40-13.png" alt="Snipaste_2024-05-29_22-40-13" style="zoom:80%;" />
<p>使用该账号成功登录图书管理系统</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-44-27.png"  />
<h4 id="6-用户操作界面"><a class="header-anchor" href="#6-用户操作界面">¶</a>6.用户操作界面</h4>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-50-32.png" style="zoom:80%;" />
<h4 id="7-图书查看和借阅界面"><a class="header-anchor" href="#7-图书查看和借阅界面">¶</a>7.图书查看和借阅界面</h4>
<p>在用户操作界面点击<code>图书查看和借阅</code>，进入图书查看和借阅界面</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-51-00.png" alt="Snipaste_2024-05-29_22-51-00" style="zoom:80%;" />
<h4 id="8-进行图书查询和借书操作"><a class="header-anchor" href="#8-进行图书查询和借书操作">¶</a>8.进行图书查询和借书操作</h4>
<p>输入数据库后点击<code>书名查询</code>，然后点击<code>借出图书</code></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-51-23.png" alt="Snipaste_2024-05-29_22-51-23" style="zoom:80%;" />
<h4 id="9-进行还书操作"><a class="header-anchor" href="#9-进行还书操作">¶</a>9.进行还书操作</h4>
<p>在用户操作界面点击<code>归还图书</code>，进入归还图书界面</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-51-32.png" alt="Snipaste_2024-05-29_22-51-32" style="zoom:80%;" />
<p>点击<code>归还图书</code>，成功还书</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-51-47.png" alt="Snipaste_2024-05-29_22-51-47" style="zoom:80%;" />
<h4 id="10-管理员查看全部借书记录"><a class="header-anchor" href="#10-管理员查看全部借书记录">¶</a>10.管理员查看全部借书记录</h4>
<p>回到管理员操作界面，点击<code>查看借书记录</code></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-29_22-56-37.png" style="zoom:80%;" />
<h2 id="六、总结"><a class="header-anchor" href="#六、总结">¶</a>六、总结</h2>
<p>本次数据库独立实验由我本人赵鑫独立完成。</p>
<h3 id="1、从有效性方面分析评估关系模型及其优化方案"><a class="header-anchor" href="#1、从有效性方面分析评估关系模型及其优化方案">¶</a>1、从有效性方面分析评估关系模型及其优化方案</h3>
<ul>
<li>
<p>关系模型的实体过多，数据重复冗杂，可以合并实体。</p>
<p><strong>优化方案</strong>：将<strong>图书分类</strong>与<strong>图书</strong>合并，如下图所示</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-30_10-55-39.png" alt=""></p>
<p>相应的<strong>关系模式</strong>：</p>
<p>用户：user(<strong>uid</strong>,uname,sex,upsw)</p>
<p>图书：book(<strong>bid</strong>,bname,kind_id,author,press,number)</p>
<p>借书、还书：lend(<strong>no</strong>,<strong>uid,bid</strong>,bname,datetime,overtime)</p>
</li>
</ul>
<h3 id="2-选取数据库管理系统、开发语言与平台的原因"><a class="header-anchor" href="#2-选取数据库管理系统、开发语言与平台的原因">¶</a>2. 选取数据库管理系统、开发语言与平台的原因</h3>
<p><strong>数据库管理系统</strong>：选择<strong>MySQL</strong></p>
<ul>
<li><strong>性能和可靠性</strong>：MySQL 提供高性能和高可靠性，适合处理各种规模的应用程序。</li>
<li><strong>开源和社区支持</strong>：MySQL 是开源的，拥有庞大的社区支持和丰富的文档资源，便于学习和使用。</li>
<li><strong>跨平台支持</strong>：支持多种操作系统（如 Windows、Linux 和 macOS），提供灵活的部署选项。</li>
<li><strong>丰富的功能</strong>：支持复杂查询、事务处理、视图、触发器和存储过程，满足各种复杂应用需求。</li>
</ul>
<p><strong>开发语言与平台</strong>：选择<strong>C#和WinForms</strong></p>
<ul>
<li><strong>开发效率</strong>：Visual Studio IDE支持快速开发，拥有强大的调试和测试工具。</li>
<li><strong>语言特性</strong>：C#是面向对象的强类型语言，支持现代编程范式，提高代码质量和维护性。</li>
<li><strong>桌面应用支持</strong>：WinForms提供丰富的控件库和易用的UI设计工具，适合开发Windows桌面应用。</li>
</ul>
<h3 id="3、小样本测试用例的有效性保障"><a class="header-anchor" href="#3、小样本测试用例的有效性保障">¶</a>3、小样本测试用例的有效性保障</h3>
<ul>
<li><strong>适用性</strong>：本系统选取样本的数据项基本符合实际应用场景，例如书号符合国家标准书号ISBN。</li>
<li><strong>安全性</strong>：为用户和管理员设置了登录检验。</li>
</ul>
<h3 id="4、系统测试的指标选择"><a class="header-anchor" href="#4、系统测试的指标选择">¶</a>4、系统测试的指标选择</h3>
<ul>
<li><strong>对于用户错误输入的检验</strong>：例如图书的编号（主键）不能重复；输入不可以有空项；当图书的库存为0时不可借出等。</li>
<li><strong>各模块之间的联动性</strong>：例如管理员办理借书卡后，可以使用该账号登录系统；用户借书后，管理员可以查看到记录等。</li>
<li><strong>系统运行的高效性</strong>：每个模块的执行速度都很快。</li>
</ul>
<h3 id="5、分析系统功能局限及改进。"><a class="header-anchor" href="#5、分析系统功能局限及改进。">¶</a>5、分析系统功能局限及改进。</h3>
<p><strong>功能局限：</strong></p>
<ul>
<li>管理员只能看到用户的借书记录，却无法看到用户的还书记录</li>
<li>用户应该再增添一些身份信息，比如联系电话，身份证号等</li>
<li>系统可能在设计上未考虑到未来的扩展需求，如新增功能模块</li>
<li>传统的WinForms应用无法在移动设备上运行，限制了用户的访问方式。</li>
</ul>
<p><strong>改进措施：</strong></p>
<ul>
<li>优化数据库，修改表中信息。</li>
<li>重新设计系统架构，使其更具模块化和可扩展性，便于新增功能和扩展。</li>
<li>考虑使用跨平台框架（<a href="http://xn--bvs.NET">如.NET</a> MAUI或Blazor），以支持移动端和Web端的访问。</li>
</ul>
<h2 id="七、参考文献"><a class="header-anchor" href="#七、参考文献">¶</a>七、参考文献</h2>
<p>[1]数据库系统概论/王珊,杜小勇,陈红编著. --6版. --北京：高等教育出版社，2023.3</p>
<p>[2]C# 图书管理系统 winform 入门教程 SqlServer数据库</p>
<p><a href="https://www.bilibili.com/video/BV14p4y1S7yk/?spm_id_from=333.999.0.0&amp;vd_source=e4fe0d1a5b5a5ad280078870d263859b">https://www.bilibili.com/video/BV14p4y1S7yk/?spm_id_from=333.999.0.0&amp;vd_source=e4fe0d1a5b5a5ad280078870d263859b</a></p>
<p>[3]MySQL获取当前日期、时间、时间戳函数</p>
<p><a href="https://blog.csdn.net/Burn_/article/details/107556874?spm=1001.2014.3001.5506">https://blog.csdn.net/Burn_/article/details/107556874?spm=1001.2014.3001.5506</a></p>
<p>[4]WinForm（一） WinForm入门与基本控件使用-CSDN博客</p>
<p><a href="https://blog.csdn.net/qq_40772692/article/details/121865401?spm=1001.2014.3001.5506">https://blog.csdn.net/qq_40772692/article/details/121865401?spm=1001.2014.3001.5506</a></p>
<p>[5]MySQL和Navicat下载、安装及使用详细教程_navicat下载安装以及配置-CSDN博客</p>
<p><a href="https://blog.csdn.net/web13618542420/article/details/125346223?spm=1001.2014.3001.5506">https://blog.csdn.net/web13618542420/article/details/125346223?spm=1001.2014.3001.5506</a>)</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>文字给予我力量</title>
    <url>/2024/09/18/%E6%96%87%E5%AD%97%E7%9A%84%E6%95%91%E8%B5%8E/</url>
    <content><![CDATA[<p>有时候需要些文字来产生动力。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img514d5cb1c2a0e0cbdf7435904dd00352771be258.png%401256w_886h_!web-article-pic.png" style="zoom: 67%;" />
<span id="more"></span>
<hr>
<h2 id="欧路词典——每日一句"><a class="header-anchor" href="#欧路词典——每日一句">¶</a>欧路词典——每日一句</h2>
<p><strong>当阳光明媚时，我可以做任何事情；没有一座山无法逾越，没有一件事难以克服。</strong></p>
<p><strong>勿沉溺于忧思，莫辜负生命与爱。时光若逝，永不再来。</strong></p>
<p><strong>问题不是止步不前的标志，而是前进的指引。</strong></p>
<p><strong>我要扼住命运的咽喉，绝不为命运所压倒。</strong></p>
<p><strong>一个人最大的失败在于，你梦想为某事付诸努力，但却没有勇气去这么做。</strong></p>
<p><strong>让我们起而行动莫停留，无论什么命运，都要勇于承载；不断进取，不断追求，学会努力，学会等待。</strong></p>
<p><strong>我不怕暴风雨，因为我正在学习如何驾驶我的船。</strong></p>
<p><strong>昨天已是历史，明天还是一个谜，而今天则是一份礼物。</strong></p>
<p><strong>正直，即是在无人注视时，依然行正义之事。</strong></p>
<p><strong>不要让别人的意见淹没了你自己内心的声音。</strong></p>
<p><strong>困难是用来激励人心的，而不是使人气馁。人的心灵将因挫折而茁壮成长。</strong></p>
<p><strong>不管你被贴上什么标签，只有你才能定义你自己。</strong></p>
<p><strong>尽管有很多事让人忧虑，但相比而言，值得感激的事要多得多</strong></p>
<p><strong>理想的幸福国度与我们之间，总隔着一片荒野。</strong></p>
<p><strong>有些人成功是因为命中注定，但是大多数人成功是因为他们立志于此。</strong></p>
<p><strong>你从一个地方跑到另一个地方，但你还是你。你没法从自己的身体里面逃出去。</strong></p>
<p><strong>不管生活和这个世界多么糟糕，都不要放弃，都要坚强的活着。因为一觉醒来，太阳照常升起。</strong></p>
<p><strong>当你的意志坚强了，你前进的脚步就轻快了。</strong></p>
<p><strong>坐着车走老路的人，研究的主要是路边的栅栏。</strong></p>
<p><strong>我们对于自己的不幸想的越多，它们对我们的伤害就越大。</strong></p>
<p><strong>我们的重复行为造就了我们，因此卓越不是一种行为，而是一种习惯。</strong></p>
<p><strong>有时候，我们的命运就像冬天里的果树。谁会想到它的枝芽还将再次吐绿开花，但我们期望着，也知道它们会。</strong></p>
<p><strong>尽你所能，直到你变得更明智。当你变得更明智时，就会做得更好。</strong></p>
<p><strong>不论什么时候，只要你有一个目标，你就得牺牲一定的自由去实现它。</strong></p>
<p><strong>凡是真正渴求知识的人，都能得到知识，这是知识的特性。</strong></p>
<p><strong>在这个世界上，最重要的不是我们身在何处，而是我们朝着哪个方向前进。</strong></p>
]]></content>
      <categories>
        <category>喜欢的文字</category>
      </categories>
      <tags>
        <tag>励志</tag>
      </tags>
  </entry>
  <entry>
    <title>法国被淘汰后的足球感想</title>
    <url>/2024/07/11/%E6%B3%95%E5%9B%BD%E8%A2%AB%E6%B7%98%E6%B1%B0%E5%90%8E%E7%9A%84%E8%B6%B3%E7%90%83%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240711021426.jpg" style="zoom:50%;" />
<span id="more"></span>
<hr>
<p>今天凌晨五点，法国队1:2不敌西班牙，正式结束了2024年欧洲杯之旅。一整天心情都很差，因为在我眼中，法国队还是18年那支所向披靡的法国队，还是22年那支极具统治力，只是在决赛惜败给黑幕的法国队。然而事实是，格子的老化使中场失去了创造力；被德尚赋予厚望的后腰楚阿梅尼成为了法国队的最弱一环；开赛第一场姆巴佩便受伤，导致状态根本不在线，不少绝佳机会都白白浪费掉。法国队在开场第8分钟便取得进球，那时我真的以为这支队伍终于迎来了爆发，但一颗正冉冉升起的新星打破了我的幻想。16岁的亚马尔一脚无解的弧线球，迅速将比赛扳平。随后奥尔莫独自一人杀入法国本应该是最稳固的后防，晃过楚阿梅尼，一脚射门打在孔德腿上折射入网。然而此时仅仅只是比赛第25分钟。算上补时至少有70分钟的时间供法国队追平比分，但这件事直到比赛结束也没有发生。不禁想起18年世界杯横空出世的姆巴佩轻而易举地淘汰掉梅西，只是这一次的主角换成了亚马尔，配角换成了姆巴佩。关于比赛内容，我不想再说其他的，就是技不如人，仅此而已。</p>
<p>赛后不出所料，评论区被胜利者占领。部分巴萨球迷疯狂地吹捧亚马尔，说他是新球王，梅西的接班人。不知道他们是否还记得，上一个他们如此夸耀的球员是现在被巴萨抛弃到布莱顿的法蒂。</p>
<p>无论怎样，法国队已经出局，格子无缘国家队大满贯，姆巴佩亲手葬送了自己的金球奖，我想我也该回归到现实生活中了。在这个学期，我熬了太多夜，看了太多比赛，足球一度占据了我生活中最大的比重。最让我激动的两场比赛应该就是——马竞主场逆转国米，法国点球淘汰葡萄牙。毫无疑问，足球耗费了我太多的精力，我会不时的关注比赛新闻，在球迷群里聊天，花时间看比赛，看赛后分析，哦对了，还有玩实况足球。我热爱足球，但足球不应该是我的大多数。下学期我就大三了，有比足球更重要的事情等着我去做，我得好好努力了。</p>
<p>但我依然会热爱足球，始终会坚定不移地支持马竞，支持法国队。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构笔记</title>
    <url>/2024/01/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>村雨在进行数据结构期末复习时整理的笔记。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720220730001638.jpg" style="zoom: 25%;" />
<span id="more"></span>
<hr>
<h1>一、绪论</h1>
<h3 id="1-数据结构的基本概念"><a class="header-anchor" href="#1-数据结构的基本概念">¶</a>1.数据结构的基本概念</h3>
<p><strong>数据</strong>由<strong>数据元素</strong>组成，数据元素由<strong>数据项</strong>组成。</p>
<p><strong>数据元素</strong>是讨论数据结构时涉及的<strong>最小数据单位</strong>，其中的<strong>数据项一般不予考虑</strong>。</p>
<p><strong>数据结构</strong>：相互之间存在一定关系的数据元素的集合。可以认为是一堆数据元素和这些数据元素之间的关系的总和，换句话说，数据结构是带&quot;结构&quot;的数据元素的集合。</p>
<p>数据结构分为<strong>逻辑结构</strong>和<strong>存储结构（物理结构）</strong></p>
<p><strong>逻辑结构</strong>：指数据元素之间的<strong>逻辑关系</strong>。即从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的。</p>
<p><strong>集合</strong>结构： 仅同属一个集合，为使用方便，一般处理为线性结构。</p>
<p><strong>线性</strong>结构:    一对一（1:1) 的<strong>线性</strong>关系</p>
<p><strong>树</strong>结构:    一对多（1:n)的层次关系</p>
<p><strong>图</strong> 结 构:   多对多  (m:n)的任意关系</p>
<p><strong>存储结构</strong>是数据逻辑结构在计算机中的<strong>表示</strong>，包括数据元素的表示和关系的表示。</p>
<p>存储结构通常有两种：</p>
<ol>
<li>
<p><strong>顺序</strong>存储结构：用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。</p>
</li>
<li>
<p><strong>链接</strong>存储结构：用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示 。</p>
</li>
</ol>
<h3 id="2-算法及特性"><a class="header-anchor" href="#2-算法及特性">¶</a>2.算法及特性</h3>
<p>1.算法（Algorithm）:是对特定问题求解步骤的一种描述，是指令的<strong>有限序列。</strong></p>
<p>2.算法的五大特性：<br>
⑴ <strong>输入</strong>：一个算法有零个或多个输入。<br>
⑵ <strong>输出</strong>：一个算法有一个或多个输出。（必须有输出）<br>
⑶ <strong>有穷性</strong>：一个算法必须总是在执行有穷步之后结束，且每一步都在有穷时间内完成。<br>
⑷ <strong>确定性</strong>：算法中的每一条指令必须有确切的含义，对于相同的输入只能得到相同的输出。<br>
⑸ <strong>可行性</strong>：算法描述的操作可以通过已经实现的基本操作执行有限次来实现。</p>
<p><strong>好算法</strong>的特性:易读性，高效性，<strong>鲁棒性</strong>，正确性</p>
<p>2.<strong>算法分析</strong>（Algorithm Analysis）：对算法所需要的计算机资源——时间和空间进行估算</p>
<p><strong>时间复杂度</strong></p>
<p><strong>空间复杂度</strong></p>
<p>通常，一个特定算法的执行时间，即“运行工作量”的大小，是随问题规模的增长而增长，<strong>只</strong>依赖于问题的规模（通常用整数量 n 表示），或者说，它是<strong>问题规模</strong>的函数<strong>f(n)</strong>。</p>
<p>因此衡量不同算法的优劣，应该以其随问题规模的增长而“增长的趋势”为准则。称这种算法时间的量度为算法的渐近时间复杂度，简称时间复杂度，记作为：<strong>T (n) = O(f(n))</strong></p>
<p>称**T(n)**为算法的(渐近)**时间复杂度。**它表示随着问题规模 n 的增长，算法执行时间的增长率和 f(n) 的增长率相同，把T(n)作为算法的时间度量。</p>
<p>分析算法的时间复杂度的核心是<strong>分析算法中基本操作的重复次数。</strong></p>
<p>通常用Ο(1)表示<strong>常数</strong>计算时间。</p>
<p>（1）对于多项式复杂度来说，计算时去低阶项，去掉常数项，去掉高阶项的系数。</p>
<p>（2）最坏情况复杂性，指在规模为n时，算法所执行的基本运算的最大次数。</p>
<p>以下六种计算算法时间的多项式是最常用的，其关系为：<br>
<strong>O(1)&lt;O(㏒n)&lt;O(n)&lt;O(n㏒n)&lt;O(n2)&lt;O(n3)</strong><br>
非多项式时间的关系为：<br>
<strong>O(2n)&lt;O(n!)&lt;O(nn)</strong></p>
<hr>
<h1>二、线性表</h1>
<h3 id="1-线性表及其逻辑结构"><a class="header-anchor" href="#1-线性表及其逻辑结构">¶</a>1.线性表及其逻辑结构</h3>
<p>线性表：简称表，是n（n≥0）个具有<strong>相同类型</strong>的数据元素的<strong>有限序列</strong>。</p>
<p>线性表的长度：线性表中数据元素的个数。</p>
<p>空表：长度等于零的线性表，记为：L=(  )。</p>
<p>非空表记为：L＝(a1, a2 , …, ai-1, ai , …, an )</p>
<p>其中，ai（<strong>1≤i≤n</strong>）称为数据元素；下角标 i 表示该元素在线性表中的<strong>位置或序号</strong> 。</p>
<h3 id="2-线性表的特性"><a class="header-anchor" href="#2-线性表的特性">¶</a>2.线性表的特性</h3>
<ol>
<li>
<p><strong>有限性</strong>：线性表中数据元素的个数是<strong>有穷的</strong>。</p>
</li>
<li>
<p><strong>相同性</strong>：线性表中数据元素的类型是<strong>相同的</strong>。</p>
</li>
<li>
<p><strong>顺序性</strong>：线性表中相邻的数据元素ai-1和ai之间<strong>存在序偶关系</strong>(ai-1, ai)，即ai-1是ai的前驱， ai是ai-1的后继；a1无前驱，an无后继</p>
<p>其它每个元素<strong>有且仅有</strong>一个前驱和一个后继。</p>
</li>
</ol>
<h3 id="3-线性表的顺序存储结构（顺序表）"><a class="header-anchor" href="#3-线性表的顺序存储结构（顺序表）">¶</a>3.线性表的顺序存储结构（顺序表）</h3>
<p>顺序表通常使用一维数组，用一段地址连续的存储单元依次存储线性表中的数据元素。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-07_10-50-16.png" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-07_10-53-34.png" alt="Snipaste_2023-12-07_10-53-34"></p>
<p>顺序表的存储结构为<strong>随机存取结构</strong>。</p>
<p>只要确定了顺序表的起始地址（或数组的基地址），就可以计算任意一个元素的存储地址，并且计算时间是相等的。</p>
<p><strong>顺序表的优点：</strong><br>
⑴ <strong>无需</strong>为表示表中元素之间的逻辑关系而<strong>增加额外的存储空间</strong>；<br>
⑵ 随机存取：可以<strong>快速地存取</strong>表中任一位置的元素。<br>
<strong>顺序表的缺点：</strong><br>
⑴ <strong>插入</strong>和<strong>删除</strong>操作需要<strong>移动大量元素</strong>；<br>
⑵ 表的<strong>容量难以确定</strong>，表的<strong>容量难以扩充</strong>；<br>
⑶ 造成存储空间的碎片。</p>
<h3 id="4-线性表的链接存储结构（链表）"><a class="header-anchor" href="#4-线性表的链接存储结构（链表）">¶</a>4.线性表的链接存储结构（链表）</h3>
<p>用一组<strong>任意的</strong>存储单元存放线性表的元素。</p>
<p><strong>存储特点：</strong></p>
<p>1.逻辑次序和物理次序不一定相同。</p>
<p>2.元素之间的逻辑关系用指针表示。</p>
<p>单链表是由若干结点构成的。单链表的结点结构：数据域+指针域</p>
<p>**data：**存储数据元素</p>
<p>**next：**存储指向后继结点的地址</p>
<p>单链表是一种<strong>顺序存取</strong>的链式存储结构。</p>
<p>一些<strong>特殊</strong>链表：</p>
<p><strong>循环链表</strong>:将单链表的<strong>首尾相接</strong>，将终端结点的指针域由空指针改为指向头结点，构成单循环链表，简称循环链表。</p>
<p><strong>双向链表</strong>：在单链表的每个结点中<strong>再</strong>设置一个<strong>指向其前驱结点</strong>的指针域。</p>
<p><strong>静态链表</strong>：用数组来表示单链表，用数组元素的下标来模拟单链表的指针。</p>
<p>相对于顺序表而言，静态链表有什么<strong>优点</strong>？</p>
<p>答：优点：在执行<strong>插入</strong>和<strong>删除</strong>操作时，只需修改游标，<strong>不需要移动</strong>表中的元素，从而改进了在顺序表中插入和删除操作需要移动大量元素的缺点。<br>
缺点：没有解决连续存储分配带来的表长难以确定的问题；静态链表还需要维护一个空闲链；静态链表不能随机存取。</p>
<p>顺序表和链表的<strong>比较</strong>：</p>
<p>1.<strong>时间性能的比较：</strong></p>
<p><strong>按位查找：</strong><br>
顺序表的时间为Ｏ(1)，是随机存取；<br>
链表的时间为Ｏ(n)，是顺序存取。<br>
<strong>插入和删除</strong>：<br>
顺序表需移动表长一半的元素，时间为Ｏ(n)；<br>
链表不需要移动元素，在给出某个合适位置的指针后，插入和删除操作所需的时间仅为Ｏ(1)。</p>
<p>2**.空间性能的比较：**</p>
<p>空间性能是指某种存储结构所占用的存储空间的大小。<br>
定义结点的<strong>存储密度</strong>：<br>
存储密度＝数据域占用的存储量/整个结点占用的存储量<br>
结点的存储密度：<br>
<strong>顺序表</strong>：结点的<strong>存储密度为1</strong>（只存储数据元素），没有浪费空间；<br>
<strong>链表</strong>：结点的<strong>存储密度&lt;1</strong>（包括数据域和指针域），有指针的结构性开销。</p>
<p>顺序表：<strong>需要预分配存储空间</strong>，如果预分配得过大，造成浪费，若估计得过小，又将发生上溢；<br>
链表：<strong>不需要预分配空间</strong>，只要有内存空间可以分配，单链表中的元素个数就没有限制。</p>
<p>结论：</p>
<p>⑴若线性表需频繁查找却很少进行插入和删除操作，或其操作和元素在表中的位置密切相关时，宜采用<strong>顺序表</strong>作为存储结构；若线性表需频繁插入和删除时，则宜采用<strong>链表</strong>做存储结构。</p>
<p>⑵当线性表中元素个数变化较大或者未知时，最好使用<strong>链表</strong>实现；而如果用户事先知道线性表的大致长度，使用<strong>顺序表</strong>的空间效率会更高。</p>
<h1>三、栈和队列</h1>
<p>两种特殊的<strong>线性表</strong>——栈和队列</p>
<p>但是操作受限，<strong>插入和删除</strong>只能在表的“端点”进行。</p>
<h3 id="1-栈"><a class="header-anchor" href="#1-栈">¶</a>1.栈</h3>
<p>栈：限定<strong>仅在一端</strong>进行插入和删除操作的线性表。</p>
<p><strong>栈顶</strong>（top）：允许插入和删除的一端称为栈顶<br>
<strong>栈底</strong>（bottom）：另一端称为栈底</p>
<p>栈的操作特性：<strong>后进先出</strong>（Last  In  First  Out，LIFO）（<strong>先进后出</strong>）</p>
<p>n个元素按次序进栈后的出栈序列个数：<br>
$$<br>
（1/n+1）*C n 2n<br>
$$<br>
栈只是对插入和删除操作的<strong>位置</strong>进行了限制并没有限定插入和删除操作进行的时间</p>
<p>tip：在输出序列中任意元素<strong>后面</strong>不能出现<strong>比该元素小并且是升序的两个元素。</strong>（元素大小体现的是入栈次序，小表示先入栈。）</p>
<h4 id="顺序栈：栈的顺序存储结构"><a class="header-anchor" href="#顺序栈：栈的顺序存储结构">¶</a><strong>顺序栈</strong>：栈的顺序存储结构</h4>
<p>如何<strong>表示栈底</strong>：用数组的一端作为栈底</p>
<p>如何<strong>表示栈顶</strong>：设变量top存储栈顶元素所在的下标（从0开始）</p>
<h4 id="链栈：栈的链接存储结构"><a class="header-anchor" href="#链栈：栈的链接存储结构">¶</a><strong>链栈</strong>：栈的链接存储结构</h4>
<p>用<strong>链头</strong>作为<strong>栈顶</strong></p>
<p>链栈无须加头结点</p>
<h4 id="两栈共享空间"><a class="header-anchor" href="#两栈共享空间">¶</a>两栈共享空间</h4>
<p>使用一个数组来存储两个栈，让一个栈的栈底为该数组的始端，另一个栈的栈底为该数组的末端，两个栈从各自的端点<strong>向中间延伸</strong>。</p>
<p>什么时候栈1为空？top1== -1</p>
<p>什么时候栈2为空？top2== StackSize</p>
<p>什么时候栈满？top2== top1+1</p>
<h3 id="2-队列"><a class="header-anchor" href="#2-队列">¶</a>2.队列</h3>
<p>队列：只允许在表的<strong>一端进行插入</strong>操作，在<strong>另一端进行删除</strong>操作</p>
<p><strong>队尾</strong>：允许插入的一端，相应地，位于队尾的元素称为队尾元素（入队）</p>
<p><strong>队头</strong>：允许删除的一端，相应地，位于队头的元素称为队头元素（出队）</p>
<p>队列的操作特性：<strong>先进先出</strong>（First  In  First  Out，FIFO）</p>
<h4 id="顺序队列：队列的顺序存储结构"><a class="header-anchor" href="#顺序队列：队列的顺序存储结构">¶</a>顺序队列：队列的顺序存储结构</h4>
<p>如何表示<strong>队头</strong>：用数组的一端作为队头，从下标 0 处开始存放</p>
<p>如何表示<strong>队尾</strong>：设变量rear存储队尾元素所在的下标</p>
<p><strong>如何改进出队操作的时间性能？</strong></p>
<p>设置队头、队尾两个位置指针。front和rear</p>
<p>约定：队头front指向队头元素的前一个位置，队尾rear指向队尾元素</p>
<p>入队、出队时间性能均是O(1)</p>
<p><strong>产生的问题</strong>：整个队列会向数组下标较大方向移动（单向移动性）</p>
<p>从而造成假溢出：数组空间发生<strong>上溢</strong>，但数组的<strong>低端还有空闲空间</strong></p>
<p><strong>解决方法</strong>：循环队列</p>
<h4 id="循环队列"><a class="header-anchor" href="#循环队列">¶</a>循环队列</h4>
<p>队列采用顺序存储，并且数组是<strong>头尾相接</strong>的循环结构</p>
<p><strong>程序技巧</strong>：求模（正余数）使得数组下标循环。如rear = (rear + 1) % 5</p>
<h4 id="链队列：队列的链接存储结构"><a class="header-anchor" href="#链队列：队列的链接存储结构">¶</a>链队列：队列的链接存储结构</h4>
<p>链头作为队头，出队时间为O(1)，队头指针front指向单链表的头结点</p>
<p>链尾作为队尾，入队时间为O(n)，队尾指针rear指向单链表的尾结点</p>
<p><strong>可以没有头结点</strong>，但增加头结点的目的是使空队列和非空队列的操作一致</p>
<p><strong>循环队列和链队列的比较</strong></p>
<p>时间性能:循环队列和链队列的基本操作都需要常数时间O (1)。</p>
<p>空间性能:</p>
<p>循环队列：必须<strong>预先确定一个固定的长度</strong>，所以有<strong>存储元素个数的限制</strong>和<strong>空间浪费</strong>的问题。</p>
<p>链队列：<strong>没有队列满</strong>的问题，只有当内存没有可用空间时才会出现队列满，但是<strong>每个元素都需要一个指针域</strong>，从而产生了<strong>结构性开销。</strong></p>
<h3 id="3-栈和队列的应用"><a class="header-anchor" href="#3-栈和队列的应用">¶</a>3.<strong>栈和队列的应用</strong></h3>
<h4 id="数值转换"><a class="header-anchor" href="#数值转换">¶</a>数值转换</h4>
<h4 id="括号匹配"><a class="header-anchor" href="#括号匹配">¶</a>括号匹配</h4>
<h4 id="表达式求值"><a class="header-anchor" href="#表达式求值">¶</a>表达式求值</h4>
<p>表达式的三种标识方法：设  Exp = S1 + <strong>OP</strong> + S2 （OP为运算符）</p>
<p>则称    <strong>OP</strong> + S1 + S2       为前缀表示法</p>
<p>​            S1 + <strong>OP</strong> + S2      为中缀表示法</p>
<p>​            S1 + S2 + <strong>OP</strong>       为后缀表示法（逆波兰式）（所有的运算符都在对应的操作数后面出现）</p>
<p>为了在后缀表达式中区分相邻的操作数，在每个操作数末尾添加一个<strong>字符“#”</strong>。<strong>后缀表达式中没有括号</strong>，只有操作数和运算符，越放在前面的运算符优先级越高。计算机就是**先将中缀表达式转换为后缀表达式，**然后再对后缀表达式求值。</p>
<p><strong>前缀式</strong>的运算规则为: 连续出现的两个操作数和在它们之前且紧靠它们的运算符构成一个最小表达式;</p>
<p><strong>后缀式</strong>的运算规则为: 运算符在式中出现的顺序恰为表达式的运算顺序; 每个运算符和在它之前出现且紧靠它的两个操作数构成一个最小表达式。</p>
<p><strong>中缀表达式</strong>求值：</p>
<p>1.运算符的优先级从高到低依次为( )、*和/ 、+和-、#；<br>
2.有括号出现时先算括号内的，后算括号外的，多层括号由内向外进行计算；<br>
3.左右括号优先级相等（唯一相等的情况）；<br>
4.左括号大于它左边的其它运算符（即其它&lt;(），小于它右边的其它运算符（即(&lt;其它）；<br>
5.右括号小于所有其它运算符（实际只能跟它左边的运算符比较）；<br>
6.优先级相同的普通运算符（如+和- ， *和/ ），谁在前优先级谁高。</p>
<p><strong>计算机</strong>中<strong>后缀表达式</strong>求值规则：</p>
<p>从左到右遍历表达式的每个数字和符号，遇到数字就进栈，遇到运算符就将处于栈顶的两个数字弹出并进行运算，然后将运算结果进栈，一直到获得最终结果。</p>
<p><strong>中缀表达式转后缀表达式规则</strong>：</p>
<p>1.从左到右遍历中缀表达式，如果是数字就直接输出，如果是运算符，则执行步骤2</p>
<p>2.判断其与栈顶运算符的优先级，若优先级相等，则肯定是“）”，栈顶的“（”直接出栈即可；</p>
<p>若优先级高，则直接入栈；</p>
<p>若优先级低，则栈顶元素依次出栈并输出，直到栈顶元素优先级低于当前运算符，当前运算符再入栈。</p>
<p>3.执行步骤1、2，一直遍历到表达式结束，栈中运算符依次出栈到栈空为止。</p>
<p>“(”=“)”</p>
<p>先入栈运算符&lt;“(”,“(”&lt;后入栈运算符</p>
<p>&quot;)&quot;小于所有其他运算符</p>
<p>+和-、*和/谁在前谁的优先级高</p>
<h1>四、串和矩阵</h1>
<h3 id="1-串"><a class="header-anchor" href="#1-串">¶</a>1.串</h3>
<p>串，由零个或多个<strong>字符</strong>组成的有限序列，是一种<strong>特殊类型的线性表</strong>，也叫<strong>字符串。</strong></p>
<p><strong>非空串</strong>：长度不为0的串，通常记为：S = &quot; s1 s2 …… sn &quot;</p>
<p>其中：S是<strong>串名</strong>，双引号是<strong>定界符</strong>，双引号内部是<strong>串值</strong> ，si（1≤i≤n）是一个任意字符。<br>
<strong>空串</strong>：长度为0的串，记为&quot;&quot; 。</p>
<p><strong>strCmp串比较</strong>：通过组成串的字符（ASCII码）之间的比较来进行</p>
<ul>
<li>[ ] 给定两个串：X=&quot;x1x2…xn&quot;和Y=“y1y2…ym”，则：</li>
</ul>
<ol>
<li>当且仅当n=m且x1=y1，…，xn=ym时，称<strong>X=Y</strong>；</li>
<li>当下列条件之一成立时，称<strong>X＜Y</strong>：<br>
⑴ n＜m且xi=yi（1≤ i≤n）；<br>
⑵存在k≤min(m,n)，使得xi=yi(1≤i≤k-1)且xk＜yk。</li>
<li>其它情况，称<strong>X&gt;Y</strong>。</li>
</ol>
<p><strong>串和线性表的比较</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-18-15.png" alt=""></p>
<p>在<strong>线性表</strong>的基本操作中，大多以“<strong>单个元素</strong>”作为操作对象；</p>
<p>在<strong>串</strong>的基本操作中，通常以“<strong>串的整体</strong>”作为操作对象。</p>
<p>串有<strong>两种</strong>存储方式：</p>
<p>1.顺序存储方式</p>
<p>2.块链存储方式</p>
<h4 id="串的顺序存储"><a class="header-anchor" href="#串的顺序存储">¶</a>串的顺序存储</h4>
<p>就是要用<strong>一段地址连续的存储空间</strong>存储串的内容。</p>
<p>如何记录存储空间的首地址？如何记录串的长度？</p>
<p><strong>方法1</strong>：用数组的<strong>0号单元</strong>存放<strong>串长</strong>，从<strong>1号单元</strong>作为存储空间<strong>首地址</strong>。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-22-25.png" alt=""></p>
<p><strong>方法2：<strong>在</strong>串尾</strong>存储一个不会在串中出现的特殊字符作为<strong>串的终结符</strong>，表示串的结尾。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-24-14.png" alt=""></p>
<h4 id="串的块链储存"><a class="header-anchor" href="#串的块链储存">¶</a>串的块链储存</h4>
<p>链表存储串的例子：“shujujiegou”的存储</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231214112625121.png" alt="image-20231214112625121"></p>
<p>可用链表来存储串，由于串的数据元素是一个字符，因此每个链表结点的数据域为1个字符，占用内存的1个字节，而指针域为4个字节，<strong>存储密度低。</strong></p>
<p><strong>存储密度 = 数据元素存储空间/实际分配的存储空间</strong></p>
<p>上述例子的存储密度为：1/（1+4）=1/5</p>
<p>链表存储串方法的<strong>改进-块链</strong>：“shujujiegou”的存储</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231214112911246.png" alt="image-20231214112911246"></p>
<p>链表各结点存储多个字符，存储密度高。</p>
<p>上述例子的存储密度为4/（4+4）=1/2</p>
<h4 id="串的模式匹配"><a class="header-anchor" href="#串的模式匹配">¶</a>串的模式匹配</h4>
<p>给定<strong>主串S</strong>=“s1s2…sn”和<strong>子串T</strong>=“t1t2…tm”，在S中寻找T 的过程称为模式匹配，又称为子串定位。</p>
<p>如果匹配成功，返回T 在S中的位置；如果匹配失败，返回-1。</p>
<p>在模式匹配操作中，<strong>S</strong>又可以称为<strong>目标串</strong>，<strong>T</strong>又称为<strong>模式串。</strong></p>
<p>模式匹配算法：<strong>BF算法</strong>和<strong>KMP算法</strong></p>
<h5 id="BF算法"><a class="header-anchor" href="#BF算法">¶</a>BF算法</h5>
<p>即Brute Force算法，特点是<strong>暴力匹配</strong>。</p>
<p><strong>基本思想：</strong></p>
<p>从目标串S的第一个字符开始和模式串T 的第一个字符进行比较。</p>
<p>若相等，则继续比较两者的后续字符；否则，从主串S的第二个字符开始和模式T 的第一个字符进行比较，重复上述过程。</p>
<p>直到<strong>T 中</strong>的字符全部比较完毕，则说明本趟<strong>匹配成功</strong>；或<strong>S中</strong>的字符全部比较完，则说明<strong>匹配失败</strong>。</p>
<p><strong>过程</strong>：</p>
<ol>
<li>在串S和串T中设比较的起始下标i和j；</li>
<li>循环直到S或T的所有字符均比较完<br>
2.1 如果S[i]=T[j]，继续比较S和T的下一个字符；<br>
2.2 否则，将i和j<strong>回溯</strong>，准备下一趟比较；</li>
<li>如果T中所有字符均比较完，则匹配成功，返回匹配的起始比较下标；否则，匹配失败，返回0；</li>
</ol>
<p>代码实现：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-40-36.png" style="zoom:80%;" />
<h5 id="KMP算法"><a class="header-anchor" href="#KMP算法">¶</a>KMP算法</h5>
<p>是对BF算法的改进，主要是<strong>消除了主串指针的回溯</strong>，从而使算法效率有了较大程度的提升。</p>
<p>核心步骤是要求出T模式串的next[j]函数。</p>
<p>如下图所示，其实就是找<strong>前后缀</strong>相同。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231214202544.jpg" alt=""></p>
<p>找到next[j]函数后，进行以下操作。</p>
<p>下图的next[j]=[-1,0,0,1,2]</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231214203119.jpg" alt=""></p>
<p>判断j在哪一个位置匹配失败，然后找到对应位置的next值k，下一趟则让j指向T[k]，</p>
<p>只不过<strong>并不是令j回溯</strong>，而是令T模式串整体向右移动，使得j指向T[k]，</p>
<p>如果i=j，说明匹配成功，i和j同时右移一位。</p>
<p><strong>KMP比较抽象，但是却大幅度地优化了BF算法。</strong></p>
<h3 id="2-数组"><a class="header-anchor" href="#2-数组">¶</a>2.数组</h3>
<p>数组：由一组<strong>类型相同</strong>的数据元素构成的有序集合，每个数据元素称为一个数组元素（简称为元素）</p>
<p>数组的<strong>特点</strong>：</p>
<p>1.元素本身可以具有某种结构，属于同一数据类型；<br>
2.数组是一个具有固定格式和数量的数据集合。</p>
<p>在数组上一般<strong>不能</strong>执行<strong>插入</strong>或<strong>删除</strong>某个数组元素的操作</p>
<p>数组的<strong>基本操作：</strong></p>
<p><strong>存取</strong>：给定一组下标，读出对应的数组元素</p>
<p><strong>修改</strong>：给定一组下标，存储或修改与其相对应的数组元素</p>
<p>如何存储（多维）数组呢？</p>
<p>按<strong>行优先</strong>：先存储行号较小的元素，行号相同者先存储列号较小的元素</p>
<p>按<strong>列优先</strong>：先存储列号较小的元素，列号相同者先存储行号较小的元素</p>
<h3 id="3-特殊矩阵"><a class="header-anchor" href="#3-特殊矩阵">¶</a>3.特殊矩阵</h3>
<p>矩阵中很多值相同的元素并且它们的分布有一定的规律。主要形式有<strong>对称</strong>矩阵、<strong>三角</strong>矩阵、<strong>对角</strong>矩阵等，<strong>都是方阵。</strong>（n*n型）</p>
<p>存储的基本思路：<strong>为多个值相同的元素只分配一个存储空间</strong>；保证随机存取，即在O(1)时间内寻址。</p>
<p><strong>对称矩阵的压缩存储</strong>：只存储下三角部分的元素。</p>
<p><strong>三角矩阵的压缩存储</strong>：只存储上三角部分（或下三角）的元素和其余部分的任意c 值。（相同的常数）</p>
<p><strong>对角矩阵的压缩存储</strong>：所有非零元素都集中在以主对角线为中心的带状区域中，除了主对角线和它的上下方若干条对角线的元素外，所有其他元素都为零。</p>
<h3 id="4-稀疏矩阵"><a class="header-anchor" href="#4-稀疏矩阵">¶</a>4.稀疏矩阵</h3>
<p>稀疏矩阵：矩阵中有很多零元素，非零元个数远远小于矩阵元素总个数。</p>
<p>非零元的分布没有规律，具有随机性。存储的基本思路：<strong>对零元素不分配存储空间</strong>。</p>
<p><strong>稀疏矩阵的压缩存储</strong>：只存储非零元素。</p>
<p><strong>注意</strong>：稀疏矩阵中的非<strong>零元素的分布没有规律。</strong></p>
<p>**三元组顺序表：**将稀疏矩阵中的每个非零元素表示为一个三元组：(<strong>行号，列号，非零元素值</strong>)</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-04-22.png" alt=""></p>
<p>三元组顺序表可表示为下图</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-05-59.png" alt=""></p>
<p>三元组顺序表不适用于稀疏矩阵的加法、乘法等操作，非零元素的个数及位置都会发生变化，则在三元组顺序表中就要进行<strong>插入</strong>和<strong>删除</strong>操作，顺序存储就十分不便。</p>
<p><strong>十字链表</strong></p>
<p>采用链接存储结构存储三元组表</p>
<p>十字链表可表示为下图</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-07-48.png" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-08-03.png" alt=""></p>
<h1>五、树和二叉树</h1>
<h3 id="1-树的引入"><a class="header-anchor" href="#1-树的引入">¶</a>1.树的引入</h3>
<p><strong>树</strong>的定义：</p>
<p>n（n≥0）个结点的<strong>有限集合</strong>。当n＝0时，称为<strong>空树</strong>；任意一棵非空树满足以下条件：有且仅有一个特定的称为根的结点；当n＞1时，除根结点之外的其余结点被分成m（m&gt;0）个<strong>互不相交</strong>的有限集合T1,T2,… ,Tm，其中每个集合又是一棵树，并称为这个根结点的子树。</p>
<p><strong>二叉树</strong>的定义：</p>
<p>n(n≥0)个结点的<strong>有限集合</strong>，该集合或者为<strong>空集（称为空二叉树）</strong>，或者由一个根结点和两棵互不相交的、分别称为根结点的<strong>左子树</strong>和<strong>右子树</strong>的二叉树组成。</p>
<p>特点：（1）每个结点最多有两棵子树；（2）两棵子树是<strong>有序的</strong>，不能任意颠倒；（3）即使结点只有<strong>一棵子树，也有左右之分。</strong></p>
<p>二叉树<strong>是另一种树型结构</strong>，不是树的子集。与度为2的树的<strong>区别</strong>：</p>
<p>（1）度为2的树至少有一个结点的度为2，而二叉树没有这个要求；</p>
<p>（2）度为2的树中的结点如果只有一棵子树，是不区分左右的，而二叉树需要严格区分左右。</p>
<h3 id="2-树的存储结构"><a class="header-anchor" href="#2-树的存储结构">¶</a>2.树的存储结构</h3>
<h4 id="树的基本术语"><a class="header-anchor" href="#树的基本术语">¶</a>树的<strong>基本术语</strong></h4>
<p><strong>结点的度</strong>：结点所<strong>拥有的子树的个数</strong>。</p>
<p><strong>树的度</strong>：树中各结点度的最大值<strong>max</strong>。</p>
<p><strong>叶子</strong>结点：<strong>度为0</strong>的结点，也称为终端结点。</p>
<p><strong>分支</strong>结点：<strong>度不为0</strong>的结点，也称为非终端结点。</p>
<p><strong>孩子、双亲</strong>：树中某<strong>结点子树</strong>的根结点称为这个结点的孩子结点，这个结点称为其孩子结点的双亲结点；</p>
<p><strong>兄弟</strong>：具有<strong>同一个双亲</strong>的孩子结点互称为兄弟。</p>
<p><strong>路径</strong>：如果树的结点序列n1, n2, …, nk有如下关系：结点ni是ni+1的双亲（1&lt;=i&lt;k），则把<strong>n1, n2, …, nk</strong>称为一条由n1至nk的路径；</p>
<p><strong>路径长度</strong>：路径上经过的<strong>边的个数</strong>称为路径长度。</p>
<p><strong>祖先、子孙</strong>：在树中，如果有一条路径从结点x到结点y，则x称为y的祖先，而y称为x的子孙。</p>
<p>结点所在<strong>层数</strong>：根结点的层数为1；对其余任何结点，若某结点在第k层，则其孩子结点在第k+1层。</p>
<p>树的<strong>深度</strong>：树中所有结点的<strong>最大层数</strong>max，也称高度。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-01-14.png" style="zoom:80%;" />
<p><strong>层序编号</strong>：将树中结点按照<strong>从上层到下层</strong>、同层<strong>从左到右</strong>的次序依次给他们编以<strong>从1开始</strong>的连续自然数。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-02-01.png"  />
<p><strong>有序树、无序树</strong>：如果一棵树中结点的<strong>各子树从左到右是有次序的</strong>，称这棵树为有序树；<strong>反之</strong>，称为无序树。</p>
<p>（数据结构中讨论的一般都是有序树）</p>
<p><strong>森林</strong>：m (m≥0)棵互不相交的树的集合。</p>
<h4 id="树的遍历"><a class="header-anchor" href="#树的遍历">¶</a>树的<strong>遍历</strong></h4>
<p>从根结点出发，<strong>按照某种次序</strong>访问树中所有结点，使得<strong>每个结点被访问一次且仅被访问一次。</strong></p>
<p>遍历的<strong>实质</strong>：树结构（非线性结构）<strong>→线性结构。</strong></p>
<p><strong>遍历的方式</strong>：</p>
<p><strong>前序</strong>遍历：<strong>根</strong>左右</p>
<p><strong>中序</strong>遍历：左<strong>根</strong>右</p>
<p><strong>后序</strong>遍历：左右<strong>根</strong></p>
<p><strong>层序</strong>遍历：从上到下，从左到右</p>
<p>如何表示结点的双亲和孩子，而这种关系很难用存储位置来体现，所以<strong>树一般没有顺序存储结构</strong>。</p>
<h4 id="树的表示法"><a class="header-anchor" href="#树的表示法">¶</a><strong>树的表示法</strong></h4>
<h5 id="1-双亲表示法"><a class="header-anchor" href="#1-双亲表示法">¶</a>1.双亲表示法</h5>
<p>用<strong>一维数组</strong>来存储树的各个结点（一般按层序存储）</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-22-04.png" alt=""></p>
<p>示意图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-22-45.png" alt=""></p>
<h5 id="2-孩子链表表示法"><a class="header-anchor" href="#2-孩子链表表示法">¶</a>2.孩子链表表示法</h5>
<p>1.用<strong>一维数组</strong>来存储树的各个结点（一般按层序存储）；</p>
<p>2.把<strong>每个结点的孩子排列起来</strong>，看成是一个线性表，且以单链表存储，则n个结点共有 n 个孩子链表；</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-27-38.png" style="zoom:50%;" />
<p>示意图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-27-51.png" alt=""></p>
<h5 id="3-双亲孩子表示法"><a class="header-anchor" href="#3-双亲孩子表示法">¶</a>3.双亲孩子表示法</h5>
<p>融合了双亲表示法和孩子链表表示法</p>
<p>示意图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-31-13.png" alt=""></p>
<h5 id="4-孩子兄弟表示法"><a class="header-anchor" href="#4-孩子兄弟表示法">¶</a>4.孩子兄弟表示法</h5>
<p>任一结点的<strong>第一个孩子</strong>是惟一的，<strong>右兄弟</strong>是惟一的，设置两个分别指向该结点的第一个孩子和右兄弟的指针。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-33-46.png" style="zoom:80%;" />
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-34-38.png" alt=""></p>
<p>但这种表示方法同样<strong>不方便查找</strong>结点的<strong>双亲</strong>信息</p>
<h3 id="3-二叉树的逻辑结构"><a class="header-anchor" href="#3-二叉树的逻辑结构">¶</a>3.二叉树的逻辑结构</h3>
<h5 id="特殊的二叉树"><a class="header-anchor" href="#特殊的二叉树">¶</a>特殊的二叉树</h5>
<h6 id="斜树"><a class="header-anchor" href="#斜树">¶</a><strong>斜树</strong></h6>
<p>1.所有结点都只有左子树的二叉树称为<strong>左斜树</strong>；<br>
2.所有结点都只有右子树的二叉树称为<strong>右斜树</strong>；<br>
3.左斜树和右斜树统称为斜树。</p>
<p><strong>特点</strong>：在斜树中，<strong>每一层只有一个结点</strong>；斜树的<strong>结点个数与其深度相同</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_19-55-53.png" style="zoom:50%;" />
<h6 id="满二叉树"><a class="header-anchor" href="#满二叉树">¶</a>满二叉树</h6>
<p>在一棵二叉树中，如果所有分支结点<strong>都存在左子树和右子树</strong>，并且<strong>所有叶子都在同一层</strong>上。</p>
<p><strong>特点</strong>：<strong>叶子</strong>只能出现在<strong>最下一层</strong>；<strong>只有度为0和度为2</strong>的结点。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_19-55-25.png" style="zoom:50%;" />
<h6 id="完全二叉树"><a class="header-anchor" href="#完全二叉树">¶</a>完全二叉树</h6>
<p>对一棵具有n个结点的二叉树按层序编号，如果<strong>编号</strong>为i（1≤i≤n）的结点<strong>与同样深度的满二叉树</strong>中编号为i的结点在二叉树中的位<strong>置完全相同。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_19-58-23.png" style="zoom:50%;" />
<p>结点<strong>集中</strong>在下面，左面</p>
<p>特点：</p>
<p>1.<strong>叶子结点只能出现在最下两层</strong>且最下层的叶子结点都<strong>集中在</strong>二叉树的<strong>左面</strong>；<br>
2.完全二叉树中<strong>如果有度为1的结点，只能有一个</strong>，<strong>且该结点只有左孩子</strong>；<br>
3.深度为k的完全二叉树在<strong>k-1层上一定是满二叉树</strong>；<br>
4.在<strong>同样结点个数</strong>的二叉树中，<strong>完全二叉树的深度最小。</strong></p>
<p>在满二叉树中，从最后一个结点开始，<strong>连续去掉</strong>任意个结点，即是一棵完全二叉树。</p>
<h5 id="二叉树的基本性质"><a class="header-anchor" href="#二叉树的基本性质">¶</a>二叉树的基本性质</h5>
<h6 id="性质1"><a class="header-anchor" href="#性质1">¶</a>性质1</h6>
<p>二叉树的<strong>第i层</strong>上<strong>最多有2<sup>(i-1)</sup>个</strong>结点（i≥1).</p>
<h6 id="性质2"><a class="header-anchor" href="#性质2">¶</a>性质2</h6>
<p>一棵<strong>深度为k</strong>的二叉树中，<strong>最多有2k-1个</strong>结点，<strong>最少有k个</strong>结点。</p>
<h6 id="性质3"><a class="header-anchor" href="#性质3">¶</a>性质3</h6>
<p>在一棵<strong>二叉树中</strong>，如果叶子（度为0）结点数为n0，度为2的结点数为n2，则有: <strong>n0＝n2＋1</strong>。</p>
<h6 id="性质4"><a class="header-anchor" href="#性质4">¶</a>性质4</h6>
<p>具有<strong>n个结点</strong>的<strong>完全二叉树</strong>的深度为[$\log_2{n}$]+1。（向下取整）</p>
<h6 id="性质5（完全二叉树的基本性质）"><a class="header-anchor" href="#性质5（完全二叉树的基本性质）">¶</a>性质5（完全二叉树的基本性质）</h6>
<p>对一棵<strong>具有n个结点的完全二叉树</strong>中**从1开始按层序编号，**则对于任意的序号为i（1≤i≤n）的结点（简称为结点i），有：</p>
<p>1.如果<strong>i＞1</strong>，则结点i的<strong>双亲结点</strong>的序号为  [<strong>i/2</strong>]；如果<strong>i＝1</strong>，则结点<strong>i是根结点，无双亲</strong>结点。<br>
2.如果<strong>2i≤n</strong>，则结点<strong>i的左孩子</strong>的序号为<strong>2i</strong>；如果<strong>2i＞n</strong>，则结点<strong>i无左孩子</strong>。<br>
3.如果<strong>2i+1≤n</strong>，则结点<strong>i的右孩子</strong>的序号为<strong>2i+1</strong>；如果<strong>2i+1＞n</strong>，则结点 <strong>i无右孩子</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_20-50-05.png" style="zoom:50%;" />
<h3 id="4-二叉树的存储结构"><a class="header-anchor" href="#4-二叉树的存储结构">¶</a>4.二叉树的存储结构</h3>
<h5 id="二叉树的顺序存储结构"><a class="header-anchor" href="#二叉树的顺序存储结构">¶</a>二叉树的顺序存储结构</h5>
<p>用<strong>一维数组</strong>存储二叉树中的结点，并且结点的存储位置（下标）应<strong>能体现结点之间的逻辑关系——双亲和孩子关系</strong>。</p>
<p><strong>完全二叉树（包括满二叉树）<strong>中结点的序号可以</strong>唯一地反映</strong>出结点之间的逻辑关系 。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-23-11.png" style="zoom:50%;" />
<p><strong>二叉树的顺序存储结构</strong>一般<strong>仅存储完全二叉树</strong>，<strong>不适合存储一般的二叉树。</strong></p>
<p>例如非完全二叉树：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-24-48.png" style="zoom:50%;" /></p>
<h5 id="二叉树的链表存储结构"><a class="header-anchor" href="#二叉树的链表存储结构">¶</a>二叉树的链表存储结构</h5>
<p>令二叉树的<strong>每个结点对应一个链表结点</strong>，链表结点除了<strong>存放与二叉树结点有关的数据信息</strong>外，还要设置指示<strong>左右孩子的指针</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-27-29.png" style="zoom:50%;" />
<h5 id="二叉树前序、中序和后序遍历的非递归实现"><a class="header-anchor" href="#二叉树前序、中序和后序遍历的非递归实现">¶</a>二叉树前序、中序和后序遍历的非递归实现</h5>
<p>先空着，哈哈</p>
<h5 id="二叉树的构造"><a class="header-anchor" href="#二叉树的构造">¶</a>二叉树的构造</h5>
<p>为了能<strong>唯一构造</strong>一颗二叉树，可以采取两类方法：</p>
<p>1.采用<strong>两个不同的遍历序列</strong></p>
<p><strong>前序</strong>遍历序列+<strong>中序</strong>遍历序列<strong>可以</strong>构造二叉树</p>
<p><strong>中序</strong>遍历序列+<strong>后序</strong>遍历序列<strong>可以</strong>构造二叉树</p>
<p>但是 <strong>前序遍历序列+<strong>后序</strong>遍历序列</strong>不可以**构造二叉树（找不到根结点）</p>
<p>2.采用<strong>扩展二叉树</strong>：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-42-17.png" style="zoom:50%;" /></p>
<h5 id="二叉树的应用"><a class="header-anchor" href="#二叉树的应用">¶</a>二叉树的应用</h5>
<p>1.<strong>求二叉树的结点个数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Count</span><span class="params">(BiNode *root)</span>  <span class="comment">//count为全局量并已初始化为0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">Count</span>(root-&gt;lchild);</span><br><span class="line">         count++;</span><br><span class="line">         <span class="built_in">Count</span>(root-&gt;rchild);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.<strong>按前序次序打印二叉树中的叶子结点</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;lchild &amp;&amp; !root-&gt;rchild)</span><br><span class="line">               cout&lt;&lt;root-&gt;data;</span><br><span class="line">        <span class="built_in">PreOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">PreOrder</span>(root-&gt;rchild);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.<strong>求二叉树的深度</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Depth</span><span class="params">(BiNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         hl= <span class="built_in">Depth</span>(root-&gt;lchild);</span><br><span class="line">         hr= <span class="built_in">Depth</span>(root -&gt;rchild);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">max</span>(hl, hr)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-三叉链表"><a class="header-anchor" href="#5-三叉链表">¶</a>5.三叉链表</h3>
<p>在二叉链表的基础上<strong>增加了一个指向双亲的指针域</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_23-00-47.png" style="zoom:50%;" />
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_23-01-25.png" style="zoom:50%;" /></p>
<h3 id="6-线索链表"><a class="header-anchor" href="#6-线索链表">¶</a>6.线索链表</h3>
<p>对于有n个结点的二叉链表来说，共有2n个指针域，其中用来存放孩子信息的指针域只有n-1个，剩余n+1个指针域的值为nullptr。</p>
<p>可以<strong>利用这些空闲的指针域</strong>存放<strong>遍历时的前驱后继关系</strong>来<strong>加快遍历的进程，减少时间的开销</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_10-27-59.png" style="zoom:50%;" />
<p>方法：增加<strong>两个标志域</strong>，分别指示对应的指针域存储的<strong>是孩子</strong>还<strong>是前驱或后继</strong></p>
<p>将<strong>空闲的左孩子域</strong>指向结点的<strong>前驱</strong>，将<strong>空闲的右孩子域</strong>指向<strong>后继</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_23-10-00.png" style="zoom:50%;" />
<p><strong>标志域为1</strong>，则说明存在<strong>线索</strong>。<strong>标志域为0</strong>，说明存在<strong>孩子</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_10-37-33.png" style="zoom:50%;" /></p>
<p>因为<strong>中序</strong>遍历为“<strong>左根右</strong>”，所以这里的前驱后继关系<strong>并不是指父子关系</strong>，而是<strong>指访问的次序</strong>。比如<strong>根的前驱是左，根的后继是右</strong>。</p>
<h3 id="7-树、森林和二叉树的相互转换"><a class="header-anchor" href="#7-树、森林和二叉树的相互转换">¶</a>7.树、森林和二叉树的相互转换</h3>
<h4 id="树转换为二叉树"><a class="header-anchor" href="#树转换为二叉树">¶</a>树转换为二叉树</h4>
<p>1.<strong>加线</strong>，在所有兄弟结点之间加一条连线</p>
<p>2.<strong>抹线</strong>，只保留双亲与第一个孩子的连线，删去与其它孩子的连线</p>
<p>3.<strong>顺时针旋转</strong>，使结构层次分明</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217110527.jpg" style="zoom: 33%;" /></p>
<h4 id="森林转换为二叉树"><a class="header-anchor" href="#森林转换为二叉树">¶</a>森林转换为二叉树</h4>
<p>1.先把每棵树都<strong>转换</strong>为二叉树（加线，抹线，顺时针旋转）</p>
<p>2.<strong>连接</strong>，从第二棵二叉树开始，依次<strong>把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子</strong>，当所有二叉树连起来后，此时所得到的二叉树就是由森林转换得到的二叉树。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217110522.jpg" style="zoom:33%;" /></p>
<h4 id="二叉树转换为树或森林"><a class="header-anchor" href="#二叉树转换为树或森林">¶</a>二叉树转换为树或森林</h4>
<p>1.<strong>加线</strong>，在二叉树中，若某<strong>结点x</strong>是其<strong>双亲y</strong>的<strong>左孩子</strong>，则把<strong>结点x的右孩子</strong>、<strong>右孩子的右孩子</strong>、……，<strong>都与结点y</strong>用线<strong>连起来</strong>；</p>
<p>2**.抹线**，删去原二叉树中<strong>所有</strong>结点<strong>与其右孩子结点的连线</strong></p>
<p>3.<strong>调整</strong>，使结构层次分明</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217111443.jpg" style="zoom:33%;" /></p>
<h4 id="树和二叉树遍历的关系"><a class="header-anchor" href="#树和二叉树遍历的关系">¶</a>树和二叉树遍历的关系</h4>
<p>1.树的<strong>前序</strong>遍历=二叉树的<strong>前序</strong>遍历</p>
<p>2.树的<strong>后序</strong>遍历=二叉树的<strong>中序</strong>遍历</p>
<h3 id="8-哈夫曼树和哈夫曼编码"><a class="header-anchor" href="#8-哈夫曼树和哈夫曼编码">¶</a>8.哈夫曼树和哈夫曼编码</h3>
<p>**权：**对树结点赋予一个有实际含义的数值</p>
<p><strong>带权路径长度</strong>：根结点到某一结点路径长度与权值的乘积<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_11-30-19.png" style="zoom:50%;" /></p>
<h4 id="哈夫曼树"><a class="header-anchor" href="#哈夫曼树">¶</a>哈夫曼树</h4>
<p>给定n个权值作为n个<strong>叶子</strong>结点，构造一颗<strong>二叉树</strong>，若该树的<strong>带权路径长度达到最小</strong>，这样的二叉树就叫做<strong>哈夫曼树</strong>，也称为<strong>最优二叉树。</strong></p>
<p><strong>特点</strong>：</p>
<p>1.<strong>权值越大</strong>的叶子结点<strong>越靠近根结点</strong>，而<strong>权值越小</strong>的叶子结点<strong>越远离</strong>根结点。</p>
<p>2.<strong>只有度为0</strong>（叶子结点）<strong>和度为2</strong>（分支结点）的结点，<strong>不存在度为1</strong>的结点。</p>
<p>3.同一组权值，对应的<strong>哈夫曼树不唯一</strong></p>
<p><strong>哈夫曼树的构造</strong>：选取最小的两个结点，合并。重复此步骤。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217114233.jpg" style="zoom: 33%;" /></p>
<h4 id="哈夫曼编码"><a class="header-anchor" href="#哈夫曼编码">¶</a>哈夫曼编码</h4>
<p><strong>等长编码</strong>：表示一组对象的二进制位串的长度相等，如ASCII码</p>
<p><strong>不等长编码</strong>：表示一组对象的二进制位串的长度不相等。使用频率高的用短码，使用频率低的用长码。</p>
<p><strong>前缀编码</strong>：设计不等长编码时必须保证某字符的编码不是另一个字符的前缀（最左子串），这种编码就叫做前缀编码。</p>
<p>哈夫曼编码是一种前缀编码，该方法以字符出现的频率为权值来构建哈夫曼树，并得到平均长度最短的码字。</p>
<p>例如：一组字符{A, B, C, D, E, F, G}出现的频率分别是{9, 11, 5, 7, 8, 2, 3}，设计最经济的编码方案。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_11-55-06.png" alt=""></p>
<p>**译码：**从Huffman树根开始，从待译码电文中逐位取码。</p>
<p>若编码是**“0”，则向左走**；若编码是**“1”，则向右走**；一旦<strong>到达叶子结点</strong>，则<strong>译出一个字符</strong>；再<strong>重新从根出发</strong>，直到电文结束。</p>
<p>例如：电文编码：010110011011010</p>
<p>译文只能是 CDFDB</p>
<p><strong>注意</strong>：编码方和译码方的哈夫曼树必须一致，否则不能正确译码。</p>
<h1>六、图</h1>
<h3 id="1-图的基本概念"><a class="header-anchor" href="#1-图的基本概念">¶</a>1.图的基本概念</h3>
<p>图由顶点的有穷非空集合和顶点之间边的集合组成（点集和边集），通常表示为： <strong>G=(V，E</strong>)</p>
<p>在线性表中有空表，元素个数为零；</p>
<p>在树中有空树，结点个数为零；</p>
<p><strong>但</strong>在图中，<strong>顶点个数不能为零，但可以没有边</strong>。</p>
<p>图<strong>无法采用顺序存储</strong>结构。</p>
<hr>
<p><strong>无向边：</strong>(vi，vj)   <strong>有向边(弧）:</strong>&lt;vi，vj&gt;</p>
<p><strong>简单图</strong>：在图中，若<strong>不存在顶点到其自身</strong>的边，且同一条边<strong>不重复</strong>出现。</p>
<p><strong>邻接、依附</strong>:</p>
<p>1.<strong>无向图中</strong>，对于任意两个顶点vi和顶点vj，<strong>若存在边(vi，vj)</strong>，则称顶点vi和顶点vj<strong>互为邻接点</strong>，同时称<strong>边(vi，vj)依附于顶点</strong>vi和顶点vj。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-32-02.png" style="zoom:50%;" />
<p>2.<strong>有向图中</strong>，对于任意两个顶点vi和顶点vj，<strong>若存在弧&lt;vi，vj&gt;</strong>，则称<strong>顶点vi邻接到顶点vj</strong>，<strong>顶点vj邻接自顶点vi</strong>，同时称<strong>弧&lt;vi，vj&gt;依附于</strong>顶点vi和顶点vj 。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-32-24.png" style="zoom:50%;" />
<p>在<strong>线性</strong>结构中，元素之间的关系为<strong>前驱和后继</strong>；</p>
<p>在<strong>树</strong>结构中，结点之间的关系为<strong>双亲和孩子；</strong></p>
<p>在<strong>图</strong>结构中，顶点之间的关系为<strong>邻接</strong>。</p>
<hr>
<p><strong>无向完全图</strong>：在无向图中，如果<strong>任意两个顶点</strong>之间都存在<strong>边</strong>，则称该图为无向完全图。</p>
<p><strong>有向完全图</strong>：在有向图中，如果<strong>任意两个顶点</strong>之间都存在<strong>方向相反</strong>的<strong>两条弧</strong>，则称该图为有向完全图。</p>
<p>含有n个顶点的<strong>无向完全图</strong>有<strong>n×(n-1)/2</strong>条边。 含有n个顶点的<strong>有向完全图</strong>有**n×(n-1)**条弧。</p>
<p><strong>稀疏图</strong>：称<strong>边数很少的图</strong>为稀疏图；</p>
<p><strong>稠密图</strong>：称<strong>边数很多的图</strong>为稠密图。</p>
<p>顶点的<strong>度</strong>：在<strong>无向图中</strong>，顶点v的度是指<strong>依附于该顶点的边数</strong>，通常记为TD (v)。</p>
<p>顶点的<strong>入度</strong>：在<strong>有向图中</strong>，顶点v的入度是指<strong>以该顶点为弧头的弧的数目</strong>（<strong>进入</strong>该点），记为ID (v)；</p>
<p>顶点的<strong>出度</strong>：在<strong>有向图中</strong>，顶点v的出度是指<strong>以该顶点为弧尾的弧的数目</strong>（<strong>离开</strong>该点），记为OD (v)。</p>
<p>在<strong>无向图</strong>中，<strong>度数和=边数的2倍</strong></p>
<p>在<strong>有向图</strong>中，<strong>入度和=出度和=弧数</strong></p>
<p><strong>权</strong>：是指<strong>对边赋予</strong>的<strong>有意义的数值量</strong>。</p>
<p><strong>网</strong>：<strong>边上带权的图</strong>，也称网图。</p>
<p><strong>路径</strong>：例如无向图----&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-46-48.png" style="zoom: 33%;" /></p>
<p><strong>路径长度：</strong></p>
<p><strong>非带权图</strong>——路径上<strong>边的个数</strong></p>
<p><strong>带权图</strong>——路径上<strong>各边的权之和</strong></p>
<p><strong>回路（环）</strong>：第一个顶点和最后一个顶点相同的路径。(<strong>回到自身</strong>)</p>
<p><strong>简单路径</strong>：序列中<strong>顶点不重复出现</strong>的路径。</p>
<p><strong>简单回路（简单环）</strong>：除了第一个顶点和最后一个顶点外，<strong>其余顶点不重复出现</strong>的回路。</p>
<p><strong>子图</strong>：若图G=（V，E），G’=（V’，E’），如果V’属于V 且E’ 属于 E ，则称图G’是G的子图。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-51-45.png" style="zoom:50%;" />
<p><strong>连通图</strong>：在<strong>无向图</strong>中，如果从一个顶点vi到另一个顶点vj(i≠j)<strong>有路径</strong>，则称顶点vi和vj是连通的。如果<strong>图中任意两个顶点都是连通的</strong>，则称该图是连通图。</p>
<p><strong>连通分量</strong>：<strong>非连通图的极大连通子图</strong>称为连通分量。（两个连通分量<strong>只要再加一条边</strong>就可成为连通图）</p>
<p>连通分量是<strong>对无向图的一种划分</strong></p>
<p><strong>强连通图：<strong>在</strong>有向图</strong>中，对图中<strong>任意一对顶点</strong>vi和vj (i≠j)，若从<strong>顶点vi到顶点v</strong>j和<strong>从顶点vj到顶点vi均有路径</strong>，则称该有向图是强连通图。</p>
<p><strong>强连通分量</strong>：非强连通图的极大强连通子图。（两个强连通分量<strong>只要再加一条边</strong>就可成为强连通图）</p>
<p>强连通分量是<strong>对有向图的一种划分</strong></p>
<hr>
<p><strong>生成树</strong>：n个顶点的连通图G的生成树是<strong>包含G中全部顶点的一个极小连通子图。</strong></p>
<p>图的生成树唯一性不能确定</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217170427.jpg" style="zoom: 25%;" />
<p>对于<strong>无向连通图，<strong>例如左侧，有</strong>6个结点</strong>的生成树，一定有<strong>5条边。</strong></p>
<p>再任意<strong>添加1条属于原图中的边</strong>必定会<strong>产生回路</strong>。</p>
<p>再任意<strong>减少1条边</strong>，则必然<strong>变成非连通。</strong></p>
<hr>
<p>对于<strong>有向连通图</strong>，例如右侧，有4个结点的生成树中，<strong>只有1个入度为0</strong>的顶点v2，<strong>其他顶点</strong>的<strong>入度均为1</strong></p>
<p><strong>生成森林：<strong>在非连通图中，由每个连通分量都可以得到一棵生成树，这些</strong>连通分量的生成树</strong>就<strong>组成了一个非连通图的生成森林。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217171551.jpg" style="zoom: 33%;" />
<h3 id="2-图的遍历"><a class="header-anchor" href="#2-图的遍历">¶</a>2.图的遍历</h3>
<p>图的遍历是在从图中某一顶点出发，对图中<strong>所有顶点访问一次且仅访问一次</strong>。</p>
<p>要解决的<strong>问题</strong>：</p>
<p>1.在图中，如何选取遍历的<strong>起始顶点</strong>？</p>
<p>答：从编号小的顶点开始 。</p>
<p>2.从某个起点始<strong>可能到达不了所有其它顶点</strong>，怎么办？</p>
<p>答：<strong>多次调用</strong>从某顶点出发遍历图的算法</p>
<p>3.因图中可能存在回路，某些顶点可能会被重复访问，那么<strong>如何避免遍历不会因回路而陷入死循环</strong>。</p>
<p>答：附设<strong>访问标志数组</strong>visited[n] 。</p>
<p>4.在图中，一个顶点可以和其它多个顶点相连，当这样的顶点访问过后，<strong>如何选取下一个要访问的顶点</strong>？</p>
<p>答：<strong>深度优先遍历</strong>和<strong>广度优先遍历。</strong></p>
<hr>
<h4 id="深度优先遍历"><a class="header-anchor" href="#深度优先遍历">¶</a>深度优先遍历</h4>
<p>基本思想：（重点在&quot;深&quot;）</p>
<p>⑴ 访问顶点v；</p>
<p>⑵ 从v的未被访问的<strong>邻接点中选取一个</strong>顶点w，从w出发进行<strong>深度优先遍历</strong>；（递归）</p>
<p>⑶ <strong>重复</strong>上述两步，直至图中所有和v有路径相通的顶点都被访问到。</p>
<h4 id="广度优先遍历"><a class="header-anchor" href="#广度优先遍历">¶</a>广度优先遍历</h4>
<p>基本思想：（重点在&quot;广&quot;）</p>
<p>⑴ 访问顶点v；</p>
<p>⑵ 依次访问<strong>v的各个未被访问的邻接点</strong>v1, v2, …, vk；</p>
<p>⑶ 分别从v1，v2，…，vk出发依次访问它们未被访问的邻接点，并<strong>使“先被访问顶点的邻接点”先于“后被访问顶点的邻接点”被访问</strong>。直至图中所有与顶点v有路径相通的顶点都被访问到。</p>
<h3 id="3-图的存储"><a class="header-anchor" href="#3-图的存储">¶</a>3.图的存储</h3>
<h4 id="邻接矩阵"><a class="header-anchor" href="#邻接矩阵">¶</a>邻接矩阵</h4>
<p>用一个<strong>一维数组</strong>存储图中<strong>顶点</strong>的信息，用一个<strong>二维数组</strong>（称为邻接矩阵）存储图中<strong>各顶点之间的邻接关系。</strong></p>
<p>两顶点之间<strong>有边为1</strong>，<strong>无边为0</strong>；自身和自身无边，为0。</p>
<p>示意图1：<strong>无向图</strong>的邻接矩阵—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-01-37.png" style="zoom:50%;" /></p>
<p><strong>如何求顶点i的度？</strong></p>
<p>答：邻接矩阵的<strong>第i行（或第i列</strong>）<strong>非零元素的个数。</strong></p>
<p>示意图2：<strong>有向图</strong>的邻接矩阵—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-09-05.png" style="zoom:50%;" /></p>
<p><strong>如何求顶点 i 的出度？</strong></p>
<p>答:邻接矩阵的<strong>第 i 行元素之和</strong>。</p>
<p><strong>如何求顶点 i 的入度？</strong></p>
<p>答:邻接矩阵的<strong>第 i 列元素之和</strong>。</p>
<p>示意图3：<strong>网图</strong>的邻接矩阵—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-14-09.png" style="zoom:50%;" /></p>
<p>邻接矩阵特点：</p>
<p>优点：容易实现<strong>图的操作</strong>，如：<strong>求某顶点的度</strong>、<strong>判断顶点之间是否有边（弧</strong>）、<strong>找顶点的邻接点</strong>等等。</p>
<p>缺点：n个顶点需要n*n个单元存储边(弧);空间效率为O(n2)。 对稀疏图而言尤其<strong>浪费空间。</strong></p>
<h4 id="邻接表"><a class="header-anchor" href="#邻接表">¶</a>邻接表</h4>
<p>对于图的每个顶点vi，<strong>将所有邻接于vi的顶点链成一个单链表</strong>，称为顶点vi的<strong>边表</strong>（对于有向图则称为出边表），<strong>所有边表的头指针和存储顶点信息的一维数组</strong>构成了<strong>顶点表</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-20-51.png" style="zoom:50%;" />
<p>示意图1:<strong>无向图</strong>的邻接表—&gt;</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-24-20.png" style="zoom:50%;" />
<p><strong>如何求顶点 i 的度？</strong></p>
<p>答:顶点i的边表中结点的个数。</p>
<p>示意图2：<strong>有向图</strong>的邻接表—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-28-18.png" style="zoom:50%;" /></p>
<p><strong>如何求顶点 i 的入度？</strong></p>
<p>答：<strong>整个</strong>邻接表中<strong>邻接点域值是i的结点个数</strong></p>
<p><strong>如何求顶点 i 的所有邻接点？</strong></p>
<p>答:遍历顶点 i 的边表，该<strong>边表中的所有结点</strong>都是顶点 i 的邻接点。</p>
<h4 id="邻接表与邻接矩阵的比较"><a class="header-anchor" href="#邻接表与邻接矩阵的比较">¶</a>邻接表与邻接矩阵的比较</h4>
<p>1.联系：邻接表中每个链表对应于邻接矩阵中的一行，链表中结点个数等于该行中非零元素的个数。</p>
<p>2.区别：</p>
<p>① 对于任一确定的无向图，<strong>邻接矩阵是唯一的</strong>（行列号与顶点编号一致），但**邻接表不唯一（**链接次序与顶点编号无关）。</p>
<p>因为<strong>顶点指向的单链表各个节点的顺序是任意的</strong></p>
<p>② 邻接矩阵的空间复杂度为O(n2),而邻接表的空间复杂度为O(n+e)。</p>
<p>3.用途：<strong>邻接矩阵多用于稠密图</strong>的存储（e接近n(n-1)/2)；而<strong>邻接表多用于稀疏图</strong>的存储（e&lt;&lt; n(n-1)/2)</p>
<h3 id="4-最小生成树"><a class="header-anchor" href="#4-最小生成树">¶</a>4.最小生成树</h3>
<p>生成树的<strong>代价</strong>：设G = (V, E)是一个<strong>无向连通网</strong>，生成树上<strong>各边的权值之和</strong>称为该生成树的代价。</p>
<p><strong>最小生成树</strong>：在图G所有生成树中，<strong>代价最小的生成树</strong>称为最小生成树。</p>
<p><strong>MST性质</strong>：假设G=(V, E)是一个无向连通网，U是顶点集V的一个非空子集。<strong>若(u, v)是一条具有最小权值的边，<strong>其中u∈U，v∈V－U，则</strong>必存在</strong>一棵<strong>包含边(u, v)的最小生成树</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_09-54-13.png" style="zoom:50%;" /></p>
<h4 id="普里姆（Prim）算法"><a class="header-anchor" href="#普里姆（Prim）算法">¶</a>普里姆（Prim）算法</h4>
<p>基本思想：设<strong>G</strong>=(V, E)是具有n个顶点的连通网，<strong>T</strong>=(U, TE)是G的最小生成树，<strong>T的初始状态为U={u0}（u0∈V），TE={ }，</strong></p>
<p>重复执行下述<strong>操作</strong>：在所有u∈U，v∈V-U的边中<strong>找一条代价最小的边(u, v)并入集合TE，同时v并入U，直至U=V。</strong></p>
<p><strong>流程图</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-17.png" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-24.png" alt="Snipaste_2023-12-18_10-00-24" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-32.png" alt="Snipaste_2023-12-18_10-00-32" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-39.png" alt="Snipaste_2023-12-18_10-00-39" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-47.png" alt="Snipaste_2023-12-18_10-00-47" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-53.png" alt="Snipaste_2023-12-18_10-00-53" style="zoom:50%;" />
<h4 id="克鲁斯卡尔（Kruskal）算法"><a class="header-anchor" href="#克鲁斯卡尔（Kruskal）算法">¶</a>克鲁斯卡尔（Kruskal）算法</h4>
<p>基本思想：设无向连通网为<strong>G</strong>＝(V, E)，令G的最小生成树为<strong>T</strong>＝(U, TE)，<strong>其初态为U＝V，TE＝{ }</strong>。</p>
<p><strong>操作</strong>：按照边的<strong>权值由小到大</strong>的顺序，<strong>考察G的边集E中的各条边</strong>。若被考察的边的两个顶点属于T的两个不同的连通分量，则将此边作为最小生成树的边加入到T中，<strong>同时把两个连通分量连接为一个连通分量</strong>；若被考察边的两个顶点属于同一个连通分量，则舍去此边，以免造成回路，如此下去，<strong>当T中的连通分量个数为1时</strong>，此连通分量便为G的一棵最小生成树。</p>
<p><strong>流程图：</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-31.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-38.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-47.png" alt="Snipaste_2023-12-18_10-11-47" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-53.png" alt="Snipaste_2023-12-18_10-11-53" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-12-01.png" alt="Snipaste_2023-12-18_10-12-01" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-12-10.png" alt="Snipaste_2023-12-18_10-12-10" style="zoom:50%;" />
<hr>
<h4 id="两个算法的比较"><a class="header-anchor" href="#两个算法的比较">¶</a>两个算法的比较</h4>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-18-17.png" alt=""></p>
<h3 id="5-图的最短路径"><a class="header-anchor" href="#5-图的最短路径">¶</a>5.图的最短路径</h3>
<p><strong>最短路径</strong>：</p>
<p>在<strong>非网图</strong>中，最短路径是指两顶点之间经历的<strong>边数最少</strong>的路径。</p>
<p>在<strong>网图</strong>中，最短路径是指两顶点之间经历的<strong>边上权值之和最短</strong>的路径。</p>
<p><strong>单源点最短路径问题</strong></p>
<p><strong>问题</strong>描述：给定带权有向图G＝(V, E)和源点v∈V，求<strong>从v到G中其余各顶点</strong>的最短路径。</p>
<p>应用实例——<strong>计算机网络传输</strong>的问题：怎样找到一种最经济的方式，从一台计算机向网上所有其它计算机发送一条消息。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-29-40.png" alt=""></p>
<h4 id="迪杰斯特拉-Dijkstra-算法"><a class="header-anchor" href="#迪杰斯特拉-Dijkstra-算法">¶</a>迪杰斯特拉(Dijkstra)算法</h4>
<p>基本思想：设置一个集合S存放已经找到最短路径的顶点，S的初始状态只包含源点v，对vi∈V-S，<strong>假设从源点v到vi的有向边为最短路径。<strong>以后</strong>每求得一条最短路径v, …, vk，<strong>就将vk加入集合S中，并</strong>将路径v, …, vk , vi与原来的假设相比较</strong>，<strong>取</strong>路径长度<strong>较小者</strong>为最短路径。重复上述过程，直到集合V中全部顶点加入到集合S中。</p>
<p><strong>流程图</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-36-52.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-36-58.png" alt="Snipaste_2023-12-18_10-36-58" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-37-04.png" alt="Snipaste_2023-12-18_10-37-04" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-37-09.png" alt="Snipaste_2023-12-18_10-37-09" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-37-14.png" alt="Snipaste_2023-12-18_10-37-14" style="zoom:50%;" />
<hr>
<p><strong>每一对顶点之间的最短路径问题</strong></p>
<p>解决办法1：<strong>每次</strong>以一个顶点为源点<strong>调用Dijkstra算法</strong>。显然，时间复杂度为<strong>O(n3)。</strong></p>
<p>解决办法2：<strong>弗洛伊德</strong>提出的求每一对顶点之间的最短路径算法——Floyd算法，其时间复杂度<strong>也是O(n3)</strong>，但<strong>形式上要简单些</strong>。</p>
<h4 id="弗洛伊德-Floyd-算法"><a class="header-anchor" href="#弗洛伊德-Floyd-算法">¶</a>弗洛伊德(Floyd)算法</h4>
<p>基本思想：对于从vi到vj的弧，进行<strong>n次试探</strong>：首先考虑路径vi,v0,vj是否存在，如果存在，则比较vi,vj和vi,v0,vj的路径长度，<strong>取较短者</strong>为从vi到vj的中间顶点的序号不大于0的最短路径。在路径上再增加一个顶点v1，依此类推，在经过n次比较后，最后求得的必是从顶点vi到顶点vj的最短路径。</p>
<p>流程图：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-04.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-14.png" alt="Snipaste_2023-12-18_10-51-14" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-20.png" alt="Snipaste_2023-12-18_10-51-20" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-31.png" alt="Snipaste_2023-12-18_10-51-31" style="zoom:50%;" />
<h3 id="6-有向无环图及其应用"><a class="header-anchor" href="#6-有向无环图及其应用">¶</a>6.有向无环图及其应用</h3>
<h4 id="AOV网"><a class="header-anchor" href="#AOV网">¶</a>AOV网</h4>
<p>在一个表示<strong>工程</strong>的<strong>有向图</strong>中，用<strong>顶点表示活动</strong>，用<strong>弧表示活动之间的优先关系</strong>，称这样的有向图为顶点表示活动的网，简称AOV网。</p>
<p><strong>特点</strong>：</p>
<p>1.AOV网中的弧表示活动之间存在的某种制约关系。</p>
<p>2.AOV网中不能出现回路 。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-02-29.png" style="zoom:50%;" /></p>
<h4 id="拓扑排序"><a class="header-anchor" href="#拓扑排序">¶</a>拓扑排序</h4>
<p>拓扑<strong>序列</strong>：设G=(V，E)是一个具有n个顶点的有向图，V中的顶点序列v1, v2, …, vn称为一个拓扑序列，当且仅当满足下列条件：若<strong>从顶点vi到vj有一条路径</strong>，则<strong>在顶点序列中顶点vi必在顶点vj之前。</strong></p>
<p>拓扑<strong>排序</strong>：<strong>对一个有向图构造拓扑序列</strong>的过程称为拓扑排序 。</p>
<p>拓扑序列使得AOV网中<strong>所有应存在的前驱和后继关系都能得到满足。</strong></p>
<p>基本思想：<br>
⑴ 从AOV网中<strong>选择一个没有前驱的顶点并且输出</strong>；<br>
⑵ 从AOV网中<strong>删去该顶点</strong>，并且<strong>删去所有以该顶点为尾的弧</strong>；<br>
⑶ 重复上述两步，**直到全部顶点都被输出，**或AOV网中不存在没有前驱的顶点。</p>
<p>示意图：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-12-51.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-12-57.png" alt="Snipaste_2023-12-18_11-12-57" style="zoom:50%;" />
<h4 id="AOE网"><a class="header-anchor" href="#AOE网">¶</a>AOE网</h4>
<p>在一个表示<strong>工程</strong>的<strong>带权有向图</strong>中，用<strong>顶点表示事件</strong>，用<strong>有向边表示活动</strong>，边上的<strong>权值表示活动的持续时间</strong>，称这样的有向图叫做<strong>边表示活动</strong>的网，简称AOE网。</p>
<p>AOE网中<strong>没有入边的顶点称为始点（或源点）</strong>，<strong>没有出边的顶点称为终点（或汇点）</strong>。</p>
<p>AOE网的<strong>性质</strong>：<br>
⑴ 只有在<strong>某顶点所代表的事件发生后</strong>，<strong>从该顶点出发的各活动才能开始；</strong><br>
⑵ 只有在进入某顶点的<strong>各活动都结束</strong>，<strong>该顶点所代表的事件才能发生</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-18-47.png" style="zoom:50%;" /></p>
<p>AOE网可以回答下列<strong>问题</strong>：</p>
<ol>
<li>完成<strong>整个工程至少需要多少时间</strong>?</li>
<li>为<strong>缩短</strong>完成工程所需的<strong>时间</strong>, 应当<strong>加快</strong>哪些<strong>活动?</strong></li>
</ol>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-22-28.png" alt=""></p>
<p>最短工期为：a1+a3=6+4=10</p>
<hr>
<p>**关键路径：**在AOE网中，<strong>从始点到终点具有最大路径长度</strong>（该路径上的各个活动所持续的时间之和）的路径称为关键路径。</p>
<p><strong>关键活动</strong>：<strong>关键路径上的活动</strong>（<strong>边</strong>）称为关键活动。</p>
<p>关键路径可能不只一条，<strong>重要的是找到关键活动</strong></p>
<hr>
<p>求最短路径方法：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-49-25.png" alt=""></p>
<hr>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-49-44.png" alt="Snipaste_2023-12-18_11-49-44"></p>
<p><strong>核心</strong>在于求出：</p>
<p>顶点的<strong>事件最早发生时间</strong>Ve（从起点向终点，依次加上活动时间，多路径选最大值）</p>
<p>顶点的<strong>事件最迟发生时间</strong>Vl（从终点向起点，依次减去活动时间，多路径选最小值)</p>
<p>注意：<strong>起点</strong>和<strong>终点</strong>的事件最早发生时间与事件最迟发生时间<strong>对应相同</strong></p>
<p>边的活动最早开始时间e（从起点向终点，该活动对应<strong>弧尾</strong>顶点的<strong>最早发生时间</strong>）</p>
<p>边的活动最晚开始时间l（从终点向起点，该活动对应<strong>弧头</strong>顶点的<strong>最迟发生时间-该活动的权值</strong>）</p>
<p>时间余量l-e</p>
<p>最终<strong>时间余量为0时</strong>对应的活动就是<strong>关键活动</strong>，进而可以找到对应的<strong>关键路径</strong></p>
<p>关键活动中的<strong>任意一个不能按时完成</strong>，整个工程的工期就会<strong>被拖延。</strong></p>
<p><strong>虽然</strong>理论上缩短关键活动的时间可以加快工程进度，<strong>但</strong>在实际情况下，需要综合考虑技术、资源、成本和<strong>对其他活动的影响</strong>，以确定是否可以成功缩短关键活动的时间，并提前完成整个工程。</p>
<h1>七、查找技术</h1>
<h3 id="1-概述"><a class="header-anchor" href="#1-概述">¶</a>1.概述</h3>
<p><strong>查找</strong> ：在具有<strong>相同类型</strong>的记录构成的集合中找出满足给定条件的记录。</p>
<p>把<strong>查找条件</strong>限制为“<strong>匹配</strong>”，即查找<strong>关键码等于给定值</strong>的记录。</p>
<p>查找的结果 ：若在查找集合中找到了与给定值相匹配的记录，则称<strong>查找成功</strong>；否则，称<strong>查找失败</strong>。</p>
<p><strong>平均查找长度</strong>：将查找算法进行的<strong>关键码的比较次数的数学期望值</strong>定义为平均查找长度，即：<strong>ASL</strong></p>
<hr>
<p><strong>静态</strong>查找 ：<strong>不涉及插入</strong>和<strong>删除</strong>操作的查找 。</p>
<p>查找集合一经生成，便<strong>只对其进行查找</strong>，而<strong>不进行插入和删除</strong>操作，或<strong>经过一段时间的查找之后</strong>，<strong>集中地进行插入和删除</strong>等修改操作；</p>
<p><strong>动态</strong>查找 ：<strong>涉及插入</strong>和<strong>删除</strong>操作的查找。</p>
<p>查找与插入和删除操作<strong>在同一个阶段进行</strong>，例如当<strong>查找成功</strong>时，要<strong>删除</strong>查找到的记录，当<strong>查找不成功</strong>时，要<strong>插入</strong>被查找的记录。</p>
<hr>
<p><strong>查找结构</strong> ：<strong>面向查找操作</strong>的数据结构 ，即查找所依赖的数据结构。</p>
<p><strong>线性表</strong>：适用于<strong>静态查找</strong>，主要采用<strong>顺序查找</strong>技术和<strong>折半查找</strong>技术。</p>
<p><strong>树表</strong>：适用于<strong>动态查找</strong>，主要采用<strong>二叉排序树</strong>的查找技术。</p>
<p><strong>散列表</strong>：静态查找和动态查找<strong>均适用</strong>，主要采用<strong>散列技术</strong>。</p>
<p>查找算法时间性能通过<strong>关键码的比较次数</strong>来度量。</p>
<hr>
<h3 id="2-线性表的查找技术"><a class="header-anchor" href="#2-线性表的查找技术">¶</a>2.线性表的查找技术</h3>
<h4 id="顺序查找（线性查找）"><a class="header-anchor" href="#顺序查找（线性查找）">¶</a>顺序查找（线性查找）</h4>
<p>基本思想：从线性表的<strong>一端向另一端逐个</strong>将关键码与给定值进行<strong>比较</strong>，若相等，则<strong>查找成功</strong>，<strong>给出</strong>该记录在表中的<strong>位置；</strong></p>
<p>若整个表检测完仍未找到与给定值相等的关键码，则<strong>查找失败,给出失败信息。</strong></p>
<p>对顺序查找作出<strong>改进</strong>：设置“<strong>哨兵</strong>”。</p>
<p>哨兵就是待查值，将它放在查找方向的<strong>尽头处</strong>，<strong>免去了</strong>在查找过程中<strong>每一次比较后都要判断查找位置是否越界</strong>，从而提高查找速度</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_20-32-38.png" style="zoom:50%;" />
<p>不用每次查找都判断一次<strong>i位置是否小于0。</strong></p>
<hr>
<h4 id="折半查找（二分查找）"><a class="header-anchor" href="#折半查找（二分查找）">¶</a>折半查找（二分查找）</h4>
<p>使用条件：线性表中的记录<strong>必须</strong>按关键码<strong>有序</strong>；<strong>必须</strong>采用<strong>顺序存储。</strong></p>
<p>基本思想：在<strong>有序表</strong>中，<strong>取中间记录</strong>作为比较对象，若给定值<strong>与中间记录的关键码相等</strong>，则<strong>查找成功</strong>；</p>
<p>若给定值<strong>小于</strong>中间记录的关键码，则在中间记录的<strong>左半区</strong>继续查找；</p>
<p>若给定值<strong>大于</strong>中间记录的关键码，则在中间记录的<strong>右半区</strong>继续查找。不断重复上述过程，直到查找成功，或所查找的区域无记录，查找失败。</p>
<p><strong>判定树</strong>：折半查找的过程<strong>可以用二叉树来描述</strong>，树中的每个结点对应有序表中的一个记录，结点的值为该记录在表中的位置。</p>
<p>通常称这个描述折半查找过程的二叉树为折半查找判定树，简称判定树。</p>
<p>时间复杂度:O($\log_2{n}$)</p>
<h3 id="3-树表的查找技术"><a class="header-anchor" href="#3-树表的查找技术">¶</a>3.树表的查找技术</h3>
<h4 id="二叉排序树"><a class="header-anchor" href="#二叉排序树">¶</a>二叉排序树</h4>
<p>二叉排序树（也称<strong>二叉查找树</strong>）：或者是一棵<strong>空</strong>的二叉树，或者是具有下列性质的二叉树：<strong>左&lt;根&lt;右</strong>。它的<strong>左右子树也都是二叉排序树</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_20-51-29.png" style="zoom:50%;" /></p>
<hr>
<h5 id="二叉排序树的插入"><a class="header-anchor" href="#二叉排序树的插入">¶</a><strong>二叉排序树的插入</strong></h5>
<p>根据动态查找表的定义，“<strong>插入</strong>”操作<strong>在查找不成功时才进行；</strong></p>
<p><strong>分析</strong>：若二叉排序树为<strong>空树</strong>，则新插入的结点<strong>为新的根结点</strong>；<strong>否则</strong>，新插入的结点<strong>必为一个新的叶子结点</strong>，其插入位置由查找过程得到。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_20-54-36.png" style="zoom:50%;" />
<hr>
<h5 id="二叉排序树的构造"><a class="header-anchor" href="#二叉排序树的构造">¶</a><strong>二叉排序树的构造</strong></h5>
<p>从空的二叉排序树开始，<strong>依次插入</strong>一个个结点 。</p>
<p>数据元素的<strong>输入顺序不同，<strong>则得到的</strong>二叉排序树形态也不同。</strong></p>
<p><strong>总结</strong>：</p>
<p><strong>一个无序序列可以</strong>通过构造一棵二叉排序树而<strong>变成一个有序序列</strong>;<br>
每次<strong>插入的新结点</strong>都是二叉排序树上<strong>新的叶子结点;</strong><br>
找到插入位置后，<strong>不必移动其它结点</strong>，<strong>仅需修改某个结点的指针；<br>
新插入的结点</strong>没有破坏原有结点之间的关系**</p>
<hr>
<h5 id="二叉排序树的删除"><a class="header-anchor" href="#二叉排序树的删除">¶</a><strong>二叉排序树的删除</strong></h5>
<p>和插入相反，<strong>删除在查找成功之后进行，<strong>并且要求在</strong>删除</strong>二叉排序树上某个结点<strong>之后</strong>，<strong>仍然保持二叉排序树的特性。</strong></p>
<p><strong>情况1</strong>——被删除的结点是<strong>叶子结点</strong></p>
<p>操作：将<strong>双亲结点</strong>中相应<strong>指针域的值改为空。</strong></p>
<p>示意图:<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_21-04-21.png" style="zoom:50%;" /></p>
<p><strong>情况2</strong>——被删除的结点<strong>只有左子树</strong>或者<strong>只有右子树</strong></p>
<p>操作：将<strong>双亲结点</strong>的相应指<strong>针域的值指向被删除结点的左子树（或右子树）。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_21-04-31.png" style="zoom:50%;" /></p>
<p><strong>情况3</strong>——被删除的结点p<strong>既有左子树PL也有右子树PR</strong></p>
<p>可知中序遍历的序列为<strong>PL</strong>，p，<strong>PR</strong>。</p>
<p>为了替换被删除结点p而保持二叉树有序的性质，</p>
<p>可以用<strong>PL中最大</strong>的结点替换p，也可以用<strong>PR中最小</strong>的结点替换p，然后<strong>删除</strong>用来替换的<strong>重复结点。</strong></p>
<p>示意图：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218211359.jpg" style="zoom: 33%;" />
<h5 id="二叉排序树的查找"><a class="header-anchor" href="#二叉排序树的查找">¶</a>二叉排序树的查找</h5>
<p>查找成功：从根结点出发，<strong>沿着左分支或右分支</strong>逐层向下<strong>直至关键字等于给定值的结点</strong>;</p>
<p>查找失败：从根结点出发，<strong>沿着左分支或右分支</strong>逐层向下<strong>直至指针指向空树</strong>为止。</p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img20201027174712367.jpg" alt=""></p>
<p>二叉排序树的<strong>查找性能取决于二叉排序树的形状</strong>，<strong>O($\log_2{n}$)<strong>在和</strong>O(n</strong>)之间。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_21-18-25.png" style="zoom:50%;" /></p>
<h4 id="平衡二叉树"><a class="header-anchor" href="#平衡二叉树">¶</a>平衡二叉树</h4>
<p>平衡二叉树：或者是一棵<strong>空</strong>的<strong>二叉排序树</strong>，或者是具有下列性质的<strong>二叉排序树：</strong></p>
<p>⑴ 根结点的左子树和右子树的<strong>深度最多相差1</strong></p>
<p>⑵ 根结点的左子树和右子树<strong>也都是平衡二叉树</strong></p>
<p><strong>平衡因子</strong>：结点的平衡因子定义为该结点的<strong>左子树的深度与右子树的深度之差</strong>。(每个结点都要满足)</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_22-06-06.png" style="zoom:50%;" /></p>
<p><strong>最小不平衡子树</strong>：在平衡二叉树的构造过程中，以<strong>距离插入结点最近的</strong>、且<strong>平衡因子的绝对值大于1的结点为根</strong>的子树。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_22-16-20.png" style="zoom: 67%;" />
<p>设结点A为最小不平衡子树的根结点，对该子树进行平衡调整归纳起来有以下<strong>四种情况：</strong></p>
<ol>
<li>LL型</li>
<li>RR型</li>
<li>LR型</li>
<li>RL型</li>
</ol>
<hr>
<h5 id="LL型（左子树的左子树）"><a class="header-anchor" href="#LL型（左子树的左子树）">¶</a>LL型（左子树的左子树）</h5>
<p>插入位置在最小不平衡子树根结点左孩子的左子树上</p>
<p><strong>操作：向右旋转，换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218232416.jpg" style="zoom: 33%;" /></p>
<h5 id="RR型（右子树的右子树）"><a class="header-anchor" href="#RR型（右子树的右子树）">¶</a>RR型（右子树的右子树）</h5>
<p>插入位置在最小不平衡子树根结点右孩子的右子树上</p>
<p><strong>操作：向左旋转，换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218232656.jpg" style="zoom:33%;" /></p>
<h5 id="LR型（左子树的右子树）"><a class="header-anchor" href="#LR型（左子树的右子树）">¶</a>LR型（左子树的右子树）</h5>
<p>插入位置在最小不平衡子树根结点左孩子的右子树上</p>
<p><strong>操作：旋转两次，先向左旋转，再向右旋转，先局部后整体，同样要换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218233054.jpg" style="zoom:33%;" /></p>
<h5 id="RL型（右子树的左子树）"><a class="header-anchor" href="#RL型（右子树的左子树）">¶</a>RL型（右子树的左子树）</h5>
<p>插入位置在最小不平衡子树根结点右孩子的左子树上</p>
<p><strong>操作：旋转两次，先向右旋转，再向左旋转，先局部后整体，同样要换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218233305.jpg" style="zoom:33%;" /></p>
<h3 id="4-散列表的查找技术"><a class="header-anchor" href="#4-散列表的查找技术">¶</a>4.散列表的查找技术</h3>
<p><strong>散列</strong>的基本思想：在记录的<strong>存储地址</strong>和它的<strong>关键码</strong>之间建立<strong>一个确定的对应关系</strong>。</p>
<p>这样，<strong>不经过比较，<strong>一</strong>次读取就能得到所查元素</strong>的查找方法。</p>
<p><strong>散列表</strong>：采用散列技术将记录<strong>存储在一块连续的存储空间中</strong>，这块连续的存储空间称为散列表。</p>
<p><strong>散列函数</strong>：将关键码<strong>映射</strong>为散列表中适当存储位置的函数。</p>
<p><strong>散列地址</strong>：由散列函数所得的存储地址 。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_23-38-10.png" style="zoom: 50%;" /></p>
<p>散列既是一种查找技术，也是一种存储技术。</p>
<p>散列技术的<strong>关键问题</strong>：</p>
<p>⑴ 散列<strong>函数的设计</strong>。如何设计一个简单、均匀、存储利用率高的散列函数。</p>
<p>1.<strong>计算简单</strong>。散列函数不应该有很大的计算量，否则会降低查找效率。</p>
<p>2.函数值即<strong>散列地址分布均匀</strong>。函数值要尽量均匀散布在地址空间，这样才能<strong>保证存储空间的有效利用</strong>并减少冲突。</p>
<p>⑵ <strong>冲突的处理</strong>。如何采取合适的处理冲突方法来解决冲突。</p>
<p>1.拉链法（开散列方法）</p>
<p>2.开放定址法（闭散列方法）</p>
<hr>
<p><strong>冲突</strong>：对于两个不同关键码ki≠kj，有H(ki)＝H(kj)，即<strong>两个不同的记录需要存放在同一个存储位置</strong>,ki和kj相对于H称做<strong>同义词</strong>。</p>
<h5 id="开放定址法（闭散列方法）"><a class="header-anchor" href="#开放定址法（闭散列方法）">¶</a>开放定址法（闭散列方法）</h5>
<p>由关键码得到的散列地址<strong>一旦产生了冲突</strong>，<strong>就去寻找下一个空的散列地址</strong>，并将记录存入。</p>
<p><strong>1.线性探测法</strong></p>
<p>若发生冲突，则挨个向后找</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218235308.jpg" style="zoom:33%;" /></p>
<p><strong>2.二次探测法</strong></p>
<p>若发生冲突，则左右横跳</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218235357.jpg" style="zoom:33%;" /></p>
<p><strong>3.随机探测法</strong>（不重要）</p>
<p>当发生冲突时，<strong>下一个散列地址的位移量是一个随机数列</strong>，即寻找下一个散列地址的公式为：</p>
<p>Hi=(H(key)+di)% m   （di是一个随机数列，i=1，2，……，m-1）</p>
<hr>
<h5 id="拉链法（开散列方法）"><a class="header-anchor" href="#拉链法（开散列方法）">¶</a>拉链法（开散列方法）</h5>
<p>也叫做<strong>链地址法</strong></p>
<p>基本思想：将所有散列地址相同的记录，即<strong>所有同义词记录存储在一个单链表中</strong>（称为同义词子表），</p>
<p>在散列表中存储的是所有<strong>同义词</strong>子表的头指针。</p>
<p>用拉链法处理冲突构造的散列表叫做<strong>开散列表</strong>。</p>
<p>开散列表<strong>不会出现堆积现象</strong>。</p>
<p>设n个记录存储在长度为m的散列表中，则同义词子表的平均长度为n / m。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_23-59-38.png" style="zoom: 50%;" /></p>
<h5 id="开散列表和闭散列表的比较"><a class="header-anchor" href="#开散列表和闭散列表的比较">¶</a>开散列表和闭散列表的比较</h5>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_00-01-06.png" style="zoom:50%;" />
<h3 id="5-B树"><a class="header-anchor" href="#5-B树">¶</a>5.B树</h3>
<p>B树是一种<strong>多路平衡查找树</strong>，能够<strong>保持数据的有序性</strong>，使数据的查找、插入、删除等操作都在对数时间内完成。</p>
<p>B树定义为一颗m阶的B树，或者为<strong>空树</strong>，或为满足下列特性的m叉树：（也满足<strong>左&lt;根&lt;右）</strong></p>
<p>1.树中每个结点<strong>最多有m颗子树</strong></p>
<p>2.若<strong>根结点</strong>不是终端结点，则<strong>至少有两颗子树</strong></p>
<p>3.除<strong>根结点之外的</strong>所有非终端结点<strong>至少有[m/2]颗子树（向上取整）</strong></p>
<p>4.<strong>有n个子节点</strong>的非终端结点<strong>拥有n-1个关键码</strong></p>
<p>5.所有的<strong>叶子结点位于同一层</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219104703.jpg" style="zoom:33%;" /></p>
<h4 id="B树的插入"><a class="header-anchor" href="#B树的插入">¶</a>B树的插入</h4>
<p>假定要在<strong>m阶B树</strong>中插入关键码k，<strong>关键码数目的最大值为m-1</strong>。</p>
<p>查找过程分为<strong>两个阶段</strong>：</p>
<p>1.查找-定位</p>
<p>2.<strong>分裂-提升</strong></p>
<h4 id="B树的构造"><a class="header-anchor" href="#B树的构造">¶</a>B树的构造</h4>
<p>B树的构造就是<strong>逐一插入</strong>各个关键码的过程</p>
<p>流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219110029.jpg"  /></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219110033.jpg" alt="QQ图片20231219110033"></p>
<h4 id="B树的删除"><a class="header-anchor" href="#B树的删除">¶</a>B树的删除</h4>
<p>假定<strong>key</strong>是<strong>结点q</strong>中第i个关键码，若要删除key，有以下几种情况：</p>
<p>1.若结点q不是终端结点，则用<strong>子树中的最小键值</strong>x来&quot;<strong>替换</strong>key&quot;，然后删除原有x</p>
<p>2.如果q是终端结点，且关键码的个数**大于[m/2]-1，**则可直接删除key</p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219112511.jpg" style="zoom: 33%;" /></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219112513.jpg" alt="QQ图片20231219112513" style="zoom: 50%;" />
<p>3.如果q是终端结点，删除一个关键码后，关键码的个数&lt;[m/2]-1,则不符合m阶B树的要求，需要<strong>从兄弟结点借关键码或合并结点，</strong></p>
<p>分为<strong>两种情况</strong>：</p>
<p>(1)<strong>兄弟</strong>结点的关键码个数&gt;[m/2]-1,<strong>足够借</strong>，那么q就从该兄弟借一个关键码，</p>
<p>借来的关键结点<strong>上移到父结点</strong>，<strong>父结点相应的关键码下移</strong>到被删结点中。</p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219113203.jpg" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219113206.jpg" alt="QQ图片20231219113206"></p>
<p>(2)如果<strong>兄弟</strong>结点的关键码格个数&lt;=[m/2]-1,<strong>不够借</strong>，则将<strong>双亲结点相应关键码下沉并合并</strong>，</p>
<p>合并过程可能一直上传到根结点，并<strong>使B树的树高减少一层。</strong></p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219113640.jpg" style="zoom: 33%;" /></p>
<h1>八、排序技术</h1>
<p><strong>排序</strong>：将杂乱无章、毫无规律的数据元素，按照一定的方法以其关键码顺序排列成<strong>升序或降序</strong>的过程</p>
<p>排序算法的<strong>稳定性</strong>：假定在待排序的记录集中，存在多个具有相同键值的记录，</p>
<p>若经过排序，这些记录的<strong>相对次序仍然保持不变</strong>，即在原序列中，ki=kj且ki在kj之前，而在排序后的序列中，ki仍在kj之前，则称这种排序算法是<strong>稳定的</strong>；否则称为<strong>不稳定的。</strong></p>
<p>排序的<strong>分类</strong></p>
<ol>
<li><strong>内排序</strong>：在排序的整个过程中，待排序的所有记录全部被放置在<strong>内存</strong>中</li>
<li><strong>外排序</strong>：由于<strong>待排序的记录个数太多</strong>，不能同时放置在内存，而需要将<strong>一部分记录放置在内存，另一部分记录放置在外存上</strong>，整个排序过程需要<strong>在内外存之间多次交换数据</strong>才能得到排序的结果。</li>
</ol>
<h3 id="1-插入排序"><a class="header-anchor" href="#1-插入排序">¶</a>1.插入排序</h3>
<h4 id="直接插入排序"><a class="header-anchor" href="#直接插入排序">¶</a>直接插入排序</h4>
<p>基本思想：在<strong>插入第 i（i＞1）个</strong>记录时，<strong>前面的 i-1个记录已经排好序</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_15-01-13.png" style="zoom: 50%;" /></p>
<hr>
<p>插入的流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219151035.jpg" style="zoom:50%;" /></p>
<p>关键问题：</p>
<p>1.如何构造初始的有序序列？</p>
<p>答：在第一趟进行插入排序时假定初始有序序列只有一个记录的关键码。</p>
<p><strong>将第1个关键码看成是初始有序序列</strong>，然后<strong>从第2个记录</strong>的关键码<strong>依次插入</strong>到有序序列中，直至将第n个记录插入。</p>
<p>2.如何查找待插入关键码的插入序列？</p>
<p>答：这相当于在一个有序序列中进行查找，在对<strong>第i个</strong>记录进行插入时，</p>
<p>首先<strong>初始化带比较元素的下标k=i-1</strong>，将<strong>待插入关键码保存在下标为0的单元</strong>。</p>
<hr>
<p><strong>直接插入排序算法的时间复杂度为O(n<sup>2</sup>)</strong></p>
<p><strong>空间性能：需要一个记录的辅助空间</strong>。</p>
<p>直接插入排序算法是一种<strong>稳定的</strong>排序算法。</p>
<p>直接插入排序算法<strong>简单、容易实现</strong>，<strong>适用于待排序记录基本有序</strong>或<strong>待排序记录较小</strong>时。</p>
<p>当待排序的记录个数较多时，<strong>大量的比较和移动操作使</strong>直接插入排序算法的<strong>效率降低。</strong></p>
<p><strong>如何改进</strong>直接插入排序?</p>
<p>注意到，在插入第 i（i＞1）个记录时，前面的 i-1 个记录已经排好序，</p>
<p>则在寻找插入位置时，可以用<strong>折半查找</strong>来代替顺序查找，从而<strong>减少比较次数。</strong></p>
<hr>
<h4 id="希尔排序"><a class="header-anchor" href="#希尔排序">¶</a>希尔排序</h4>
<p>基本思想：将整个待排序记录<strong>分割成若干个子序列</strong>，在子序列内<strong>分别进行直接插入排序，</strong></p>
<p>待整个序列中的记录<strong>基本有序</strong>时，<strong>对全体记录进行直接插入排序。</strong></p>
<p>分割待排序记录的<strong>目的</strong>:</p>
<ol>
<li>减少待排序记录个数；</li>
<li>使整个序列向<strong>基本有序</strong>发展。</li>
</ol>
<p>流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219154644.jpg" alt=""></p>
<p>关键问题：</p>
<p>1.如何分割待排序记录？</p>
<p>答“将相隔某个“<strong>增量</strong>”的记录组成一个子序列。</p>
<p>增量应如何取：希尔最早提出的方法是<strong>d1=n/2，d(i+1)=di/2。</strong></p>
<p>2.<strong>子序列内</strong>如何进行直接插入排序？</p>
<p>答：在<strong>插入</strong>记录<strong>r[i]<strong>时，自</strong>r[i-d]起</strong>往前跳跃式（<strong>跳跃幅度为d</strong>）搜索待插入位置，并且<strong>r[0]只是暂存单元，不是哨兵。</strong></p>
<p>当搜索位置＜0，表示插入位置已找到。<br>
在搜索过程中，记录<strong>后移也是跳跃d个位置。</strong><br>
在整个序列中，前d个记录分别是d个<strong>子序列中的第一个记录</strong>，所以<strong>从第d+1个记录开始进行插入</strong>。</p>
<p>希尔排序的时间性能在<strong>O(n<sup>2</sup></strong>)和**O($\log_2{n}$)**之间。当n在某个特定范围内，希尔排序所需的比较次数和记录的移动次数约为O(n1.3 ) 。</p>
<hr>
<h3 id="2-交换排序"><a class="header-anchor" href="#2-交换排序">¶</a>2.交换排序</h3>
<p>交换排序的主要操作是<strong>交换</strong>，其主要思想是：（反序则交换）</p>
<p>在待排序列中选两个记录，将它们的关键码相比较，如果反序（即排列顺序与排序后的次序正好相反），则交换它们的存储位置。</p>
<h4 id="冒泡排序"><a class="header-anchor" href="#冒泡排序">¶</a>冒泡排序</h4>
<p>基本思想：<strong>两两比较相邻记录</strong>的关键码，如果<strong>反序则交换</strong>，直到没有反序的记录为止。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_16-25-28.png" style="zoom:50%;" /></p>
<p>关键问题：</p>
<p>1.如何区分<strong>有序区</strong>和<strong>无序区</strong>？</p>
<p>答：设<strong>变量exchange</strong>记载记录交换的位置，则一趟排序后，exchange记载的一定是这一趟排序中记录的<strong>最后一次交换的位置</strong>，</p>
<p>且从<strong>此位置以后的所有记录均已经有序。</strong></p>
<p>因此，可以用exchange来标记有序区和无序区。有序区的元素不进行后续的两两比较。</p>
<p>示意图:<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_16-32-41.png" style="zoom:50%;" /></p>
<p>2.如何确定<strong>起泡排序的范围？</strong></p>
<p>答：<strong>bound位置</strong>的记录是无序区的最后一个记录，则每趟起泡排序的范围是r[1] ~ r[bound]。</p>
<p>在一趟排序后，从exchange位置之后的记录一定是有序的，所以<strong>bound=exchange。</strong></p>
<p>3.如何判别起泡排序的结束？</p>
<p>答：在<strong>每一趟</strong>起泡排序之前，**令exchange的初值为0，**在以后的排序过程中，<strong>只要有记录交换，exchange的值就会大于0。</strong></p>
<p>这样，在一趟比较完毕，就可以通过exchange的值是否为0来<strong>判别是否有记录交换</strong>，从而判别整个起泡排序的结束。</p>
<p><strong>冒泡排序的时间复杂度为O(n<sup>2</sup>)</strong></p>
<hr>
<h4 id="快速排序"><a class="header-anchor" href="#快速排序">¶</a>快速排序</h4>
<p>基本思想：首先选一个轴值（即比较的基准），通过一趟排序将待排序记录<strong>分割成独立的两部分，</strong>（<strong>二分法</strong>）</p>
<p><strong>前一部分</strong>记录的关键码均小于或等于轴值，<strong>后一部分</strong>记录的关键码均大于或等于轴值，</p>
<p>然后分别对这两部分<strong>重复上述方法</strong>，<strong>直到整个序列有序</strong>。</p>
<p>关键问题：</p>
<p>1.<strong>如何选择轴值？</strong></p>
<p>选择轴值的<strong>方法</strong>：<br>
1.使用<strong>第一个记录</strong>的关键码；<br>
2.选取<strong>序列中间记录</strong>的关键码；<br>
3.<strong>比较</strong>序列中<strong>第一个</strong>记录、<strong>最后一个</strong>记录和<strong>中间记录</strong>的关键码，<strong>取关键码居中的</strong>作为轴值<strong>并调换到第一个记录的位置</strong>；<br>
4.<strong>随机</strong>选取轴值。</p>
<p>选取不同轴值的后果：</p>
<p><strong>决定</strong>两个左右子序列的<strong>长度</strong>，<strong>左右子序列</strong>的长度<strong>最好相等</strong>。</p>
<p>2.如何<strong>实现一次划分？</strong></p>
<p>答：一次划分也称为分割操作，根据轴值将待排序序列<strong>分为左右两个子序列，</strong></p>
<p>所有比轴值小的元素摆放在轴值的前面，所有比轴值大的元素摆放在轴值的后面</p>
<p>流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219170555.jpg" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219170558.jpg" alt="QQ图片20231219170558"></p>
<p>3.如何<strong>递归地处理</strong>分割后的子序列？</p>
<p>只需要将分割后的两个子序列<strong>进一步递归地分割为更小的子序列</strong>即可，直到子序列无法再继续分割为止。</p>
<p>快速排序的时间复杂度为<strong>O(n$\log_2{n}$)</strong></p>
<p>大多数情况下，快速排序要比其他排序算法<strong>更快</strong>。</p>
<h3 id="3-选择排序"><a class="header-anchor" href="#3-选择排序">¶</a>3.选择排序</h3>
<p>选择排序的主要操作是<strong>选择</strong>，其主要思想是：每趟排序在当前待排序序列中<strong>选出关键码最小的记录</strong>，<strong>添加到有序序列中。</strong></p>
<h4 id="简单选择排序"><a class="header-anchor" href="#简单选择排序">¶</a>简单选择排序</h4>
<p>基本思想：<strong>第i 趟</strong>在<strong>n-i+1（i=1,2,…,n-1）个记录中</strong>选取关键码<strong>最小</strong>的记录<strong>作为有序序列中的第i个记录</strong>。</p>
<p>流程图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219172143.jpg" alt=""></p>
<p>简单选择排序思路非常简单，只需要从无序区<strong>选择最小关键码，<strong>并</strong>交换至无序区第一个元素即可</strong>。</p>
<p>每一趟排序只交换一对元素，有序区长度增加1，无序区长度减少1，直至整个序列有序，因此<strong>总共需要进行n-1次交换。</strong></p>
<p><strong>简单选择排序的时间复杂度为O(n<sup>2</sup>)。</strong></p>
<hr>
<h4 id="堆排序"><a class="header-anchor" href="#堆排序">¶</a>堆排序</h4>
<p><strong>改进</strong>的着眼点：如何<strong>减少关键码间的比较次数</strong>。</p>
<p>若能利用每趟比较后的结果，也就是在<strong>找出键值最小记录的同时，也找出键值较小的记录</strong>，则<strong>可减少</strong>后面的选择中所用的<strong>比较次数</strong>，从而提高整个排序过程的效率。</p>
<p><strong>堆</strong>是具有下列性质的<strong>完全二叉树</strong>：</p>
<p>1**.每个结点<strong>的值都</strong>小于或等于<strong>其</strong>左右孩子结点<strong>的值（称为</strong>小根堆**），</p>
<p>2.<strong>每个结点</strong>的值都<strong>大于或等于</strong>其<strong>左右孩子结点</strong>的值（称为<strong>大根堆）</strong>。</p>
<hr>
<p>基本思想：首先<strong>将待排序的记录序列构造成一个大根堆</strong>，此时，<strong>选出了</strong>堆中所有记录的<strong>最大者</strong>，然后将它<strong>从堆中移走</strong>，并将剩余的记录<strong>再调整成堆</strong>，这样<strong>又找出了次小的记录</strong>，以此类推**，直到堆中只有一个记录。**</p>
<p>堆调整：将剩余关键码序列重新调整成为堆，这样会在堆顶得到剩余关键码序列中的最大值。</p>
<p>关键问题：</p>
<p>1.如何将n个关键码的序列<strong>建成堆</strong>？</p>
<p>答：将初始序列看成一个<strong>完全二叉树</strong>，将初始序列序列的关键码按初始顺序<strong>从上到下，从左到右依次填充</strong>到完全二叉树中。</p>
<p>根据n个结点的完全二叉树的性质，<strong>最后一个分支结点的结点下标为[n/2],（向下取整）<strong>那么</strong>从该结点为根的子树开始</strong>向前<strong>逐一进行堆调整</strong>，</p>
<p>使每一颗子树均成为堆，直到根结点。（自下而上调整）</p>
<p>2.如何<strong>处理堆顶记录</strong>，进行排序？</p>
<p>答：根据大根堆的性质，根结点就是序列的最大值，而序列的次大值位于根结点的左、右孩子之一。</p>
<p>因此建队以后，<strong>只需要输出根结点，再将剩余关键码调整成堆即可</strong>。</p>
<p>将堆顶的根结点<strong>与堆的最后一个元素</strong>，即堆中最下层最右侧的元素进行<strong>交换</strong>，交换后，将最大值排除在待排序序列之外。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219201507.jpg" alt=""></p>
<p>3.输出堆顶关键码后，调整剩余关键码，使其成为一个新堆</p>
<p>答：在输出堆的根结点之后，剩下n-1个元素。此时，堆已经被破坏，但只有根结点不满足堆的条件。</p>
<p>因此，对根结点进行堆调整即可。</p>
<p>当所有结点都输出时，堆排序结束。</p>
<p>堆排序的<strong>时间复杂度</strong>为：O(n$\log_2{n}$)</p>
<hr>
<h3 id="4-归并排序"><a class="header-anchor" href="#4-归并排序">¶</a>4.归并排序</h3>
<p>归并排序的主要操作是<strong>归并</strong>，其主要思想是：将若干有序序列<strong>逐步归并</strong>，最终得到一个有序序列。</p>
<p><strong>归并</strong>：将两个或两个以上的有序序列合并成一个有序序列的过程。</p>
<hr>
<h4 id="二路归并排序"><a class="header-anchor" href="#二路归并排序">¶</a>二路归并排序</h4>
<p>基本思想：将一个具有n个待排序记录的序列看成是<strong>n</strong>个<strong>长度为1</strong>的有序序列，然后进行两两归并，</p>
<p>得到<strong>n/2</strong>个<strong>长度为2</strong>的有序序列，再进行两两归并，得到<strong>n/4</strong>个<strong>长度为4</strong>的有序序列，……，<strong>直至得到一个长度为n的有序序列为止。</strong></p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219203016.jpg"  /></p>
<p>关键问题：</p>
<p>1.如何将两个有序序列合成为一个有序序列？</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219221154.jpg" alt=""></p>
<p>2.怎样完成<strong>一趟归并</strong>？</p>
<p>在一趟归并中，<strong>除最后一个有序序列外</strong>，其它有序序列中记录的个数相同，用<strong>长度h</strong>表示。</p>
<p>设<strong>参数i</strong>指向待归并序列的<strong>第一个记录</strong>，<strong>归并的步长是2h</strong>，在归并过程中，有以下<strong>三种情况：</strong></p>
<p>①<strong>若i≤n-2h+1</strong>，则相邻两个有序表的长度均为h，执行一次归并，完成后i加2h，<strong>准备进行下一次归并；</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_22-24-06.png" alt=""></p>
<p>②<strong>若i＜n-h+1</strong>，则表示<strong>仍有两个相邻有序表</strong>，一个长度为h，另一个长度小于h，则执行两个有序表的归并，完成后退出一趟归并。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_22-26-11.png" alt=""></p>
<p>③<strong>若i≥n-h+1</strong>，则表明只剩下一个有序表，直接将该有序表送到r1的相应位置，完成后退出一趟归并。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_22-29-29.png" alt=""></p>
<p>3.如何控制二路归并的<strong>结束</strong>？</p>
<p>答：开始时，有序序列的<strong>长度h=1</strong>，结束时，有序序列的<strong>长度h=n</strong>，用有序序列的长度来控制排序的结束。</p>
<p>二路归并排序算法的<strong>时间复杂度</strong>：O(n$\log_2{n}$)</p>
<h3 id="5-分配排序"><a class="header-anchor" href="#5-分配排序">¶</a>5.分配排序</h3>
<p>分配排序是基于分配和收集的排序方法，其基本思想是：</p>
<p>先<strong>将待排序记录序列分配到不同的桶里</strong>，然后再把各桶中的记录<strong>依次收集到一起。</strong></p>
<h4 id="桶式排序"><a class="header-anchor" href="#桶式排序">¶</a>桶式排序</h4>
<p>基本思想是：假设待排序记录的<strong>值都在0～m-1之间</strong>，设置<strong>m个桶</strong>，</p>
<p>首先将值<strong>为i的记录分配到第i个桶中</strong>，然后再将各个桶中的记录<strong>依次收集起来。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231219223839713.png" alt="image-20231219223839713" style="zoom:67%;" />
<p>关键问题：</p>
<p>1.如何在计算机中表示桶？</p>
<p>由于<strong>具有相同键值的记录可能会有多个</strong>，所以，应采用<strong>链接存储</strong>，</p>
<p>为保证排序的稳定性，可以<strong>设m个链队列</strong>作为桶的存储结构。</p>
<p>为<strong>避免</strong>在分配和收集的过程中<strong>移动元素</strong>，采用<strong>静态链表</strong>作为链队列和待排序记录序列的存储结构</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231219224612374.png" alt="image-20231219224612374" style="zoom:50%;" /></p>
<p>桶排序流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgv2-ff4cdccdb1ff6b90ecdb3fc4d361f725_r.jpg" style="zoom:67%;" /></p>
<p><strong>桶式排序的时间复杂度为O(n+m)。</strong></p>
<hr>
<h4 id="基数排序"><a class="header-anchor" href="#基数排序">¶</a>基数排序</h4>
<p>桶式排序适用于单键排序的情况，在一定条件下具有很高的时间效率，但桶的个数m极大限制了排序的应用。</p>
<p><strong>基数排序是对桶式排序的改进和推广；<strong>如果说桶式排序是一维的基于桶的排序，那么基数排序就是</strong>多维</strong>的基于桶的排序。</p>
<p>举个<strong>例子</strong>：用<strong>桶式排序</strong>对[0,99]之间的数进行排序，<strong>需要100个桶</strong>，分配一次，收集一次，完成排序；</p>
<p>而<strong>基数排序</strong>只<strong>需要0-9总共10个桶</strong>（即关键字为数字0-9），依次进行个位和十位的分配和收集从而完成排序。</p>
<p>对多关键码排序有以下两种基本方法：</p>
<p>1.<strong>最主位</strong>优先法(MSD)</p>
<p>2.<strong>最次位</strong>优先法(LSD)</p>
<p>例如：采用最次位优先法</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219233436.jpg" alt=""></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219233440.jpg" alt="QQ图片20231219233440" style="zoom: 33%;" />
<p>基数排序的<strong>时间复杂度</strong>为O(d(n +m))，d为关键码的个数</p>
<hr>
<h3 id="6-总结"><a class="header-anchor" href="#6-总结">¶</a>6.总结</h3>
<p>各种排序算法<strong>时间复杂度的比较</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_23-37-50.png" alt=""></p>
<p>各种排序算法<strong>空间复杂度的比较</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_23-39-17.png" style="zoom:67%;" />
<p>各种排序算法<strong>稳定性的比较</strong>：</p>
<p><strong>稳定</strong>的：直接插入排序、起泡排序、归并排序和分配排序；</p>
<p><strong>不稳定</strong>的：希尔排序、简单选择排序、快速排序和堆排序。</p>
<hr>
<p>各种排序算法<strong>简单性的比较</strong>：</p>
<p><strong>简单</strong>算法：直接插入排序、简单选择排序和起泡排序</p>
<p><strong>改进后</strong>的算法：希尔排序、堆排序、快速排序和归并排序，这些算法都很复杂。</p>
<p>从待排序的记录个数n的大小看，</p>
<p><strong>n越小</strong>，采用<strong>简单</strong>排序方法越合适，</p>
<p><strong>n越大</strong>，采用<strong>改进</strong>的排序方法越合适。</p>
<p>因为<strong>n越小，O(n2)同O(nlog2n)的差距越小</strong>，并且输入和调试简单算法比输入和调试改进算法要少用许多时间。</p>
<hr>
<p><strong>记录本身信息量越大</strong>，移动记录所花费的时间就越多，所以对记录的移动次数较多的算法不利。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_23-46-03.png" alt=""></p>
<p>当<strong>待排序记录按关键码有序时</strong>，<strong>插入</strong>排序和<strong>起泡</strong>排序能达到**O(n)**的时间复杂度；</p>
<p>对于<strong>快速</strong>排序而言，这是<strong>最坏的情况</strong>，此时的时间性能蜕化为<strong>O(n2)</strong>；</p>
<p><strong>选择</strong>排序、<strong>堆</strong>排序和<strong>归并</strong>排序的<strong>时间性能不随记录序列中关键字的分布而改变</strong>。</p>
<hr>
<p>数据结构复习笔记初步整理完毕！</p>
<p>一定会有所收获！！！</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>科三挂了的感想</title>
    <url>/2024/02/01/%E7%A7%91%E4%B8%89%E6%8C%82%E4%BA%86%E7%9A%84%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1f9c8f67ecc2f6120e1a73a5567dd59fcd1d336dc31895326e00ec961a9ddf5e">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b6069bb26e481fb6f1373cf33ead42051611ac9cf81b1321669bf70ac000d2ba71bd71cee6ded55bb03782ec43750df41c6ddacfb93ce9dedf5a1ecd50ced939c39934f407261b10a1436251992844d83cbbac4e2ab5169fc30d41e24ba5c6897ba9908f589ae9c2e2c569ba17e28da1d8c1f3a4d34a6187a3396dd7b219c455f1887fcd1f0a1e7e47ad8931ed11c07653ae21cf8bfcecf9ed12279e18d182487f822d7298c9f78b27469c80d1af1a505057c66a836cff4378ecd779b46a79f4f3e9c35cbe953d1462b690ee9e9273b6dee14ac6903747e5ef253109a06bfe683cafca92d7b7d11186959265c7e86cae4dcac3e5cab5de30c3e8498d6ec200e97730327348b8fdedfaba4e09427662fb8ef6c0cb4b9a49f84b6dcd70ad81a982a7cd0c8c42dc15d649f6f228e69edf5b4a6759bd1ffd2aade8407001ea859a8948563a24d4254c4a3cc2aaa62e5ecb8cc4ac3c628cfa45110a6321452e2470d85676689e907546b61d50cab54662eb0642f500f89d0de9662bc597c141d07c61a9f763ce07f873a9a1065ba48d5bb43e58fcd0d84cad4ca9e2911421e781a6bee806d8a547ac64fb50f002cdeec9be37340e9d2bb1ddf29c5e6b1d57cf14f6a304fb2738888c62f33f44a0f8a5738d81908e4cd2f5b7bb9c565160229aecd1ccd48de9a668b1e23e1e64a315e1d239a67741313f698fded3b995226b95152f1e544d510c7e9bff7e3aaf49d16fbd48e2512203dfea6572a6dfc8a2806b2967fed4c9d76cb8456f0e354edf01dcce4f0eba308770c80d1260cd969447ed8c5dc696403ec51054d812ccc47818709736d46d1a44138b29164bc27553b261d7195abb4af0b7563202044fa66c1b17b58f1bcab07335ba88b970cbd9d5c3419f4e951ed2ef09f2d9d9a98400a3b342f27402b982d2039de3613459cf71ac8df298026a49810fb9f85e445790719ee9ad30fb5394c0e7cb027074e02c003cf4c42f8ef11d9b17dd6d6c8af123d031643d9804354ddc71fa30c953c593959d77663f9f19ba406c0ccfaa4435a7c90c9a61e9a710c06327f85551427c36233dfafd85f442d77417c3a35e81bb9f9ca25c4c0f77f3e63c726db4aafcf38afdc86e14f13fe86184aa9b099f2b8da783688d1f85bd90bcf270bd1cecc469bb5723a37f04118e5e90c60dcfe16067f455bc982f9b0cb436808cf2781071ae9a744a9a7b9c6f58b8ae4b070e77ea1e57d286e9563858c053032abb03e78d35f50f242a08834cacd7312cee9ea8a7d3e7df00aa61bf9adedfb13407d385fd5461b4d2029358d5d9d658391b3efa0e09d8bf3b86531926b5d9e2fb1ca001c04c4c68d3ce5f0ceade462b9463ca2e75062958fcc28dd4af451d62aa49edbb5e665de436173e0f70ff113eeac8f05438c21f4b2c93f2a90e8790a7025b4ab84691945b682338bddff93611a8b4881489cc88318f92a3fc48b881cf9c80d4d6959fc0f99cb466850c408d5f4550c8c311cff33798a1843f43f09d45647da2ba45e89a89024bf82477afb6015288b42fc3974fc8892e6212967e4acff6e1989486019819eff5635d89cd59729a3008f71ecbf4bfd29ff1e7062be6758d97710586355a94da701208df2551dd651e1c1efd0e07c8bb56db572eb7802c6d0bd1c939a06bbaa8c25481c79bdf3be0fe75327069b1efbb4eeafc5b9463dcd5afede17dca78acb569f147eac94f922112424628344142517922aea6bf07a4c94406a5c5e223fac7d434bbb1674e12c710493a3ea9c0f436a9e4db9979ca8da377a0d7fbe6888d22d83ec294790e372b87c01a2947a30daabf2df882fdd15b34e4a259cba76632232552c19fc6c1a737d46be535a9b1cf58acb92984e36ffe35f0f002053ea221235371920d5a6b9d488f24b1ec01799657e28ab250022eb564889c9d4f531a9b1a9634e81bb51d96c9c8a0749f88060c802031dcda36634385cfc65b06c200a433a51558389824dd4b9b133deeeefad4690382a63c470e8c85093116550feeb357f8d16440aef920e1b5892f3442f049d2f8a8cdea441c6de6204d9433f0182a0bf91a7c88ea234c5fd605f62e87b69ee395cbeb71fb350bad587262cfb361758f92d42cfc1f9ded9d08f57cbd1367caa1030bddad7b968fb919f9cb79e06aaaacd69805bb2ba7b848160b70ab485b6f8c41f73651e710608d3780bc7ad28e1814b0a712896fd326a1331f94ffbe536b1fed88df6141b15be98c528699b7997d5ba6307f1c9c1e04ed2733f9c7ccd5544d5a7cb1f4fca091108e3b4c545af08ec084578f39300773bbeaecddc884b5dd1fd6fc68f15715a08ab8edc6005495568e7206681c2b151c1e45e05d756625365a23bd28e2d927460d5776b11d29e146893f2b4c63cca6acb5959cf546d14b437ab9ff40eda49dfa8f64e7c6ce4fa789e4302f6c45829ee73b84bcf9b4e23059fe9808426698052eb78f8750c3451965eb9931170d148aa77c29a16d775a6be020bac6016f9b661ab48cc1c9afeba170d7c03f4be7c3599a6acef6a13485efa6c1a6a2b115f55c013f3a457df11727940e4daaf055834e003835a3f7f13216be56cba1de33ab7c13baec08949185d74d5fa0ab5bb3c1881898d6a79822f252c6de44ac9c498797f12b1f270b3058cfced651f51f815e8999d8dfc30e41a23da6b2bd6305506c09577568b7b2fbcec2c732a892fa65fc97a9374693bfb12029b53be00abd0693bc9d7107785cb1260f45dc911454e330b4e090415a7d9d1c9254e6c52dfae8901728aba301857af14959b3f8d4979541971ba946fd8a35d73ea6bae9a9043bb38d1fb5897e77db0315765ac2216a8287496</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>红龙贼</title>
    <url>/2024/01/16/%E7%BA%A2%E9%BE%99%E8%B4%BC/</url>
    <content><![CDATA[<h1>红龙贼——属于盗贼的otk卡组</h1>
<span id="more"></span>
<p>卡组代码：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># </span></span><br><span class="line"><span class="attr">AAEBAeCqBgbcrwK0</span>hgPf<span class="number">3</span>QOd<span class="number">8</span>APMoAX<span class="number">9</span>xAU<span class="name">M7</span>QL<span class="number">1</span>uwLf<span class="number">4</span>wKqywPi<span class="number">3</span>QP<span class="symbol">n3</span>QP<span class="number">+7</span>g<span class="meta">O9</span>gAT<span class="number">3</span><span class="symbol">nwS3</span>swT<span class="number">03</span>QT<span class="number">13</span>QQAAQPl<span class="number">0</span>QP<span class="number">9</span>xAWwigT<span class="number">9</span>xAXuwwX<span class="number">9</span>xAUAAA==</span><br><span class="line"><span class="attr"># </span></span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-16_20-02-06.png" style="zoom: 33%;" />
<p>牛里的卡：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-16_20-02-14.png" alt=""></p>
<p>打法思路：</p>
<p>利用盗贼的快速过牌能力，在最短时间内过到套牌里的五张随从牌，然后利用卡牌的减费效果打出0费红龙完成对敌方的斩杀。</p>
<h2 id="常用打法"><a class="header-anchor" href="#常用打法">¶</a>常用打法</h2>
<h3 id="一、五随从都在手里，6费启动，7费斩杀。"><a class="header-anchor" href="#一、五随从都在手里，6费启动，7费斩杀。">¶</a><strong>一、五随从都在手里，6费启动，7费斩杀。</strong></h3>
<p>如果先抽到老千和暗影步，可以先下老千暗影步回手，那么就为六费启动回合减少两费，变为4费启动。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-16_19-21-07.png" alt=""></p>
<p>如图所示，老千已经减到0费，5随从都在手里，那么只需4费就可启动。</p>
<p>启动方式：</p>
<p><strong>鲨鱼之灵+老千+刀油+暗影施法者（收回两个刀油）+刀油+牛（拿舞动全场+幻觉药水）+刀油+手牌里多余的牌或者保命牌+幻觉药水（存一套牌，等待下回合斩杀）</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-16_19-22-17.png" alt=""></p>
<p>斩杀方式：</p>
<p>如果敌方有随从，可以让我方随从去撞敌方随从为我方清场。如果场面清不掉，可以打出舞动全场进行清场。</p>
<p><strong>鲨鱼之灵+牛（拿红龙）+刀油+刀油+红龙+暗影施法者（收两个1费红龙）+红龙</strong>       达成32血/48血的斩杀</p>
<p>如果像下图一样出现卡格子的情况，可以打出舞动全场或者暗影步回手任意一个随从腾出下一个红龙的空位。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-16_19-46-21.png" alt=""></p>
<p>如果一开始场面就清掉，还可以打出舞动全场回手随从，进行第二波的伤害，通常用来打德鲁伊和战士等叠甲多的职业。</p>
<hr>
<h3 id="二、没抽到老千或者老千被敌方拉出，手里有伺机待发，四随从8费启动，9费斩杀。"><a class="header-anchor" href="#二、没抽到老千或者老千被敌方拉出，手里有伺机待发，四随从8费启动，9费斩杀。">¶</a>二、没抽到老千或者老千被敌方拉出，手里有伺机待发，四随从8费启动，9费斩杀。</h3>
<p>同理，可以进行灵活的减费。比如在启动回合之前回手刀油，减两费。变为6费启动，7费斩杀。</p>
<p>因为要打出刀油的连击效果，需要先打一些0费牌，比如伺机待发和幸运币。</p>
<p>如果能先打出幸运币，那么在7费回合就可启动，8费斩杀。</p>
<p><strong>逆序</strong>启动方式：</p>
<p><strong>伺机待发/幸运币+刀油+鲨鱼之灵+暗影施法者（收回两个刀油）+刀油+牛（拿舞动全场+幻觉药水）+刀油+手牌里多余的牌或者保命牌+幻觉药水（存一套牌，等待下回合斩杀）</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-16_19-59-35.png" alt=""></p>
<p>斩杀方式同方法1</p>
<hr>
<p>以上两种方法是红龙贼最常用的打法，也是我目前仅会的两种打法，都需要先存一套牌，分两回合斩杀。</p>
<p>但是红龙贼也可以做到在一回合启动加斩杀，等我学会了就来补充。</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>炉石传说</tag>
      </tags>
  </entry>
  <entry>
    <title>这里是属于村雨的个人博客</title>
    <url>/2024/01/04/%E6%9D%91%E9%9B%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>来自CHD的一名普通大二学生</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720220731222454.jpg" style="zoom:50%;" />
<span id="more"></span>
<hr>
<p>不知不觉，2023 年似乎也要步入尾声了。是的，我已经大二了，似乎马上就要大三了，似乎马上就要走到那些令我的前辈们困扰纠结的分界点了。留给我的时间不多了，我是否已经准备好了呢？呐，那些被称为「理想」「信念」「决心」的东西，还有那最重要的——「方向」。我是否已经准备好了呢？大概还没有吧。</p>
<p>这是一个闲暇的夜晚，久违的闲暇。这闲暇也并不是因为无事可做，恰恰相反：明天还有经济学原理的期中考，还有各种各样的 DDL 接踵而至。刚刚经历了算法期末考的我，决定将今晚赋予「闲暇」的意味，所以这是一个闲暇的夜晚，仅此而已。</p>
<p>有的时候，生活就像是一辆疾驰不已的列车。我们被裹挟着向前，被撺掇着前进，哪怕我们走得太匆匆，太匆匆，也只能屈从于社会的时钟。一个又一个时间点，一个又一个 checkpoint，hit or miss，我们不允许停步。失速的、失控的、无可挽回的列车，向着未卜的下一站横冲直撞。</p>
<blockquote>
<p>但是，创造性工作的燃料是闲暇时光，而我常常感到，我所接受的教育正在成为负担而非助力。我并不缺乏兴趣与热情，但只能在各种各样的 DDL 间辗转腾挪疲于奔命。我本可以用 vivado 亲手实验理论课上所学的一切电路，乃至在 Minecraft 中玩一把红石数电，又或者是买来开发板成为 FPGA 玩家；我本可以真正地学习了解马克思主义，读未经蒸馏的一手著作；我本可以仔细梳理每一种算法的实现，将各个问题研究透彻清晰；我本可以好好做立项，落地成为能帮助到大家的产品；我本可以继续参与思源笔记的生态，继续维护那些还不断被人记起使用的小小工具；我本可以给我的博客除除草，拿现代的前端框架过一把自己写博客的瘾，把它接入我的信息库体系中来；我本可以…<br>
不，其实我不行。接受现实吧，这个残忍、荒谬、悲痛，又如二二得四般不可更易的现实：一天只有二十四个小时。你需要应付各种各样你不知其一也不知其二云里雾里不知原理不知现象对着实验指导书亦步亦趋照葫芦画瓢有如模仿秀的行为艺术实验，你需要应付乱七八糟莫名其妙意味不明写了没人看甚至你自己都不想看的毫无学术价值也毫无娱乐价值仅仅作为一种符号表征数据而存在的水课论文，你需要在脱离实践脱离应用脱离场景割裂孤立琐碎片面落后腐朽枯燥无趣的理论课中生存，而你的老师甚至会使用微信面对面建群来强制要求你的出席尽管你知道这仅仅是一种形式上的强迫暴力而对大家都没有什么收益，你会明白一切有趣生动实用有效的知识总是能够在课堂上被异化为冷冰冰的不可理喻的令人兴味全无的糟糕的考点，你说你要带着镣铐起舞螺蛳壳里做道场用十二分的态度将平凡琐碎枯燥无味的这些破事强行赋予意义，你说生活向来如此人生而自由却无往不在枷锁之中囚笼中挣扎洞穴中窥探再寻常不过，你说认清生活真相后仍热爱生活哪怕系统一塌糊涂也能在淤泥中开出你灿烂的鲜花，你们有梦想也许还有渴望你们还相信能在这一团浆糊中成长，可我只感到疲惫与失望。</p>
</blockquote>
<p>----------------此文来自知乎-Clouder</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
  </entry>
</search>
