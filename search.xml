<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这里是属于村雨的个人博客</title>
    <url>/2024/01/04/%E6%9D%91%E9%9B%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>来自CHD的一名普通大三学生</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720220731222454.jpg" style="zoom:50%;" />
<span id="more"></span>
<hr>
<p>不知不觉，2023 年似乎也要步入尾声了。是的，我已经大二了，似乎马上就要大三了，似乎马上就要走到那些令我的前辈们困扰纠结的分界点了。留给我的时间不多了，我是否已经准备好了呢？呐，那些被称为「理想」「信念」「决心」的东西，还有那最重要的——「方向」。我是否已经准备好了呢？大概还没有吧。</p>
<p>这是一个闲暇的夜晚，久违的闲暇。这闲暇也并不是因为无事可做，恰恰相反：明天还有经济学原理的期中考，还有各种各样的 DDL 接踵而至。刚刚经历了算法期末考的我，决定将今晚赋予「闲暇」的意味，所以这是一个闲暇的夜晚，仅此而已。</p>
<p>有的时候，生活就像是一辆疾驰不已的列车。我们被裹挟着向前，被撺掇着前进，哪怕我们走得太匆匆，太匆匆，也只能屈从于社会的时钟。一个又一个时间点，一个又一个 checkpoint，hit or miss，我们不允许停步。失速的、失控的、无可挽回的列车，向着未卜的下一站横冲直撞。</p>
<blockquote>
<p>但是，创造性工作的燃料是闲暇时光，而我常常感到，我所接受的教育正在成为负担而非助力。我并不缺乏兴趣与热情，但只能在各种各样的 DDL 间辗转腾挪疲于奔命。我本可以用 vivado 亲手实验理论课上所学的一切电路，乃至在 Minecraft 中玩一把红石数电，又或者是买来开发板成为 FPGA 玩家；我本可以真正地学习了解马克思主义，读未经蒸馏的一手著作；我本可以仔细梳理每一种算法的实现，将各个问题研究透彻清晰；我本可以好好做立项，落地成为能帮助到大家的产品；我本可以继续参与思源笔记的生态，继续维护那些还不断被人记起使用的小小工具；我本可以给我的博客除除草，拿现代的前端框架过一把自己写博客的瘾，把它接入我的信息库体系中来；我本可以…<br>
不，其实我不行。接受现实吧，这个残忍、荒谬、悲痛，又如二二得四般不可更易的现实：一天只有二十四个小时。你需要应付各种各样你不知其一也不知其二云里雾里不知原理不知现象对着实验指导书亦步亦趋照葫芦画瓢有如模仿秀的行为艺术实验，你需要应付乱七八糟莫名其妙意味不明写了没人看甚至你自己都不想看的毫无学术价值也毫无娱乐价值仅仅作为一种符号表征数据而存在的水课论文，你需要在脱离实践脱离应用脱离场景割裂孤立琐碎片面落后腐朽枯燥无趣的理论课中生存，而你的老师甚至会使用微信面对面建群来强制要求你的出席尽管你知道这仅仅是一种形式上的强迫暴力而对大家都没有什么收益，你会明白一切有趣生动实用有效的知识总是能够在课堂上被异化为冷冰冰的不可理喻的令人兴味全无的糟糕的考点，你说你要带着镣铐起舞螺蛳壳里做道场用十二分的态度将平凡琐碎枯燥无味的这些破事强行赋予意义，你说生活向来如此人生而自由却无往不在枷锁之中囚笼中挣扎洞穴中窥探再寻常不过，你说认清生活真相后仍热爱生活哪怕系统一塌糊涂也能在淤泥中开出你灿烂的鲜花，你们有梦想也许还有渴望你们还相信能在这一团浆糊中成长，可我只感到疲惫与失望。</p>
</blockquote>
<p>----------------此文来自知乎-Clouder</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
  </entry>
  <entry>
    <title>对于恐惧的思考</title>
    <url>/2025/04/08/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E5%AF%B9%E4%BA%8E%E6%81%90%E6%83%A7%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8c8b85aa8df9699e230e50c603f3372da943654e6afef283264f8c6ed2b4bac9">60fd0739c5a82ca45262b2f3393acd535a1981fb06de00bf6626eaa25a176042f4a3c0fdf32f2ac913addc5da6f76d6cbd452125f3ab0b9c1465a5d2f5d16f3652dea77e0e79b297f4b02a5c9ff1c2ff4f3edd2be6be9b5b82770968a0968fc0e27d22566611ff889673e1afcb524b51c6f24d67734a3a2e7363cabb23ff6e0b2c7645cf10ec0d759d97a0d4d8ab0536a386358e722b054654400d37d1cad9b4f2725940d1911d8a9bfd72fdad03dbfc3a426671497dfdeb2f69c620df05a332af4fc46918458ef59cfbc0e19e58a2395ecec4d055e64660df84e5b9c55d5a8ba62ed99273657ecd2a7f9a6853af5e1549fd613df98d280aa9dcbe40174184d59a6cc832958f18beec92b8d2c2375b3e32d046806ffea972caa08fbce204703a44539e171573630d565e1adb1ff6cc7c9fbaf17413971328925b3ada3b569ffb331323e957c71dc1f6a9d51781e99400b685c50aa61c52a40abe70a62620ece8dbe61829e405543e650bfafb52e58bf130cfbcb3a2db3b511cf522c17d3271b122a7f00e53cac8793dbaf69643676705469cd9e08950ca464f54d5dcb06f667439473931a249c329323f3c329885223f09f283d0272134b522b0f23af7c7f7a4a2055b9f0bdf8872091be123c316d127e2232a3b41f2dbaaf80d534ddd52950982da1a5b381b27c8f014279f8d9c95bd6aae8ca7d6bb2000577d93822572e127068fa296e04fe7d00378af9d6fdc37e7d1c47cb310888252a8ddd619ebe3e4bcab0a3da311d5094bc7c5370107ec335d47f35bb90df1b5103a54d95efbadf63293d71ae04f54339d2eaef35c6eeb870d5af1656ad932a24fa0f56b44ff8d3181ffa869a1a187e874ec12deeb100c163a26011d57ae828910ea2cc056902047691d715959712bb7f862cdb50a8da17807ca5654e3ae9d15d218c01e3103f3d64f176a2e0b7ae0f9318470ef1d0ffcca8cc1b8dcf92bdeaa17db013497e7f71b77ad14270b5a8e113eae1828f8e1feec0f333af22e23574420ab7c5746161cc9b03ab054f6c37b71f4f4406f5724881c3c3fbf301d9f360b8c5854020636c7866b0f51e00829dc0f9e9faae27831762e8d7663849cda3888d2a05bd92a182b18c6a1cc370abb8ad2311261ba2daddbf83c50e50c12bfbb83ad94e2d1e50906fd4dc5ebae8a6b734df9f36992b54448d5e2cc25c5c5125548b377cbd0248ac744d5e5234d8fa2eb8d433fe6f915c505fd1a00b2f726989c21666194c9ef0d9fc165050202c1ffd60b165beff445f6f6d017e7e6d64e85f13ea0da18b39511f3da98cbaa055bbf2453723be64e4c18f2dc2cf32b3fa458027eed945ce89974e593a9d5a5b02b759348c2fbfdd602533be4feab2c9eff4249e2a0e8cb03b65edcad20db718526b62ac1118abd20baf4a46c811d633647cf55406f55abc024930632102c1bf4cc71e3c15ab83268c430e87f3bc752ba0b99edaf1e3fe07fe739e6f0c561e048e6e9b1cd044efde41253e549218fd68bfae692cebe960d336d909cb19a414d06b20127c1b2d77dd1202fd721fec6693b84f7b5858291fa67b26e888e2f9d6b0844fd91d0cb79b96118e4982feff0257638bbac846b822985adf854d349c465f08988467df76086907113d5d5078225f1b79109742813a01fa38e99fe71d115deefaf195be60610f4cd2b968410609037b83b151710699fce35ea4190fd97e761ef1e8c532a516b7913f47edbce866bd03b17dcb4d714245d1f7bcac2cb968dcfa02a98fbdc8a4d1dfe66880b088af57fe3f06de6a8abeeff87bad4b3c5d4345e335aa9984c308152b44d89313795c33c9dceffe53540a57c3ced8c09ac2d7ffc95f14b60e09ed0583621da8a392787423f8a975e9b752bae5da718d52222cad0e7f871d588928b0644a60c2c8ea1bd6c2d8187936ed75b20f8ef816f5bbef57ea7aea9f44074cb55e7f4484baff277ec28dc5c9fa5859bfe0cb30ceb3cbb9b160f4ae25634092456bfbe90d7e97af2aacbce2ae107c2d9211ac296ccddccf85efc813432fe7846cd7723d27adb9207929856c27c2d7e9644ca8b36289184c7f9d1f5eb562ccfef00f166b546408781cb049b80a9b34e7403b21c8b9fae04a1a4346e0b698eb1b23b115f63b7bcd82d1d0295ff831e0cbfe122b31a305ea07c451dc8c68446931f75f6d9f95f7e83a47d7771b66c7eafdf62b708b6befb6c1f0a4eaea1e1ecf381f0fa77dc23900d99a38cca3fa7b546bcc8a9dcd3051ea2c6a83e9e7a40e58650454becdcf1d381766b845e6475384e9e798859adf38fdd917542c47e4911d7c7f56102ff94994cafc7ba218bb559d3f02c5cdf2d08bdd2bb57799fe6fbc6279509e34311edc3215e4b8e4be83bb65fe767eac01af75caadccdfe2b7176bcc11ebe644ef46371de42e524b90cfbd26128c65b28947d87e19ff47e26c6f5df880c88a5f01299d2f0eb625de0c1b00cf3902427566a78bdce1011e8089d227a7d02e1a583acac5e9f543508a0f024490a5be49c8b9a33d83fab3b1df345ebcb3e78c070d7d2b82afe49c23c883b140a7d4f10c20ebc80fe9ff672ebb5e2211df52f939650e571d8948ccaa2b5a73efc6d430bbf5dda326fefbf2cf4fd18e0b584b6adf306e68d81136033de4a2e0204626b2b9a6e1f826d8488381bbca856bf0657ade0f56cde96827ef8e4f48a0dbe30a776bb07749362a953429cfef1465a77cfdd75e25799a060d10c24cc54739832b9a1b7f547c2dcbe1bec809ab15d4ec147a6f0952ede6cb4e0ab19c16f52e7029027c7efeb5980a36e042839a0cc12384305e8d507e754651a6aec1b8e4e8d4f3525ad4fb2f584463369b1a8300830215f7b6965c2017b47a6760903924a637e662ebf42483a4e9dee51646b4e8f111d77a34c3a1cea4a5b897fcd101147287d48ec3fc95bf0e672ad044f42d5f23f3bc1a28dab216991b5922768b74e2743cc05b1f67430b68844f7296aaa71752ad7772628976b6508edfb8cecbc27229ce928389141c8d607872a6f253fe3349ffc1216ab009e2535b8f764736a10b0184e414f510aa7e5669d537a98698c60915f71fff59e10b702d459e3c8e5ebf526a69e3c621f0f865f56fd317cf091e3a84e9e4db2688f6326ffa0c3285c58f5ad72a6535dcf53c18b0389f183b5194c2ac6b3f37f216ea0884ebde1661641e8d0700310390b92799304d72250e639970943a29dd3e9b237a49aeb609c020dba61b9d34eb5ca8fec0170e701f69398e62b1f6374929c4c1c5d07e6a1ea04437362140f47a24073d3f116ead417346be26220b7aecdf5a21def37a0e254b6600389a7a6f10c1b2da0ab79748f9976a9d54efacdb55b5d863b33c9663c39b115291551899208db2466160c7c05aa221a51d3928b23cea9b6565e918cc0c50f3f195ca7c591d5fba10192729bc5692e72a5b898b75652d699065f99061c33d2fa0c176e75059566bf137d94656fc65a6874d092a55cd39d49fc9601633c9378000162448a0f453265e8990c96eba32cfbf0de6cbd9de9a505df5fc20fd5fa2ef9a09c414b277905e49e7b4364c5a89bac61568f4c3b093e20b9ed459a55d566785662e28695676a6fd41231cad7e0b14ad368180b8bb14344cde38b6b57bfff202d5aacabd01e4cb00becfec1251f0278479184d36f841fa8e43703ecbcfcbb31e9ffab604b2287951abdab663e710cc6423a5a8df245253abc1bd9cdd22a4f2a2d4bb48f113213f5de0d1edd77bc46953c875d7004ae293333040e3c97c08d9716009d2a672f399894490d242a3ae3112a5e57b9f4a516fd8948c5185fff9178bbb1d796495603a0a9ce39a698f90ca89860494aef7a5188564105f08261984c4fef9ff00cddd5bb911f7970392629240c7ab7ee8e7ecc6d6b9c701cf97c0c73ec56ab32cf6bb6277106872aa59e449b16517a6a8f76b4ed1467</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>我的实况足球游戏观</title>
    <url>/2025/03/21/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E5%AE%9E%E5%86%B5%E8%B6%B3%E7%90%83%E4%BA%8C%E5%8D%81%E5%BC%A0%E9%AB%98%E5%85%89%E5%88%B8%E7%99%BD%E5%85%89%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="2f2d4b13ab3f77b98b2ac944b6c5fe064cf5a2791ec4a4a36a106a5d0a0cde00"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>大三下规划</title>
    <url>/2025/02/24/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%B8%89%E4%B8%8B%E6%95%B4%E4%BD%93%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d063add1ec1007d6a3cf51b568281d1c996cbe0f7f38217a67e0488befc3a974">60fd0739c5a82ca45262b2f3393acd53208513244c7582675c01151678706c5b3e8125e9adc9d20cb4999b3833bfebd259903697c6e45bb8e582afcc7e44c416c1170834af21c40ca87c25837ed425f9d0a9a8faf2d3ec157997c221c3c37118131e6d4d6bdda98f85528ca7ccd06404f3ff49d63d68b6b92723e38ec0f18707a656550c72b8bda6b1464f754a50c8ede0c7228dba2437c2023c94cc7a115c5a742480004069c19503809764fe787dd097e4b7d6cf3ba82da74461e6d028facd5f43936903be4fc3fe5fb1bd9a472bd82e859c6849a34e9c9eb29d4116ddddd7ccd7330af2992d4bfdc2508908f4f97496169a55dd66c2fedfe5d0c90d6b36183423f0539921d2012b04bf7e6c3da4ee76575346bbb32a4a01cdf7420b9a9113dd6cb19a57c16f4f3cdedfe524574c082af4e3f40fb05968e26a0d622ce847b0e1bbe9004e0ac93de6665bb00cffd289007ce41051b6ff32cf05a563291ce00cb0b79b9fdeb38354426dbd179b64b0d33ee1748eb6f7f9936ac8ddc05f4d77d0b06b92068fb9f7d2bfe2993014225978db4a643cffca057cc34c2feffd5e8a4e980c23ac967a197d3343e8dc7174768693d5e97d8c6f89ecd8177636c090c29493f02d4628cb83895e9fd54e0570680020b15b1730795b7831b320be4ee19aeb76d5bf004c9a06c24e3e315fa69bf9d42c1cf0262fd61bc7563f99d442a7c39a463d149b15f16638ae3dc19c64a44c2e2be92d6201dcc5b6535a9ca6668c02fcc8312d32e5199ee51c86e7f6ef238dd3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title>算法刷题笔记</title>
    <url>/2025/01/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%93%9D%E6%A1%A5%E6%9D%AFC++%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>报名了2025年的蓝桥杯C++ A组，趁着寒假没什么事，一边学习算法一边刷题。万事开头难！</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-08-06_20-00-51.png" alt=""></p>
<span id="more"></span>
<hr>
<h1>洛谷题单</h1>
<h2 id="【入门1】顺序结构">【入门1】顺序结构</h2>
<h3 id="P1000-超级玛丽游戏">P1000 超级玛丽游戏</h3>
<p><strong>题目描述</strong>：</p>
<p>超级玛丽是一个非常经典的游戏。请你用字符画的形式输出超级玛丽中的一个场景。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">                ********</span><br><span class="line">               ************</span><br><span class="line">               ####....#.</span><br><span class="line">             #..###.....##....</span><br><span class="line">             ###.......######              ###            ###</span><br><span class="line">                ...........               #...#          #...#</span><br><span class="line">               ##*#######                 #.#.#          #.#.#</span><br><span class="line">            ####*******######             #.#.#          #.#.#</span><br><span class="line">           ...#***.****.*###....          #...#          #...#</span><br><span class="line">           ....**********##.....           ###            ###</span><br><span class="line">           ....****    *****....</span><br><span class="line">             ####        ####</span><br><span class="line">           ######        ######</span><br><span class="line">##############################################################</span><br><span class="line">#...#......#.##...#......#.##...#......#.##------------------#</span><br><span class="line">###########################################------------------#</span><br><span class="line">#..#....#....##..#....#....##..#....#....#####################</span><br><span class="line">##########################################    #----------#</span><br><span class="line">#.....#......##.....#......##.....#......#    #----------#</span><br><span class="line">##########################################    #----------#</span><br><span class="line">#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#</span><br><span class="line">##########################################    ############</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">R&quot;(                ********</span></span><br><span class="line"><span class="string">               ************</span></span><br><span class="line"><span class="string">               ####....#.</span></span><br><span class="line"><span class="string">             #..###.....##....</span></span><br><span class="line"><span class="string">             ###.......######              ###            ###</span></span><br><span class="line"><span class="string">                ...........               #...#          #...#</span></span><br><span class="line"><span class="string">               ##*#######                 #.#.#          #.#.#</span></span><br><span class="line"><span class="string">            ####*******######             #.#.#          #.#.#</span></span><br><span class="line"><span class="string">           ...#***.****.*###....          #...#          #...#</span></span><br><span class="line"><span class="string">           ....**********##.....           ###            ###</span></span><br><span class="line"><span class="string">           ....****    *****....</span></span><br><span class="line"><span class="string">             ####        ####</span></span><br><span class="line"><span class="string">           ######        ######</span></span><br><span class="line"><span class="string">##############################################################</span></span><br><span class="line"><span class="string">#...#......#.##...#......#.##...#......#.##------------------#</span></span><br><span class="line"><span class="string">###########################################------------------#</span></span><br><span class="line"><span class="string">#..#....#....##..#....#....##..#....#....#####################</span></span><br><span class="line"><span class="string">##########################################    #----------#</span></span><br><span class="line"><span class="string">#.....#......##.....#......##.....#......#    #----------#</span></span><br><span class="line"><span class="string">##########################################    #----------#</span></span><br><span class="line"><span class="string">#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#</span></span><br><span class="line"><span class="string">##########################################    ############)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题用到了C++11 的<code>raw string literal</code> 技术，也叫作<strong>原始字符串</strong>技术。需要注意的是R&quot;()&quot;中的第一行不可以是空格，否则会将空格也识别为字符串。</p>
<hr>
<h3 id="P5704-字母小写转换为大写">P5704 字母小写转换为大写</h3>
<p><strong>题目描述</strong>：</p>
<p>输入一个小写字母，输出其对应的大写字母。例如输入 q[回车] 时，会输出 Q。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">q</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Q</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt;<span class="built_in">char</span>(a<span class="number">-32</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题用到了ASCII码的数值转换，字母在进行相加减操作时，实际上是对应的ASCII码值之间的相加减。小写字母的ASCII码值要比大写字母的ASCII码值大32。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img292ff22b4c9e49978c4f6c7e3ca549b8.png" style="zoom: 50%;" />
<hr>
<h3 id="P5705-数字反转">P5705 数字反转</h3>
<p><strong>题目描述</strong>：</p>
<p>输入一个不小于 $100$ 且小于 $1000$，同时包括小数点后一位的一个浮点数，例如 $123.4$ ，要求把这个数字翻转过来，变成 $4.321$ 并输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> <span class="comment">//需要用到该库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">//将字符串逆置</span></span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题用到了C++ STL标准模板库中的reverse()函数，该函数可以将字符串逆置。</p>
<hr>
<h3 id="P5706-再分肥宅水">P5706 再分肥宅水</h3>
<p><strong>题目描述</strong>：</p>
<p>现在有 $t$ 毫升肥宅快乐水，要均分给 $n$ 名同学。每名同学需要 $2$ 个杯子。现在想知道每名同学可以获得多少毫升饮料（严格精确到小数点后 $3$ 位），以及一共需要多少个杯子。</p>
<p><strong>输入格式</strong></p>
<p>输入一个实数 $t$ 和一个正整数 $n$，使用空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>输出两行。</p>
<p>第一行输出一个三位小数，表示可以获得多少毫升饮料。第二行输出一个正整数，表示一共需要多少个杯子。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">500</span>.<span class="number">0</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">166</span>.<span class="number">667</span></span><br><span class="line"><span class="attribute">6</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于所有数据，$0\leq t\leq 10000$ 且小数点后不超过 $3$ 位，$1\leq n\leq 1000$ 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">//万能头文件，STL库中的所有函数都可以直接调用</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> t;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; t &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; fixed &lt;&lt; t / n &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; n * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setprecision(3)</code> 设置 <strong>浮点数输出的总有效数字位数</strong>，即<strong>小数点前后所有数字的总个数</strong>。它控制 <strong>输出时的精度</strong>，确保总共显示 3 位有效数字。</p>
<ul>
<li>
<p>需要注意的是，<code>setprecision</code> 在默认情况下并不强制小数部分显示特定数量的数字，而是控制总共有效数字位数。</p>
<p>但是当 <code>fixed</code> 被使用时，<code>setprecision(n)</code> 会控制<strong>小数点后 显示 n 位数字</strong>。</p>
<p><code>fixed</code>和<code>setprecision</code>要求数值为<strong>浮点类型</strong>（如<code>double</code>）才能正确控制小数位数。</p>
<p>如果是double a = 500 / 3，仍然不能保证a是浮点数，因为500/3是整数除法，所以要把分子或分母的其中一个数手动变为浮点数，例如double a = 500.0 / 3或double a = 500 / 3.0。</p>
</li>
</ul>
<hr>
<h3 id="P5708-三角形面积">P5708 三角形面积</h3>
<p><strong>题目描述</strong>:</p>
<p>一个三角形的三边长分别是 $a$、$b$、$c$，那么它的面积为 $\sqrt{p(p-a)(p-b)(p-c)}$，其中 $p=\frac{1}{2}(a+b+c)$。输入这三个数字，计算三角形的面积，四舍五入精确到 $1$ 位小数。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入三个实数 $a, b ,c$，以空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>输出一个实数，表示三角形面积。精确到小数点后 $1$ 位。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">6</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证能构成三角形，$0\leq a,b,c\leq 1000$，每个边长输入时不超过 $2$ 位小数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> a, b, c, p, ans;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">	p = (a + b + c) / <span class="number">2</span>;</span><br><span class="line">	ans = <span class="built_in">sqrt</span>(p * (p - a) * (p - b) * (p - c)); <span class="comment">//开平方根</span></span><br><span class="line">	cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">1</span>) &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题用到了sqrt()开平方根函数</p>
<hr>
<h3 id="B2029-大象喝水">B2029 大象喝水</h3>
<p><strong>题目描述</strong>：</p>
<p>一只大象口渴了，要喝 $20$ 升水才能解渴，但现在只有一个深 $h$ 厘米，底面半径为 $r$ 厘米的小圆桶 （$h$ 和 $r$ 都是整数）。问大象至少要喝多少桶水才会解渴。</p>
<p><strong>Update：数据更新，这里我们近似地取圆周率 $\pi = 3.14$。</strong></p>
<p><strong>输入格式</strong></p>
<p>输入有一行：包行两个整数，以一个空格分开，分别表示小圆桶的深 $h$ 和底面半径 $r$，单位都是厘米。</p>
<p><strong>输出格式</strong></p>
<p>输出一行，包含一个整数，表示大象至少要喝水的桶数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">23 </span><span class="number">11</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>数据规模与约定</strong></p>
<p>对于全部的测试点，保证 $1 \leq h \leq 500$，$1 \leq r \leq 100$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> h, r, v;</span><br><span class="line">	cin &gt;&gt; h &gt;&gt; r;</span><br><span class="line">	v = <span class="number">3.14</span> * r * r * h;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">int</span>(<span class="number">20000</span> / v)+<span class="number">1</span>; <span class="comment">//强制转换为整数类型</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题不难，关键在于输出的结果要强制转换为整数类型。</p>
<hr>
<h3 id="P1425-小鱼的游泳时间">P1425 小鱼的游泳时间</h3>
<p><strong>题目描述</strong>：</p>
<p>伦敦奥运会要到了，小鱼在拼命练习游泳准备参加游泳比赛，可怜的小鱼并不知道鱼类是不能参加人类的奥运会的。</p>
<p>这一天，小鱼给自己的游泳时间做了精确的计时（本题中的计时都按 $24$ 小时制计算），它发现自己从 $a$ 时 $b$ 分一直游泳到当天的 $c$ 时 $d$ 分，请你帮小鱼计算一下，它这天一共游了多少时间呢？</p>
<p>小鱼游的好辛苦呀，你可不要算错了哦。</p>
<p><strong>输入格式</strong></p>
<p>一行内输入四个整数，以空格隔开，分别表示题目中的 $a, b, c, d$。</p>
<p><strong>输出格式</strong></p>
<p>一行内输出两个整数 $e$ 和 $f$，用空格间隔，依次表示小鱼这天一共游了多少小时多少分钟。其中表示分钟的整数 $f$ 应该小于 $60$。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">12 </span><span class="number">50</span> <span class="number">19</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">20</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于全部测试数据，$0\le a,c \le 24$，$0\le b,d \le 60$，且结束时间一定晚于开始时间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> a, b, c, d, e, f;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">	<span class="keyword">if</span> (b &gt; d)</span><br><span class="line">	&#123;</span><br><span class="line">		e = c - a - <span class="number">1</span>;</span><br><span class="line">		f = <span class="number">60</span> + d - b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		e = c - a;</span><br><span class="line">		f = d - b;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; f;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题我使用了if判断语句。</p>
<p>如果结束时间的分钟数&lt;开始时间的分钟数，那么结束时间的小时数-开始时间的小时数后还得再减去1（借了1小时）；同理，结束时间的分钟数-开始时间的分钟数还需要加上60（借了60分钟）。</p>
<p>如果结束时间的分钟数&gt;开始时间的分钟数，直接相减即可。</p>
<hr>
<h3 id="P1421-小玉买文具">P1421 小玉买文具</h3>
<p><strong>题目描述</strong>：</p>
<p>班主任给小玉一个任务，到文具店里买尽量多的签字笔。已知一只签字笔的价格是 $1$ 元 $9$ 角，而班主任给小玉的钱是 $a$ 元 $b$ 角，小玉想知道，她最多能买多少只签字笔呢。</p>
<p><strong>输入格式</strong></p>
<p>输入只有一行两个整数，分别表示 $a$ 和 $b$。</p>
<p><strong>输出格式</strong></p>
<p>输出一行一个整数，表示小玉最多能买多少只签字笔。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>数据规模与约定</strong></p>
<p>对于全部的测试点，保证 $0 \leq a \leq 10^4$，$0 \leq b \leq 9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	<span class="type">double</span> sum;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	sum = a + b / <span class="number">10.0</span>;<span class="comment">//强制b除以10为浮点数</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">int</span>(sum / <span class="number">1.9</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题虽然输入的是整数，但几元几角还是属于浮点数，所以在过程中的每一步的计算结果都要保证是浮点数。</p>
<p>由于题求能买多少只笔，所以最后的输出结果记得要在强制转换成整数。</p>
<hr>
<h3 id="P5707-上学迟到（普及-）">P5707 上学迟到（普及-）</h3>
<p><strong>题目描述</strong>：</p>
<p>学校和 yyy 的家之间的距离为 $s$ 米，而 yyy 以 $v$ 米每分钟的速度匀速走向学校。</p>
<p>在上学的路上，yyy 还要额外花费 $10$ 分钟的时间进行垃圾分类。</p>
<p>学校要求必须在上午 $\textrm{8:00}$  到达，请计算在不迟到的前提下，yyy 最晚能什么时候出门。</p>
<p>由于路途遥远，yyy 可能不得不提前一点出发，但是提前的时间不会超过一天。</p>
<p><strong>输入格式</strong></p>
<p>一行两个正整数 $s,v$，分别代表路程和速度。</p>
<p><strong>输出格式</strong></p>
<p>输出一个 $24$ 小时制下的时间，代表 yyy 最晚的出发时间。</p>
<p>输出格式为 $\texttt{HH:MM}$，分别代表该时间的时和分。必须输出两位，不足前面补 $0$。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span><span class="number">99</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">07</span>:<span class="number">48</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 $100%$ 的数据，$1 \le s,v \le 10^4$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> s, v, m;</span><br><span class="line">	<span class="type">int</span> n, a, t, b;</span><br><span class="line">	cin &gt;&gt; s &gt;&gt; v;</span><br><span class="line">    </span><br><span class="line">	n = <span class="number">8</span> * <span class="number">60</span> + <span class="number">24</span> * <span class="number">60</span>;<span class="comment">//两天总共的分钟数，从前一天的00:00到24:00,再到8:00</span></span><br><span class="line">	t = <span class="built_in">ceil</span>(s / v) + <span class="number">10</span>;<span class="comment">//上学路上花费的总时间</span></span><br><span class="line">							<span class="comment">//ceil()很重要，向上取整，否则按C++逻辑会向下取整导致行走时间少。</span></span><br><span class="line">	n = n - t;<span class="comment">//得出剩下的时间。</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//判断是否在前一天，前一天这里指24:00之前</span></span><br><span class="line">	<span class="keyword">if</span> (n &gt;= <span class="number">24</span> * <span class="number">60</span>) n = n - <span class="number">24</span> * <span class="number">60</span>;<span class="comment">//n -= 24 * 60; //不在前一天，就在24:00到8：00之间</span></span><br><span class="line">	<span class="comment">//在前一天，由于n &lt; 24 * 60，算出多少就是多少，而且题干明确说明不会提前一天，所以出发时间至少前一天的8:10之后</span></span><br><span class="line">	a = n / <span class="number">60</span>;<span class="comment">//出发时间</span></span><br><span class="line">	b = n % <span class="number">60</span>;<span class="comment">//出发分钟。</span></span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; a &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; b &lt;&lt; endl;<span class="comment">//自动补0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题偏难，前后做了一个小时。</p>
<p>我自己做只得了50分，之后看题解并对补0操作进行了优化。</p>
<p>本题的关键：如何处理出发时间在<strong>今天</strong>和出发时间在<strong>昨天</strong>的代码逻辑。</p>
<p><strong>解释</strong>：</p>
<ul>
<li><strong><code>setw(2)</code></strong>：表示宽度为 2，也就是说输出的数字宽度至少为 2 位。如果输出的数字不足 2 位，C++ 会在左侧填充字符（默认是空格）。</li>
<li>**<code>setw()</code>**默认向右对齐，如果想要向左对齐，再前面加一个left即可，如cout &lt;&lt; left &lt;&lt; setw(8) &lt;&lt; a &lt;&lt; setw(8) &lt;&lt; b；</li>
<li><strong><code>setfill('0')</code></strong>：表示填充字符为 <code>0</code>。当数字的宽度小于 2 时，C++ 会使用 <code>0</code> 来填充。</li>
</ul>
<h2 id="【入门2】分支结构">【入门2】分支结构</h2>
<h3 id="P5709-苹果和虫子">P5709  苹果和虫子</h3>
<p><strong>题目描述</strong>：</p>
<p>小 B 喜欢吃苹果。她现在有 $m$（$1 \le m \le 100$）个苹果，吃完一个苹果需要花费 $t$（$0 \le t \le 100$）分钟，吃完一个后立刻开始吃下一个。现在时间过去了 $s$（$1 \le s \le 10000$）分钟，请问她还有几个完整的苹果？</p>
<p><strong>输入格式</strong></p>
<p>输入三个<strong>非负整数</strong>表示 $m, t, s$。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数表示答案。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">50 </span><span class="number">10</span> <span class="number">200</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>如果你出现了 RE，不如检查一下被零除？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m, t, s, rest;</span><br><span class="line">	cin &gt;&gt; m &gt;&gt; t &gt;&gt; s;</span><br><span class="line">	rest = m * t - s;<span class="comment">//剩余的时间（精妙之处）</span></span><br><span class="line">	<span class="keyword">if</span> (rest &lt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (rest &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">floor</span>(rest / t);<span class="comment">//下取整</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题有点小坑，我以为是吃完整数个苹果后的花费时间为s，没想到也可以吃半个苹果后的花费时间为s。</p>
<p>所以就要考虑取整的问题了，用到了下取整函数floor()。</p>
<p>还有一个要考虑的点就是输入的m，s，t它不一定满足花费s时间后还剩下苹果。</p>
<p>这里我用了rest变量表示剩余的时间，再对rest变量进行分类讨论。</p>
<hr>
<h3 id="P5711-闰年判断">P5711 闰年判断</h3>
<p><strong>题目描述</strong>：</p>
<p>输入一个年份，判断这一年是否是闰年，如果是输出 $1$，否则输出 $0$。</p>
<p>$1582$ 年以来，闰年的定义：</p>
<p>普通闰年：公历年份是 $4$ 的倍数，且不是 $100$ 的倍数的，为闰年（如 $2004$ 年、$2020$ 年等就是闰年）。</p>
<p>世纪闰年：公历年份是整百数的，必须是 $400$ 的倍数才是闰年（如 $1900$ 年不是闰年，$2000$ 年是闰年）。</p>
<p><strong>输入格式</strong></p>
<p>输入一个正整数 $n$，表示年份。</p>
<p><strong>输出格式</strong></p>
<p>输出一行。如果输入的年份是闰年则输出 $1$，否则输出 $0$。</p>
<p><strong>提示</strong></p>
<p>数据保证，$1582 \leq n \leq 2020$ 且年份为自然数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((n % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>)||n % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很经典的一道题。</p>
<hr>
<h3 id="P5715-三位数排序">P5715 三位数排序</h3>
<p><strong>题目描述</strong>：</p>
<p>给出三个整数 $a,b,c(0\le a,b,c \le 100)$，要求把这三位整数从小到大排序。</p>
<p><strong>输入格式</strong></p>
<p>输入三个整数 $a,b,c$，以空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>输出一行，三个整数，表示从小到大排序后的结果。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">14</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">14</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">	<span class="keyword">if</span> (a &lt; b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (b &lt; c) cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; c) cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (b &gt; c) cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c &gt; a) cout &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(b &gt; c) cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我自己做的，使用了if嵌套循环。但是看了题解后发现了更高级的手段。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">	cin &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a,a+<span class="number">3</span>);<span class="comment">//sort()从小到大排序函数</span></span><br><span class="line">	cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; a[<span class="number">1</span>] &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; a[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>sort(Iterator first, Iterator last)参数</strong>：</p>
<ul>
<li><code>first</code>：指向要排序区间的第一个元素的迭代器。</li>
<li><code>last</code>：指向排序区间的<strong>末尾元素的后一个位置</strong>的迭代器。</li>
</ul>
<p><strong>不需要定义int a[4]:</strong></p>
<p>不需要担心数组越界问题，因为 <code>a + 3</code> 是指向数组末尾的一个位置，但并不表示有效的元素。</p>
<p><strong>Tip</strong>:可以使用<strong>reverse()函数</strong>对数组逆置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(a,a+<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="P1085-不高兴的津津（重要）">P1085 不高兴的津津（重要）</h3>
<p><strong>题目描述</strong>：</p>
<p>津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。</p>
<p><strong>输入格式</strong></p>
<p>输入包括 $7$ 行数据，分别表示周一到周日的日程安排。每行包括两个小于 $10$ 的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间。</p>
<p><strong>输出格式</strong></p>
<p>一个数字。如果不会不高兴则输出 $0$，如果会则输出<strong>最不高兴的</strong>是周几（用 $1, 2, 3, 4, 5, 6, 7$ 分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出<strong>时间最靠前的</strong>一天。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, max = <span class="number">8</span>, q = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		<span class="keyword">if</span> ((a + b) &gt; max)<span class="comment">//神之一手</span></span><br><span class="line">		&#123;</span><br><span class="line">			max = a + b;<span class="comment">//锁住最大值</span></span><br><span class="line">			q = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; q;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题看着不难，却有几个条件限制住无法AC。</p>
<p>一开始我以为必须输入完7行后再进行输出判断，但后来才意识到输入区和输出区是独立开来的。</p>
<p>然后本题的神之一手就是max变量的使用，牢牢锁住最大值，让我受益颇丰！！！</p>
<hr>
<h3 id="P1909-买铅笔（重要）">P1909 买铅笔（重要）</h3>
<p><strong>题目描述</strong>：</p>
<p>P 老师需要去商店买 $n$ 支铅笔作为小朋友们参加 NOIP 的礼物。她发现商店一共有 $3$ 种包装的铅笔，不同包装内的铅笔数量有可能不同，价格也有可能不同。为了公平起见，<strong>P 老师决定只买同一种包装的铅笔</strong>。</p>
<p>商店不允许将铅笔的包装拆开，因此 P 老师可能需要购买超过 $n$ 支铅笔才够给小朋友们发礼物。</p>
<p>现在 P 老师想知道，在商店每种包装的数量都足够的情况下，要买够至少 $n$ 支铅笔最少需要花费多少钱。</p>
<p><strong>输入格式</strong></p>
<p>第一行包含一个正整数 $n$，表示需要的铅笔数量。</p>
<p>接下来三行，每行用 $2$ 个正整数描述一种包装的铅笔：其中第 $1$ 个整数表示这种包装内铅笔的数量，第 $2$ 个整数表示这种包装的价格。</p>
<p>保证所有的 $7$ 个数都是不超过 $10000$ 的正整数。</p>
<p><strong>输出格式</strong></p>
<p>$1$ 个整数，表示 P 老师最少需要花费的钱。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">57</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">50 </span><span class="number">30</span></span><br><span class="line"><span class="symbol">30 </span><span class="number">27</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">54</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">9998</span></span><br><span class="line"><span class="symbol">128 </span><span class="number">233</span></span><br><span class="line"><span class="symbol">128 </span><span class="number">2333</span></span><br><span class="line"><span class="symbol">128 </span><span class="number">666</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">18407</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #3</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">9999</span></span><br><span class="line"><span class="symbol">101 </span><span class="number">1111</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">9999</span></span><br><span class="line"><span class="symbol">1111 </span><span class="number">9999</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">89991</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, a, b, min = <span class="number">100000000</span>, sum = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		sum = <span class="built_in">ceil</span>(<span class="built_in">double</span>(n)/ a);<span class="comment">//要买的铅笔盒数</span></span><br><span class="line">		<span class="keyword">if</span> (sum * b &lt; min)</span><br><span class="line">		&#123;</span><br><span class="line">			min = sum * b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; min;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>该题和上一题有异曲同工之处，上一题是锁定最大值max，该题是锁定最小值min。</p>
<p>有了思路很快就做出来了，但只有54分，下载了WA的样例测试了一下，发现当n&lt;a时，ceil（n/a）= 0。导致最终输出的结果也是0。</p>
<p>查了Gpt得知，如代码中的 <code>2488/6882</code> 实际上是整数除法，因为两个数字都是整数。那么整数除法会返回一个<strong>整数结果</strong>，结果是 <code>0</code>（因为 <code>2488 / 6882</code> 小于 <code>1</code>，整数部分是 <code>0</code>）。然后， <code>ceil(0)</code>仍然是 <code>0</code>。</p>
<p>如果想得到正确的结果，应该先将其中一个操作数转换为浮动类型（如 <code>float</code> 或 <code>double</code>）。</p>
<p>又学到了一个知识！</p>
<hr>
<h3 id="P1424-小鱼的航程（改进版）">P1424 小鱼的航程（改进版）</h3>
<p><strong>题目描述</strong>：</p>
<p>有一只小鱼，它平日每天游泳 $250$ 公里，周末休息（实行双休日)，假设从周 $x$ 开始算起，过了 $n$ 天以后，小鱼一共累计游泳了多少公里呢？</p>
<p><strong>输入格式</strong></p>
<p>输入两个正整数 $x,n$，表示从周 $x$ 算起，经过 $n$ 天。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示小鱼累计游泳了多少公里。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">2000</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1\le x \le 7$，$1 \le n\le 10^6$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> n, sum = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; x &gt;&gt; n;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((x != <span class="number">6</span>) &amp;&amp; (x != <span class="number">7</span>))<span class="comment">//如果x不是周六或周日</span></span><br><span class="line">		&#123;</span><br><span class="line">			sum += <span class="number">250</span>;<span class="comment">//只有在周一二三四五才加</span></span><br><span class="line">			x++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">6</span>)<span class="comment">//如果x是周六</span></span><br><span class="line">		&#123;</span><br><span class="line">			x++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//如果x是周日</span></span><br><span class="line">		&#123;</span><br><span class="line">			x = <span class="number">1</span>;<span class="comment">//x重置为1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题看着好像需要讨论好多种情况，但实际只需要不停地<strong>累加</strong>。</p>
<p>再就是题中明确说明n的值可能会是6位数，考虑到还需要乘250，使用long long类型（64位）。</p>
<hr>
<h3 id="P1888-三角函数">P1888 三角函数</h3>
<p><strong>题目描述</strong>：</p>
<p>输入一组<strong>勾股数</strong> $a,b,c（a\neq b\neq c）$，用分数格式输出其<strong>较小锐角</strong>的正弦值。（要求约分。）</p>
<p><strong>输入格式</strong></p>
<p>一行，包含三个正整数，即勾股数 $a,b,c$（无大小顺序）。</p>
<p><strong>输出格式</strong></p>
<p>一行，包含一个分数，即较小锐角的正弦值</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">3</span>/<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证：$a,b,c$ 为正整数且 $\in [1,10^9]$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">	cin &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line">	<span class="built_in">sort</span>(a, a + <span class="number">3</span>);</span><br><span class="line">	<span class="type">int</span> max = a[<span class="number">2</span>];</span><br><span class="line">	<span class="type">int</span> min = a[<span class="number">0</span>];</span><br><span class="line">	<span class="type">int</span> t = <span class="built_in">gcd</span>(max,min);</span><br><span class="line">	cout &lt;&lt; min/t &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; max/t;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span><span class="comment">//求两个数的最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp;</span><br><span class="line">	<span class="keyword">while</span> (b &gt; <span class="number">0</span>)<span class="comment">//辗转相除法</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp = a % b;</span><br><span class="line">		a = b;</span><br><span class="line">		b = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题有两个关键点：</p>
<p>1.输入的三个数为勾股数，这意味着三角形一定是直角三角形，求正弦值即短边/最长边。</p>
<p>2.约分需要找到分子和分母的最大公约数，而gcd()函数是GNU的私货，在Linux下的[编译器可用，那么就需要手写gcd()函数。</p>
<hr>
<h3 id="P5717-三角形分类（普及-）">P5717 三角形分类（普及-）</h3>
<p><strong>题目描述</strong>：</p>
<p>给出三条线段 $a,b,c$ 的长度，均是不大于 $10000$ 的正整数。打算把这三条线段拼成一个三角形，它可以是什么三角形呢？</p>
<ul>
<li>如果三条线段不能组成一个三角形，输出<code>Not triangle</code>；</li>
<li>如果是直角三角形，输出<code>Right triangle</code>；</li>
<li>如果是锐角三角形，输出<code>Acute triangle</code>；</li>
<li>如果是钝角三角形，输出<code>Obtuse triangle</code>；</li>
<li>如果是等腰三角形，输出<code>Isosceles triangle</code>；</li>
<li>如果是等边三角形，输出<code>Equilateral triangle</code>。</li>
</ul>
<p>如果这个三角形符合以上多个条件，请按以上顺序分别输出，并用换行符隔开。</p>
<p><strong>输入格式</strong></p>
<p>输入 3 个整数 $a$、$b$ 和 $c$。</p>
<p><strong>输出格式</strong></p>
<p>输出若干行判定字符串。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Acute <span class="built_in">triangle</span></span><br><span class="line">Isosceles <span class="built_in">triangle</span></span><br><span class="line">Equilateral <span class="built_in">triangle</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Right</span> triangle</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #3</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">10</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #3</strong></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Obtuse <span class="built_in">triangle</span></span><br><span class="line">Isosceles <span class="built_in">triangle</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #4</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">14</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #4</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Not triangle</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>当两短边的平方和大于一长边的平方，说明是锐角三角形。</p>
<p>当两短边的平方和等于一长边的平方，说明是直角三角形。</p>
<p>当两短边的平方和小于一长边的平方，说明是钝角三角形。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)<span class="comment">//输入三角形的三边</span></span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; m[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(m, m + <span class="number">3</span>);<span class="comment">//对三边从小到大排序</span></span><br><span class="line">	<span class="type">int</span> a = m[<span class="number">0</span>], b = m[<span class="number">1</span>], c = m[<span class="number">2</span>];<span class="comment">//赋值给a,b,c</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((a + b) &gt; c &amp;&amp; ((b - a) &lt; c || (c - a) &lt; b || (c - b) &lt; a))<span class="comment">//可以构成三角形</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a * a + b * b == c * c) cout &lt;&lt; <span class="string">&quot;Right triangle&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (a * a + b * b &gt; c * c) cout &lt;&lt; <span class="string">&quot;Acute triangle&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (a * a + b * b &lt; c * c) cout &lt;&lt; <span class="string">&quot;Obtuse triangle&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (a == b||b == c) cout &lt;&lt; <span class="string">&quot;Isosceles triangle&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (a == c) cout &lt;&lt; <span class="string">&quot;Equilateral triangle&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Not triangle&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题不难，主要就是用好数组和sort()排序函数。</p>
<p>if条件不可以出现a == b == c这种连等，会先计算 <code>a == b</code>，它会返回 <code>true</code> 或 <code>false</code>（即 1 或 0），然后再将这个值与 <code>c</code> 进行比较。这样会导致逻辑错误。</p>
<p>if和else if是<strong>二选一</strong>的关系。</p>
<hr>
<h3 id="P1055-ISBN-号码（普及-）">P1055 ISBN 号码（普及-）</h3>
<p><strong>题目描述</strong>：</p>
<p>每一本正式出版的图书都有一个 ISBN 号码与之对应，ISBN 码包括 $9$ 位数字、$1$ 位识别码和 $3$ 位分隔符，其规定格式如 <code>x-xxx-xxxxx-x</code>，其中符号 <code>-</code> 就是分隔符（键盘上的减号），最后一位是识别码，例如 <code>0-670-82162-4</code>就是一个标准的 ISBN 码。ISBN 码的首位数字表示书籍的出版语言，例如 $0$ 代表英语；第一个分隔符 <code>-</code> 之后的三位数字代表出版社，例如 $670$ 代表维京出版社；第二个分隔符后的五位数字代表该书在该出版社的编号；最后一位为识别码。</p>
<p>识别码的计算方法如下：</p>
<p>首位数字乘以 $1$ 加上次位数字乘以 $2$ ……以此类推，用所得的结果 $ \bmod 11$，所得的余数即为识别码，如果余数为 $10$，则识别码为大写字母 $X$。例如 ISBN 号码 <code>0-670-82162-4</code> 中的识别码 $4$ 是这样得到的：对 <code>067082162</code> 这 $9$ 个数字，从左至右，分别乘以 $1,2,\dots,9$ 再求和，即 $0\times 1+6\times 2+……+2\times 9=158$，然后取 $158 \bmod 11$ 的结果 $4$ 作为识别码。</p>
<p>你的任务是编写程序判断输入的 ISBN 号码中识别码是否正确，如果正确，则仅输出 <code>Right</code>；如果错误，则输出你认为是正确的 ISBN 号码。</p>
<p><strong>输入格式</strong></p>
<p>一个字符序列，表示一本书的 ISBN 号码（保证输入符合 ISBN 号码的格式要求）。</p>
<p><strong>输出格式</strong></p>
<p>一行，假如输入的 ISBN 号码的识别码正确，那么输出 <code>Right</code>，否则，按照规定的格式，输出正确的 ISBN 号码（包括分隔符 <code>-</code>）。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0</span>-<span class="number">670</span>-<span class="number">82162</span>-<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Right</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0</span>-<span class="number">670</span>-<span class="number">82162</span>-<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0</span>-<span class="number">670</span>-<span class="number">82162</span>-<span class="number">4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	a[<span class="number">0</span>] = s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">1</span>] = s[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">2</span>] = s[<span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">3</span>] = s[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">4</span>] = s[<span class="number">6</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">5</span>] = s[<span class="number">7</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">6</span>] = s[<span class="number">8</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">7</span>] = s[<span class="number">9</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">8</span>] = s[<span class="number">10</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	a[<span class="number">9</span>] = s[<span class="number">12</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//正确的识别码</span></span><br><span class="line">	r = (a[<span class="number">0</span>] + a[<span class="number">1</span>] * <span class="number">2</span> + a[<span class="number">2</span>] * <span class="number">3</span> + a[<span class="number">3</span>] * <span class="number">4</span> + a[<span class="number">4</span>] * <span class="number">5</span> + a[<span class="number">5</span>] * <span class="number">6</span> + a[<span class="number">6</span>] * <span class="number">7</span> + a[<span class="number">7</span>] * <span class="number">8</span> + a[<span class="number">8</span>] * <span class="number">9</span>) % <span class="number">11</span>;</span><br><span class="line">	<span class="comment">//输入识别码不是X的情况</span></span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">9</span>] == r &amp;&amp; s[<span class="number">12</span>] != <span class="string">&#x27;X&#x27;</span>) cout &lt;&lt; <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">9</span>] != r &amp;&amp; r != <span class="number">10</span> &amp;&amp; s[<span class="number">12</span>] != <span class="string">&#x27;X&#x27;</span>) cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; a[<span class="number">2</span>] &lt;&lt; a[<span class="number">3</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; a[<span class="number">4</span>] &lt;&lt; a[<span class="number">5</span>] &lt;&lt; a[<span class="number">6</span>] &lt;&lt; a[<span class="number">7</span>] &lt;&lt; a[<span class="number">8</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; r;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">9</span>] != r &amp;&amp; r == <span class="number">10</span> &amp;&amp; s[<span class="number">12</span>] != <span class="string">&#x27;X&#x27;</span>) cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; a[<span class="number">2</span>] &lt;&lt; a[<span class="number">3</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; a[<span class="number">4</span>] &lt;&lt; a[<span class="number">5</span>] &lt;&lt; a[<span class="number">6</span>] &lt;&lt; a[<span class="number">7</span>] &lt;&lt; a[<span class="number">8</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; <span class="string">&quot;X&quot;</span>;</span><br><span class="line">	<span class="comment">//输入识别码是X的情况</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (r == <span class="number">10</span> &amp;&amp; s[<span class="number">12</span>] == <span class="string">&#x27;X&#x27;</span>) cout &lt;&lt; <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(r != <span class="number">10</span> &amp;&amp; s[<span class="number">12</span>] == <span class="string">&#x27;X&#x27;</span>) cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; a[<span class="number">2</span>] &lt;&lt; a[<span class="number">3</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; a[<span class="number">4</span>] &lt;&lt; a[<span class="number">5</span>] &lt;&lt; a[<span class="number">6</span>] &lt;&lt; a[<span class="number">7</span>] &lt;&lt; a[<span class="number">8</span>] &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; r;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题看着好像只是数乘运算，但设计到整数和字符串在输入和输出时的处理方式。</p>
<p>例如输入的是一个字符串，验证识别码又需要使用整数乘法，而数字字符-'0’就可以转化为对应的整数。</p>
<p>最后就是对<strong>识别码是否为X</strong>要进行讨论。</p>
<hr>
<h2 id="【入门3】循环结构">【入门3】循环结构</h2>
<h3 id="P5721-数字直角三角形">P5721 数字直角三角形</h3>
<p><strong>题目描述</strong>：</p>
<p>给出 $n$，请输出一个直角边长度是 $n$ 的数字直角三角形。所有数字都是 $2$ 位组成的，如果没有 $2$ 位则加上前导 $0$。</p>
<p><strong>输入格式</strong></p>
<p>输入一个正整数 $n$。</p>
<p><strong>输出格式</strong></p>
<p>输出如题目要求的数字直角三角形。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">0102030405</span></span><br><span class="line"><span class="number">06070809</span></span><br><span class="line"><span class="number">101112</span></span><br><span class="line"><span class="number">1314</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1\le n\le13$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, a = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = i; m &gt; <span class="number">0</span>; m--)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; a;<span class="comment">//不足两位自动补0</span></span><br><span class="line">            ++a;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题需要用到for循环嵌套，要注意条件中的变量。</p>
<hr>
<h3 id="P1980-计数问题">P1980 计数问题</h3>
<p><strong>题目描述</strong></p>
<p>试计算在区间 $1$ 到 $n$ 的所有整数中，数字 $x$（$0\le x\le9$）共出现了多少次？例如，在 $1$ 到 $11$ 中，即在 $1,2,3,4,5,6,7,8,9,10,11$ 中，数字 $1$ 出现了 $4$ 次。</p>
<p><strong>输入格式</strong></p>
<p>$2$ 个整数 $n,x$，之间用一个空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>$1$ 个整数，表示 $x$ 出现的次数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 $100%$ 的数据，$1\le n\le 10^6$，$0\le x \le 9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ss &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    string s = ss.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), x + <span class="string">&#x27;0&#x27;</span>) &lt;&lt; endl;<span class="comment">//整数加字符0可转化为对应的整数字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题我一开始想的是<strong>将整数转化为字符串</strong>进行操作，但无奈不会写。</p>
<p>看了题解发现有一个答案很高级，且符合我的初心。</p>
<p>该解用到了<strong>字符串流stringstream</strong>，转化为字符串还要使用<strong>str()函数</strong>，最后使用<strong>count()函数</strong>查找特定字符的出现次数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n,i,x,b,c,t=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;<span class="comment">//输入范围与要查的数字；</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//一到n进行循环；</span></span><br><span class="line">    &#123;</span><br><span class="line">        b=i;<span class="comment">//为了不改变i的值，就把i赋值给一个数；</span></span><br><span class="line">        <span class="keyword">while</span>(b!=<span class="number">0</span>)<span class="comment">//如果b不等于0，继续循环；</span></span><br><span class="line">        &#123;</span><br><span class="line">            c=b%<span class="number">10</span>;<span class="comment">//求是否是x，是的话计数器加一；//低位</span></span><br><span class="line">            b=b/<span class="number">10</span>;<span class="comment">//求下一个数字是否为x；//高位</span></span><br><span class="line">            <span class="keyword">if</span>(c==x) t++;计数器加一；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;t&lt;&lt;endl;<span class="comment">//输出计数器的数字；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最高赞解没有使用STL函数，而是很巧妙地对每一位整数进行检查。当然这种思路很难想，不如调用库函数简单快速。</p>
<hr>
<h3 id="P2669-金币">P2669 金币</h3>
<p><strong>题目描述</strong>：</p>
<p>国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币；之后两天（第二天和第三天），每天收到两枚金币；之后三天（第四、五、六天），每天收到三枚金币；之后四天（第七、八、九、十天），每天收到四枚金币……；这种工资发放模式会一直这样延续下去：当连续 $n$ 天每天收到 $n$ 枚金币后，骑士会在之后的连续 $n+1$ 天里，每天收到 $n+1$ 枚金币。</p>
<p>请计算在前 $k$ 天里，骑士一共获得了多少金币。</p>
<p><strong>输入格式</strong></p>
<p>一个正整数 $k$，表示发放金币的天数。</p>
<p><strong>输出格式</strong></p>
<p>一个正整数，即骑士收到的金币数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">29820</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p><strong>【样例 1 说明】</strong></p>
<p>骑士第一天收到一枚金币；第二天和第三天，每天收到两枚金币；第四、五、六天，每天收到三枚金币。因此一共收到 $1+2+2+3+3+3=14$ 枚金币。</p>
<p>对于 $100%$ 的数据，$1\le k\le 10^4$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k, now = <span class="number">1</span>, stage = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + now;</span><br><span class="line">        --stage;</span><br><span class="line">        <span class="keyword">if</span> (stage == <span class="number">0</span>)<span class="comment">//关键</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++now;</span><br><span class="line">            stage = now;<span class="comment">//重置stage的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        --k;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题想了好久，还是没做出来。我一开始的思路就是：</p>
<p>循环K次，每一次循环加一次值，但问题是如何加相同的值呢，如何把某一时期的相同的值锁住呢？</p>
<p>题解中有一个答案很符合我的思路，利用好当前要加的金币数now和当前所处的阶段stage。</p>
<hr>
<h3 id="P5724-求极差-最大跨度值">P5724 求极差 / 最大跨度值</h3>
<p><strong>题目描述</strong>：</p>
<p>给出 $n$ 和 $n$ 个整数 $a_i$，求这 $n$ 个整数中的极差是什么。极差的意思是一组数中的最大值减去最小值的差。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入一个正整数 $n$，表示整数个数。</p>
<p>第二行输入 $n$ 个整数 $a_1,a_2 \dots a_n$，以空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示这 $n$ 个整数的极差。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1 \leq n\leq 100$，$0\le a_i \le 1000$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[n];<span class="comment">//动态数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    cout &lt;&lt; a[n - <span class="number">1</span>] - a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">delete</span>[] a;<span class="comment">//释放动态数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题不难，使用sort()函数排序找到最大值和最小值即可。</p>
<p>我想记录的是<strong>动态数组</strong>的定义，这样节省内存且不易读取错误。</p>
<hr>
<h3 id="P1420-最长连号">P1420 最长连号</h3>
<p><strong>题目描述</strong>：</p>
<p>输入长度为 $n$ 的一个正整数序列，要求输出序列中最长连号的长度。</p>
<p>连号指在序列中，从小到大的连续自然数。</p>
<p><strong>输入格式</strong></p>
<p>第一行，一个整数 $n$。</p>
<p>第二行，$n$ 个整数 $a_i$，之间用空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>一个数，最长连号的个数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">6</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 $100%$ 的数据，保证 $1 \leq n \leq 10^4$，$1 \leq a_i \leq 10^9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, flag = <span class="number">1</span>, max = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; a[j] + <span class="number">1</span> == a[j + <span class="number">1</span>])<span class="comment">//防止数组越界</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;<span class="comment">//重置flag</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag &gt; max)<span class="comment">//锁住最大长度</span></span><br><span class="line">        &#123;</span><br><span class="line">            max = flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; max;</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题似乎是一个动态规划问题，在上学期的算法课上见到过。</p>
<p>这里仅使用暴力解法。还是熟悉的遍历，锁住最大值。</p>
<p>要注意防止数组越界。</p>
<hr>
<h3 id="P1307-数字反转">P1307 数字反转</h3>
<p><strong>题目描述</strong>：</p>
<p>给定一个整数 $N$，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例 2）。</p>
<p><strong>输入格式</strong></p>
<p>一个整数 $N$。</p>
<p>输出格式</p>
<p>一个整数，表示反转后的新数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">321</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-380</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-83</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>$-1,000,000,000\leq N\leq 1,000,000,000 $。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">if</span> (N &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        string n = <span class="built_in">to_string</span>(N);<span class="comment">//整数——&gt;字符串</span></span><br><span class="line">        <span class="built_in">reverse</span>(n.<span class="built_in">begin</span>(), n.<span class="built_in">end</span>());<span class="comment">//逆置</span></span><br><span class="line">        <span class="type">int</span> m = <span class="built_in">stoi</span>(n);<span class="comment">//字符串——&gt;整数</span></span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        string n = <span class="built_in">to_string</span>(N).<span class="built_in">substr</span>(<span class="number">1</span>);<span class="comment">//去掉负号</span></span><br><span class="line">        <span class="built_in">reverse</span>(n.<span class="built_in">begin</span>(), n.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> m = <span class="built_in">stoi</span>(n);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题比较简单，将输入的整数转换为字符串，再对字符串进行逆置，最后再转换回整数，顺便去除了首位的0。</p>
<p>需要注意的是当输入的数为负数时，转换为字符串后，要先将负号去掉才能正常地转换回整数。</p>
<hr>
<h3 id="P4956-北极旅行52周存钱">P4956 北极旅行52周存钱</h3>
<p><strong>题目描述</strong>：</p>
<p>在征服南极之后，Davor 开始了一项新的挑战。下一步是在西伯利亚、格林兰、挪威的北极圈远征。他将在 $2018$ 年 $12$ 月 $31$ 日开始出发，在这之前需要一共筹集 $n$ 元钱。他打算在每个星期一筹集 $x$ 元，星期二筹集 $x+k$ 元，……，星期日筹集 $x+6k$ 元，并连续筹集 $52$ 个星期。其中 $x,k$ 为正整数，并且满足 $1 \le x \le 100$。</p>
<p>现在请你帮忙计算 $x,k$ 为多少时，能刚好筹集 $n$ 元。</p>
<p>如果有多个答案，输出 $x$ 尽可能大，$k$ 尽可能小的。注意 $k$ 必须大于 $0$。</p>
<p><strong>输入格式</strong></p>
<p>The first line of input contains the integer N (1456 ≤ N ≤ 145600), the number from the task.</p>
<p><strong>输出格式</strong></p>
<p>The first line of output must contain the value of X (0 &lt; X ≤ 100 ), and the second the value of<br>
K (K &gt; 0 ).</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1456</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">6188</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">40404</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">99</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x, k, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &gt; <span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">101</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">364</span> * j + <span class="number">1092</span> * i;</span><br><span class="line">            <span class="keyword">if</span> (sum == n)</span><br><span class="line">            &#123;</span><br><span class="line">                x = j;</span><br><span class="line">                k = i;</span><br><span class="line">                cout &lt;&lt; x &lt;&lt; endl &lt;&lt; k;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题看上去不简单，但还是蛮好做的。</p>
<p>题目明确规定52周恰好存到n元钱，那就意味着：52周的存钱总量的表达式可以固定下来。</p>
<p>最关键的一点是<code>如果有多个答案，输出 x 尽可能大，k 尽可能小的</code>,那就外部循环为k从1开始，内部循环为x从1到100遍历。当找到答案是就结束程序，此时的k一定是最小的。</p>
<hr>
<h3 id="P1089-津津的储蓄计划">P1089 津津的储蓄计划</h3>
<p><strong>题目描述</strong>：</p>
<p>津津的零花钱一直都是自己管理。每个月的月初妈妈给津津 $300$ 元钱，津津会预算这个月的花销，并且总能做到实际花销和预算的相同。</p>
<p>为了让津津学习如何储蓄，妈妈提出，津津可以随时把整百的钱存在她那里，到了年末她会加上 $20%$ 还给津津。因此津津制定了一个储蓄计划：每个月的月初，在得到妈妈给的零花钱后，如果她预计到这个月的月末手中还会有多于 $100$ 元或恰好 $100$ 元，她就会把整百的钱存在妈妈那里，剩余的钱留在自己手中。</p>
<p>例如 $11$月初津津手中还有 $83$ 元，妈妈给了津津 $300$ 元。津津预计$11$月的花销是 $180$ 元，那么她就会在妈妈那里存 $200$ 元，自己留下 $183$ 元。到了 $11$ 月月末，津津手中会剩下 $3$ 元钱。</p>
<p>津津发现这个储蓄计划的主要风险是，存在妈妈那里的钱在年末之前不能取出。有可能在某个月的月初，津津手中的钱加上这个月妈妈给的钱，不够这个月的原定预算。如果出现这种情况，津津将不得不在这个月省吃俭用，压缩预算。</p>
<p>现在请你根据 $2004$ 年 $1$ 月到 $12$ 月每个月津津的预算，判断会不会出现这种情况。如果不会，计算到 $2004$ 年年末，妈妈将津津平常存的钱加上 $20%$ 还给津津之后，津津手中会有多少钱。</p>
<p><strong>输入格式</strong></p>
<p>$12$ 行数据，每行包含一个小于 $350$ 的非负整数，分别表示 $1$ 月到 $12$ 月津津的预算。</p>
<p><strong>输出格式</strong></p>
<p>一个整数。如果储蓄计划实施过程中出现某个月钱不够用的情况，输出 $-X$，$X$ 表示出现这种情况的第一个月；否则输出到 $2004$ 年年末津津手中会有多少钱。</p>
<p>注意，洛谷不需要进行文件输入输出，而是标准输入输出。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">290</span></span><br><span class="line"><span class="number">230</span></span><br><span class="line"><span class="number">280</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">300</span></span><br><span class="line"><span class="number">170</span></span><br><span class="line"><span class="number">340</span></span><br><span class="line"><span class="symbol">50 </span></span><br><span class="line"><span class="symbol">90 </span></span><br><span class="line"><span class="symbol">80 </span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">60</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-7</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">290 </span></span><br><span class="line"><span class="symbol">230 </span></span><br><span class="line"><span class="symbol">280 </span></span><br><span class="line"><span class="symbol">200 </span></span><br><span class="line"><span class="symbol">300 </span></span><br><span class="line"><span class="symbol">170 </span></span><br><span class="line"><span class="symbol">330 </span></span><br><span class="line"><span class="symbol">50 </span></span><br><span class="line"><span class="symbol">90 </span></span><br><span class="line"><span class="symbol">80 </span></span><br><span class="line"><span class="symbol">200 </span></span><br><span class="line"><span class="number">60</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1580</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">12</span>], b[<span class="number">12</span>];</span><br><span class="line">    <span class="type">int</span> leave = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)<span class="comment">//每个月的预算</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++)<span class="comment">//判断每个月的钱是否够用</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">300</span> + leave - a[j]) &gt;=  <span class="number">0</span>)<span class="comment">//钱够用</span></span><br><span class="line">        &#123;</span><br><span class="line">            b[j] = ((<span class="number">300</span> + leave - a[j]) / <span class="number">100</span>) * <span class="number">100</span>;<span class="comment">//如果余下的钱大于等于100就能存钱，否则写入0</span></span><br><span class="line">            leave = leave + <span class="number">300</span> - a[j] - b[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//钱不够用</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; ++j;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">12</span>; k++)<span class="comment">//将存到妈妈那里的钱加起来</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + b[k];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum * <span class="number">1.2</span> + leave;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题的题干很长，但依然不难。</p>
<p>需要注意的是：最后的总钱数=妈妈存的*1.2 + 津津剩余的</p>
<hr>
<h3 id="P1009-阶乘之和">P1009 阶乘之和</h3>
<p><strong>题目描述</strong>：</p>
<p>用高精度计算出 $S = 1! + 2! + 3! + \cdots + n!$（$n \le 50$）。</p>
<p>其中 <code>!</code> 表示阶乘，定义为 $n!=n\times (n-1)\times (n-2)\times \cdots \times 1$。例如，$5! = 5 \times 4 \times 3 \times 2 \times 1=120$。</p>
<p><strong>输入格式</strong></p>
<p>一个正整数 $n$。</p>
<p><strong>输出格式</strong></p>
<p>一个正整数 $S$，表示计算结果。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p><strong>【数据范围】</strong></p>
<p>对于 $100 %$ 的数据，$1 \le n \le 50$。</p>
<p><strong>【其他说明】</strong></p>
<p>注，《深入浅出基础篇》中使用本题作为例题，但是其数据范围只有 $n \le 20$，使用书中的代码无法通过本题。</p>
<p>如果希望通过本题，请继续学习<strong>高精度</strong>的知识。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> n, S = <span class="number">0</span> ,q = <span class="number">1</span>, t = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i+<span class="number">1</span>; j++)<span class="comment">//计算每一次的阶乘</span></span><br><span class="line">        &#123;</span><br><span class="line">                q = q * j;</span><br><span class="line">        &#125;</span><br><span class="line">        S = S + q;</span><br><span class="line">        q = <span class="number">1</span>;<span class="comment">//重置q为1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; S;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我自己写的答案只能处理1到20的阶乘和，再往上就需要高精度计算了，但是我目前还不会。。。</p>
<p>等学了再写。</p>
<hr>
<h3 id="P5723-质数口袋">P5723 质数口袋</h3>
<p><strong>题目描述</strong>：</p>
<p>小 A 有一个质数口袋，里面可以装各个质数。他从 $2$ 开始，依次判断各个自然数是不是质数，如果是质数就会把这个数字装入口袋。</p>
<p>口袋的负载量就是口袋里的所有数字之和。</p>
<p>但是口袋的承重量有限，装的质数的和不能超过 $L$。给出 $L$，请问口袋里能装下几个质数？将这些质数从小往大输出，然后输出最多能装下的质数的个数，数字之间用换行隔开。</p>
<p><strong>输入格式</strong></p>
<p>一行一个正整数 $L$。</p>
<p><strong>输出格式</strong></p>
<p>将这些质数从小往大输出，然后输出最多能装下的质数个数，所有数字之间有一空行。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">11</span><br><span class="line">13</span><br><span class="line">17</span><br><span class="line">19</span><br><span class="line">23</span><br><span class="line">9</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1 \le L \le {10}^5$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//判断是否为质数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> L, sum = <span class="number">0</span>, num = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100007</span>];</span><br><span class="line">    cin &gt;&gt; L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100001</span>; i++)<span class="comment">//挨个判断是否为质数并存储</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            a[num] = i;</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; num; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + a[j];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt;= L)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[j] &lt;&lt; endl;</span><br><span class="line">            ++flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; flag;       </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>啊，越来越觉得这些算法题本质上都是数学题了。</p>
<p>该题明确说明和L最大仅为5位数，即可以暴力求解。</p>
<p>先把从1到100000的所有的质数都找出来存放到数组中，然后依次加和并与L进行比较。</p>
<p><strong>判断质数</strong>的方法：对于一个正整数 n，如果它能被 <strong>2</strong> 到 <strong>根号n</strong> 之间的某个整数整除，则说明它不是质数，否则它就是质数。</p>
<hr>
<h3 id="P1075-质因数分解">P1075 质因数分解</h3>
<p><strong>题目描述</strong>：</p>
<p><strong>已知正整数 $n$ 是两个不同的质数的乘积</strong>，试求出两者中较大的那个质数。</p>
<p><strong>输入格式</strong></p>
<p>输入一个正整数 $n$。</p>
<p><strong>输出格式</strong></p>
<p>输出一个正整数 $p$，即较大的那个质数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>$1 \le n\le 2\times 10^9$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="built_in">sqrt</span>(n); i++)<span class="comment">//从2开始寻找</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; n / i;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题想了一会儿没有很好的思路，索性直接看了题解。</p>
<p>质因数分解，就是把一个合数看做几个质数相乘的积。如，2424的质因数分解为2∗2∗2∗3=24。</p>
<p>而题干明确说明输入的整数n一定是两个不同质数的乘积。</p>
<p>再如：</p>
<p><em>c</em>=20</p>
<p>1∗20=20</p>
<p>2∗10=20</p>
<p>4∗5=20</p>
<p>5∗4=20</p>
<p>10∗2=20</p>
<p>20∗1=20</p>
<p>所以，不用依次寻找和比较哪个质因数更大。</p>
<p>由此分析，只要找到最小的质因数i，那么答案就是n/i。（找到后直接退出即可）</p>
<hr>
<h2 id="【入门4】数组">【入门4】数组</h2>
<h3 id="P5728-旗鼓相当的对手">P5728 旗鼓相当的对手</h3>
<p><strong>题目描述</strong>：</p>
<p>现有 $N$ 名同学参加了期末考试，并且获得了每名同学的信息：语文、数学、英语成绩（均为不超过 $150$ 的自然数）。如果某对学生 $\lang i,j\rang$ 的每一科成绩的分差都不大于 $5$，且总分分差不大于 $10$，那么这对学生就是“旗鼓相当的对手”。现在想知道这些同学中，有几对“旗鼓相当的对手”？同样一个人可能会和其他好几名同学结对。</p>
<p><strong>输入格式</strong></p>
<p>第一行一个正整数 $N$。</p>
<p>接下来 $N$ 行，每行三个整数，其中第 $i$ 行表示第 $i$ 名同学的语文、数学、英语成绩。最先读入的同学编号为 $1$。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示“旗鼓相当的对手”的对数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">90 </span><span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="symbol">85 </span><span class="number">95</span> <span class="number">90</span></span><br><span class="line"><span class="symbol">80 </span><span class="number">100</span> <span class="number">91</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$2 \le N\le 1000$ 且每科成绩为不超过 $150$ 的自然数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">1000</span>][<span class="number">3</span>],sum[<span class="number">1000</span>];<span class="comment">//用二维数组存储每位同学的语数英成绩</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i][<span class="number">0</span>] &gt;&gt; a[i][<span class="number">1</span>] &gt;&gt; a[i][<span class="number">2</span>];<span class="comment">//输入每位同学的语数英成绩</span></span><br><span class="line">        sum[i] = a[i][<span class="number">0</span>] + a[i][<span class="number">1</span>] + a[i][<span class="number">2</span>];<span class="comment">//计算总分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">//依次比较</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = j + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k; k &lt;= n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(a[j][<span class="number">0</span>] - a[k][<span class="number">0</span>]) &lt;= <span class="number">5</span> &amp;&amp;</span><br><span class="line">                <span class="built_in">abs</span>(a[j][<span class="number">1</span>] - a[k][<span class="number">1</span>]) &lt;= <span class="number">5</span> &amp;&amp;</span><br><span class="line">                <span class="built_in">abs</span>(a[j][<span class="number">2</span>] - a[k][<span class="number">2</span>]) &lt;= <span class="number">5</span> &amp;&amp;</span><br><span class="line">                <span class="built_in">abs</span>(sum[j] - sum[k]) &lt;= <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; flag;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题一开始我只想到了一维数组，但不知道怎么计算每位同学单科成绩的分差。看了题解才想起有二维数组这个东西。</p>
<p>那么就很简单了，二维数组的每一行即为该同学的语数英成绩。</p>
<p>比较的时候使用二重循环从第一行开始遍历。</p>
<p>注：abs()是计算绝对值的函数。</p>
<hr>
<h3 id="P5732-杨辉三角">P5732 杨辉三角</h3>
<p><strong>题目描述</strong>：</p>
<p>给出 $n(1\le n\le20)$，输出杨辉三角的前 $n$ 行。</p>
<p>如果你不知道什么是杨辉三角，可以观察样例找找规律。</p>
<p><strong>输入格式</strong></p>
<p><strong>输出格式</strong></p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">10</span> <span class="number">10</span> <span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//写入所有“1”</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        a[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j] = a[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i - <span class="number">1</span>][j];<span class="comment">//核心公式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//依次输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嗯，又是一个二维数组，二重for循环。</p>
<hr>
<h3 id="P1554-梦中的统计">P1554 梦中的统计</h3>
<p><strong>题目背景</strong></p>
<p>Bessie 处于半梦半醒的状态。过了一会儿，她意识到她在数数，不能入睡。</p>
<p><strong>题目描述</strong>：</p>
<p>Bessie 的大脑反应灵敏，仿佛真实地看到了她数过的一个又一个数。她开始注意每一个数码（$0 \ldots 9$）：每一个数码在计数的过程中出现过多少次？</p>
<p>给出两个整数 $M$ 和 $N$，求在序列 $[M, M + 1, M + 2, \ldots, N - 1, N]$ 中每一个数码出现了多少次。</p>
<p><strong>输入格式</strong></p>
<p>第 $1$ 行: 两个用空格分开的整数 $M$ 和 $N$。</p>
<p><strong>输出格式</strong></p>
<p>第 $1$ 行: 十个用空格分开的整数，分别表示数码 $0 \ldots 9$ 在序列中出现的次数。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">129 </span><span class="number">137</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">10</span> <span class="number">2</span> <span class="number">9</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1 \leq M \leq N \leq 2 \times 10^9$，$N-M \leq 5 \times 10^5$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> M, N;</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    stringstream ss;<span class="comment">//字符串流对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = M; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ss &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    string s = ss.<span class="built_in">str</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), i + <span class="string">&#x27;0&#x27;</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//数某个数字出现过的次数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像这种<strong>匹配数字出现次数</strong>的题，我的第一反应就是使用字符串流stringstream，果然简单又高效。</p>
<hr>
<h3 id="P1319-压缩技术">P1319 压缩技术</h3>
<p><strong>题目描述</strong>：</p>
<p>设某汉字由 $N \times N$ 的 $\texttt 0$ 和 $\texttt 1$ 的点阵图案组成。</p>
<p>我们依照以下规则生成压缩码。连续一组数值：从汉字点阵图案的第一行第一个符号开始计算，按书写顺序从左到右，由上至下。第一个数表示连续有几个 $\texttt 0$，第二个数表示接下来连续有几个 $\texttt 1$，第三个数再接下来连续有几个 $\texttt 0$，第四个数接着连续几个 $\texttt 1$，以此类推……</p>
<p>例如: 以下汉字点阵图案：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001111</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">1111111</span></span><br></pre></td></tr></table></figure>
<p>对应的压缩码是： $\texttt {7 3 1 6 1 6 4 3 1 6 1 6 1 3 7}$ （第一个数是 $N$ ,其余各位表示交替表示0和1 的个数，压缩码保证 $N \times N=$ 交替的各位数之和）</p>
<p><strong>输入格式</strong></p>
<p>数据输入一行，由空格隔开的若干个整数，表示压缩码。</p>
<p>其中，压缩码的第一个数字就是 $N$，表示这个点阵应当是 $N\times N$ 的大小。</p>
<p>接下来的若干个数字，含义如题目描述所述。</p>
<p><strong>输出格式</strong></p>
<p>输出一个 $N\times N$ 的 01 矩阵，表示最后的汉字点阵图（点阵符号之间不留空格）。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">1</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001111</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">0001000</span></span><br><span class="line"><span class="number">1111111</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p><strong>样例解释</strong></p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rsx9qytk.png" alt=""></p>
<p><strong>数据范围</strong></p>
<p>数据保证，$3\leq N\leq 200$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,now;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="type">int</span> flag = N * N;<span class="comment">//用来计数</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; now;<span class="comment">//输入当前要输入t的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; now; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; t;</span><br><span class="line">            --flag;<span class="comment">//每输出一个数字，flag减一</span></span><br><span class="line">            <span class="keyword">if</span> (flag % N == <span class="number">0</span>) cout &lt;&lt; endl;<span class="comment">//每行达到N个数字时，换行。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) t = <span class="number">1</span>;<span class="comment">//0、1切换</span></span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题让输出一个压缩矩阵，能够想到每次循环只输出一个数字，题就瞬间简单很多了。</p>
<hr>
<h3 id="P1614-爱与愁的心痛">P1614 爱与愁的心痛</h3>
<p><strong>题目描述</strong>：</p>
<p>最近有 $n$ 个不爽的事，每句话都有一个正整数刺痛值（心理承受力极差）。爱与愁大神想知道连续 $m$ 个刺痛值的和的最小值是多少，但是由于业务繁忙，爱与愁大神只好请你编个程序告诉他。</p>
<p><strong>输入格式</strong></p>
<p>第一行有两个用空格隔开的整数，分别代表 $n$ 和 $m$。</p>
<p>第 $2$ 到第 $(n + 1)$ 行，每行一个整数，第 $(i + 1)$ 行的整数 $a_i$ 代表第 $i$ 件事的刺痛值 $a_i$。</p>
<p><strong>输出格式</strong></p>
<p>输出一行一个整数，表示连续 $m$ 个刺痛值的和的最小值是多少。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<ul>
<li>对于 $30%$ 的数据，保证 $n \leq 20$。</li>
<li>对于 $60%$ 的数据，保证 $n \leq 100$。</li>
<li>对于 $90%$ 的数据，保证 $n \leq 10^3$。</li>
<li>对于 $100%$ 的数据，保证 $0 \leq m \leq n \leq 3 \times 10^3$，$1 \leq a_i \leq 100$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[n];<span class="comment">//存放输入的正整数</span></span><br><span class="line">    <span class="type">int</span>* b = <span class="keyword">new</span> <span class="type">int</span>[n - m + <span class="number">1</span>];<span class="comment">//存放连续三个正整数的和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//输入n个正整数刺痛值</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - m + <span class="number">1</span>; i++)<span class="comment">//从第一个整数开始连续数3个</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)<span class="comment">//防止i+j越界</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum = sum + a[i + j];</span><br><span class="line">        &#125;</span><br><span class="line">        b[i] = sum;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b, b + (n - m + <span class="number">1</span>));</span><br><span class="line">    cout &lt;&lt; b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">delete</span>[] a; <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题还是熟悉的从一行开始连续数几个值，求和求最小值。需要用到二重for循环。</p>
<p>最关键的是数组b的大小要设置为n-m+1。</p>
<hr>
<h2 id="【入门5】字符串">【入门5】字符串</h2>
<h3 id="P5733-字母大小写转换">P5733 字母大小写转换</h3>
<p><strong>题目描述</strong>：</p>
<p>大家都知道一些办公软件有自动将字母转换为大写的功能。输入一个长度不超过 $100$ 且不包括空格的字符串。要求将该字符串中的所有小写字母变成大写字母并输出。</p>
<p><strong>输入格式</strong></p>
<p>输入一行，一个字符串。</p>
<p><strong>输出格式</strong></p>
<p>输出一个字符串，即将原字符串中的所有小写字母转化为大写字母。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">Luogu4!</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">LUOGU4!</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string s; </span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s[i] = <span class="built_in">toupper</span>(s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题将小写字母转换为大写字母，我直接调用了toupper函数。</p>
<p>此外，字符串在计算机中是以字符数组的形式来储存，所以可以使用数组。</p>
<h3 id="toupper函数原型（小写字母转大写字母）">toupper函数原型（小写字母转大写字母）</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">toupper</span><span class="params">(<span class="type">int</span> c)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> ((c &gt;= <span class="string">&#x27;a&#x27;</span>) &amp;&amp; (c &lt;= <span class="string">&#x27;z&#x27;</span>))  </span><br><span class="line">        <span class="keyword">return</span> c + (<span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span>);  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="tolower函数原型（大写字母转小写字母）">tolower函数原型（大写字母转小写字母）</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tolower</span><span class="params">(<span class="type">int</span> c)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> ((c &gt;= <span class="string">&#x27;A&#x27;</span>) &amp;&amp; (c &lt;= <span class="string">&#x27;Z&#x27;</span>))  </span><br><span class="line">        <span class="keyword">return</span> c + (<span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>);  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它们有一个优点:只会修改英文字母。</p>
<p>注意,这两个函数只能一次修改一个字符。</p>
<hr>
<h3 id="P1914-小书童——凯撒密码">P1914 小书童——凯撒密码</h3>
<p><strong>题目背景</strong></p>
<p>某蒟蒻迷上了 “小书童”，有一天登陆时忘记密码了（他没绑定邮箱 or 手机），于是便把问题抛给了神犇你。</p>
<p><strong>题目描述</strong>：</p>
<p>蒟蒻虽然忘记密码，但他还记得密码是由一个字符串组成。密码是由原文字符串（由不超过 50 个小写字母组成）中每个字母向后移动 $n$ 位形成的。<code>z</code> 的下一个字母是 <code>a</code>，如此循环。他现在找到了移动前的原文字符串及 $n$，请你求出密码。</p>
<p><strong>输入格式</strong></p>
<p>第一行：$n$。第二行：未移动前的一串字母。</p>
<p><strong>输出格式</strong></p>
<p>一行，是此蒟蒻的密码。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">qwe</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rxf</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>字符串长度 $\le 50$，$1 \leq n \leq 26$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 计算移动后的字符</span></span><br><span class="line">		s[i] = <span class="string">&#x27;a&#x27;</span> + (s[i] - <span class="string">&#x27;a&#x27;</span> + n) % <span class="number">26</span>;<span class="comment">//核心</span></span><br><span class="line">		cout &lt;&lt; s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(s[i] - ‘a’)是s[i]相对于’a’的的偏移量，在此基础上进行移位。</p>
<p>最后取模26保证偏移值始终在0-25。</p>
<hr>
<h3 id="P3741-小果的键盘">P3741 小果的键盘</h3>
<p><strong>题目背景</strong></p>
<p>小果有一个只有两个键的键盘。</p>
<p><strong>题目描述</strong>：</p>
<p>一天，她打出了一个只有这两个字符的字符串。当这个字符串里含有 <code>VK</code> 这个字符串的时候，小果就特别喜欢这个字符串。所以，她想改变至多一个字符（或者不做任何改变）来最大化这个字符串内 <code>VK</code> 出现的次数。给出原来的字符串，请计算她最多能使这个字符串内出现多少次 <code>VK</code>（只有当 <code>V</code> 和 <code>K</code> 正好相邻时，我们认为出现了 <code>VK</code>。）</p>
<p><strong>输入格式</strong></p>
<p>第一行给出一个数字 $n$，代表字符串的长度。</p>
<p>第二行给出一个字符串 $s$。</p>
<p><strong>输出格式</strong></p>
<p>第一行输出一个整数代表所求答案。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">VK</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">VV</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #2</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">V</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #3</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #4</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line">VKKKKKKKKKVVVVVVVVVK</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #4</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>样例输入 #5</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">KVKV</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #5</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 $100%$ 的数据，$1\le n\le 100$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,cnt = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;	<span class="comment">//逐对查找VK，cnt加一，将VK变为XX</span></span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;V&#x27;</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>&amp;&amp; i + <span class="number">1</span> &lt; n)<span class="comment">//注意数组不要越界</span></span><br><span class="line">		&#123;</span><br><span class="line">			++cnt;</span><br><span class="line">			s[i] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">			s[i + <span class="number">1</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;	<span class="comment">//第二次逐对查找VV或KK，找到一个cnt立即加一并输出，终止程序</span></span><br><span class="line">		<span class="keyword">if</span> ((s[i] == <span class="string">&#x27;V&#x27;</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">&#x27;V&#x27;</span>) || (s[i] == <span class="string">&#x27;K&#x27;</span> &amp;&amp; s[i + <span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			++cnt;</span><br><span class="line">			cout &lt;&lt; cnt;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; cnt;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无非就是VK、KV、VV、KK四种情况，抛去KV不可用，分别讨论即可。</p>
<hr>
<h2 id="【入门6】函数与结构体">【入门6】函数与结构体</h2>
<h3 id="P5739-计算阶乘">P5739 计算阶乘</h3>
<p><strong>题目描述</strong>：</p>
<p>求 $n!$，也就是 $1\times2\times3\dots\times n$。</p>
<p>挑战：尝试**不使用循环语句（for、while）**完成这个任务。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入一个正整数 $n$。</p>
<p><strong>输出格式</strong></p>
<p>输出一个正整数，表示 $n!$。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1 \leq n\le12$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//递归函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//递归的最后一步</span></span><br><span class="line">	<span class="keyword">return</span> x * <span class="built_in">func</span>(x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">func</span>(n);<span class="comment">//递归</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于该题要求尽量避免使用循环语句，所以使用<strong>递归算法</strong>。</p>
<p>也算是第一次敲递归函数，hhh挺有纪念意义的。</p>
<hr>
<h3 id="P1304-哥德巴赫猜想">P1304 哥德巴赫猜想</h3>
<p><strong>题目描述</strong></p>
<p>输入一个偶数 $N$，验证 $4\sim N$ 所有偶数是否符合哥德巴赫猜想：任一大于 $2$ 的偶数都可写成两个质数之和。如果一个数不止一种分法，则输出第一个加数相比其他分法最小的方案。例如 $10$，$10=3+7=5+5$，则 $10=5+5$ 是错误答案。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入一个正偶数 $N$</p>
<p><strong>输出格式</strong></p>
<p>输出 $\dfrac{N-2}{2}$ 行。对于第 $i$ 行：</p>
<p>首先先输出正偶数 $2i+2$，然后输出等号，再输出加和为 $2i+2$ 且第一个加数最小的两个质数，以加号隔开。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">4</span>=<span class="number">2</span>+<span class="number">2</span></span><br><span class="line"><span class="attribute">6</span>=<span class="number">3</span>+<span class="number">3</span></span><br><span class="line"><span class="attribute">8</span>=<span class="number">3</span>+<span class="number">5</span></span><br><span class="line"><span class="attribute">10</span>=<span class="number">3</span>+<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$ 4 \leq N\leq10000$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 判断是否为质数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin &gt;&gt; N; <span class="comment">// 输入正偶数 N</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历从 4 到 N 的所有偶数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">4</span>; m &lt;= N; m += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历所有可能的质数对</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m / <span class="number">2</span>; i++)<span class="comment">//核心</span></span><br><span class="line">        &#123;   <span class="comment">//i从小到大</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i) &amp;&amp; <span class="built_in">isPrime</span>(m - i)) <span class="comment">// 检查 i 和 m-i 是否都是质数</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; m &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; m - i &lt;&lt; endl; <span class="comment">// 输出结果</span></span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到第一个满足条件的质数对后退出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题问了AI，它真的好强。。。</p>
<p><strong>for (int i = 2; i &lt;= m / 2; i++)<strong>中的</strong>i &lt;= m / 2</strong>是因为前面的质数要小于等于后面的质数，如i &lt;= m - i 。</p>
<hr>
<h3 id="P5744-培训">P5744 培训</h3>
<p><strong>题目描述</strong>：</p>
<p>某培训机构的学员有如下信息：</p>
<ul>
<li>姓名（字符串）</li>
<li>年龄（周岁，整数）</li>
<li>去年 NOIP 成绩（整数，且保证是 $5$ 的倍数）</li>
</ul>
<p>经过为期一年的培训，所有同学的成绩都有所提高，提升了 $20%$（当然 NOIP 满分是 $600$ 分，不能超过这个得分）。</p>
<p>输入学员信息，请设计一个结构体储存这些学生信息，并设计一个函数模拟培训过程，其参数是这样的结构体类型，返回同样的结构体类型，并输出学员信息。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入一个正整数 $n$，表示学员个数。</p>
<p>第二行开始往下 $n$ 行。每行首先是一个字符串表示学员姓名，再是一个整数表示学员年龄，再是一个整数为去年 NOIP 成绩。</p>
<p><strong>输出格式</strong></p>
<p>输出 $n$ 行，每行首先输出一个字符串表示学生姓名，再往后两个整数，表示经过一年的培训后学员的年龄和他们今年的 NOIP 成绩。以空格隔开。</p>
<p><strong>样例输入 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">3</span></span><br><span class="line"><span class="attribute">kkksc03</span> <span class="number">24</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">chen_zhe</span> <span class="number">14</span> <span class="number">400</span></span><br><span class="line"><span class="attribute">nzhtl1477</span> <span class="number">18</span> <span class="number">590</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kkksc03</span> <span class="number">25</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">chen_zhe</span> <span class="number">15</span> <span class="number">480</span></span><br><span class="line"><span class="attribute">nzhtl1477</span> <span class="number">19</span> <span class="number">600</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数据保证，$1 \leq n \leq 5$。年龄为 $0 \sim 100$（含 $0$ 与 $100$）的整数。成绩为 $0 \sim 600$（含 $0$ 与 $600$）的 $5$ 的整倍数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span><span class="comment">//结构体定义</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> grade;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Student <span class="title">Training</span><span class="params">(Student s)</span><span class="comment">//模拟函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.age += <span class="number">1</span>;</span><br><span class="line">    s.grade = <span class="built_in">min</span>(<span class="number">600</span>,s.grade + s.grade * <span class="number">20</span> / <span class="number">100</span>);<span class="comment">//注意括号内的数据类型要一致，都为整数</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    Student* stu = <span class="keyword">new</span> Student[n];<span class="comment">//动态分配内存 结构体数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//输入n个学生的信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; stu[i].name &gt;&gt; stu[i].age &gt;&gt; stu[i].grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        stu[i] = <span class="built_in">Training</span>(stu[i]);</span><br><span class="line">        cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].grade &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题要使用结构体，也算是第一次真正敲代码。</p>
<hr>
<h2 id="【算法1-3】暴力枚举">【算法1-3】暴力枚举</h2>
<h3 id="P1706-全排列问题">P1706 全排列问题</h3>
<p><strong>题目描述</strong></p>
<p>按照字典序输出自然数 $1$ 到 $n$ 所有不重复的排列，即 $n$ 的全排列，要求所产生的任一数字序列中不允许出现重复的数字。</p>
<p><strong>输入格式</strong></p>
<p>一个整数 $n$。</p>
<p><strong>输出格式</strong></p>
<p>由 $1 \sim n$ 组成的所有不重复的数字序列，每行一个序列。</p>
<p>每个数字保留 $5$ 个场宽。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>   <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span>   <span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span>   <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span>   <span class="number">3</span>    <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span>   <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span>   <span class="number">2</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p>$1 \leq n \leq 9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>], n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全排列问题，使用next_permutation()函数。</p>
<p><code>next_permutation</code> 的作用是：</p>
<ul>
<li>将序列更改为字典序中的<strong>下一个排列</strong>。</li>
<li>如果当前序列已经是字典序中的最后一个排列，则将其重置为第一个排列，并返回 <code>false</code>。</li>
</ul>
<p>注意场宽为5使用setw()函数。</p>
<hr>
<h2 id="【算法1-4】递推与递归">【算法1-4】递推与递归</h2>
<h3 id="P1255-数楼梯">P1255 数楼梯</h3>
<p><strong>题目描述</strong></p>
<p>楼梯有 $N$ 阶，上楼可以一步上一阶，也可以一步上二阶。</p>
<p>编一个程序，计算共有多少种不同的走法。</p>
<p><strong>输入格式</strong></p>
<p>一个数字，楼梯数。</p>
<p><strong>输出格式</strong></p>
<p>输出走的方式总数。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<ul>
<li>对于 $60%$ 的数据，$N \leq 50$；</li>
<li>对于 $100%$ 的数据，$1 \le N \leq 5000$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">27</span>],n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//初始条件</span></span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];<span class="comment">//递推公式</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还不会高精度，这里只可以测试20以内的数。</p>
<p>主要是为了学习递推的思想。</p>
<hr>
<h2 id="【算法1-5】贪心">【算法1-5】贪心</h2>
<h3 id="P2240-部分背包问题">P2240 部分背包问题</h3>
<p><strong>题目描述</strong></p>
<p>阿里巴巴走进了装满宝藏的藏宝洞。藏宝洞里面有 $N(N \le 100)$ 堆金币，第 $i$ 堆金币的总重量和总价值分别是 $m_i,v_i(1\le m_i,v_i \le 100)$。阿里巴巴有一个承重量为 $T(T \le 1000)$ 的背包，但并不一定有办法将全部的金币都装进去。他想装走尽可能多价值的金币。所有金币都可以随意分割，分割完的金币重量价值比（也就是单位价格）不变。请问阿里巴巴最多可以拿走多少价值的金币？</p>
<p><strong>输入格式</strong></p>
<p>第一行两个整数 $N,T$。</p>
<p>接下来 $N$ 行，每行两个整数 $m_i,v_i$。</p>
<p><strong>输出格式</strong></p>
<p>一个实数表示答案，输出两位小数</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">50</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">60</span></span><br><span class="line"><span class="symbol">20 </span><span class="number">100</span></span><br><span class="line"><span class="symbol">30 </span><span class="number">120</span></span><br><span class="line"><span class="symbol">15 </span><span class="number">45</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">240</span>.<span class="number">00</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">coin</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, v;<span class="comment">//金币堆的重量和价值</span></span><br><span class="line">&#125;a[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(coin x, coin y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.v * y.m &gt; y.v * x.m;<span class="comment">//判断单价，避免浮点数运算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N, T, i;</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        cin &gt;&gt; a[i].m &gt;&gt; a[i].v;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + N, cmp);<span class="comment">//对单价排序</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].m &gt; T) <span class="keyword">break</span>;</span><br><span class="line">        T -= a[i].m;<span class="comment">//背包的剩余重量</span></span><br><span class="line">        ans += a[i].v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; N) ans += <span class="number">1.0</span> * T / a[i].m * a[i].v;<span class="comment">//剩余空间装下部分金币（切割）</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt; fixed &lt;&lt;ans;<span class="comment">//保证答案是两位小数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用贪心算法，优先放入单位重量价值更高的金币，放不下时再切割当前价值最大的金币放入背包。</p>
<p>自定义<strong>cmp函数</strong>：</p>
<ul>
<li>如果 <code>x.v * y.m &gt; y.v * x.m</code>，说明堆 <code>x</code> 的单位价值高于堆 <code>y</code> 的单位价值。</li>
<li>因此，<code>cmp</code> 函数会返回 <code>true</code>，表示堆 <code>x</code> 应该排在堆 <code>y</code> 的前面。</li>
</ul>
<p>要注意<strong>变量i</strong>的使用，<code>i</code> 的值决定了当前正在处理哪一堆金币。</p>
<hr>
<h2 id="【算法1-6】二分查找与二分答案">【算法1-6】二分查找与二分答案</h2>
<h3 id="P2249-二分查找">P2249 二分查找</h3>
<p><strong>题目描述</strong></p>
<p>输入 $n$ 个不超过 $10^9$ 的单调不减的（就是后面的数字不小于前面的数字）非负整数 $a_1,a_2,\dots,a_{n}$，然后进行 $m$ 次询问。对于每次询问，给出一个整数 $q$，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 $-1$ 。</p>
<p><strong>输入格式</strong></p>
<p>第一行 $2$ 个整数 $n$ 和 $m$，表示数字个数和询问次数。</p>
<p>第二行 $n$ 个整数，表示这些待查询的数字。</p>
<p>第三行 $m$ 个整数，表示询问这些数字的编号，从 $1$ 开始编号。</p>
<p><strong>输出格式</strong></p>
<p>输出一行，$m$ 个整数，以空格隔开，表示答案。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">11</span> <span class="number">13</span> <span class="number">15</span> <span class="number">15</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p>数据保证，$1 \leq n \leq 10^6$，$0 \leq a_i,q \leq 10^9$，$1 \leq m \leq 10^5$</p>
<p>本题输入输出量较大，请使用较快的 IO 方式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q, a[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;<span class="comment">//找到中间值</span></span><br><span class="line">        <span class="keyword">if</span> (a[mid] == x) <span class="keyword">return</span> mid;<span class="comment">//刚好是中间值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; x) r = mid - <span class="number">1</span>;<span class="comment">//缩小半区</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//找不到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];<span class="comment">//给定n个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)<span class="comment">//查询m次</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; q;<span class="comment">//要查找的数</span></span><br><span class="line">        cout &lt;&lt; <span class="built_in">find</span>(q)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">11</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">11</span> <span class="number">13</span> <span class="number">15</span> <span class="number">15</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<p>该解答并不完美，在找3的时候没有找到最小下标的3。该程序适用于序列中的数字各不重复的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q, a[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (r + l) / <span class="number">2</span>;<span class="comment">//找到中间值</span></span><br><span class="line">        <span class="keyword">if</span> (a[mid] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            result = mid;<span class="comment">//刚好是中间值</span></span><br><span class="line">            r = mid - <span class="number">1</span>;<span class="comment">//继续向左查找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; x) r = mid - <span class="number">1</span>;<span class="comment">//缩小半区</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;<span class="comment">//找不到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];<span class="comment">//给定n个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)<span class="comment">//查询m次</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; q;<span class="comment">//要查找的数</span></span><br><span class="line">        cout &lt;&lt; <span class="built_in">find</span>(q)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解答使用<strong>变量result</strong>保存当前查找到的结果，然后再继续向左查找，直到找到最小编号。</p>
<hr>
<h2 id="【算法1-7】搜索">【算法1-7】搜索</h2>
<h3 id="四阶数独">四阶数独</h3>
<p>给出一个4*4的格子，每个格子只能填写1到4的整数，要求每行、每列和四等分更小的正方形部分都刚好由1到4组成。</p>
<p>请问一共有多少种合法的填写方法？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> size 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[size * size], n = <span class="number">4</span> * <span class="number">4</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b1[size][<span class="number">5</span>], b2[size][<span class="number">5</span>], b3[size][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; n)<span class="comment">//所有空都被填满</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="comment">//for (int i = 1; i &lt;= n; i++)//输出四阶数独</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    cout &lt;&lt; a[i];</span></span><br><span class="line">        <span class="comment">//    if (i % 4 == 0) cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> row = (x - <span class="number">1</span>) / <span class="number">4</span> + <span class="number">1</span>;<span class="comment">//横行编号</span></span><br><span class="line">    <span class="type">int</span> col = (x - <span class="number">1</span>) % <span class="number">4</span> + <span class="number">1</span>;<span class="comment">//竖排编号</span></span><br><span class="line">    <span class="type">int</span> block = (row - <span class="number">1</span>) / <span class="number">2</span> * <span class="number">2</span> + (col - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//小块编号</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;	</span><br><span class="line">        <span class="comment">//核心代码</span></span><br><span class="line">        <span class="keyword">if</span> (b1[row][i] == <span class="number">0</span> &amp;&amp; b2[col][i] == <span class="number">0</span> &amp;&amp; b3[block][i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[x] = i;<span class="comment">//放入数字</span></span><br><span class="line">            b1[row][i] = <span class="number">1</span>; b2[col][i] = <span class="number">1</span>; b3[block][i] = <span class="number">1</span>;<span class="comment">//占位</span></span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>);<span class="comment">//下一层递归</span></span><br><span class="line">            b1[row][i] = <span class="number">0</span>; b2[col][i] = <span class="number">0</span>; b3[block][i] = <span class="number">0</span>;<span class="comment">//逐层退出时，取消占位，以便枚举其他数字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用了回溯算法，常用深度优先搜索（DFS）来实现。挺难的，感觉需要记住这个模板。</p>
<p>答案：288种。</p>
<p><strong>1. 代码的作用</strong></p>
<p>这段代码的作用是：</p>
<ol>
<li>遍历数字 <code>1</code> 到 <code>4</code>，尝试将每个数字填入当前格子。</li>
<li>检查填入的数字是否满足数独的规则（即在同一行、同一列、同一小方块中没有重复）。</li>
<li>如果满足规则，则递归地填充下一个格子。</li>
<li>如果递归完成后没有找到解，则回溯（撤销当前格子的填充），并尝试下一个数字。</li>
</ol>
<hr>
<p><strong>2. 代码逐行解释</strong></p>
<p><strong>(1) <code>for (int i = 1; i &lt;= 4; i++)</code></strong></p>
<ul>
<li>这是一个循环，遍历数字 <code>1</code> 到 <code>4</code>。</li>
<li>对于每个数字 <code>i</code>，尝试将其填入当前格子。</li>
</ul>
<p><strong>(2) <code>if (b1[row][i] == 0 &amp;&amp; b2[col][i] == 0 &amp;&amp; b3[block][i] == 0)</code></strong></p>
<ul>
<li>这是一个条件判断，检查数字 <code>i</code> 是否可以填入当前格子。</li>
<li><code>b1[row][i] == 0</code>：检查数字 <code>i</code> 是否在当前行 <code>row</code> 中未被使用。</li>
<li><code>b2[col][i] == 0</code>：检查数字 <code>i</code> 是否在当前列 <code>col</code> 中未被使用。</li>
<li><code>b3[block][i] == 0</code>：检查数字 <code>i</code> 是否在当前小方块 <code>block</code> 中未被使用。</li>
<li>如果三个条件都满足，说明数字 <code>i</code> 可以填入当前格子。</li>
</ul>
<p><strong>(3) <code>a[x] = i;</code></strong></p>
<ul>
<li>将数字 <code>i</code> 填入当前格子 <code>a[x]</code>。</li>
</ul>
<p><strong>(4) <code>b1[row][i] = 1; b2[col][i] = 1; b3[block][i] = 1;</code></strong></p>
<ul>
<li>标记数字 <code>i</code> 在当前行、当前列、当前小方块中已被使用。</li>
<li><code>b1[row][i] = 1</code>：标记数字 <code>i</code> 在当前行 <code>row</code> 中已被使用。</li>
<li><code>b2[col][i] = 1</code>：标记数字 <code>i</code> 在当前列 <code>col</code> 中已被使用。</li>
<li><code>b3[block][i] = 1</code>：标记数字 <code>i</code> 在当前小方块 <code>block</code> 中已被使用。</li>
</ul>
<p><strong>(5) <code>dfs(x + 1);</code></strong></p>
<ul>
<li>递归调用 <code>dfs</code> 函数，填充下一个格子 <code>x + 1</code>。</li>
<li>如果递归完成后找到解，则继续回溯；如果未找到解，则尝试下一个数字。</li>
</ul>
<p><strong>(6) <code>b1[row][i] = 0; b2[col][i] = 0; b3[block][i] = 0;</code></strong></p>
<ul>
<li>回溯操作：撤销当前格子的填充，并取消数字 <code>i</code> 的标记。</li>
<li><code>b1[row][i] = 0</code>：取消数字 <code>i</code> 在当前行 <code>row</code> 中的标记。</li>
<li><code>b2[col][i] = 0</code>：取消数字 <code>i</code> 在当前列 <code>col</code> 中的标记。</li>
<li><code>b3[block][i] = 0</code>：取消数字 <code>i</code> 在当前小方块 <code>block</code> 中的标记。</li>
</ul>
<hr>
<p><strong>3. 举例说明</strong></p>
<p>假设当前格子 <code>x</code> 的行 <code>row = 1</code>，列 <code>col = 1</code>，小方块 <code>block = 1</code>。</p>
<p><strong>(1) 尝试填入数字 <code>1</code></strong></p>
<ul>
<li>检查 <code>b1[1][1]</code>、<code>b2[1][1]</code>、<code>b3[1][1]</code> 是否都为 <code>0</code>。</li>
<li>如果都为 <code>0</code>，则：
<ul>
<li>将 <code>a[x]</code> 赋值为 <code>1</code>。</li>
<li>标记 <code>b1[1][1] = 1</code>、<code>b2[1][1] = 1</code>、<code>b3[1][1] = 1</code>。</li>
<li>递归调用 <code>dfs(x + 1)</code>，填充下一个格子。</li>
<li>递归完成后，回溯：<code>b1[1][1] = 0</code>、<code>b2[1][1] = 0</code>、<code>b3[1][1] = 0</code>。</li>
</ul>
</li>
</ul>
<p><strong>(2) 尝试填入数字 <code>2</code></strong></p>
<ul>
<li>检查 <code>b1[1][2]</code>、<code>b2[1][2]</code>、<code>b3[1][2]</code> 是否都为 <code>0</code>。</li>
<li>如果都为 <code>0</code>，则：
<ul>
<li>将 <code>a[x]</code> 赋值为 <code>2</code>。</li>
<li>标记 <code>b1[1][2] = 1</code>、<code>b2[1][2] = 1</code>、<code>b3[1][2] = 1</code>。</li>
<li>递归调用 <code>dfs(x + 1)</code>，填充下一个格子。</li>
<li>递归完成后，回溯：<code>b1[1][2] = 0</code>、<code>b2[1][2] = 0</code>、<code>b3[1][2] = 0</code>。</li>
</ul>
</li>
</ul>
<p><strong>(3) 尝试填入数字 <code>3</code> 和 <code>4</code></strong></p>
<ul>
<li>类似地，尝试填入数字 <code>3</code> 和 <code>4</code>，并递归填充下一个格子。</li>
</ul>
<hr>
<h3 id="P1219-八皇后">P1219 八皇后</h3>
<p><strong>题目描述</strong></p>
<p>一个如下的 $6 \times 6$ 的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线（包括两条主对角线的所有平行线）上至多有一个棋子。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3h71x0yf.png" alt=""></p>
<p>上面的布局可以用序列 $2\ 4\ 6\ 1\ 3\ 5$ 来描述，第 $i$ 个数字表示在第 $i$ 行的相应位置有一个棋子，如下：</p>
<p>行号 $1\ 2\ 3\ 4\ 5\ 6$</p>
<p>列号 $2\ 4\ 6\ 1\ 3\ 5$</p>
<p>这只是棋子放置的一个解。请编一个程序找出所有棋子放置的解。<br>
并把它们以上面的序列方法输出，解按字典顺序排列。<br>
请输出前 $3$ 个解。最后一行是解的总个数。</p>
<p><strong>输入格式</strong></p>
<p>一行一个正整数 $n$，表示棋盘是 $n \times n$ 大小的。</p>
<p><strong>输出格式</strong></p>
<p>前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p>【数据范围】<br>
对于 $100%$ 的数据，$6 \le n \le 13$。</p>
<p>题目翻译来自NOCOW。</p>
<p>USACO Training Section 1.5</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[maxn], n, ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b1[maxn], b2[maxn], b3[maxn];<span class="comment">//分别记录皇后的y轴，主对角线，副对角线是否被占用（后两个不会）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认是从第一行往下逐个放置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (x &gt; n)<span class="comment">//所有皇后放置完毕</span></span><br><span class="line">   &#123;</span><br><span class="line">       ans++;</span><br><span class="line">       <span class="keyword">if</span> (ans &lt;= <span class="number">3</span>)<span class="comment">//输出前三种答案</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           cout &lt;&lt; endl;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//i表示第几列</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (b1[i] == <span class="number">0</span> &amp;&amp; b2[x + i] == <span class="number">0</span> &amp;&amp; b3[x - i + <span class="number">15</span>] == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           a[x] = i;<span class="comment">//记录放置位置</span></span><br><span class="line">           b1[i] = <span class="number">1</span>; b2[x + i] = <span class="number">1</span>; b3[x - i + <span class="number">15</span>] = <span class="number">1</span>;<span class="comment">//占位</span></span><br><span class="line">           <span class="built_in">dfs</span>(x + <span class="number">1</span>);<span class="comment">//下一层递归</span></span><br><span class="line">           b1[i] = <span class="number">0</span>; b2[x + i] = <span class="number">0</span>; b3[x - i + <span class="number">15</span>] = <span class="number">0</span>;<span class="comment">//取消占位</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1. 代码功能</strong></p>
<ul>
<li>输入一个整数 <code>n</code>，表示棋盘的大小（<code>n x n</code>）和皇后的数量。</li>
<li>使用 DFS 枚举所有可能的皇后放置方式，确保皇后之间不会互相攻击。</li>
<li>输出前三种解的具体放置方式，并输出解的总数。</li>
</ul>
<hr>
<p><strong>2. 代码逻辑</strong></p>
<p><strong>(1) 变量定义</strong></p>
<ul>
<li><code>a[maxn]</code>：记录每行皇后所在的列位置。<code>a[x] = i</code> 表示第 <code>x</code> 行的皇后放在第 <code>i</code> 列。</li>
<li><code>b1[maxn]</code>：记录每一列是否被占用。<code>b1[i] = 1</code> 表示第 <code>i</code> 列已被占用。</li>
<li><code>b2[maxn]</code>：记录每条主对角线是否被占用。<code>b2[x + i] = 1</code> 表示主对角线 <code>x + i</code> 已被占用。</li>
<li><code>b3[maxn]</code>：记录每条副对角线是否被占用。<code>b3[x - i + 15] = 1</code> 表示副对角线 <code>x - i + 15</code> 已被占用。</li>
<li><code>ans</code>：记录解的总数。</li>
</ul>
<p><strong>(2) DFS 函数</strong></p>
<ul>
<li><code>dfs(x)</code>：递归函数，用于在第 <code>x</code> 行放置皇后。
<ul>
<li>如果 <code>x &gt; n</code>，说明所有皇后都已放置完毕，找到一个解，<code>ans++</code>。</li>
<li>如果 <code>ans &lt;= 3</code>，输出当前解的具体放置方式。</li>
<li>否则，遍历每一列 <code>i</code>，尝试将皇后放在第 <code>x</code> 行第 <code>i</code> 列。
<ul>
<li>检查是否满足条件：第 <code>i</code> 列、主对角线 <code>x + i</code>、副对角线 <code>x - i + 15</code> 都未被占用。</li>
<li>如果满足条件，则放置皇后，并递归放置下一行的皇后。</li>
<li>递归完成后，回溯（撤销当前放置），尝试其他列。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>(3) 主函数</strong></p>
<ul>
<li>输入 <code>n</code>，表示棋盘大小和皇后数量。</li>
<li>调用 <code>dfs(1)</code>，从第 <code>1</code> 行开始放置皇后。</li>
<li>输出解的总数 <code>ans</code>。</li>
</ul>
<hr>
<p><strong>3. 关键点解释</strong></p>
<p><strong>(1) 对角线的表示</strong></p>
<ul>
<li><strong>主对角线</strong>：<code>x + i</code> 是主对角线的唯一标识。例如，<code>x = 2</code>，<code>i = 3</code>，则主对角线为 <code>2 + 3 = 5</code>。</li>
<li><strong>副对角线</strong>：<code>x - i + 15</code> 是副对角线的唯一标识。<code>+15</code> 是为了避免负数下标。例如，<code>x = 2</code>，<code>i = 3</code>，则副对角线为 <code>2 - 3 + 15 = 14</code>。</li>
</ul>
<p><strong>(2) 回溯</strong></p>
<ul>
<li>
<p>在 DFS 中，每次递归完成后，需要撤销当前放置的皇后，以便尝试其他可能的放置方式。</p>
</li>
<li>
<p>回溯通过以下代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">b1[i] = <span class="number">0</span>; b2[x + i] = <span class="number">0</span>; b3[x - i + <span class="number">15</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>(3) 输出前三种解</strong></p>
<ul>
<li>
<p>当找到一个解时，如果 <code>ans &lt;= 3</code>，则输出当前解的具体放置方式。</p>
</li>
<li>
<p>例如，<code>n = 4</code> 时，输出可能为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="【数据结构1-1】线性表">【数据结构1-1】线性表</h2>
<h3 id="P3156-询问学号">P3156 询问学号</h3>
<p><strong>题目描述</strong></p>
<p>有 $n(n \le 2 \times 10^6)$ 名同学陆陆续续进入教室。我们知道每名同学的学号（在 $1$ 到 $10^9$ 之间），按进教室的顺序给出。上课了，老师想知道第 $i$ 个进入教室的同学的学号是什么（最先进入教室的同学 $i=1$），询问次数不超过 $10^5$ 次。</p>
<p><strong>输入格式</strong></p>
<p>第一行 $2$ 个整数 $n$ 和 $m$，表示学生个数和询问次数。</p>
<p>第二行 $n$ 个整数，表示按顺序进入教室的学号。</p>
<p>第三行 $m$ 个整数，表示询问第几个进入教室的同学。</p>
<p><strong>输出格式</strong></p>
<p>输出 $m$ 个整数表示答案，用换行隔开。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">9</span> <span class="number">2</span> <span class="number">60</span> <span class="number">8</span> <span class="number">17</span> <span class="number">11</span> <span class="number">4</span> <span class="number">5</span> <span class="number">14</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, tmp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; stu;<span class="comment">//建立一个一维的可变数组</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        stu.<span class="built_in">push_back</span>(tmp);<span class="comment">//将学生的学号依次加入到数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; tmp;<span class="comment">//输入要查找的学生序号，注意最先进入教室的学生是stu[0];</span></span><br><span class="line">        cout &lt;&lt; stu[tmp - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题考察<strong>vector可变长度数组</strong>。</p>
<hr>
<h3 id="P3613-寄包柜">P3613 寄包柜</h3>
<p><strong>题目描述</strong></p>
<p>超市里有 $n(1\le n\le10^5)$ 个寄包柜。每个寄包柜格子数量不一，第 $i$ 个寄包柜有 $a_i(1\le a_i\le10^5)$ 个格子，不过我们并不知道各个 $a_i$ 的值。对于每个寄包柜，格子编号从 1 开始，一直到 $a_i$。现在有 $q(1 \le q\le10^5)$ 次操作：</p>
<ul>
<li><code>1 i j k</code>：在第 $i$ 个柜子的第 $j$ 个格子存入物品 $k(0\le k\le 10^9)$。当 $k=0$ 时说明清空该格子。</li>
<li><code>2 i j</code>：查询第 $i$ 个柜子的第 $j$ 个格子中的物品是什么，保证查询的柜子有存过东西。</li>
</ul>
<p>已知超市里共计不会超过 $10^7$ 个寄包格子，$a_i$ 是确定然而未知的，但是保证一定不小于该柜子存物品请求的格子编号的最大值。当然也有可能某些寄包柜中一个格子都没有。</p>
<p><strong>输入格式</strong></p>
<p>第一行 2 个整数 $n$ 和 $q$，寄包柜个数和询问次数。</p>
<p>接下来 $q$ 个行，每行有若干个整数，表示一次操作。</p>
<p><strong>输出格式</strong></p>
<p>对于查询操作时，输出答案，以换行隔开。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">10000</span> <span class="number">118014</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">10000</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">118014</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q, i, j, k, opt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">locker</span>(n + <span class="number">1</span>);<span class="comment">//初始化0到n号柜子，以便索引从1开始</span></span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; opt;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)<span class="comment">//存包操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; i &gt;&gt; j &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (locker[i].<span class="built_in">size</span>() &lt; j + <span class="number">1</span>)<span class="comment">//如果这个柜子不够请求的数字大</span></span><br><span class="line">                locker[i].<span class="built_in">resize</span>(j + <span class="number">1</span>);<span class="comment">//就扩大容量</span></span><br><span class="line">            locker[i][j] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//查询操作</span></span><br><span class="line">            cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line">            cout &lt;&lt; locker[i][j] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义<strong>vector二维数组</strong>时要用vector&lt;vector<int>&gt;，此数组二维都不定长。</p>
<p>结合题意，要适时扩大数组容量。</p>
<hr>
<h3 id="括号匹配">括号匹配</h3>
<p>给定若干字符串，每个字符串由三种括号字符构成（不含空格）。如果所有的括号都可以匹配上，那么这个字符串合法，否则非法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; s;<span class="comment">//定义一个栈</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">trans</span><span class="params">(<span class="type">char</span> a)</span> </span>&#123;<span class="comment">//括号的转换</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;&gt;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//空字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; num;<span class="comment">//读取测试用例数量</span></span><br><span class="line">    <span class="keyword">while</span> (num--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) s.<span class="built_in">pop</span>();<span class="comment">//在每次处理新测试用例前，清空栈 s。</span></span><br><span class="line">        string p;<span class="comment">//括号字符串</span></span><br><span class="line">        cin &gt;&gt; p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); i++)<span class="comment">//依次把字符串中的每个字符放入栈中并检验</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>())<span class="comment">//如果栈为空，直接放入栈中</span></span><br><span class="line">            &#123;</span><br><span class="line">                s.<span class="built_in">push</span>(p[i]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">trans</span>(p[i]) == s.<span class="built_in">top</span>()) s.<span class="built_in">pop</span>();<span class="comment">//如果匹配就弹出</span></span><br><span class="line">            <span class="keyword">else</span> s.<span class="built_in">push</span>(p[i]);<span class="comment">//否则压入栈中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用STL的栈。</p>
<hr>
<h3 id="P1449-后缀表达式">P1449 后缀表达式</h3>
<p><strong>题目描述</strong></p>
<p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p>
<p>本题中运算符仅包含 $\texttt{±*/}$。保证对于 $\texttt{/}$ 运算除数不为 0。特别地，其中 $\texttt{/}$ 运算的结果需要<strong>向 0 取整</strong>（即与 C++ <code>/</code> 运算的规则一致）。</p>
<p>如：$\texttt{3*(5-2)+7}$ 对应的后缀表达式为：$\texttt{3.5.2.-*7.+@}$。在该式中，<code>@</code> 为表达式的结束符号。<code>.</code> 为操作数的结束符号。</p>
<p><strong>输入格式</strong></p>
<p>输入一行一个字符串 $s$，表示后缀表达式。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示表达式的值。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">3</span>.<span class="number">5</span>.<span class="number">2</span>.-*<span class="number">7</span>.+@</span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p>数据保证，$1 \leq |s| \leq 50$，答案和计算过程中的每一个值的绝对值不超过 $10^9$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; n;<span class="comment">//定义一个栈</span></span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, x, y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        cin &gt;&gt; ch;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//处理输入数字多于一位的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            n.<span class="built_in">push</span>(s), s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch != <span class="string">&#x27;@&#x27;</span>) &#123;<span class="comment">//输入的字符为运算符</span></span><br><span class="line">            x = n.<span class="built_in">top</span>(); n.<span class="built_in">pop</span>();<span class="comment">//存入运算符前面的两个数,依次出栈</span></span><br><span class="line">            y = n.<span class="built_in">top</span>(); n.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: n.<span class="built_in">push</span>(x + y); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: n.<span class="built_in">push</span>(y - x); <span class="keyword">break</span>;<span class="comment">//注意是y-x</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: n.<span class="built_in">push</span>(x * y); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: n.<span class="built_in">push</span>(y / x); <span class="keyword">break</span>;<span class="comment">//注意是y/x</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ch != <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; n.<span class="built_in">top</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用栈，要注意变量s的用法。</p>
<ul>
<li>如果 <code>ch</code> 是数字字符（<code>0</code> 到 <code>9</code>），将其转换为整数并累加到 <code>s</code> 中。</li>
<li>例如，输入 <code>123</code>，<code>s</code> 会依次变为 <code>1</code>、<code>12</code>、<code>123</code>。</li>
</ul>
<hr>
<h2 id="P1996-约瑟夫问题">P1996 约瑟夫问题</h2>
<p><strong>题目描述</strong></p>
<p>$n$ 个人围成一圈，从第一个人开始报数,数到 $m$ 的人出列，再由下一个人重新从 $1$ 开始报数，数到 $m$ 的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。</p>
<p><strong>注意：本题和《深入浅出-基础篇》上例题的表述稍有不同。书上表述是给出淘汰 $n-1$ 名小朋友，而该题是全部出圈。</strong></p>
<p><strong>输入格式</strong></p>
<p>输入两个整数 $n,m$。</p>
<p><strong>输出格式</strong></p>
<p>输出一行 $n$ 个整数，按顺序输出每个出圈人的编号。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">9</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> <span class="number">8</span> <span class="number">5</span> <span class="number">10</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p>$1 \le m, n \le 100$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//定义队列</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) q.<span class="built_in">push</span>(i);<span class="comment">//n个小朋友依次放入队列</span></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());<span class="comment">//将队首元素复制，加入到队尾</span></span><br><span class="line">            q.<span class="built_in">pop</span>();<span class="comment">//队首元素出队</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//数到m的小朋友出队，不再入队</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用<strong>队列queue</strong>。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt; a;<span class="comment">//定义链表</span></span><br><span class="line"><span class="type">int</span> n, m, cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a.<span class="built_in">push_back</span>(i);<span class="comment">//将n个小朋友放入链表</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt; ::iterator it, now;<span class="comment">//两个指针</span></span><br><span class="line">    it = a.<span class="built_in">begin</span>();<span class="comment">//it指向表首元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        now = it;<span class="comment">//备份待删除元素的指针</span></span><br><span class="line">        <span class="keyword">if</span> (++it == a.<span class="built_in">end</span>()) it = a.<span class="built_in">begin</span>();<span class="comment">//it此时已经指向表尾元素，下一个再指向表首元素</span></span><br><span class="line">        <span class="keyword">if</span> (cnt == m)<span class="comment">//数到m时</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; *now &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//解引用，获取当前元素的值</span></span><br><span class="line">            a.<span class="built_in">erase</span>(now);<span class="comment">//删除now所指元素</span></span><br><span class="line">            cnt = <span class="number">0</span>;<span class="comment">//计数器重置 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用<strong>链表list</strong>。</p>
<p><strong>注意</strong>：a.begin()为表首元素，a.end()为表尾元素的下一个位置。</p>
<p>使用a.erase(it)可删除it所指向的元素，但之后it变为无效状态，需要另一个迭代器备份it所指向的元素。</p>
<hr>
<h2 id="【数据结构1-2】二叉树">【数据结构1-2】二叉树</h2>
<h3 id="P4715-淘汰赛">P4715 淘汰赛</h3>
<p><strong>题目描述</strong></p>
<p>有 $2^n$（$n\le7$）个国家参加世界杯决赛圈且进入淘汰赛环节。已经知道各个国家的能力值，且都不相等。能力值高的国家和能力值低的国家踢比赛时高者获胜。1 号国家和 2 号国家踢一场比赛，胜者晋级。3 号国家和 4 号国家也踢一场，胜者晋级……晋级后的国家用相同的方法继续完成赛程，直到决出冠军。给出各个国家的能力值，请问亚军是哪个国家？</p>
<p><strong>输入格式</strong></p>
<p>第一行一个整数 $n$，表示一共 $2^n$ 个国家参赛。</p>
<p>第二行 $2^n$ 个整数，第 $i$ 个整数表示编号为 $i$ 的国家的能力值（$1\leq i \leq 2^n$）。</p>
<p>数据保证不存在平局。</p>
<p><strong>输出格式</strong></p>
<p>仅一个整数，表示亚军国家的编号。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">10</span> <span class="number">5</span> <span class="number">9</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> value[<span class="number">260</span>], winner[<span class="number">260</span>];</span><br><span class="line"><span class="comment">//假设n=3，共8个国家参赛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &lt;&lt; n) <span class="keyword">return</span>;<span class="comment">//当编号来到8时，说明到了最下面一层的叶子结点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">2</span> * x);<span class="comment">//遍历左子树</span></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">2</span> * x + <span class="number">1</span>);<span class="comment">//遍历右子树</span></span><br><span class="line">        <span class="type">int</span> lvalue = value[<span class="number">2</span> * x], rvalue = value[<span class="number">2</span> * x + <span class="number">1</span>];<span class="comment">//左值与右值</span></span><br><span class="line">        <span class="keyword">if</span> (lvalue &gt; rvalue)<span class="comment">//左结点获胜</span></span><br><span class="line">        &#123;</span><br><span class="line">            value[x] = lvalue;</span><br><span class="line">            winner[x] = winner[<span class="number">2</span> * x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            value[x] = rvalue;</span><br><span class="line">            winner[x] = winner[<span class="number">2</span> * x + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; value[i + (<span class="number">1</span> &lt;&lt; n)];<span class="comment">//读入各个国家的能力值，最下面一层</span></span><br><span class="line">        winner[i + (<span class="number">1</span> &lt;&lt; n)] = i + <span class="number">1</span>;<span class="comment">//叶子结点的获胜方就是自己国家的编号，比如第一个国家的编号是8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);<span class="comment">//从根结点开始遍历</span></span><br><span class="line">    cout &lt;&lt; (value[<span class="number">2</span>] &gt; value[<span class="number">3</span>] ? winner[<span class="number">3</span>] : winner[<span class="number">2</span>]);<span class="comment">//找到亚军</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用二叉树结构。</p>
<p>注意：</p>
<p>从最底下一层开始逐层往上淘汰，第一个国家的编号是8。</p>
<p>1&lt;&lt;n是移位运算符，二进制的1向左移了n位，代表2^n。</p>
<p>本题还使用了dfs深度优先搜索。</p>
<hr>
<h2 id="P4913-二叉树深度">P4913 二叉树深度</h2>
<p><strong>题目描述</strong></p>
<p>有一个 $n(n \le 10^6)$ 个结点的二叉树。给出每个结点的两个子结点编号（均不超过 $n$），建立一棵二叉树（根节点的编号为 $1$），如果是叶子结点，则输入 <code>0 0</code>。</p>
<p>建好这棵二叉树之后，请求出它的深度。二叉树的<strong>深度</strong>是指从根节点到叶子结点时，最多经过了几层。</p>
<p><strong>输入格式</strong></p>
<p>第一行一个整数 $n$，表示结点数。</p>
<p>之后 $n$ 行，第 $i$ 行两个整数 $l$、$r$，分别表示结点 $i$ 的左右子结点编号。若 $l=0$ 则表示无左子结点，$r=0$ 同理。</p>
<p><strong>输出格式</strong></p>
<p>一个整数，表示最大结点深度。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> left, right;</span><br><span class="line">&#125;t[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果x不存在,也就是编号为0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dfs</span>(t[x].left), <span class="built_in">dfs</span>(t[x].right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; t[i].left &gt;&gt; t[i].right;<span class="comment">//读入每个结点的左右子树编号,构建二叉树</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用二叉树结构和dfs，注意要使用left和right变量存储左右子树的编号。</p>
<hr>
<h2 id="【数据结构1-3】集合">【数据结构1-3】集合</h2>
<h3 id="P1551-亲戚">P1551 亲戚</h3>
<p><strong>题目背景</strong></p>
<p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。</p>
<p><strong>题目描述</strong></p>
<p>规定：$x$ 和 $y$ 是亲戚，$y$ 和 $z$ 是亲戚，那么 $x$ 和 $z$ 也是亲戚。如果 $x$，$y$ 是亲戚，那么 $x$ 的亲戚都是 $y$ 的亲戚，$y$ 的亲戚也都是 $x$ 的亲戚。</p>
<p><strong>输入格式</strong></p>
<p>第一行：三个整数 $n,m,p$，（$n,m,p \le 5000$），分别表示有 $n$ 个人，$m$ 个亲戚关系，询问 $p$ 对亲戚关系。</p>
<p>以下 $m$ 行：每行两个数 $M_i$，$M_j$，$1 \le M_i,~M_j\le n$，表示 $M_i$ 和 $M_j$ 具有亲戚关系。</p>
<p>接下来 $p$ 行：每行两个数 $P_i,P_j$，询问 $P_i$ 和 $P_j$ 是否具有亲戚关系。</p>
<p><strong>输出格式</strong></p>
<p>$p$ 行，每行一个 <code>Yes</code> 或 <code>No</code>。表示第 $i$ 个询问的答案为“具有”或“不具有”亲戚关系。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Yes</span></span><br><span class="line"><span class="keyword">Yes</span></span><br><span class="line"><span class="keyword">No</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 5010</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, p, x, y;</span><br><span class="line"><span class="type">int</span> fa[MAXN];<span class="comment">//并查集的父节点数组，fa[i] 表示第 i 个人的父节点。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//查询是否是同一个集合</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);<span class="comment">//这里挺关键的，一直指向根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span><span class="comment">//将a和b加入集合，并把a的代表换为b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f1 = <span class="built_in">find</span>(a), f2 = <span class="built_in">find</span>(b);<span class="comment">//寻找a和b的代表</span></span><br><span class="line">    <span class="keyword">if</span> (f1 != f2) fa[f1] = f2;<span class="comment">//如果代表不相同，说明a和b不在同一个集合中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;<span class="comment">//初始化：将每个人的父节点设为自己。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">join</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y))</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题使用并查集。</p>
<p>注意：find函数</p>
<ul>
<li>查找 <code>x</code> 所属集合的 <strong>根节点</strong>（即集合的代表）。</li>
<li>在查找过程中，进行 <strong>路径压缩</strong>，将路径上的所有节点<strong>直接指向根节点</strong>，优化后续查询效率。</li>
</ul>
<hr>
<h2 id="【数据结构1-4】图的基本应用">【数据结构1-4】图的基本应用</h2>
<h3 id="P5318-查找文献">P5318 查找文献</h3>
<p><strong>题目描述</strong></p>
<p>小 K 喜欢翻看洛谷博客获取知识。每篇文章可能会有若干个（也有可能没有）参考文献的链接指向别的博客文章。小 K 求知欲旺盛，如果他看了某篇文章，那么他一定会去看这篇文章的参考文献（如果他之前已经看过这篇参考文献的话就不用再看它了）。</p>
<p>假设洛谷博客里面一共有 $n(n\le10^5)$ 篇文章（编号为 1 到 $n$）以及 $m(m\le10^6)$ 条参考文献引用关系。目前小 K 已经打开了编号为 1 的一篇文章，请帮助小 K 设计一种方法，使小 K 可以不重复、不遗漏的看完所有他能看到的文章。</p>
<p>这边是已经整理好的参考文献关系图，其中，文献 X → Y 表示文章 X 有参考文献 Y。不保证编号为 1 的文章没有被其他文章引用。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f4n4tlhi.png" alt=""></p>
<p>请对这个图分别进行 DFS 和 BFS，并输出遍历结果。<strong>如果有很多篇文章可以参阅，请先看编号较小的那篇(因此你可能需要先排序)。</strong></p>
<p><strong>输入格式</strong></p>
<p>共 $m+1$ 行，第 1 行为 2 个数，$n$ 和 $m$，分别表示一共有 $n(n\le10^5)$ 篇文章（编号为 1 到 $n$）以及$m(m\le10^6)$ 条参考文献引用关系。</p>
<p>接下来 $m$ 行，每行有两个整数 $X,Y$ 表示文章 X 有参考文献 Y。</p>
<p><strong>输出格式</strong></p>
<p>共 2 行。<br>
第一行为 DFS 遍历结果，第二行为 BFS 遍历结果。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">8 </span><span class="number">9</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">8</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">8</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100050</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p[MAXN];</span><br><span class="line"><span class="type">bool</span> u[MAXN];<span class="comment">//记录文献是否已被阅读，u[x] 为 true 表示文献 x 已被阅读。</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//深度优先搜索（DFS）遍历文献</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//此时输出的就是小K看文献的顺序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,sz=p[x].<span class="built_in">size</span>();i&lt;sz;i++)</span><br><span class="line">        <span class="keyword">if</span> (!u[p[x][i]])</span><br><span class="line">        &#123;</span><br><span class="line">            u[p[x][i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(p[x][i]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        p[x].<span class="built_in">push_back</span>(y);<span class="comment">//用邻接表记录下文章x有参考文献y</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对邻接表排序，确保优先访问编号较小的文献</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(p[i].<span class="built_in">begin</span>(), p[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//DFS</span></span><br><span class="line">    u[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>); </span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(u, <span class="number">0</span>, <span class="built_in">sizeof</span>(u));</span><br><span class="line">    u[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//广度优先搜索（BFS）遍历文献</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())<span class="comment">//如果队列不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();<span class="comment">//队首赋值给x</span></span><br><span class="line">        q.<span class="built_in">pop</span>();<span class="comment">//始终都是队首出队</span></span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,sz=p[x].<span class="built_in">size</span>();i&lt;sz;i++)</span><br><span class="line">            <span class="keyword">if</span> (!u[p[x][i]])</span><br><span class="line">            &#123;</span><br><span class="line">                u[p[x][i]] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(p[x][i]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题考察邻接表，分别使用了DFS和BFS，DFS使用递归，BFS使用队列。</p>
<p>注意：题干要求如果有很多篇文章可以参阅，请先看编号较小的那篇，所以事先要对邻接表进行排序。</p>
<hr>
<h3 id="P3916-图的遍历">P3916 图的遍历</h3>
<p><strong>题目描述</strong></p>
<p>给出 $N$ 个点，$M$ 条边的有向图，对于每个点 $v$，求 $A(v)$ 表示从点 $v$ 出发，能到达的编号最大的点。</p>
<p><strong>输入格式</strong></p>
<p>第 $1$ 行 $2$ 个整数 $N,M$，表示点数和边数。</p>
<p>接下来 $M$ 行，每行 $2$ 个整数 $U_i,V_i$，表示边 $(U_i,V_i)$。点用 $1,2,\dots,N$ 编号。</p>
<p><strong>输出格式</strong></p>
<p>一行 $N$ 个整数 $A(1),A(2),\dots,A(N)$。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<ul>
<li>对于 $60%$ 的数据，$1 \leq N,M \leq 10^3$。</li>
<li>对于 $100%$ 的数据，$1 \leq N,M \leq 10^5$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100050</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p[MAXN];<span class="comment">//存放邻接表</span></span><br><span class="line"><span class="type">int</span> a[MAXN];<span class="comment">//存放每个顶点的A值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span><span class="comment">//深搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[x]) <span class="keyword">return</span>;<span class="comment">//如果该点被访问过，返回，不再进行深搜</span></span><br><span class="line">    a[x] = y;<span class="comment">//将点x的A值更新为y，最开始是自己</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(p[x][i], y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;<span class="comment">//输入n个点，m个边关系</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        p[v].<span class="built_in">push_back</span>(u);<span class="comment">//建反向边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)<span class="comment">// 从大到小遍历每个点</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输出每个顶点的A值</span></span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题为了降低时间复杂度，选择反向建边，从最大值点开始dfs。</p>
<ul>
<li>从编号最大的点开始，依次遍历每个点。</li>
<li>对于每个点 u，如果它没有被访问过，则进行一次 DFS。</li>
<li>每次 DFS 的时间复杂度是 O(N+M)。</li>
</ul>
<hr>
<h2 id="【算法2-2】常见优化技巧">【算法2-2】常见优化技巧</h2>
<h3 id="P1102-A-B-数对（双指针）">P1102 A-B 数对（双指针）</h3>
<p><strong>题目描述</strong></p>
<p>给出一串正整数数列以及一个正整数 $C$，要求计算出所有满足 $A - B = C$ 的数对的个数（不同位置的数字一样的数对算不同的数对）。</p>
<p><strong>输入格式</strong></p>
<p>输入共两行。</p>
<p>第一行，两个正整数 $N,C$。</p>
<p>第二行，$N$ 个正整数，作为要求处理的那串数。</p>
<p><strong>输出格式</strong></p>
<p>一行，表示该串正整数中包含的满足 $A - B = C$ 的数对的个数。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p>对于 $75%$ 的数据，$1 \leq N \leq 2000$。</p>
<p>对于 $100%$ 的数据，$1 \leq N \leq 2 \times 10^5$，$0 \leq a_i &lt;2^{30}$，$1 \leq C &lt; 2^{30}$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="type">int</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, c;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">sort</span>(s, s + n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (s[l] &lt; s[i] - c &amp;&amp; l &lt; n)</span><br><span class="line">            l++;</span><br><span class="line">        <span class="keyword">while</span> (s[r] &lt;= s[i] - c &amp;&amp; r &lt; n)</span><br><span class="line">            r++;</span><br><span class="line">        <span class="keyword">if</span> (s[i] - s[l] == c)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += r - l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用双指针，事先对数列进行排序，确保其单调递增。</p>
<p>对于数列中的一个数s[i]，想要快速找到s[i]-C。如果这个数存在的话，一定在排序后的数列中是连续的。</p>
<p>维护两个指针，左指针l和右指针r，使得s[l]是首个大于等于s[i]-C的数，s[r]是首个大于s[i]-C的数。这样，从s[l]到s[r-1]都是等于s[i]-C的数字，则这样的数字共有r-l个，累加进答案中。s[i]-C是越来越大的，所以l和r都会越来越往右。</p>
<p>本质上是对暴力枚举的一种优化。</p>
<hr>
<h3 id="P1115-最大子段和（动态规划）">P1115 最大子段和（动态规划）</h3>
<p><strong>题目描述</strong></p>
<p>给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一段使得这段和最大。</p>
<p><strong>输入格式</strong></p>
<p>第一行是一个整数，表示序列的长度 $n$。</p>
<p>第二行有 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个数字 $a_i$。</p>
<p><strong>输出格式</strong></p>
<p>输出一行一个整数表示答案。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="symbol">2 </span>-<span class="number">4</span> <span class="number">3</span> -<span class="number">1</span> <span class="number">2</span> -<span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p><strong>样例 1 解释</strong></p>
<p>选取 $[3, 5]$ 子段 ${3, -1, 2}$，其和为 $4$。</p>
<p><strong>数据规模与约定</strong></p>
<ul>
<li>对于 $40%$ 的数据，保证 $n \leq 2 \times 10^3$。</li>
<li>对于 $100%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, a, f = <span class="number">0</span>, ans = <span class="number">-10000</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        f = <span class="built_in">max</span>(f + a, a);<span class="comment">//核心，动态规划</span></span><br><span class="line">        ans = <span class="built_in">max</span>(f, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>核心逻辑</strong>：</p>
<ul>
<li>
<p>对于每个元素 <code>a</code>，更新 <code>f</code> 为 <code>max(f + a, a)</code>：</p>
<ul>
<li>如果 <code>f + a</code> 更大，说明当前元素可以加入之前的子数组。</li>
<li><strong>否则，从当前元素重新开始</strong>一个新的子数组。</li>
</ul>
</li>
<li>
<p>更新 <code>ans</code> 为 <code>max(f, ans)</code>，记录全局的最大子数组和。</p>
</li>
</ul>
<hr>
<h3 id="P7072-直播获奖（用空间换时间）">P7072 直播获奖（用空间换时间）</h3>
<p><strong>题目描述</strong></p>
<p>NOI2130 即将举行。为了增加观赏性，CCF 决定逐一评出每个选手的成绩，并直播即时的获奖分数线。本次竞赛的获奖率为 $w%$，即当前排名前 $w%$ 的选手的最低成绩就是即时的分数线。</p>
<p>更具体地，若当前已评出了 $p$ 个选手的成绩，则<strong>当前计划获奖人数为 $\max(1, \lfloor p \times w %\rfloor)$</strong>，其中 $w$ 是获奖百分比，$\lfloor x \rfloor$ 表示对 $x$ <strong>向下取整</strong>，$\max(x,y)$ 表示 $x$ 和 $y$ 中较大的数。如有选手成绩相同，则所有成绩并列的选手都能获奖，因此实际获奖人数可能比计划中多。</p>
<p>作为评测组的技术人员，请你帮 CCF 写一个直播程序。</p>
<p><strong>输入格式</strong></p>
<p>第一行有两个整数 $n, w$。分别代表选手总数与获奖率。<br>
第二行有 $n$ 个整数，依次代表逐一评出的选手成绩。</p>
<p><strong>输出格式</strong></p>
<p>只有一行，包含 $n$ 个非负整数，依次代表选手成绩逐一评出后，即时的获奖分数线。相邻两个整数间用一个空格分隔。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">60</span></span><br><span class="line"><span class="symbol">200 </span><span class="number">300</span> <span class="number">400</span> <span class="number">500</span> <span class="number">600</span> <span class="number">600</span> <span class="number">0</span> <span class="number">300</span> <span class="number">200</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">200 </span><span class="number">300</span> <span class="number">400</span> <span class="number">400</span> <span class="number">400</span> <span class="number">500</span> <span class="number">400</span> <span class="number">400</span> <span class="number">300</span> <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p><strong>说明/提示</strong></p>
<p><strong>样例 1 解释</strong></p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/l453vhow.png" alt=""></p>
<hr>
<p><strong>数据规模与约定</strong></p>
<p>各测试点的 $n$ 如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">测试点编号</th>
<th style="text-align:center">$n=$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$1 \sim 3$</td>
<td style="text-align:center">$10$</td>
</tr>
<tr>
<td style="text-align:center">$4 \sim 6$</td>
<td style="text-align:center">$500$</td>
</tr>
<tr>
<td style="text-align:center">$7 \sim 10$</td>
<td style="text-align:center">$2000$</td>
</tr>
<tr>
<td style="text-align:center">$11 \sim 17$</td>
<td style="text-align:center">$10^4$</td>
</tr>
<tr>
<td style="text-align:center">$18 \sim 20$</td>
<td style="text-align:center">$10^5$</td>
</tr>
</tbody>
</table>
<p>对于所有测试点，每个选手的成绩均为不超过 $600$ 的非负整数，获奖百分比 $w$ 是一个正整数且 $1 \le w \le 99$。</p>
<hr>
<p><strong>提示</strong></p>
<p>在计算计划获奖人数时，如用浮点类型的变量（如 C/C++ 中的 <code>float</code> 、 <code>double</code>，Pascal 中的 <code>real</code> 、 <code>double</code> 、 <code>extended</code> 等）存储获奖比例 $w%$，则计算 $5 \times 60%$ 时的结果可能为 $3.000001$，也可能为 $2.999999$，向下取整后的结果不确定。因此，建议仅使用整型变量，以计算出准确值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t[<span class="number">610</span>], n, w;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        t[tmp]++;<span class="comment">//加入对应分数的桶中</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">//累加人数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">600</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += t[j];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= <span class="built_in">max</span>(<span class="number">1</span>, i * w / <span class="number">100</span>))<span class="comment">//满足获奖人数时</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出获奖的最后一名的成绩</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现需要排序的数值不超过600，因此可以考虑计数排序。</p>
<p>每次评出一个人的成绩就加入对应的桶中，然后从高到低统计累加人数，达到获奖人数时输出当时的分数线。</p>
<p>注意：i * w / 100中使用了除号，所以这个算式是下取整的。</p>
<hr>
<h1>经典算法</h1>
<h2 id="01背包">01背包</h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img20c00c6b139e1a836cb1953b8e4d3116.png" alt="在这里插入图片描述"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N]; <span class="comment">// f[i][j]: 前i个物品，容量j时的最大价值</span></span><br><span class="line"><span class="type">int</span> w[N], v[N]; <span class="comment">// w存重量，v存价值</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;<span class="comment">//输入每个物品的重量和价值</span></span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化：没有物品时价值为0</span></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="comment">// 枚举物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) <span class="comment">// 枚举容量</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i]) &#123; <span class="comment">// 能装下第i个物品的重量</span></span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - w[i]] + v[i]); <span class="comment">//比较不选和选的状态，取更大的</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = f[i - <span class="number">1</span>][j]; <span class="comment">// 不选第i个物品</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用二维DP，更好理解。动态规划的核心就是“<strong>活在当下</strong>”，只考虑当前的状态，过去的状态已经记录好了。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N]; <span class="comment">// f[j]: 容量j时的最大价值</span></span><br><span class="line"><span class="type">int</span> w[N], v[N]; <span class="comment">// w存重量，v存价值</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//输入每个物品的重量和价值</span></span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化：没有物品时价值为0</span></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="comment">// 枚举物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i])</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用一维DP。</p>
<p>观察二维数组的转移方程可以发现，<strong>计算 <code>dp[i][j]</code> 仅依赖 <code>dp[i-1][j]</code> 和 <code>dp[i-1][j-w[i]]</code></strong>。</p>
<p>因此，可以用一维数组 <code>dp[j]</code> 保存前一行的状态，并在遍历时覆盖它。</p>
<p>通过<strong>从大到小遍历容量</strong>，确保在计算 <code>dp[j]</code> 时，<code>dp[j - w[i]]</code> 仍然是上一轮（未更新）的结果。</p>
<p><strong>动态规划核心思想</strong></p>
<ol>
<li>
<p><strong>状态压缩</strong>：用一维数组替代二维数组，节省空间。N=1e5时，二维数组的数据就会溢出。</p>
</li>
<li>
<p><strong>逆序遍历</strong>：确保每个物品只被选中一次（防止重复计算）。</p>
</li>
<li>
<p><strong>贪心选择</strong>：每一步都选择当前最优解（是否放入当前物品）。</p>
</li>
</ol>
<hr>
<h2 id="一维差分">一维差分</h2>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-03-28_17-21-04.png"  />
<p><strong>输入样例</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>输出样例</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">15</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> +<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],d[N];</span><br><span class="line"><span class="type">int</span> n, p, q;</span><br><span class="line"><span class="type">int</span> l, r, x;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//下标从1开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">//构建一维差分数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        d[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; i++)<span class="comment">//区间加</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">        d[l] += x;</span><br><span class="line">        d[r + <span class="number">1</span>] -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//恢复a数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        sum = <span class="number">0</span>;<span class="comment">//重置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="一维前缀和">一维前缀和</h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-03-28_17-44-11.png" alt=""></p>
<p><strong>输入样例</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5 3</span><br><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">3 4</span><br><span class="line">7 2</span><br><span class="line">-1<span class="number"> 9 </span>-10<span class="number"> 8 </span>2<span class="number"> 6 </span>11</span><br><span class="line">1 5</span><br><span class="line">2 7</span><br></pre></td></tr></table></figure>
<p><strong>输出样例</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">14</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">26</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">//构建前缀和数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            sum = s[r] - s[l - <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>DFS深度优先搜索</strong></p>
<p>可以参考这篇博客：</p>
<p><a href="https://blog.csdn.net/m0_46549425/article/details/108025133?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=108025133&amp;sharerefer=PC&amp;sharesource=Xing1796_&amp;sharefrom=from_link">https://blog.csdn.net/m0_46549425/article/details/108025133?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=108025133&amp;sharerefer=PC&amp;sharesource=Xing1796_&amp;sharefrom=from_link</a></p>
<hr>
<h1><strong>ACM蓝桥杯竞赛入门</strong></h1>
<h2 id="顺序结构程序设计"><strong>顺序结构程序设计</strong></h2>
<h3 id="题目-1761-学习ASCII码">题目 1761: 学习ASCII码</h3>
<p>时间限制: 2s 内存限制: 192MB 提交: 5115 解决: 2910</p>
<p><strong>题目描述</strong></p>
<p>刚开始学C语言，ASCII码可是必须要会的哦！那么问题来了，要求你用熟悉的printf输出字符常量 ’ t ’ 的ASCII以及ASCII码值63对应的字符！</p>
<p>注意，是两个结果，一个数字，一个字符，用空格隔开！</p>
<p><strong>输入格式</strong></p>
<p>无</p>
<p><strong>输出格式</strong></p>
<p>字符常量 ’ t ’ 的ASCII以及ASCII码值63对应的字符！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(<span class="string">&#x27;t&#x27;</span>) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">char</span>(<span class="number">63</span>);<span class="comment">//是这样的格式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="题目-1762-printf基础练习">题目 1762: printf基础练习</h3>
<p><strong>题目描述</strong></p>
<p>继续练习printf函数，要求你输出123456789这个数字的八进制与十六进制，不要忘记他们的前缀哦！</p>
<p><strong>输入格式</strong></p>
<p>无</p>
<p><strong>输出格式</strong></p>
<p>123456789这个数字的八进制和十六进制数</p>
<p>两个结果占一行，空格分开</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">123456789</span>;</span><br><span class="line">    cout &lt;&lt; oct &lt;&lt; showbase &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; hex &lt;&lt; showbase &lt;&lt; num;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解题思路:</p>
<p>使用cout结合操纵符oct（八进制输出）和showbase（显示进制前缀）输出八进制形式的数字，</p>
<p>接着使用hex（十六进制输出）和showbase输出十六进制形式的数字，中间用空格分开。</p>
<hr>
<h3 id="题目-1056-温度转换">题目 1056: 温度转换</h3>
<p><strong>题目描述</strong></p>
<p>输入一个华氏温度，要求输出摄氏温度。公式为</p>
<p><img src="https://www.dotcpp.com/oj/upload/pimg1056_1.png" alt="二级C语言-温度转换"></p>
<p>保留两位小数</p>
<p><strong>样例输入</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-40</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-40.00</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    b = (<span class="type">double</span>)<span class="number">5</span> / <span class="number">9</span> * (a - <span class="number">32</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; fixed &lt;&lt; b;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表达式 <code>5 / 9</code> 是<strong>整数除法</strong>，即使 <code>a</code> 和 <code>b</code> 是 <code>double</code> 类型，但 <code>5</code> 和 <code>9</code> 是<strong>整型字面量</strong>，默认为 <code>int</code> 类型</p>
<p>编译器会优先执行整数除法（结果为 <code>0</code>），再与 <code>(a-32)</code> 相乘，最终结果必然为 <code>0</code>。</p>
<hr>
<h3 id="题目-2757-浮点数向零舍入">题目 2757: 浮点数向零舍入</h3>
<p><strong>题目描述</strong></p>
<p>输入一个单精度浮点数，将其向零舍入到整数。</p>
<p>说明：向零舍入的含义是，正数向下舍入，负数向上舍入。</p>
<p>提示：可以使用强制类型转换来实现。</p>
<p><strong>输入格式</strong></p>
<p>一个单精度浮点数。</p>
<p><strong>输出格式</strong></p>
<p>一个整数，即向零舍入到整数的结果。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)a;<span class="comment">//强转为整型即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不需要用分支，ceil和floor函数。</p>
<hr>
<h2 id="循环结构程序设计"><strong>循环结构程序设计</strong></h2>
<h3 id="题目-2809-菲波那契数列">题目 2809: 菲波那契数列</h3>
<p><strong>题目描述</strong></p>
<p>菲波那契数列是指这样的数列: 数列的第一个和第二个数都为1，接下来每个数都等于前面2个数之和。<br>
给出一个正整数k，要求菲波那契数列中第k个数是多少。</p>
<p><strong>输入格式</strong></p>
<p>输入一行，包含一个正整数k。（1 &lt;= k &lt;= 46）</p>
<p><strong>输出格式</strong></p>
<p>输出一行，包含一个正整数，表示菲波那契数列中第k个数的大小</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">19</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">4181</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">         ans = a + b;</span><br><span class="line">         a = b;</span><br><span class="line">         b = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解不使用数组，需要另外维护两个变量a,b，使它们一直存储前两个数。</p>
<hr>
<h3 id="题目-3014-计算星期几"><strong>题目 3014: 计算星期几</strong></h3>
<p><strong>题目描述</strong></p>
<p>假设今天是星期日，那么过ab天之后是星期几？</p>
<p><strong>输入格式</strong></p>
<p>两个正整数a，b，中间用单个空格隔开。0&lt;a≤100,  0&lt;b≤10000。</p>
<p><strong>输出格式</strong></p>
<p>一个字符串，代表过ab天之后是星期几。<br>
其中，Monday是星期一，Tuesday是星期二，Wednesday是星期三，Thursday是星期四，Friday是星期五，Saturday是星期六，Sunday是星期日。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">2000</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Tuesday</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>注意数据大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="type">int</span> day = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        day *= a;</span><br><span class="line">        day %= <span class="number">7</span>;<span class="comment">//每次循环都要进行%取余运算，不然会造成数据溢出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (day)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无效&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题涉及到指数，一定要注意数据的溢出问题。</p>
<p><strong>逐步取余与一次性取余的等价性</strong>：由于模运算的分配性，逐步在每次乘法后取余与最后一次性取余的结果是相同的。</p>
<hr>
<h3 id="题目-3015-幂的末尾"><strong>题目 3015: 幂的末尾</strong></h3>
<p><strong>题目描述</strong></p>
<p>幂ab的末3位数是多少？</p>
<p><strong>输入格式</strong></p>
<p>两个正整数a，b。1≤a≤100，1≤b≤10000。</p>
<p><strong>输出格式</strong></p>
<p>从高位到低位输出幂的末三位数字，中间无分隔符。若幂本身不足三位，在前面补零。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">7 </span><span class="number">2011</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">743</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="type">int</span> day = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        day *= a;</span><br><span class="line">        day %= <span class="number">1000</span>;<span class="comment">//每次循环都要进行%取余运算，不然会造成数据溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;setw(<span class="number">3</span>)&lt;&lt;setfill(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与上一题一样，在循环内取余。</p>
<p><strong>注意</strong>：setfill()括号里的是字符，char类型。</p>
<hr>
<h3 id="题目-3013-求小数的某一位">题目 3013: 求小数的某一位</h3>
<p><strong>题目描述</strong></p>
<p>分数a/b化为小数后，小数点后第n位的数字是多少？</p>
<p><strong>输入格式</strong></p>
<p>三个正整数a，b，na，b，n，相邻两个数之间用单个空格隔开。0&lt;a&lt;b&lt;100，1&lt;=n&lt;=100000&lt;a&lt;b&lt;100，1&lt;=n&lt;=10000。</p>
<p><strong>输出格式</strong></p>
<p>一个数字。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b, n, x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = a * <span class="number">10</span> / b;<span class="comment">//取当前位</span></span><br><span class="line">        a = a * <span class="number">10</span> % b;<span class="comment">//得到剩下的余数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码很简单，思想很精妙。</p>
<hr>
<h3 id="题目-1011-最大公约数与最小公倍数">题目 1011: 最大公约数与最小公倍数</h3>
<p><strong>题目描述</strong></p>
<p>输入两个正整数m和n，求其最大公约数和最小公倍数。</p>
<p><strong>输入格式</strong></p>
<p>两个整数</p>
<p><strong>输出格式</strong></p>
<p>最大公约数，最小公倍数</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">35</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> max = m;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; m)</span><br><span class="line">        max = n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大公约数</span></span><br><span class="line">    <span class="comment">//我们从较大的那一个值开始枚举</span></span><br><span class="line">    <span class="comment">//当可以同时整除n和m的时候，即目标所求</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = max; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a = i;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//求最大公约数，找到即最大，立刻跳出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最小公倍数</span></span><br><span class="line">    <span class="comment">//最小公倍数,两个数的成绩一定是这两个数的公倍数</span></span><br><span class="line">    <span class="comment">//我们假设当前公倍数就是最小公倍数，我们从这个位置开始往前枚举，如果存在别的公倍数，那么就更新</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m * n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            b = i;<span class="comment">//求最小公倍数，一直向下找，不需要跳出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无需STL函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    a = gcd(m, n);<span class="comment">//C++17</span></span><br><span class="line">    b = lcm(m, n);<span class="comment">//C++20</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>STL函数，但是需要更高级的C++版本。</p>
<hr>
<h3 id="题目-2817-级数求和">题目 2817: 级数求和</h3>
<p><strong>题目描述</strong></p>
<p>已知：Sn= 1＋1／2＋1／3＋…＋1／n。显然对于任意一个整数K，当n足够大的时候，Sn大于K。</p>
<p>现给出一个整数K（1&lt;=k&lt;=15），要求计算出一个最小的n；使得Sn＞K。</p>
<p><strong>输入格式</strong></p>
<p>一个整数K。</p>
<p><strong>输出格式</strong></p>
<p>一个整数n。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;<span class="comment">//这里不可以是double类型</span></span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span> (sum &lt;= k)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        sum += <span class="number">1.0</span> / n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>涉及数的累加，尽量使用int类型变量。</p>
<p>浮点数累加可能会产生精度的影响，比如本该是1,2,3,4，却变成了1,2,3,3.99999。</p>
<hr>
<h3 id="题目-1464-分解质因数">题目 1464: 分解质因数</h3>
<p><strong>题目描述</strong></p>
<p>求出区间[a,b]中所有整数的质因数分解。</p>
<p>提示</p>
<p>先筛出所有素数，然后再分解。<br>
数据规模和约定</p>
<p><strong>输入格式</strong></p>
<p>输入两个整数a，b。</p>
<p>2&lt; =a&lt; =b&lt; =10000</p>
<p><strong>输出格式</strong></p>
<p>每行输出一个数的分解，形如k=a1<em>a2</em>a3…(a1&lt; =a2&lt; =a3…，k也是从小到大的)(具体可看样例)</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">3</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">4</span>=<span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="attr">5</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">6</span>=<span class="number">2</span>*<span class="number">3</span></span><br><span class="line"><span class="attr">7</span>=<span class="number">7</span></span><br><span class="line"><span class="attr">8</span>=<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="attr">9</span>=<span class="number">3</span>*<span class="number">3</span></span><br><span class="line"><span class="attr">10</span>=<span class="number">2</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">prim_10000</span><span class="params">()</span><span class="comment">//求出10000以内所有的质数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;<span class="comment">//重置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">            p.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    prim_10000();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = i;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.size(); j++)<span class="comment">//用存好的质数轮流检查</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t % p[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                t /= p[j];</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; p[j] &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; p[j] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//分解完了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j--;<span class="comment">//继续检查刚刚的p[j]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要注意的细节挺多的。</p>
<hr>
<h3 id="题目-2825-计算多项式的值">题目 2825: 计算多项式的值</h3>
<p><strong>题目描述</strong></p>
<p>假定多项式的形式为xn+xn-1+…+x2+x+1，请计算给定单精度浮点数x和正整数n值的情况下这个多项式的值。</p>
<p><strong>输入格式</strong></p>
<p>输入仅一行，包括x和n，用单个空格隔开。x在float范围内，n &lt;= 1000000。</p>
<p><strong>输出格式</strong></p>
<p>输出一个实数，即多项式的值，精确到小数点后两位。保证最终结果在float范围内。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2</span>.<span class="number">0</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">31</span>.<span class="number">00</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">func</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> n)</span><span class="comment">//计算整数幂</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum *= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; n;</span><br><span class="line">    <span class="type">double</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = func(x, i);</span><br><span class="line">        sum += t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; fixed &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<p>计算整数幂最好使用double类型，位数更多，不容易溢出。</p>
<p>对于整数幂的计算，使用循环乘法（即逐次相乘）比使用 <code>pow</code> 函数更高效且精度更高。</p>
<hr>
<h3 id="题目-1231-杨辉三角">题目 1231: 杨辉三角</h3>
<p><strong>题目描述</strong></p>
<p>还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形：<br>
1<br>
1 1<br>
1 2 1<br>
1 3 3 1<br>
1 4 6 4 1<br>
1 5 10 10 5 1</p>
<p><strong>输入格式</strong></p>
<p>输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数n（1＜=n＜=30），表示将要输出的杨辉三角的层数。</p>
<p><strong>输出格式</strong></p>
<p>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">1</span>)</span><br><span class="line">            a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//将该行的第一个元素赋值为1</span></span><br><span class="line">                a[i][i] = <span class="number">1</span>;<span class="comment">//将该行的最后一个元素赋值为1</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= i - <span class="number">1</span>; j++)<span class="comment">//处理中间的元素</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i][j] = a[i - <span class="number">1</span>][j] + a[i - <span class="number">1</span>][j - <span class="number">1</span>];<span class="comment">//该元素=其位置上一行的元素+其位置上一行的元素的左边的元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="函数"><strong>函数</strong></h2>
<h3 id="题目-1017-完数的判断">题目 1017: 完数的判断</h3>
<p><strong>题目描述</strong></p>
<p>一个数如果恰好等于不包含它本身所有因子之和，这个数就称为&quot;完数&quot;。 例如，6的因子为1、2、3，而6=1+2+3，因此6是&quot;完数&quot;。 编程序找出N之内的所有完数，并按下面格式输出其因子</p>
<p><strong>输入格式</strong></p>
<p>N</p>
<p><strong>输出格式</strong></p>
<p>? its factors are ? ? ?</p>
<p><strong>样例输入</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span>its factors are <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="symbol">28 </span>its factors are <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">14</span> </span><br><span class="line"><span class="symbol">496 </span>its factors are <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">16</span> <span class="number">31</span> <span class="number">62</span> <span class="number">124</span> <span class="number">248</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; st;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//分解因数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x / <span class="number">2</span>; i++)<span class="comment">//x/2即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            st[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">//分解n以内每个数的因数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">func</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : st[i])<span class="comment">//对每个st[i]中的元素进行累加</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == sum)<span class="comment">//判断</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;<span class="string">&quot;its factors are&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : st[i])</span><br><span class="line">                cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;<span class="comment">//重置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分解因数，使用了map。</p>
<hr>
<h1>蓝桥杯真题</h1>
<h2 id="2024年第十五届蓝桥杯大赛软件类省赛C-C-大学A组真题"><strong>2024年第十五届蓝桥杯大赛软件类省赛C/C++大学A组真题</strong></h2>
<h3 id="试题A-艺术与篮球（模拟）"><strong>试题A: 艺术与篮球</strong>（模拟）</h3>
<p><strong>【问题描述】</strong></p>
<p>小蓝出生在一个艺术与运动并重的家庭中。</p>
<p>妈妈是位书法家，她希望小蓝能通过练习书法，继承她的艺术天赋，并练就一手好字。爸爸是一名篮球教练，他希望小蓝能通过篮球锻炼身体，培养运</p>
<p>动的激情和团队合作的精神。</p>
<p>为了既满足妈妈的期望，又不辜负爸爸的心意，小蓝决定根据日期的笔画数来安排自己的练习。首先，他会将当天的日期按照“YYYYMMDD”的格式转换成一个8 位数，然后将这8 位数对应到汉字上，计算这些汉字的总笔画数。如果总笔画数超过50，他就去练习篮球；如果总笔画数不超过50，他就去练习书法。</p>
<p>例如，在2024 年1 月1 日这天，日期可表示为一个8 位数字20240101，其转换为汉字是“二零二四零一零一”。日期的总笔画数为2+13+2+5+13+1 + 13 + 1 =50，因此在这天，小蓝会去练习书法。</p>
<p>以下是汉字的笔画数对照表：</p>
<p><img src="https://www.dotcpp.com/oj/ueditor/php/upload/image/20241204/1733279771936507.png" alt="A题艺术与篮球"></p>
<p>现在，请你帮助小蓝统计一下，在2000 年1 月1 日到2024 年4 月13 日这段时间内，小蓝有多少天是在练习篮球？</p>
<p><strong>【答案提交】</strong></p>
<p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[<span class="number">10</span>] = &#123; <span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span> &#125;;<span class="comment">//存储每个汉字的笔画数</span></span><br><span class="line"><span class="type">int</span> y = <span class="number">2000</span>, m = <span class="number">1</span>, d = <span class="number">1</span>;<span class="comment">//初始化日期为第一天</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> || m == <span class="number">3</span> || m == <span class="number">5</span> || m == <span class="number">7</span> || m == <span class="number">8</span> || m == <span class="number">10</span> || m == <span class="number">12</span>) &#123;<span class="comment">//大月31天</span></span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">31</span>) &#123;</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>) <span class="comment">//闰年,2月多一天是29天</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (d &gt; <span class="number">29</span>) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                    d = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (d &gt; <span class="number">28</span>) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                    d = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//小月30天</span></span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">30</span>) &#123;</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">            y++;</span><br><span class="line">            m = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算每一个数字的笔画数，年、月、日</span></span><br><span class="line">        sum += s[y % <span class="number">10</span>] + s[y / <span class="number">10</span> % <span class="number">10</span>] + s[y / <span class="number">100</span> % <span class="number">10</span>] + s[y / <span class="number">1000</span> % <span class="number">10</span>];</span><br><span class="line">        sum += s[m % <span class="number">10</span>] + s[m / <span class="number">10</span>];<span class="comment">//2月表示为02</span></span><br><span class="line">        sum += s[d % <span class="number">10</span>] + s[d / <span class="number">10</span>];<span class="comment">//2日表示为02</span></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">50</span>)</span><br><span class="line">            ans++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">2024</span> &amp;&amp; m == <span class="number">4</span> &amp;&amp; d == <span class="number">13</span>)<span class="comment">//停止枚举</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        d++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举每一天，依次进行判断。核心是区分好大月、小月和2月。</p>
<hr>
<h3 id="题目-3215-训练士兵（模拟）">题目 3215: 训练士兵（模拟）</h3>
<p><strong>题目描述</strong></p>
<p>在蓝桥王国中，有 n 名士兵，这些士兵需要接受一系列特殊的训练，以提升他们的战斗技能。对于第 i 名士兵来说，进行一次训练所需的成本为 pi 枚金币，而要想成为顶尖战士，他至少需要进行 ci 次训练。</p>
<p>为了确保训练的高效性，王国推出了一种组团训练的方案。该方案包含每位士兵所需的一次训练，且总共只需支付 S 枚金币（组团训练方案可以多次购买，即士兵可以进行多次组团训练）。</p>
<p>作为训练指挥官，请你计算出最少需要花费多少金币，才能使得所有的士兵都成为顶尖战士？</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含两个整数 n 和 S ，用一个空格分隔，表示士兵的数量和进行一次组团训练所需的金币数。接下来的 n 行，每行包含两个整数 pi 和 ci ，用一个空格分隔，表示第 i 名士兵进行一次训练的金币成本和要成为顶尖战士所需的训练次数。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数，表示使所有士兵成为顶尖战士所需的最少金币数。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>【样例说明】</p>
<p>花费金币最少的训练方式为：进行 2 次组团训练，花费 2 × 6 = 12 枚金币，此时士兵 1, 3 已成为顶尖战士；再花费 4 枚金币，让士兵 2 进行两次训练，成为顶尖战士。总花费为 12 + 4 = 16。</p>
<p>【评测用例规模与约定】</p>
<p>对于 40% 的评测用例，1 ≤ n ≤ 103，1 ≤ pi, ci ≤ 105，1 ≤ S ≤ 107。</p>
<p>对于所有评测用例，1 ≤ n ≤ 105，1 ≤ pi, ci ≤ 106，1 ≤ S ≤ 1010。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, s;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> sum_a = <span class="number">0</span>, sum_b = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        sum_a += a[i];<span class="comment">//存放每个人独自升级所需要的费用</span></span><br><span class="line">        sum_b += b[i];<span class="comment">//存放每个人距离升满级还需要的次数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (sum_a != <span class="number">0</span> &amp;&amp; sum_b != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum_a &gt;= s)<span class="comment">//如果每个人独自升级的费用之和&gt;=s,那就选择组团升级</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += s;<span class="comment">//选择组团升级</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                b[i]--;<span class="comment">//还需要升级的次数集体减一</span></span><br><span class="line">                <span class="keyword">if</span> (b[i] == <span class="number">0</span>)</span><br><span class="line">                    sum_a -= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//独自升级</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans += a[i];</span><br><span class="line">                    b[i]--;<span class="comment">//还需要升级的次数减一</span></span><br><span class="line">                    <span class="keyword">if</span> (b[i] == <span class="number">0</span>)</span><br><span class="line">                        sum_a -= a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>根据题意暴力模拟，只能拿55分，其他样例超时了。</p>
<p>超时原因分析：</p>
<p><strong>问题分析</strong>：</p>
<ol>
<li><strong>每次组团训练减少次数过于简单</strong>
<ul>
<li>你的代码每次判断 <code>sum_a &gt;= s</code> 时，就直接减少所有士兵的一次训练次数 <code>b[i]--</code>，但没有合理地分配组团训练的次数。</li>
<li>这导致循环执行次数过多，时间复杂度接近 <strong>O(n * max(ci))</strong>，在最坏情况下，可能达到 <strong>10^10</strong> 级别，明显超时。</li>
</ul>
</li>
<li><strong>逐个士兵单独训练过于低效</strong>
<ul>
<li>在 <code>else</code> 语句里，你是按顺序遍历每个士兵，并逐个减少 <code>b[i]--</code>，这样在 <code>n</code> 很大时，单独训练的次数可能会很多，增加了时间复杂度。</li>
</ul>
</li>
</ol>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, s;</span><br><span class="line"><span class="type">int</span> sum_p = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Soldier</span><span class="comment">//结构体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p, c;</span><br><span class="line">&#125;sd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Soldier a, Soldier b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.c &lt; b.c;<span class="comment">//按升满级所需要次数从小到大排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; sd[i].p &gt;&gt; sd[i].c;</span><br><span class="line">        sum_p += sd[i].p;<span class="comment">//存放每个士兵独自升级所需要的金币之和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(sd, sd + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;<span class="comment">//已经进行过组团训练的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//对每个士兵依次进行判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum_p &gt;= s) &#123;<span class="comment">//选择组团升级</span></span><br><span class="line">            ans += (sd[i].c - t) * s;</span><br><span class="line">            t += sd[i].c - t;<span class="comment">//更新t</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//选择独自升级</span></span><br><span class="line">            ans += sd[i].p * (sd[i].c - t);</span><br><span class="line">        &#125;</span><br><span class="line">        sum_p -= sd[i].p;<span class="comment">//去除该士兵</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>100分答案</p>
<p>核心是变量t的使用。</p>
<hr>
<h3 id="题目-3217-成绩统计（模拟）">题目 3217: 成绩统计（模拟）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝的班上有 n 个人，一次考试之后小蓝想统计同学们的成绩，第 i 名同学的成绩为 ai 。当小蓝统计完前 x 名同学的成绩后，他可以从 1 ∼ x 中选出任意 k 名同学的成绩，计算出这 k 个成绩的方差。小蓝至少要检查多少个人的成绩，才有可能选出 k 名同学，他们的方差小于一个给定的值 T ？</p>
<p>提示：k 个数 v1, v2, · · · , vk 的方差 σ2 定义为：σ2 =∑ki=1(vi−v’)/k ，其中 v’ 表示v 的平均值，v’ =∑ki=1 vi/k 。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含三个正整数 n, k, T ，相邻整数之间使用一个空格分隔。</p>
<p>第二行包含 n 个正整数 a1, a2, · · · , an ，相邻整数之间使用一个空格分隔。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。如果不能满足条件，输出 −1 。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>【样例说明】</p>
<p>检查完前三名同学的成绩后，只能选出 3, 2, 5 ，方差为 1.56 ；检查完前四名同学的成绩后，可以选出 3, 2, 2 ，方差为 0.33 &lt; 1 ，所以答案为 4 。</p>
<p>【评测用例规模与约定】</p>
<p>对于 10% 的评测用例，保证 1 ≤ n, k ≤ 102；</p>
<p>对于 30% 的评测用例，保证 1 ≤ n, k ≤ 103 ；</p>
<p>对于所有评测用例，保证 1 ≤ n, k ≤ 105 ，1 ≤ T ≤ 231 − 1 ，1 ≤ ai ≤ n 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, k, T;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">double</span> avg = <span class="number">0</span>, v = <span class="number">0</span>;<span class="comment">//avg表示k个成绩的均值，v表示与均值差距最大的数</span></span><br><span class="line"><span class="type">int</span> dex = <span class="number">0</span>;<span class="comment">//存放k个数中与均值差距最大的数的下标</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;<span class="comment">//计算k个成绩的方差并验证</span></span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;<span class="comment">//最终的方差</span></span><br><span class="line">    avg = <span class="number">0</span>;<span class="comment">//计算均值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        avg += b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    avg /= k;<span class="comment">//更新avg</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        sum += (b[i] - avg) * (b[i] - avg);</span><br><span class="line">    &#125;</span><br><span class="line">    sum /= k;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; T)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; T;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//这里不判断的话将少一半分数</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; k)<span class="comment">//如果k小于n就不需要考虑了，直接输出-1，结束程序</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//存入每个同学的成绩</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= k) &#123;<span class="comment">//先将前k个成绩存入b数组中</span></span><br><span class="line">            b[i] = a[i];</span><br><span class="line">            avg += b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    avg /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">calculate</span>()) &#123;<span class="comment">//如果前k个成绩的方差已经小于T了，直接输出下标并结束程序</span></span><br><span class="line">        cout &lt;&lt; k;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v = b[<span class="number">1</span>];<span class="comment">//令其先等于第一个数</span></span><br><span class="line">    dex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;<span class="comment">//找出k个数中与均值差距最大的数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(b[i] - avg) &gt; <span class="built_in">abs</span>(v - avg)) &#123;</span><br><span class="line">            v = b[i];</span><br><span class="line">            dex = i;<span class="comment">//存放该数的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a[i] - avg) &lt; <span class="built_in">abs</span>(v - avg)) &#123;<span class="comment">//往后找一个与均值差距较小的</span></span><br><span class="line">            b[dex] = a[i];<span class="comment">//替换</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">calculate</span>()) &#123;<span class="comment">//再次计算方差</span></span><br><span class="line">                cout &lt;&lt; i;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//如果方差还是不小于T，在新的k个成绩中再次找到一个与均值差距最大的数</span></span><br><span class="line">                v = b[<span class="number">1</span>];<span class="comment">//令其先等于第一个数</span></span><br><span class="line">                dex = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= k; j++) &#123;<span class="comment">//找出k个数中与均值差距最大的数</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">abs</span>(b[j] - avg) &gt; <span class="built_in">abs</span>(v - avg)) &#123;</span><br><span class="line">                        v = b[j];</span><br><span class="line">                        dex = j;<span class="comment">//存放该数的下标</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;<span class="comment">//遍历完全部成绩，依然没有找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据题意模拟，思路挺清晰的。</p>
<hr>
<h3 id="题目-3216-团建（DFS-哈希表）">题目 3216: 团建（DFS+哈希表）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝正在和朋友们团建，有一个游戏项目需要两人合作，两个人分别拿到一棵大小为 n 和 m 的树，树上的每个结点上有一个正整数权值。</p>
<p>两个人需要从各自树的根结点 1 出发走向某个叶结点，从根到这个叶结点的路径上经过的所有结点上的权值构成了一个正整数序列，两人的序列的最长公共前缀即为他们的得分。给出两棵树，请计算两个人最多的得分是多少。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含两个正整数 n, m ，用一个空格分隔。</p>
<p>第二行包含 n 个正整数 c1, c2, · · · , cn ，相邻整数之间使用一个空格分隔，其中 ci 表示第一棵树结点 i 上的权值。</p>
<p>第三行包含 m 个正整数 d1, d2, · · · , dm ，相邻整数之间使用一个空格分隔，其中 di 表示第二棵树结点 i 上的权值。接下来 n − 1 行，每行包含两个正整数 ui, vi 表示第一棵树中包含一条 ui 和vi 之间的边。</p>
<p>接下来 m − 1 行，每行包含两个正整数 pi, qi 表示第二棵树中包含一条 pi和 qi 之间的边。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">20</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">30</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>【样例说明】两个序列可以为 [10, 20] , [10, 30] ，最大前缀为 1 ；</p>
<p>【样例输入】</p>
<p>5 4</p>
<p>10 20 30 40 50</p>
<p>10 40 20 30</p>
<p>1 2</p>
<p>1 3</p>
<p>2 4</p>
<p>3 5</p>
<p>1 2</p>
<p>1 3</p>
<p>3 4</p>
<p>【样例输出】</p>
<p>2</p>
<p>【样例说明】</p>
<p>两个序列可以为 [10, 20, 40] , [10, 20, 30] ，最大前缀为 2 。</p>
<p>【评测用例规模与约定】</p>
<p>对于 20% 的评测用例，1 ≤ n, m ≤ 500 ；对于所有评测用例，1 ≤ n, m ≤ 2 × 105，1 ≤ ci, di ≤ 108 ，1 ≤ ui, vi ≤ n ，1 ≤ pi, qi ≤ m ，对于任意结点，其儿子结点的权重互不相同。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span> ;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c[N], d[N];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*参数含义：</span></span><br><span class="line"><span class="comment">len：当前公共前缀长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">x：当前在树 A 的节点编号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">y：当前在树 B 的节点编号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fa_x、fa_y：分别是 A 和 B 当前节点的“父节点”，用于避免回到上一个节点（防止死循环）。*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> len, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> fa_x, <span class="type">int</span> fa_y)</span> </span>&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, len);</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; t;<span class="comment">//哈希表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : c[x]) &#123;<span class="comment">//建立 A树当前节点 的孩子节点权值到节点编号的映射</span></span><br><span class="line">        <span class="keyword">if</span> (it != fa_x) &#123;<span class="comment">//这里的it只是变量，并不是迭代器</span></span><br><span class="line">            t[a[it]] = it;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : d[y]) &#123;<span class="comment">//遍历 B树当前节点 的孩子节点</span></span><br><span class="line">        <span class="keyword">if</span> (it != fa_y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.<span class="built_in">count</span>(b[it])) &#123;<span class="comment">//如果B树的孩子节点的权值可以在A树中找到，那么就len+1，同步往下一层找</span></span><br><span class="line">                <span class="built_in">dfs</span>(len + <span class="number">1</span>, t[b[it]], it, x, y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//存入节点的权值</span></span><br><span class="line">        cin &gt;&gt; a[i];<span class="comment">//A树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];<span class="comment">//B树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;<span class="comment">//构建邻接表</span></span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        c[x].<span class="built_in">push_back</span>(y);<span class="comment">//A树</span></span><br><span class="line">        c[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        d[x].<span class="built_in">push_back</span>(y);<span class="comment">//B树</span></span><br><span class="line">        d[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">1</span>] == b[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>挺简单的dfs，同步深搜思想。</p>
<hr>
<h2 id="2024年第十五届蓝桥杯大赛软件类省赛C-C-大学B组真题"><strong>2024年第十五届蓝桥杯大赛软件类省赛C/C++大学B组真题</strong></h2>
<h3 id="题目-3209-好数">题目 3209: 好数</h3>
<p><strong>题目描述</strong></p>
<p>一个整数如果按从低位到高位的顺序，奇数位（个位、百位、万位 · · · ）上的数字是奇数，偶数位（十位、千位、十万位 · · · ）上的数字是偶数，我们就称之为“好数”。给定一个正整数 N，请计算从 1 到 N 一共有多少个好数。</p>
<p><strong>输入格式</strong></p>
<p>一个整数 N。</p>
<p><strong>输出格式</strong></p>
<p>一个整数代表答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于第一个样例，24 以内的好数有 1、3、5、7、9、21、23，一共 7 个。试题 C: 好数 4第十五届蓝桥杯大赛软件赛省赛 C/C++ 大学 B 组【评测用例规模与约定】对于 10% 的评测用例，1 ≤ N ≤ 100。对于 100% 的评测用例，1 ≤ N ≤ 107。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        string s = <span class="built_in">to_string</span>(i);<span class="comment">//转换为字符串，方便统计该数的总位数</span></span><br><span class="line">        <span class="type">int</span> q = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;<span class="comment">//用来标记现在进行到第几位</span></span><br><span class="line">        <span class="keyword">while</span> (t != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q = t % <span class="number">10</span>;<span class="comment">//逐位取</span></span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; q % <span class="number">2</span> != <span class="number">0</span>)<span class="comment">//奇数位上的数字是奇数</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (flag % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; q % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">//偶数位上的数字是偶数</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//若都不满足，直接跳出，考虑下一个数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (--flag == s.<span class="built_in">size</span>())<span class="comment">//如果成功遍历完，那就说明这个数是好数</span></span><br><span class="line">            ans++;</span><br><span class="line">        flag = <span class="number">0</span>;<span class="comment">//重置</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>直接暴力即可，对每个数逐位判断。</p>
<p>不会超时的理由：</p>
<p>虽然 <code>O(n log n)</code> 在 <code>N = 10^7</code> 时理论上会有 <code>7 × 10^7</code> 次操作，</p>
<p>但由于整数运算高效、输入优化以及编译器优化，程序运行时间仍然在 1 秒以内，因此不会超时。</p>
<hr>
<h2 id="2024年第十五届蓝桥杯大赛软件类省赛C-C-大学C组真题"><strong>2024年第十五届蓝桥杯大赛软件类省赛C/C++大学C组真题</strong></h2>
<p><strong>试题A: 拼正方形</strong>（本题总分：5 分）</p>
<p>【问题描述】</p>
<p>小蓝正在玩拼图游戏，他有<strong>7385137888721 个2 x 2 的方块</strong>和<strong>10470245 个1 x 1 的方块</strong>，他需要从中挑出一些来拼出一个正方形，比如用3 个2 x 2 和4个1 x 1 的方块可以拼出一个4 x 4 的正方形，用9 个2 x 2 的方块可以拼出一个6 x 6 的正方形，请问小蓝能拼成的最大的正方形的边长为多少。</p>
<p>【答案提交】</p>
<p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p>
<hr>
<p>可以利用数学的思想，先全部使用2<em>2的方块。每个方块的面积是4。<br>
$$<br>
L^2=4a<br>
$$<br>
开平方根得：<br>
$$<br>
L=\sqrt{4a}<br>
$$<br>
使用计算器计算并下取整得：<br>
$$<br>
L=5435122<br>
$$<br>
接着尝试使用1</em>1的方块在外面围一圈：<br>
$$<br>
4\times5435122+4=21740492&gt;10470245<br>
$$<br>
远远大于1*1的方块数量，故答案就是<strong>5435122</strong>。</p>
<hr>
<h3 id="题目-3221-数字诗意（数学规律）">题目 3221: 数字诗意（数学规律）</h3>
<p><strong>题目描述</strong></p>
<p>在诗人的眼中，数字是生活的韵律，也是诗意的表达。</p>
<p>小蓝，当代顶级诗人与数学家，被赋予了 “数学诗人” 的美誉。他擅长将冰冷的数字与抽象的诗意相融合，并用优雅的文字将数学之美展现于纸上。</p>
<p>某日，小蓝静坐书桌前，目光所及，展现着 n 个数字，它们依次为a1, a2, . . . , an，熠熠生辉。小蓝悟到，如果一个数能够以若干个（至少两个）<strong>连续的正整数</strong>相加表示，那么它就蕴含诗意。例如，数字 6 就蕴含诗意，因为它可以表示为 1 + 2 + 3。而 8 则缺乏诗意，因为它无法用连续的正整数相加表示。</p>
<p>小蓝希望他面前的所有数字都蕴含诗意，为此，他决定从这 n 个数字中删除一部分。请问，小蓝需要删除多少个数字，才能使剩下的数字全部蕴含诗意？</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含一个整数 n，表示展示的数字个数。</p>
<p>第二行包含 n 个整数 a1, a2, . . . , an，相邻整数之间使用一个空格分隔，表示展示的数字。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数，表示小蓝需要删除的数字个数，以使剩下的数字全部蕴含诗意。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>【样例说明】</p>
<p>在样例中，数字 3 可以表示为 1 + 2，数字 6 可以表示为 1 + 2 + 3，数字 8无法表示为连续的正整数相加，因此，需要删除的数字个数为 1。</p>
<p>【评测用例规模与约定】</p>
<p>对于 30% 的评测用例，1 ≤ n ≤ 103，1 ≤ ai ≤ 103。对于所有评测用例，1 ≤ n ≤ 2 × 105，1 ≤ ai ≤ 1016</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,num;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//能用for循环就for循环吧</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>)<span class="comment">//奇数一定是</span></span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> t = num;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = t / <span class="number">2</span>; j &gt; <span class="number">0</span>; j--)<span class="comment">//倒序枚举</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> q = j;</span><br><span class="line">                <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (sum &lt; t)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += q;</span><br><span class="line">                    q--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sum == t)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己写的纯暴力，结果全部超时！！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,num;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>)<span class="comment">//奇数一定是</span></span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((num &amp; (num - <span class="number">1</span>)) != <span class="number">0</span>)<span class="comment">//不是2的幂也一定是</span></span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我只发现了奇数一定可以由连续的数组成，然而不是2的幂的偶数也一定可以。</p>
<p>如何<strong>判断一个数是否是2的幂</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-04-01_20-57-34.png" alt=""></p>
<hr>
<h3 id="题目-3240-封闭图形个数（sort函数自定义排序规则）">题目 3240: 封闭图形个数（sort函数自定义排序规则）</h3>
<p><strong>题目描述</strong></p>
<p>在蓝桥王国，数字的大小不仅仅取决于它们的数值大小，还取决于它们所形成的“封闭图形”的个数。</p>
<p>封闭图形是指数字中完全封闭的空间，例如数字 1、2、3、5、7 都没有形成封闭图形，而数字 0、4、6、9 分别形成了 1 个封闭图形，数字 8 则形成了 2个封闭图形。值得注意的是，封闭图形的个数是可以累加的。例如，对于数字68，由于 6 形成了 1 个封闭图形，而 8 形成了 2 个，所以 68 形成的封闭图形的个数总共为 3。</p>
<p>在比较两个数的大小时，如果它们的封闭图形个数不同，那么封闭图形个数较多的数更大。例如，数字 41 和数字 18，它们对应的封闭图形的个数分别为 1 和 2，因此数字 41 小于数组 18。如果两个数的封闭图形个数相同，那么数值较大的数更大。例如，数字 14 和数字 41，它们的封闭图形的个数都是 1，但 14 &lt; 41，所以数字 14 小于数字 41。如果两个数字的封闭图形个数和数值都相同，那么这两个数字被认为是相等的。</p>
<p>小蓝对蓝桥王国的数字大小规则十分感兴趣。现在，他将给定你 n 个数a1, a2, . . . , an，请你按照蓝桥王国的数字大小规则，将这 n 数从小到大排序，并输出排序后结果。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含一个整数 n ，表示给定的数字个数。</p>
<p>第二行包含 n 个整数 a1, a2, . . . , an ，相邻整数之间使用一个空格分隔，表示待排序的数字。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含 n 个整数，相邻整数之间使用一个空格分隔，表示按照蓝桥王国的数字大小规则从小到大排序后的结果。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">18 </span><span class="number">29</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">29</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>【样例说明】</p>
<p>对于给定的数字序列 [18, 29, 6]，数字 18 的封闭图形个数为 2，数字 29 的封闭图形个数为 1，数字 6 的封闭图形个数为 1。按照封闭图形个数从小到大排序后，得到 [29, 6, 18]。由于数字 29 和数字 6 的封闭图形个数相同，因此需要进一步按照数值大小对它们进行排序，最终得到 [6, 29, 18]。</p>
<p>【评测用例规模与约定】</p>
<p>对于 50% 的评测用例，1 ≤ n ≤ 2 × 103，1 ≤ ai ≤ 105。对于所有评测用例，1 ≤ n ≤ 2 × 105，1 ≤ ai ≤ 109。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> st[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span><span class="comment">//自定义排序规则</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = a, y = b;<span class="comment">//避免改变形参的值</span></span><br><span class="line">    <span class="type">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = x % <span class="number">10</span>;<span class="comment">//取每个位</span></span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        sum1 += st[t];<span class="comment">//逐位计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (y != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = y % <span class="number">10</span>;<span class="comment">// 取每个位</span></span><br><span class="line">        y /= <span class="number">10</span>;</span><br><span class="line">        sum2 += st[t];<span class="comment">//逐位计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回规则</span></span><br><span class="line">    <span class="keyword">if</span> (sum1 == sum2)<span class="comment">//记得是两个等号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum1 &lt; sum2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放每个数字具有的封闭空间个数</span></span><br><span class="line">    st[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//别忘记了</span></span><br><span class="line">    st[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    st[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    st[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">8</span>] = <span class="number">2</span>;</span><br><span class="line">    st[<span class="number">9</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(num, num + n, cmp);<span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>复习了sort函数自定义排序规则，100分！！！</p>
<hr>
<h3 id="题目-3242-商品库存管理（一维差分-前缀和）">题目 3242: 商品库存管理（一维差分+前缀和）</h3>
<p><strong>题目描述</strong></p>
<p>在库存管理系统中，跟踪和调节商品库存量是关键任务之一。小蓝经营的仓库中存有多种商品，这些商品根据类别和规格被有序地分类并编号，编号范围从 1 至 n。初始时，每种商品的库存量均为 0。</p>
<p>为了高效地监控和调整库存量，小蓝的管理团队设计了 m 个操作，每个操作涉及到一个特定的商品区间，即一段连续的商品编号范围（例如区间 [L, R]）。执行这些操作时，区间内每种商品的库存量都将增加 1。然而，在某些情况下，管理团队可能会决定不执行某些操作，使得这些操作涉及的商品区间内的库存量不会发生改变，维持原有的状态。</p>
<p>现在，管理团队需要一个评估机制，来确定如果某个操作未被执行，那么最终会有多少种商品的库存量为 0。对此，请你为管理团队计算出，对于每个操作，如果不执行该操作而执行其它操作，库存量为 0 的商品的种类数。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含两个整数 n 和 m，分别表示商品的种类数和操作的个数。接下来的 m 行，每行包含两个整数 L 和 R，表示一个操作涉及的商品区间。</p>
<p><strong>输出格式</strong></p>
<p>输出 m 行，每行一个整数，第 i 行的整数表示如果不执行第 i 个操作，则最终库存量为 0 的商品种类数。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>【样例说明】考虑不执行每个操作时，其余操作对商品库存的综合影响：</p>
<p>- <strong>不执行操作 1</strong>：剩余的操作是操作 2（影响区间 [2, 4]）和操作 3（影响区间 [3, 5]）。执行这两个操作后，商品库存序列变为 [0, 1, 2, 2, 1]。在这种情况下，只有编号为 1 的商品的库存量为 0。因此，库存量为 0 的商品种类数为 1。</p>
<p>- <strong>不执行操作 2</strong>：剩余的操作是操作 1（影响区间 [1, 2]）和操作 3（影响区间 [3, 5]）。执行这两个操作后，商品库存序列变为 [1, 1, 1, 1, 1]。在这种情况下，所有商品的库存量都不为 0。因此，库存量为 0 的商品种类数为 0。</p>
<p>- <strong>不执行操作 3</strong>：剩余的操作是操作 1（影响区间 [1, 2]）和操作 2（影响区间 [2, 4]）。执行这两个操作后，商品库存序列变为 [1, 2, 1, 1, 0]。在这种情况下，只有编号为 5 的商品的库存量为 0。因此，库存量为 0 的商品种类数为 1。</p>
<p>【评测用例规模与约定】对于 20% 的评测用例，1 ≤ n, m ≤ 5 × 103，1 ≤ L ≤ R ≤ n。对于所有评测用例，1 ≤ n, m ≤ 3 × 105，1 ≤ L ≤ R ≤ n。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], d[N], p[N];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">vector&lt;pii&gt; st;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    st.<span class="built_in">resize</span>(m + <span class="number">1</span>); <span class="comment">// 预分配空间，防止 st[i] 访问越界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        st[i] = &#123;l, r&#125;;</span><br><span class="line"></span><br><span class="line">        d[l]++;</span><br><span class="line">        d[r + <span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//恢复原数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + d[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">0</span>)<span class="comment">//统计商品为0的种类数</span></span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//构造前缀和数组，用于存放前i个数里，1的个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + (a[i] == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)<span class="comment">//时间复杂度降为O(m)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = st[i].first;</span><br><span class="line">        <span class="type">int</span> r = st[i].second;</span><br><span class="line">        cout &lt;&lt; sum + p[r] - p[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到题目时就想到了用差分做，但是怎么也没想到还要使用前缀和。</p>
<p>首先利用一维差分计算出进行了全部操作后各商品的种类数，接下来就是撤回某次操作，统计商品数为0的种类数。</p>
<p>那么如何撤回呢？</p>
<p>1.统计所有商品种类数为0的个数。</p>
<p>2.统计每个前缀中商品种类数为1的个数。</p>
<p>3.撤回某个区间的操作，就是等于把这个区间内原本商品种类数为1的变为0，（大于1的不用管，它们减去1也变不成0，对答案没有影响）。</p>
<p>4.利用p[r] - p[l - 1]求出l到r之间商品种类数为1的个数。</p>
<p>5.将区间外商品种类数为0的个数加上区间内商品种类数为1的个数就是最终的答案。</p>
<p>奇怪的是，该解在洛谷可以AC，但是在dotcpp只能拿9分。</p>
<p>若不使用前缀和提前计算出每个前缀中商品种类数为1的个数，那么就需要遍历l到r这个区间m次，时间复杂度为O(m*n),必然会超时。</p>
<hr>
<h2 id="2023年第十四届蓝桥杯大赛软件类省赛C-C-大学A组真题"><strong>2023年第十四届蓝桥杯大赛软件类省赛C/C++大学A组真题</strong></h2>
<h3 id="题目-3143-更小的数（区间DP）"><strong>题目 3143: 更小的数</strong>（区间DP）</h3>
<p><strong>题目描述</strong></p>
<p><img src="https://www.dotcpp.com/oj/upload/image/20230408/20230408215937_37447.png" alt="蓝桥杯2023年第十四届省赛真题-更小的数"></p>
<p>小蓝有一个长度均为 n 且仅由数字字符 0 ∼ 9 组成的字符串，下标从 0 到 n − 1，你可以将其视作是一个具有 n 位的十进制数字 num，小蓝可以从 num 中选出一段连续的子串并将子串进行反转，<strong>最多反转一次</strong>。小蓝想要将选出的子串进行反转后再放入原位置处得到的新的数字 numnew 满足条件 numnew &lt; num，请你帮他<strong>计算下一共有多少种不同的子串选择方案</strong>，只要两个子串在 num 中的位置不完全相同我们就视作是不同的方案。</p>
<p>注意，我们允许前导零的存在，即数字的最高位可以是 0 ，这是合法的。</p>
<p><strong>输入格式</strong></p>
<p>输入一行包含一个长度为 n 的字符串表示 num（仅包含数字字符 0 ∼ 9），</p>
<p>从左至右下标依次为 0 ∼ n − 1。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">210102</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>一共有 8 种不同的方案：</p>
<p>1）所选择的子串下标为 0 ∼ 1 ，反转后的 numnew = 120102 &lt; 210102 ；</p>
<p>2）所选择的子串下标为 0 ∼ 2 ，反转后的 numnew = 012102 &lt; 210102 ；</p>
<p>3）所选择的子串下标为 0 ∼ 3 ，反转后的 numnew = 101202 &lt; 210102 ；</p>
<p>4）所选择的子串下标为 0 ∼ 4 ，反转后的 numnew = 010122 &lt; 210102 ；</p>
<p>5）所选择的子串下标为 0 ∼ 5 ，反转后的 numnew = 201012 &lt; 210102 ；</p>
<p>6）所选择的子串下标为 1 ∼ 2 ，反转后的 numnew = 201102 &lt; 210102 ；</p>
<p>7）所选择的子串下标为 1 ∼ 4 ，反转后的 numnew = 201012 &lt; 210102 ；</p>
<p>8）所选择的子串下标为 3 ∼ 4 ，反转后的 numnew = 210012 &lt; 210102 ；</p>
<p>对于 20% 的评测用例，1 ≤ n ≤ 100 ；</p>
<p>对于 40% 的评测用例，1 ≤ n ≤ 1000 ；</p>
<p>对于所有评测用例，1 ≤ n ≤ 5000 。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> n = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> f[n][n];<span class="comment">//默认全为0</span></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//区间DP</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= s.size(); len++)<span class="comment">//子串长度为2、3、4、5...时1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l + len - <span class="number">1</span> &lt; s.size(); l++)<span class="comment">//左右边界的下标l和r</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r = l + len - <span class="number">1</span>;<span class="comment">//右边界下标</span></span><br><span class="line">            <span class="keyword">if</span> (s[l] &gt; s[r]) </span><br><span class="line">                f[l][r] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[l] == s[r]) </span><br><span class="line">                f[l][r] = f[l + <span class="number">1</span>][r - <span class="number">1</span>];<span class="comment">//状态转移</span></span><br><span class="line">            </span><br><span class="line">            ans += f[l][r];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题使用到了区间DP，好厉害的算法。</p>
<hr>
<h3 id="题目-3145-买瓜（DFS-剪枝-贪心）">题目 3145: 买瓜（DFS+剪枝+贪心）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝正在一个瓜摊上买瓜。瓜摊上共有 n 个瓜，每个瓜的重量为 Ai 。</p>
<p>小蓝刀功了得，他可以把任何瓜劈成完全等重的两份，不过<strong>每个瓜只能劈一刀</strong>。</p>
<p>小蓝希望买到的瓜的重量的和恰好为 m 。</p>
<p>请问小蓝<strong>至少要劈多少个瓜才能买到重量恰好为 m 的瓜</strong>。如果无论怎样小蓝都无法得到总重恰好为 m 的瓜，请输出 <strong>−1</strong> 。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含两个整数 n, m，用一个空格分隔，分别表示瓜的个数和小蓝想买到的瓜的总重量。</p>
<p>第二行包含 n 个整数 Ai，相邻整数之间使用一个空格分隔，分别表示每个瓜的重量。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">13</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 20% 的评测用例，∑n≤10；</p>
<p>对于 60% 的评测用例，∑n≤20；</p>
<p>对于所有评测用例，1 ≤n≤30，1≤ Ai ≤ 1e9 ，1 ≤ m ≤ 1e9</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">32</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> ans = INF;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> s[N];<span class="comment">//后缀和数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">double</span> w, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//u：当前考虑到第u个瓜</span></span><br><span class="line">    <span class="comment">//w：要买的瓜的总重量</span></span><br><span class="line">    <span class="comment">//cnt：砍过的刀数</span></span><br><span class="line">    <span class="keyword">if</span> (w == m)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, cnt);<span class="comment">//选个更小的</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果遍历过了所有的瓜，那就返回</span></span><br><span class="line">    <span class="keyword">if</span> (u &gt;= n)<span class="comment">//dfs出口</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//剪枝策略</span></span><br><span class="line">    <span class="comment">//如果当前答案不如最优解，那就返回</span></span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= ans)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//如果瓜的重量已经超了，那就返回</span></span><br><span class="line">    <span class="keyword">if</span> (w &gt;= m)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//如果后面瓜的重量之和加上考虑过的，已经小于m了，那就返回</span></span><br><span class="line">    <span class="keyword">if</span> (w + s[u] &lt; m)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//考虑下一个瓜</span></span><br><span class="line">    <span class="comment">//不要这个瓜</span></span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, w, cnt);</span><br><span class="line">    <span class="comment">//要，不砍</span></span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, w + a[u], cnt);</span><br><span class="line">    <span class="comment">//要，砍一半</span></span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, w + a[u] / <span class="number">2.0</span>, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//输入每个瓜的重量</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="built_in">reverse</span>(a, a + n);<span class="comment">//对瓜的重量从大到小排序，贪心</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//存放后缀和，s[i]表示从i个瓜以后的重量之和，预处理</span></span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = s[i + <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0.0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans == INF) ans = <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题使用DFS+剪枝+贪心。</p>
<p>好好想想如何剪枝。</p>
<hr>
<h3 id="题目-3142-平方差-打表">题目 3142: 平方差(打表)</h3>
<p><strong>题目描述</strong></p>
<p>给定 L, R，问 L ≤ x ≤ R 中有多少个数 x 满足存在整数 y,z 使得 x = y2 − z2。</p>
<p><strong>输入格式</strong></p>
<p>输入一行包含两个整数 L, R，用一个空格分隔。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数满足题目给定条件的 x 的数量。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>1 = 1^2 − 0^2 ；</p>
<p>3 = 2^2 − 1^2 ；</p>
<p>4 = 2^2 − 0^2 ；</p>
<p>5 = 3^2 − 2^2 。</p>
<p>对于 40% 的评测用例，LR ≤ 5000 ；</p>
<p>对于所有评测用例，1 ≤ L ≤ R ≤ 1e9 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打表找规律,测试100以内的数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> st[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">100</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">100</span>; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (i == (j * j - k * k)) &#123;</span><br><span class="line">					<span class="comment">//if (i % 2) continue;//避开奇数</span></span><br><span class="line">					<span class="keyword">if</span> (!st[i])<span class="comment">//避免重复输出</span></span><br><span class="line">						cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">					st[i] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test();</span></span><br><span class="line">	<span class="type">int</span> l, r;</span><br><span class="line">	cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">	<span class="type">int</span> One_to_R = <span class="built_in">ceil</span>(r / <span class="number">2.0</span>) + r / <span class="number">4</span>;</span><br><span class="line">	<span class="type">int</span> One_to_L_sub_1 = <span class="built_in">ceil</span>((l - <span class="number">1</span>) / <span class="number">2.0</span>) + (l - <span class="number">1</span>) / <span class="number">4</span>;</span><br><span class="line">	cout &lt;&lt; One_to_R - One_to_L_sub_1;<span class="comment">//用1到R的答案减去1到L-1的答案，就是L到R的答案</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题使用打表法。</p>
<p>注意到数据范围的边界为1e9，那就意味着即便使用O(n)的方法去做也无法通过全部测试样例。</p>
<p>先测试100以内的数据观察规律，可以发现数据都是奇数和4的倍数。</p>
<p>那么问题就转化为如何求出L到R之间，奇数和4的倍数的总数。</p>
<hr>
<h3 id="题目-3144-颜色平衡树（DFS-哈希表）">题目 3144: 颜色平衡树（DFS+哈希表）</h3>
<p><strong>题目描述</strong></p>
<p>给定一棵树，结点由 1 至 n 编号，其中结点 1 是树根。树的每个点有一个颜色 Ci。</p>
<p>如果一棵树中存在的每种颜色的结点个数都相同，则我们称它是一棵颜色平衡树。</p>
<p>求出这棵树中有多少个子树是颜色平衡树。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含一个整数 n ，表示树的结点数。</p>
<p>接下来 n 行，每行包含两个整数 Ci , Fi，用一个空格分隔，表示第 i 个结点的颜色和父亲结点编号。</p>
<p>特别地，输入数据保证 F1 为 0 ，也即 1 号点没有父亲结点。保证输入数据是一棵树。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>编号为 1, 3, 5, 6 的 4 个结点对应的子树为颜色平衡树。</p>
<p>对于 30% 的评测用例，n ≤ 200，Ci ≤ 200 ；</p>
<p>对于 60% 的评测用例，n ≤ 5000，Ci ≤ 5000 ；</p>
<p>对于所有评测用例，1 ≤ n ≤ 200000，1 ≤ Ci ≤ 200000，0 ≤ Fi &lt; i 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; f_son[N];<span class="comment">//存放每个节点的儿子节点</span></span><br><span class="line"><span class="type">int</span> color[N];<span class="comment">//存放每个节点的颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x表示当前遍历到了哪个节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!f_son[x].<span class="built_in">size</span>())<span class="comment">//深搜到了叶子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        mp[color[x]]++;<span class="comment">//先把当前节点的颜色数加一</span></span><br><span class="line">        ans++;<span class="comment">//叶子节点一定是颜色平衡树，答案加一</span></span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//返回上一层</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; it;<span class="comment">//新建一个哈希表，存放 颜色种类：颜色数</span></span><br><span class="line">    it[color[x]]++;<span class="comment">//先把当前节点的颜色数加一</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; f_son[x].<span class="built_in">size</span>(); i++)<span class="comment">//遍历当前节点的所有儿子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(f_son[x][i], it);<span class="comment">//把当前节点的哈希表it传给儿子节点，便于后续上传颜色数信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pre = <span class="number">0</span>, flag = <span class="number">1</span>;<span class="comment">//判断当前子树是否是颜色平衡树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : it)</span><br><span class="line">    &#123;</span><br><span class="line">        mp[i.first] += i.second;<span class="comment">//把当前子树的哈希表信息上传给父亲节点</span></span><br><span class="line">        <span class="keyword">if</span> (pre &amp;&amp; pre != i.second) <span class="comment">// 如果pre已经被赋值但是不与其他颜色数相等，则不是颜色平衡树</span></span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        pre = i.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)<span class="comment">//颜色数都相同，说明该子树是颜色平衡树</span></span><br><span class="line">        ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//输入</span></span><br><span class="line">        cin &gt;&gt; color[i] &gt;&gt; f;</span><br><span class="line">        f_son[f].<span class="built_in">push_back</span>(i);<span class="comment">//存放每个节点的孩子节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; st;<span class="comment">//根节点的哈希表，最终自下而上所有的颜色数信息都会汇总到这里</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, st);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解是我现阶段唯一看得懂的答案（即使也花了些时间理解），没有用什么高深的算法，就是单纯的DFS遍历。</p>
<p>结合图一步步推导完了全流程，不禁感叹DFS的精妙，嗯，还得努力啊。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250406211831192.png" alt="image-20250406211831192" style="zoom: 50%;" />
<hr>
<h2 id="2023年第十四届蓝桥杯大赛软件类省赛C-C-大学B组真题"><strong>2023年第十四届蓝桥杯大赛软件类省赛C/C++大学B组真题</strong></h2>
<h3 id="题目-3150-冶炼金属（暴力-二分）">题目 3150: 冶炼金属（暴力/二分）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝有一个神奇的炉子用于将普通金属 O 冶炼成为一种特殊金属 X。这个炉子有一个称作<strong>转换率</strong>的属性 V，V 是一个正整数，这意味着消耗 V 个普通金属 O 恰好可以冶炼出一个特殊金属 X，<strong>当普通金属 O 的数目不足 V 时，无法继续冶炼</strong>。</p>
<p>现在给出了 N 条冶炼记录，每条记录中包含两个整数 A 和 B，这表示本次投入了 A 个普通金属 O，最终冶炼出了 B 个特殊金属 X。每条记录都是独立的，这意味着<strong>上一次没消耗完的普通金属 O 不会累加到下一次的冶炼当中</strong>。</p>
<p>根据这 N 条冶炼记录，请你<strong>推测出转换率 V 的最小值和最大值</strong>分别可能是多少，题目保证评测数据不存在无解的情况。</p>
<p><strong>输入格式</strong></p>
<p>第一行一个整数 N，表示冶炼记录的数目。</p>
<p>接下来输入 N 行，每行两个整数 A、B，含义如题目所述。</p>
<p><strong>输出格式</strong></p>
<p>输出两个整数，分别表示 V 可能的最小值和最大值，中间用空格分开。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">75 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">53 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">59 </span><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">20 </span><span class="number">25</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p><strong>当 V = 20 时</strong>，有：⌊75/20⌋ = 3，⌊ 53/20 ⌋ = 2，⌊ 59/20 ⌋ = 2，可以看到符合所有冶炼记录。</p>
<p><strong>当 V = 25 时</strong>，有：⌊75/25⌋ = 3，⌊ 53/25 ⌋ = 2，⌊ 59/25 ⌋ = 2，可以看到符合所有冶炼记录。</p>
<p>且再也找不到比 20 更小或者比 25 更大的符合条件的 V 值了。</p>
<p>对于 30% 的评测用例，1 ≤ N ≤ 10^2。</p>
<p>对于 60% 的评测用例，1 ≤ N ≤ 10^3。</p>
<p>对于 100% 的评测用例，1 ≤ N ≤ 10^4，1 ≤ B ≤ A ≤ 10^9。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span></span>; <span class="comment">// 初始化 a 和 b，大小为 n+1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//存入A，B值</span></span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e6</span>; i++)<span class="comment">//暴力枚举所有V（求min）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)<span class="comment">//用当前的V测试所有样例</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[j] != a[j] / i)<span class="comment">//如果出现一个情况不满足，那么这个V就不合法，找下一个V</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="comment">//找到直接输出即最小的V</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1e6</span>; i &gt;= <span class="number">1</span>; i--)<span class="comment">//暴力枚举所有V（求max）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[j] != a[j] / i)<span class="comment">//如果出现一个情况不满足，那么这个V就不合法，找下一个V</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="comment">//找到直接输出即最大的V</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用<strong>暴力枚举</strong>，需要折中枚举值的范围。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-03-01_10-23-48.png" alt=""></p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b; <span class="comment">// 动态分配大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_min</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//用当前的V测试所有样例</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] &lt; a[i] / mid)<span class="comment">//如果V值很小</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果有任何一组不合法，就返回0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//b[i] &gt;= a[i] / V （所有的样例都满足，说明V值很大）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_max</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//用当前的V测试所有样例</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] &gt; a[i] / mid)<span class="comment">//如果V值很大</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果有任何一组不合法，就返回0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//b[i] &lt;= a[i] / V（所有的样例都满足，说明V值很小）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a.<span class="built_in">resize</span>(n + <span class="number">1</span>); <span class="comment">// 动态分配大小</span></span><br><span class="line">    b.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//存入A，B值</span></span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找最小值V</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check_min</span>(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找最大值V</span></span><br><span class="line">    l = <span class="number">1</span>, r = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//避免死循环</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check_max</span>(mid))</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用<strong>二分答案法</strong>，要记住对应的模板。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250301132745983.png" alt="image-20250301132745983"></p>
<p>当mid落入合法区域时，V值正好，满足b[i] = a[i] / mid</p>
<p>当mid落入合法区域的右边时，V值过大，满足b[i] &gt; a[i] / mid</p>
<p>当mid落入合法区域的左边时，V值过小，满足b[i] &lt; a[i] / mid</p>
<p>关于找最大值时mid = (l + r + 1) / 2的解释：</p>
<p><strong>场景 1：找最大值</strong></p>
<ul>
<li>在找最大值时，如果 <code>mid</code> 满足条件，<strong>我们希望 <code>l</code> 向右移动</strong>，即 <code>l = mid</code>。</li>
<li>如果使用 <code>mid = (l + r) / 2</code>，当 <code>l</code> 和 <code>r</code> 相邻时，<code>mid</code> 会偏向左侧，导致 <code>l</code> 无法更新，陷入死循环。</li>
<li>使用 <code>mid = (l + r + 1) / 2</code>，可以确保 <code>mid</code> 偏向右侧，避免死循环。</li>
</ul>
<p><strong>场景 2：找最小值</strong></p>
<ul>
<li>在找最小值时，如果 <code>mid</code> 满足条件，<strong>我们希望 <code>r</code> 向左移动</strong>，即 <code>r = mid</code>。</li>
<li>使用 <code>mid = (l + r) / 2</code> 是安全的，因为 <code>r</code> 会不断向左移动，不会陷入死循环。</li>
</ul>
<hr>
<h3 id="题目-3154-子串简写（暴力-二分）">题目 3154: 子串简写（暴力/二分）</h3>
<p><strong>题目描述</strong></p>
<p>程序猿圈子里正在流行一种很新的简写方法：对于一个字符串，只保留首尾字符，将首尾字符之间的所有字符用这部分的长度代替。例如 internation-alization 简写成 i18n，Kubernetes （注意连字符不是字符串的一部分）简写成 K8s, Lanqiao 简写成 L5o 等。</p>
<p>在本题中，我们规定长度大于等于 K 的字符串都可以采用这种简写方法（长度小于 K 的字符串不配使用这种简写）。</p>
<p>给定一个字符串 S 和两个字符 c1 和 c2，请你计算 S 有多少个以 c1 开头c2 结尾的子串可以采用这种简写？</p>
<p><strong>输入格式</strong></p>
<p>第一行包含一个整数 K。</p>
<p>第二行包含一个字符串 S 和两个字符 c1 和 c2。</p>
<p><strong>输出格式</strong></p>
<p>一个整数代表答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line">abababdb <span class="selector-tag">a</span> <span class="selector-tag">b</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>符合条件的子串如下所示，中括号内是该子串：</p>
<p>[abab]abdb</p>
<p>[ababab]db</p>
<p>[abababdb]</p>
<p>ab[abab]db</p>
<p>ab[ababdb]</p>
<p>abab[abdb]</p>
<p>对于 20% 的数据，2 ≤ K ≤ |S | ≤ 10000。</p>
<p>对于 100% 的数据，2 ≤ K ≤ |S | ≤ 5 × 1e5。S 只包含小写字母。c1 和 c2 都是小写字母。</p>
<p>|S | 代表字符串 S 的长度。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k, sum = <span class="number">0</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">char</span> c1, c2;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; c1 &gt;&gt; c2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != c1) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; s.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == c2 &amp;&amp; j - i + <span class="number">1</span> &gt;= k)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用暴力枚举，两层for循环，时间复杂度为O(n^2)，必然会超时。</p>
<p>只能拿到24分。。。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll; <span class="comment">// 使用 typedef 代替 #define</span></span><br><span class="line"></span><br><span class="line">ll k, sum = <span class="number">0</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">char</span> c1, c2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">// main 函数的返回类型必须是 int</span></span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; c1 &gt;&gt; c2;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c1_positions; <span class="comment">// 存储 c1 的位置（下标）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (s[i] == c1)</span><br><span class="line">            c1_positions.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (s[i] == c2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - k + <span class="number">1</span> &lt; <span class="number">0</span> || c1_positions.<span class="built_in">empty</span>())<span class="comment">//i-k+1是满足条件的子串的起始位置的下标，从这里开始到c2的长度等于K</span></span><br><span class="line">                <span class="keyword">continue</span>;						    <span class="comment">//i+1&lt;k,说明长度不满足K，直接跳过就好</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 二分查找满足条件的 c1 的数量</span></span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = (<span class="type">int</span>)c1_positions.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">// 避免无符号整数溢出</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (c1_positions[mid] &lt;= (i - k + <span class="number">1</span>))</span><br><span class="line">                    l = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c1_positions[l] &lt;= i - k + <span class="number">1</span>) <span class="comment">// 找到满足条件的字符串：以 c2 结尾，开头是从右向左的第一个 c1</span></span><br><span class="line">                ans += (l + <span class="number">1</span>); <span class="comment">// 加1，数组下标比实际少1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// main 函数返回 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img_cgi-bin_mmwebwx-bin_webwxgetmsgimg__%26MsgID%3D2011104838485191816%26skey%3D%40crypt_7e2fd656_5f47741aa4bcbd9bdb6fe00eb39ecae3%26mmweb_appid%3Dwx_webfilehelper.jpg" alt="cgi-bin_mmwebwx-bin_webwxgetmsgimg_&amp;MsgID=2011104838485191816&amp;skey=@crypt_7e2fd656_5f47741aa4bcbd9bdb6fe00eb39ecae3&amp;mmweb_appid=wx_webfilehelper"></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img_cgi-bin_mmwebwx-bin_webwxgetmsgimg__%26MsgID%3D9215831454549671306%26skey%3D%40crypt_7e2fd656_5f47741aa4bcbd9bdb6fe00eb39ecae3%26mmweb_appid%3Dwx_webfilehelper.jpg" alt="cgi-bin_mmwebwx-bin_webwxgetmsgimg_&amp;MsgID=9215831454549671306&amp;skey=@crypt_7e2fd656_5f47741aa4bcbd9bdb6fe00eb39ecae3&amp;mmweb_appid=wx_webfilehelper"></p>
<p>该解使用二分法，挺抽象的，一开始理解不了i - k + 1的含义，好难。。。</p>
<p>我总觉得这个题解写得不够好，太乱了。</p>
<hr>
<h3 id="题目-3151-飞机降落">题目 3151: 飞机降落</h3>
<p><strong>题目描述</strong></p>
<p>N 架飞机准备降落到某个只有一条跑道的机场。其中第 i 架飞机在 Ti 时刻到达机场上空，到达时它的剩余油料还可以继续盘旋 Di 个单位时间，即它最早</p>
<p>可以于 Ti 时刻开始降落，最晚可以于 Ti + Di 时刻开始降落。降落过程需要 Li个单位时间。</p>
<p>一架飞机降落完毕时，另一架飞机可以立即在同一时刻<strong>开始降落</strong>，但是不能在前一架飞机完成降落前开始降落。</p>
<p>请你判断 N 架飞机是否可以全部安全降落。</p>
<p><strong>输入格式</strong></p>
<p>输入包含多组数据。</p>
<p>第一行包含一个整数 T，代表测试数据的组数。</p>
<p>对于每组数据，第一行包含一个整数 N。</p>
<p>以下 N 行，每行包含三个整数：Ti，Di 和 Li。</p>
<p><strong>输出格式</strong></p>
<p>对于每组数据，输出 YES 或者 NO，代表是否可以全部安全降落。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">100</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">20</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">20 </span><span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">YES</span></span><br><span class="line"><span class="keyword">NO</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于第一组数据，可以安排第 3 架飞机于 0 时刻开始降落，20 时刻完成降落。安排第 2 架飞机于 20 时刻开始降落，30 时刻完成降落。安排第 1 架飞机于 30 时刻开始降落，40 时刻完成降落。</p>
<p>对于第二组数据，无论如何安排，都会有飞机不能及时降落。</p>
<p>对于 30% 的数据，N ≤ 2。</p>
<p>对于 100% 的数据，1 ≤ T ≤ 10，1 ≤ N ≤ 10，0 ≤ Ti , Di , Li ≤ 105。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, N;</span><br><span class="line"><span class="type">bool</span> st[<span class="number">20</span>]; <span class="comment">// 判断对应飞机是否降落</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">plane</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Ti, Di, Li;</span><br><span class="line">&#125; p[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// u表示已经有u架飞机成功降落了</span></span><br><span class="line"><span class="comment">// time表示当前的时间，前一架飞机落地的时间</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt;= N) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果所有飞机都成功降落，返回true。（dfs出口）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 考虑第（u + 1）架飞机谁落</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) <span class="comment">// 如果第i架飞机未降落</span></span><br><span class="line">        &#123;</span><br><span class="line">            st[i] = <span class="number">1</span>; <span class="comment">// 标记为已降落</span></span><br><span class="line">            <span class="keyword">if</span> (p[i].Ti + p[i].Di &gt;= time) <span class="comment">// 如果当前飞机的最晚降落时间不早于当前时间</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> t = <span class="built_in">max</span>(time, p[i].Ti) + p[i].Li; <span class="comment">// 计算当前飞机的降落时间</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, t)) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 递归尝试下一架飞机</span></span><br><span class="line">            &#125;</span><br><span class="line">            st[i] = <span class="number">0</span>; <span class="comment">// 回溯，取消当前飞机的降落标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果没有找到可行的降落顺序，返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="comment">// 输入数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; N; <span class="comment">// 飞机个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; p[j].Ti &gt;&gt; p[j].Di &gt;&gt; p[j].Li; <span class="comment">// 输入每架飞机的信息</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>)) <span class="comment">// 调用DFS函数</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置st数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            st[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用DFS枚举，原本的题解看不太懂，经过AI改进后变得清楚很多，太强了。</p>
<hr>
<h3 id="题目-3156-景区导游">题目 3156: 景区导游</h3>
<p><strong>题目描述</strong></p>
<p>某景区一共有 N 个景点，编号 1 到 N。景点之间共有 N − 1 条<strong>双向的</strong>摆渡车线路相连，形成一棵<strong>树状结构</strong>。在景点之间往返只能通过这些摆渡车进行，需要花费一定的时间。</p>
<p>小明是这个景区的资深导游，他每天都要按固定顺序带客人游览其中 K 个景点：A1, A2, . . . , AK。今天由于时间原因，<strong>小明决定跳过其中一个景点</strong>，只带游客按顺序游览其中 K − 1 个景点。具体来说，如果小明选择跳过 Ai，那么他会<strong>按顺序</strong>带游客游览 A1, A2, . . . , Ai−1, Ai+1, . . . , AK, (1 ≤ i ≤ K)。</p>
<p>请你对任意一个 Ai，计算如果跳过这个景点，小明需要<strong>花费多少时间</strong>在景点之间的摆渡车上？</p>
<p><strong>输入格式</strong></p>
<p>第一行包含 2 个整数 N 和 K。</p>
<p>以下 N − 1 行，每行包含 3 个整数 u, v 和 t，代表景点 u 和 v 之间有摆渡车线路，花费 t 个单位时间。</p>
<p>最后一行包含 K 个整数 A1, A2, . . . , AK 代表原定游览线路。</p>
<p><strong>输出格式</strong></p>
<p>输出 K 个整数，其中第 i 个代表跳过 Ai 之后，花费在摆渡车上的时间。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">6</span> <span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-03-07_22-52-28.png" alt=""></p>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">7</span> <span class="number">13</span> <span class="number">14</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>原路线是 2 → 6 → 5 → 1。</p>
<p>当跳过 2 时，路线是 6 → 5 → 1，其中 6 → 5 花费时间 3 + 2 + 2 = 7，5 → 1 花费时间 2 + 1 = 3，总时间花费 10。</p>
<p>当跳过 6 时，路线是 2 → 5 → 1，其中 2 → 5 花费时间 1 + 1 + 2 = 4，5 → 1 花费时间 2 + 1 = 3，总时间花费 7。</p>
<p>当跳过 5 时，路线是 2 → 6 → 1，其中 2 → 6 花费时间 1 + 1 + 2 + 3 = 7，6 → 1 花费时间 3 + 2 + 1 = 6，总时间花费 13。</p>
<p>当跳过 1 时，路线时 2 → 6 → 5，其中 2 → 6 花费时间 1 + 1 + 2 + 3 = 7，6 → 5 花费时间 3 + 2 + 2 = 7，总时间花费 14。</p>
<p>对于 20% 的数据，2 ≤ K ≤ N ≤ 102。</p>
<p>对于 40% 的数据，2 ≤ K ≤ N ≤ 104。</p>
<p>对于 100% 的数据，2 ≤ K ≤ N ≤ 105，1 ≤ u, v, Ai ≤ N，1 ≤ t ≤ 105。保证Ai 两两不同。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">map&lt;pii, <span class="type">int</span>&gt; st;<span class="comment">//记录&#123;x, y&#125;的距离是多少</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">vector&lt;pii&gt; edge[N];<span class="comment">//存图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s表示你要求的路径的起点</span></span><br><span class="line"><span class="comment">//u表示你当前走到了哪个点</span></span><br><span class="line"><span class="comment">//father表示你当前这个点的父亲节点是谁。避免重复走造成死循环</span></span><br><span class="line"><span class="comment">//v表示你要求的路径的终点</span></span><br><span class="line"><span class="comment">//sum表示从s走到u的路径花费总和。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> u, <span class="type">int</span> father, <span class="type">int</span> v, <span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">    &#123;</span><br><span class="line">        st[&#123;s, v&#125;] = sum;</span><br><span class="line">        st[&#123;v, s&#125;] = sum;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> son = edge[u][i].first;<span class="comment">//u点的邻接点</span></span><br><span class="line">        <span class="keyword">if</span> (son == father)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> w = edge[u][i].second;<span class="comment">//邻边的权值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(s, son, u, v, sum + w))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果没有找到路径，返回false;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)<span class="comment">//存图</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, t;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; t;</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(&#123;y, t&#125;);<span class="comment">//无向边</span></span><br><span class="line">        edge[y].<span class="built_in">push_back</span>(&#123;x, t&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)<span class="comment">//输入原本要参观的k个景点</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//求出按顺序走完整路线的总花费时间</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(a[i], a[i], <span class="number">-1</span>, a[i + <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        ans += st[&#123;a[i], a[i + <span class="number">1</span>]&#125;];</span><br><span class="line">        <span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//裁剪</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp = ans;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)<span class="comment">//如果去除第1个点</span></span><br><span class="line">            tmp -= st[&#123;a[i], a[i + <span class="number">1</span>]&#125;];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == k - <span class="number">1</span>)<span class="comment">//如果去除最后1个点</span></span><br><span class="line">            tmp -= st[&#123;a[i - <span class="number">1</span>], a[i]&#125;];</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//如果去除中间的点</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp -= st[&#123;a[i - <span class="number">1</span>], a[i]&#125;];</span><br><span class="line">            tmp -= st[&#123;a[i], a[i + <span class="number">1</span>]&#125;];</span><br><span class="line">            <span class="built_in">dfs</span>(a[i - <span class="number">1</span>], a[i - <span class="number">1</span>], <span class="number">-1</span>, a[i + <span class="number">1</span>], <span class="number">0</span>);<span class="comment">//记录该点前一个点到该点后一个点的边权</span></span><br><span class="line">            tmp += st[&#123;a[i - <span class="number">1</span>], a[i + <span class="number">1</span>]&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; tmp &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用dfs暴力遍历，只能拿43分。</p>
<p>从该题学会了写算法题的基本模板。</p>
<hr>
<h3 id="题目-3157-砍树">题目 3157: 砍树</h3>
<p><strong>题目描述</strong></p>
<p>给定一棵由 n 个结点组成的树以及 m 个不重复的无序数对 (a1, b1), (a2, b2),</p>
<p>. . . , (am, bm)，其中 ai 互不相同，bi 互不相同，ai ≠ bj(1 ≤ i, j ≤ m)。</p>
<p>小明想知道是否能够<strong>选择一条树上的边砍断</strong>，使得对于<strong>每个 (ai , bi) 满足 ai和 bi 不连通</strong>，如果可以则输出应该断掉的边的编号（编号按输入顺序从 1 开始），否则输出 -1.</p>
<p><strong>输入格式</strong></p>
<p>输入共 n + m 行，第一行为两个正整数 n，m。</p>
<p>后面 n − 1 行，每行两个正整数 xi，yi 表示第 i 条边的两个端点。</p>
<p>后面 m 行，每行两个正整数 ai，bi。</p>
<p><strong>输出格式</strong></p>
<p>一行一个整数，表示答案，如有多个答案，<strong>输出编号最大的一个</strong>。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-03-08_23-14-54.png" style="zoom: 67%;" />
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>断开第 2 条边后形成两个连通块：{3, 4}，{1, 2, 5, 6}，满足 3 和 6 不连通，4 和 5 不连通。</p>
<p>断开第 4 条边后形成两个连通块：{1, 2, 3, 4}，{5, 6}，同样满足 3 和 6 不连通，4 和 5 不连通。</p>
<p>4 编号更大，因此答案为 4。</p>
<p>对于 30% 的数据，保证 1 &lt; n ≤ 1000。</p>
<p>对于 100% 的数据，保证 1 &lt; n ≤ 1e5，1 ≤ m ≤ 2/n。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">map&lt;pii, <span class="type">int</span>&gt; id;<span class="comment">//记录&#123;x, y&#125;的距离是多少</span></span><br><span class="line"><span class="type">int</span> w[N];<span class="comment">//存放每个边的权值，初始为0</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N];<span class="comment">//存图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s表示你要求的路径的起点</span></span><br><span class="line"><span class="comment">//u表示你当前走到了哪个点</span></span><br><span class="line"><span class="comment">//father表示你当前这个点的父亲节点是谁。避免重复走造成死循环</span></span><br><span class="line"><span class="comment">//v表示你要求的路径的终点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> u, <span class="type">int</span> father, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == v)<span class="comment">//找到终点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> son = edge[u][i];<span class="comment">//避免重复走造成死循环</span></span><br><span class="line">        <span class="keyword">if</span> (son == father)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(s, son, u, v))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ID = id[&#123;u, son&#125;];<span class="comment">//找到对应边的边号</span></span><br><span class="line">            w[ID]++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)<span class="comment">//存图</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(y);<span class="comment">//无向边</span></span><br><span class="line">        edge[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        id[&#123;x, y&#125;] = id[&#123;y, x&#125;] = i;<span class="comment">//设置边号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)<span class="comment">//dfs遍历每条边，并赋予权值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">dfs</span>(x, x, <span class="number">-1</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//从最大编号的边开始，符合题意</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (w[i] == m)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = i + <span class="number">1</span>;<span class="comment">//边号从1开始，数组下标要加一</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用dfs遍历，和上一题类似，但本质上还是暴力，只能拿33分。</p>
<p>感觉对dfs的理解更深刻了。</p>
<hr>
<h3 id="题目-3155-整数删除">题目 3155: 整数删除</h3>
<p><strong>题目描述</strong></p>
<p>给定一个长度为 N 的整数数列：A1, A2, . . . , AN。你要重复以下操作 K 次：</p>
<p>每次选择数列中最小的整数（如果最小值不止一个，选择最靠前的），将其删除。并把与它相邻的整数加上被删除的数值。输出 K 次操作后的序列。</p>
<p><strong>输入格式</strong></p>
<p>第一行包含两个整数 N 和 K。</p>
<p>第二行包含 N 个整数，A1, A2, A3, . . . , AN。</p>
<p><strong>输出格式</strong></p>
<p>输出 N − K 个整数，中间用一个空格隔开，代表 K 次操作后的序列。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">17 </span><span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>数列变化如下，中括号里的数是当次操作中被选择的数：</p>
<p>[1] 4 2 8 7</p>
<p>5 [2] 8 7</p>
<p>[7] 10 7</p>
<p>17 7</p>
<p>对于 20% 的数据，1 ≤ K &lt; N ≤ 10000。</p>
<p>对于 100% 的数据，1 ≤ K &lt; N ≤ 5 × 105，0 ≤ Ai ≤ 108。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, k, pos = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//存储数字</span></span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//标记某个数字是否被删除</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//存储n个数字</span></span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> MIN = INF;<span class="comment">//每一轮重置最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//找到每一轮的最小数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; MIN &amp;&amp; !st[i])<span class="comment">//该数更小且未被删除过</span></span><br><span class="line">            &#123;</span><br><span class="line">                MIN = a[i];</span><br><span class="line">                pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st[pos] = <span class="number">1</span>;<span class="comment">//标记该数为删除状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对相邻的数字进行操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pos - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//从该数左边开始遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[i])<span class="comment">//如果该数未删除过</span></span><br><span class="line">            &#123;</span><br><span class="line">                a[i] += MIN;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//找到一个就跳出</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pos + <span class="number">1</span>; i &lt; n; i++)<span class="comment">//从该数右边开始遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[i])<span class="comment">//如果该数未删除过</span></span><br><span class="line">            &#123;</span><br><span class="line">                a[i] += MIN;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//找到一个就跳出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用<strong>暴力求解</strong>，只能得24分。。。</p>
<p>只定义了两个数组和多个for循环。</p>
<p>#define INF 0x3f3f3f3f3f3f3f3f 定义无穷大,以后最大值就这么写，分数会高不少（原来只有5分）。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N], l[N], r[N], st[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;<span class="comment">//优先队列（小根堆）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];<span class="comment">//将n个数存入数组a[N]中</span></span><br><span class="line">        q.<span class="built_in">push</span>(&#123; a[i],i &#125;);<span class="comment">//将数值和下标存入堆中（真正发生删除操作的地方）</span></span><br><span class="line">        st[i] = a[i];<span class="comment">//备份数组a[N]，存放最新的数字</span></span><br><span class="line">        l[i] = i - <span class="number">1</span>;<span class="comment">//获取该数左边的数的下标</span></span><br><span class="line">        r[i] = i + <span class="number">1</span>;<span class="comment">//获取该数右边的数的下标</span></span><br><span class="line">        <span class="keyword">if</span> (r[i] == n)<span class="comment">//表示当前数字是最后一个数</span></span><br><span class="line">            r[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = k;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        pii t = q.<span class="built_in">top</span>();<span class="comment">//获取最小数和其下标</span></span><br><span class="line">        q.<span class="built_in">pop</span>();<span class="comment">//删除最小数</span></span><br><span class="line">        <span class="keyword">if</span> (t.first != st[t.second])<span class="comment">//更新堆顶元素（这里要好好想想） 先删除，再加入</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123; st[t.second],t.second &#125;);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> pos = t.second;<span class="comment">//获取最小数的下标</span></span><br><span class="line">        <span class="comment">//将该元素的相邻元素加上该数值</span></span><br><span class="line">        <span class="keyword">if</span> (l[pos] &gt;= <span class="number">0</span>)</span><br><span class="line">            st[l[pos]] += t.first;</span><br><span class="line">        <span class="keyword">if</span> (r[pos] &gt;= <span class="number">0</span>)</span><br><span class="line">            st[r[pos]] += t.first;</span><br><span class="line">        <span class="comment">//更新相邻点的相邻元素(模拟链表删除元素)</span></span><br><span class="line">        <span class="keyword">if</span> (l[pos] &gt;= <span class="number">0</span>)</span><br><span class="line">            r[l[pos]] = r[pos];</span><br><span class="line">        <span class="keyword">if</span> (r[pos] &gt;= <span class="number">0</span>)</span><br><span class="line">            l[r[pos]] = l[pos];</span><br><span class="line"></span><br><span class="line">        st[pos] = <span class="number">-1</span>;<span class="comment">//标记已经删除的元素</span></span><br><span class="line">        k--;<span class="comment">//必须这里减</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] != <span class="number">-1</span>)</span><br><span class="line">            cout &lt;&lt; st[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用到了<strong>模拟链表+优先队列（小根堆）</strong>。</p>
<p>最夸张的是定义了4个数组。。。</p>
<hr>
<h3 id="题目-3152-接龙数列"><strong>题目 3152: 接龙数列</strong></h3>
<p><strong>题目描述</strong></p>
<p>对于一个长度为 K 的整数数列：A1, A2, . . . , AK，我们称之为接龙数列当且仅当 Ai 的首位数字恰好等于 Ai−1 的末位数字 (2 ≤ i ≤ K)。</p>
<p>例如 12, 23, 35, 56, 61, 11 是接龙数列；12, 23, 34, 56 不是接龙数列，因为 56的首位数字不等于 34 的末位数字。所有长度为 1 的整数数列都是接龙数列。</p>
<p>现在给定一个长度为 N 的数列 A1, A2, . . . , AN，<strong>请你计算最少从中删除多少个数，可以使剩下的序列是接龙序列？</strong></p>
<p><strong>输入格式</strong></p>
<p>第一行包含一个整数 N。</p>
<p>第二行包含 N 个整数 A1, A2, . . . , AN。</p>
<p><strong>输出格式</strong></p>
<p>一个整数代表答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">121</span> <span class="number">22</span> <span class="number">12</span> <span class="number">2023</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>删除 22，剩余 11, 121, 12, 2023 是接龙数列。</p>
<p>对于 20% 的数据，1 ≤ N ≤ 20。</p>
<p>对于 50% 的数据，1 ≤ N ≤ 10000。</p>
<p>对于 100% 的数据，1 ≤ N ≤ 105，1 ≤ Ai ≤ 109。所有 Ai 保证不包含前导 0。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_first</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//获得最高位数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        num = x % <span class="number">10</span>;<span class="comment">//获得最低位</span></span><br><span class="line">        x /= <span class="number">10</span>;<span class="comment">//去除最低位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_last</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//获得最低位数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//u表示：当前考虑到了第几个数字,以下标形式表示</span></span><br><span class="line"><span class="comment">//last表示：方案中已经选了的数列最后一个数字是多少</span></span><br><span class="line"><span class="comment">//cnt表示：当前方案中一共有多少个数字</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> last, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt;= n)<span class="comment">//dfs出口</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n - u + cnt &lt;= ans)<span class="comment">//优化（没有也行，有了更好）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第u个数是否选，如果选这个数字</span></span><br><span class="line">    <span class="comment">//就必须和前面最后一个数字构成接龙序列。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get_last</span>(last) == <span class="built_in">get_first</span>(a[u])||last == <span class="number">-1</span>)<span class="comment">//或者该数为数列的第一个数，第一次第一个数必定选</span></span><br><span class="line">        <span class="built_in">dfs</span>(u + <span class="number">1</span>, a[u], cnt + <span class="number">1</span>);<span class="comment">//那么考虑下一个数字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//从第一个数开始的情况结束后，会返回到这里继续执行。这一次不选第一个数，必定选第二个数</span></span><br><span class="line">    <span class="comment">//第u个数不选，考虑下一个数（始终都是向右遍历）</span></span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, last, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; n - ans &lt;&lt; endl;<span class="comment">//计算保留最多的数字，再用n减去</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用dfs暴力枚举，只能得27分。。。</p>
<p>dfs函数的过程挺烧脑的。</p>
<hr>
<h2 id="2023年第十四届蓝桥杯大赛软件类省赛C-C-大学C组真题"><strong>2023年第十四届蓝桥杯大赛软件类省赛C/C++大学C组真题</strong></h2>
<h3 id="题目-3158-三国游戏（贪心）"><strong>题目 3158: 三国游戏</strong>（贪心）</h3>
<p>小蓝正在玩一款游戏。游戏中魏蜀吴三个国家各自拥有一定数量的士兵X, Y, Z (一开始可以认为都为 0 )。游戏有 n 个可能会发生的事件，<strong>每个事件之间相互独立且最多只会发生一次</strong>，当第 i 个事件发生时会分别让 X, Y, Z 增加Ai , Bi ,Ci 。</p>
<p>当游戏结束时 (所有事件的发生与否已经确定)，如果 X, Y, Z 的其中一个大于另外两个之和，我们认为其获胜。例如，当 X &gt; Y + Z 时，我们认为魏国获胜。小蓝想知道游戏结束时如果有其中一个国家获胜，最多发生了多少个事件?</p>
<p>如果不存在任何能让某国获胜的情况，请输出 −1 。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含一个整数 n 。</p>
<p>第二行包含 n 个整数表示 Ai，相邻整数之间使用一个空格分隔。</p>
<p>第三行包含 n 个整数表示 Bi，相邻整数之间使用一个空格分隔。</p>
<p>第四行包含 n 个整数表示 Ci，相邻整数之间使用一个空格分隔。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>发生两个事件时，有两种不同的情况会出现获胜方。</p>
<p>发生 1, 2 事件时蜀国获胜。</p>
<p>发生 1, 3 事件时吴国获胜。</p>
<p>对于 40% 的评测用例，n ≤ 500 ；</p>
<p>对于 70% 的评测用例，n ≤ 5000 ；</p>
<p>对于所有评测用例，1 ≤ n ≤ 105，1 ≤ Ai , Bi ,Ci ≤ 109 。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2025-03-14_23-08-06.png" alt=""></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal_ans</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; c)</span><span class="comment">//计算x，y，z各自胜利时最多发生的事件数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        tmp[i] = a[i] - (b[i] + c[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());<span class="comment">//从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//从最大的开始加</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum + tmp[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += tmp[i];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span>, <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a_ans = <span class="built_in">cal_ans</span>(a, b, c);<span class="comment">//a赢</span></span><br><span class="line">    <span class="type">int</span> b_ans = <span class="built_in">cal_ans</span>(b, a, c);<span class="comment">//b赢</span></span><br><span class="line">    <span class="type">int</span> c_ans = <span class="built_in">cal_ans</span>(c, a, b);<span class="comment">//c赢</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">max</span>(&#123; a_ans, b_ans, c_ans &#125;);</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用贪心法，将题意抽象成不等式，排序后从大到小相加，直到不大于0。</p>
<hr>
<h3 id="题目-3159-填充（暴力-贪心）"><strong>题目 3159: 填充</strong>（暴力+贪心）</h3>
<p><strong>题目描述</strong></p>
<p>有一个长度为 n 的 01 串，其中有一些位置标记为 ?，这些位置上可以任意填充 0 或者 1，请问如何填充这些位置使得这个 01 串中出现互不重叠的 00 和 11 子串最多，输出子串个数。</p>
<p><strong>输入格式</strong></p>
<p>输入一行包含一个字符串。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1110</span>?<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>如果在问号处填 0 ，则最多出现一个 00 和一个 11：111000 。</p>
<p>对于所有评测用例，1 ≤ n ≤ 1000000 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(s.size())</span></span>;<span class="comment">//标记数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++)<span class="comment">//直接从第二个数开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i - <span class="number">1</span>] &amp;&amp; !st[i])<span class="comment">//如果前两个都没被标记</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[i])<span class="comment">//如果二者相同（包括问号）</span></span><br><span class="line">            &#123;</span><br><span class="line">                st[i - <span class="number">1</span>] = st[i] = <span class="number">1</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span> || s[i] == <span class="string">&#x27;?&#x27;</span>)<span class="comment">//如果二者一个为？另一个为0或1</span></span><br><span class="line">            &#123;</span><br><span class="line">                st[i - <span class="number">1</span>] = st[i] = <span class="number">1</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解使用贪心法，让每一位字符始终与前面一个进行匹配，利用st数组对每一个字符进行标记。</p>
<hr>
<h3 id="题目-3160-翻转（暴力-贪心）"><strong>题目 3160: 翻转</strong>（暴力+贪心）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝用黑白棋的 n 个棋子排成了一行，他在脑海里想象出了一个长度为 n 的 01 串 T，他发现如果把黑棋当做 1，白棋当做 0，这一行棋子也是一个长度为 n 的 01 串 S。</p>
<p>小蓝决定，如果在 S 中发现一个棋子和它两边的棋子都不一样，就可以将其翻转变成另一个颜色。也就是说，如果 S 中存在子串 101 或者 010，就可以选择将其分别变为 111 和 000，这样的操作可以无限重复。</p>
<p>小蓝想知道最少翻转多少次可以把 S 变成和 T 一模一样。</p>
<p><strong>输入格式</strong></p>
<p>输入包含多组数据。</p>
<p>输入的第一行包含一个正整数 D 表示数据组数。</p>
<p>后面 2D 行每行包含一个 01 串，每两行为一组数据，第 2i − 1 行为第 i 组</p>
<p>数据的 Ti，第 2i 行为第 i 组数据的 Si，Si 和 Ti 长度均为 ni。</p>
<p><strong>输出格式</strong></p>
<p>对于每组数据，输出一行包含一个整数，表示答案，如果答案不存在请输出 −1。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1000111</span></span><br><span class="line"><span class="number">1010101</span></span><br><span class="line"><span class="number">01000</span></span><br><span class="line"><span class="number">11000</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"><span class="deletion">-1</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 20% 的评测用例，1 ≤∑D1 ni ≤ 10 ；<br>
对于所有评测用例，保证 1 ≤∑D1 ni ≤ 106 ，ni &gt; 0 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line">string t, s;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; d;</span><br><span class="line">    <span class="keyword">while</span> (d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; t &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//从左向右</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == t[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//之后的情况都是s[i] != t[i]</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == n - <span class="number">1</span>)<span class="comment">//首尾不等直接跳出</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i - <span class="number">1</span>] == s[i + <span class="number">1</span>] &amp;&amp; s[i] != s[i + <span class="number">1</span>])<span class="comment">//中间不等，符合条件时进行翻转</span></span><br><span class="line">            &#123;</span><br><span class="line">                s[i] = s[i + <span class="number">1</span>];</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] != s[i + <span class="number">1</span>])<span class="comment">//中间不等，不符合条件无法翻转，直接跳出，不用再判断后面的元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s == t)<span class="comment">//最终检验条件</span></span><br><span class="line">            cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">       </span><br><span class="line">        d--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解是用贪心法，从左向右依次判断。</p>
<p>使用多if语句是本题的核心，最终检验的条件为s==t。</p>
<hr>
<h3 id="题目-3164-公因数匹配"><strong>题目 3164: 公因数匹配</strong></h3>
<p><strong>题目描述</strong></p>
<p>给定 n 个正整数 Ai，请找出两个数 i, j 使得 i &lt; j 且 Ai 和 Aj 存在大于 1 的公因数。</p>
<p>如果存在多组 i, j，请输出 i 最小的那组。如果仍然存在多组 i, j，请输出 i 最小的所有方案中 j 最小的那组。</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含一个整数 n。</p>
<p>第二行包含 n 个整数分别表示 A1 A2 · · · An，相邻整数之间使用一个空格分隔。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含两个整数分别表示题目要求的 i, j，用一个空格分隔。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">2</span> <span class="number">6</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 40% 的评测用例，n ≤ 5000 ；</p>
<p>对于所有评测用例，1 ≤ n ≤ 105，1 ≤ Ai ≤ 106 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; st;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> pos)</span><span class="comment">//分解质因数,将该数的位置存放在st中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[i].<span class="built_in">push_back</span>(pos);</span><br><span class="line">        <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            x /= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">        st[x].<span class="built_in">push_back</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="built_in">prim</span>(x, i);<span class="comment">//传入该数和其位置，分解质因数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans = &#123; INF,INF &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : st)<span class="comment">//按键值从小到大遍历st</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y.<span class="built_in">size</span>() &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (y[<span class="number">0</span>] &lt; ans.first)</span><br><span class="line">            ans = &#123; y[<span class="number">0</span>],y[<span class="number">1</span>] &#125;;</span><br><span class="line">        <span class="keyword">if</span>(y[<span class="number">0</span>] == ans.first &amp;&amp; y[<span class="number">1</span>] &lt; ans.second)</span><br><span class="line">            ans = &#123; y[<span class="number">0</span>],y[<span class="number">1</span>] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans.second &lt;&lt; endl;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解用到了算数基本定理：任何一个大于1的自然数 <em>N</em>，如果 <em>N</em> 不为质数，那么 <em>N</em> 可以唯一分解成有限个质数的乘积。</p>
<p>使用了map，pair数对。</p>
<hr>
<h2 id="2022年第十三届蓝桥杯大赛软件类省赛C-C-大学A组真题"><strong>2022年第十三届蓝桥杯大赛软件类省赛C/C++大学A组真题</strong></h2>
<h3 id="题目-2664-求和（暴力-后缀和）"><strong>题目 2664: 求和</strong>（暴力/后缀和）</h3>
<p><strong>题目描述</strong></p>
<p>给定 n 个整数 a1, a2, · · · , an ，求它们两两相乘再相加的和，即 S = a1 · a2 + a1 · a3 + · · · + a1 · an + a2 · a3 + · · · + an-2 · an-1 + an-2 · an + an-1 · an.</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含一个整数 n 。</p>
<p>第二行包含 n 个整数 a1, a2, · · · an。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数 S，表示所求的和。请使用合适的数据类型进行运算。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">6</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">117</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 30% 的数据，1 ≤ n ≤ 1000，1 ≤ ai ≤ 100。</p>
<p>对于所有评测用例，1 ≤ n ≤ 200000，1 ≤ ai ≤ 1000。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//存数</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//两层for循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)<span class="comment">//j = i + 1</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += a[i] * a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>使用两层for循环的暴力枚举，时间复杂度为n^2，竟然能得91分。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//存数</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//构建后缀和数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = s[i + <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += a[i] * s[i + <span class="number">1</span>];<span class="comment">//改进，时间复杂度变为O(n)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>100分</strong></p>
<p>后面回顾的时候突然发现可以使用后缀和，自己很快就敲出来，好开心！</p>
<hr>
<h3 id="题目-2665-选数异或（暴力）"><strong>题目 2665: 选数异或</strong>（暴力）</h3>
<p><strong>题目描述</strong></p>
<p>给定一个长度为 n 的数列 A1, A2, · · · , An 和一个非负整数 x，给定 m 次查询, 每次询问能否从某个区间 [l,r] 中选择两个数使得他们的异或等于 x 。（<strong>按位异或</strong>）</p>
<p><strong>输入格式</strong></p>
<p>输入的第一行包含三个整数 n, m, x 。</p>
<p>第二行包含 n 个整数 A1, A2, · · · , An 。</p>
<p>接下来 m 行，每行包含两个整数 li ,ri 表示询问区间 [li ,ri ] 。</p>
<p><strong>输出格式</strong></p>
<p>对于每个询问, 如果该区间内<strong>存在</strong>两个数的异或为 x 则输出 yes, 否则输出 no。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br><span class="line"><span class="literal">no</span></span><br><span class="line"><span class="literal">yes</span></span><br><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>显然整个数列中只有 2, 3 的异或为 1。</p>
<p>对于 20% 的评测用例，1 ≤ n, m ≤ 100；</p>
<p>对于 40% 的评测用例，1 ≤ n, m ≤ 1000；</p>
<p>对于所有评测用例，1 ≤ n, m ≤ 100000 ，0 ≤ x &lt; 220 ，1 ≤ li ≤ ri ≤ n ， 0 ≤ Ai &lt; 220。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, x;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> a[N];<span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//存数</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l - <span class="number">1</span>; i &lt;= r - <span class="number">1</span>; i++)<span class="comment">//注意l，r都要减一，数组下标形式</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= r - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a[i] ^ a[j]) == x)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">break</span>;<span class="comment">//跳出2层for循环的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>依旧是暴力枚举，可以得73分。</p>
<p>本题又学习到了如何跳出多层内部循环。</p>
<hr>
<h2 id="2022年第十三届蓝桥杯大赛软件类省赛C-C-大学B组真题"><strong>2022年第十三届蓝桥杯大赛软件类省赛C/C++大学B组真题</strong></h2>
<h3 id="题目-2656-刷题统计（暴力）"><strong>题目 2656: 刷题统计</strong>（暴力）</h3>
<p><strong>题目描述</strong></p>
<p>小明决定从下周一开始努力刷题准备蓝桥杯竞赛。他计划周一至周五每天做 a 道题目，周六和周日每天做 b 道题目。请你帮小明计算，按照计划他将在第几天实现做题数大于等于 n 题？</p>
<p><strong>输入格式</strong></p>
<p>输入一行包含三个整数 a, b 和 n.</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数代表天数。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">20</span> <span class="number">99</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b, n;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>, day = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)<span class="comment">//循环，7天为一个周期</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">6</span> || i == <span class="number">7</span>)</span><br><span class="line">                sum += b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sum += a;</span><br><span class="line">        </span><br><span class="line">            day++;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; day;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>该解就是简单的暴力枚举，可以过百分之八十的数据。</p>
<hr>
<h3 id="题目-2657-修剪灌木（模拟）"><strong>题目 2657: 修剪灌木</strong>（模拟）</h3>
<p><strong>题目描述</strong></p>
<p>爱丽丝要完成一项修剪灌木的工作。有 N 棵灌木整齐的从左到右排成一排。<strong>爱丽丝在每天傍晚会修剪一棵灌木，让灌木的高度变为 0 厘米</strong>。爱丽丝修剪灌木的顺序是从最左侧的灌木开始，每天向右修剪一棵灌木。当修剪了最右侧的灌木后，她会调转方向，下一天开始向左修剪灌木。直到修剪了最左的灌木后再次调转方向。然后如此循环往复。灌木每天从早上到傍晚会长高 1 厘米，而其余时间不会长高。在第一天的早晨，所有灌木的高度都是 0 厘米。爱丽丝想知道每棵灌木最高长到多高。</p>
<p><strong>输入格式</strong></p>
<p>一个正整数 N ，含义如题面所述。</p>
<p><strong>输出格式</strong></p>
<p>输出 N 行，每行一个整数，第i行表示从左到右第 i 棵树最高能长到多高。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 30% 的数据，N ≤ 10. 对于 100% 的数据，1 &lt; N ≤ 10000.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//存放每棵树的实时高度</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//存放每颗树的最大高度</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">One_cm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//每棵树每天长1厘米</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (k)<span class="comment">//循环2次即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)<span class="comment">//从左向右，a[0]到a[n-2]</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">One_cm</span>();</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; st[i])</span><br><span class="line">                st[i] = a[i];</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)<span class="comment">//从右向左,a[n-1]到a[1]</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">One_cm</span>();</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; st[i])</span><br><span class="line">                st[i] = a[i];</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; st[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>该题就是简单的模拟，测试样例，然后发现规律，来回两次即可得到每颗树的最大高度。<strong>100分</strong>。</p>
<hr>
<h3 id="题目-2660-积木画（动态规划）">题目 2660: 积木画（动态规划）</h3>
<p><strong>题目描述</strong></p>
<p>小明最近迷上了积木画，有这么两种类型的积木，分别为 I 型（大小为 2 个单位面积）和 L 型（大小为 3 个单位面积）：</p>
<p><img src="https://www.dotcpp.com/oj/upload/image/20220411/20220411102028_95648.png" alt="蓝桥杯2022年第十三届省赛真题积木画1"></p>
<p>同时，小明有一块面积大小为 2 × N 的画布，画布由 2 × N 个 1 × 1 区域构成。小明需要用以上两种积木将画布拼满，他想知道总共有多少种不同的方式？ 积木可以任意旋转，且画布的方向固定。</p>
<p><strong>输入格式</strong></p>
<p>输入一个整数 N，表示画布大小。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数表示答案。由于答案可能很大，所以输出其对 1000000007 取模后的值。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>五种情况如下图所示，颜色只是为了标识不同的积木：</p>
<p><img src="https://www.dotcpp.com/oj/upload/image/20220411/20220411102534_97232.png" alt="蓝桥杯2022年第十三届省赛真题积木画2"></p>
<p>对于所有测试用例，1 ≤ N ≤ 10000000.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> dp[N];<span class="comment">//定义为n列时，不同积木摆放方式的个数</span></span><br><span class="line"></span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    dp[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">2</span> * dp[i - <span class="number">1</span>] + dp[i - <span class="number">3</span>];</span><br><span class="line">        dp[i] %= MOD;<span class="comment">//在循环内取余，避免数据溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该解用到了动态规划，挺抽象的，直接从dp[n]开始向前推导。</p>
<p>这个博客讲解的还不错：</p>
<p><a href="https://blog.csdn.net/qq_39391544/article/details/124060739?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=124060739&amp;sharerefer=PC&amp;sharesource=Xing1796_&amp;sharefrom=from_link">https://blog.csdn.net/qq_39391544/article/details/124060739?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=124060739&amp;sharerefer=PC&amp;sharesource=Xing1796_&amp;sharefrom=from_link</a></p>
<hr>
<h2 id="2022年第十三届蓝桥杯大赛软件类省赛C-C-大学C组真题"><strong>2022年第十三届蓝桥杯大赛软件类省赛C/C++大学C组真题</strong></h2>
<h3 id="题目-2680-纸张尺寸（简单暴力）">题目 2680: 纸张尺寸（简单暴力）</h3>
<p><strong>题目描述</strong></p>
<p>在 ISO 国际标准中定义了 A0 纸张的大小为 1189mm × 841mm，将 A0 纸沿长边对折后为 A1 纸，大小为 841mm × 594mm，在对折的过程中长度直接取下整（实际裁剪时可能有损耗）。将 A1 纸沿长边对折后为 A2 纸，依此类推。</p>
<p>输入纸张的名称，请输出纸张的大小。</p>
<p><strong>输入格式</strong></p>
<p>输入一行包含一个字符串表示纸张的名称，该名称一定是 A0、A1、A2、A3、A4、A5、A6、A7、A8、A9 之一。</p>
<p><strong>输出格式</strong></p>
<p>输出两行，每行包含一个整数，依次表示长边和短边的长度。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">A0</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1189</span></span><br><span class="line"><span class="number">841</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">15</span>], b[<span class="number">15</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1189</span>;</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">841</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)<span class="comment">//预处理</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = b[i - <span class="number">1</span>];</span><br><span class="line">        b[i] = a[i - <span class="number">1</span>] / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    t = s[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//字符转化为对应的整数</span></span><br><span class="line">    cout &lt;&lt; a[t] &lt;&lt; endl &lt;&lt; b[t] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>很简单的一道题，100分。</p>
<hr>
<h3 id="题目-2684-数位排序（sort自定义排序）">题目 2684: 数位排序（sort自定义排序）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝对一个数的数位之和很感兴趣，今天他要按照数位之和给数排序。当两个数各个数位之和不同时，将数位和较小的排在前面，当数位之和相等时，将数值小的排在前面。</p>
<p>例如，2022 排在 409 前面，因为 2022 的数位之和是 6，小于 409 的数位之和 13。</p>
<p>又如，6 排在 2022 前面，因为它们的数位之和相同，而 6 小于 2022。</p>
<p>给定正整数 n，m，请问对 1 到 n 采用这种方法排序时，排在第 m 个的元素是多少？</p>
<p><strong>输入格式</strong></p>
<p>输入第一行包含一个正整数 n。</p>
<p>第二行包含一个正整数 m。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数，表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>1 到 13 的排序为：1, 10, 2, 11, 3, 12, 4, 13, 5, 6, 7, 8, 9。第 5 个数为 3。</p>
<p>对于 30% 的评测用例，1 ≤ m ≤ n ≤ 300。</p>
<p>对于 50% 的评测用例，1 ≤ m ≤ n ≤ 1000。</p>
<p>对于所有评测用例，1 ≤ m ≤ n ≤ 106。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;<span class="comment">//自定义排序规则</span></span><br><span class="line">    <span class="type">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a = x, b = y;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        sum1 += a % <span class="number">10</span>;<span class="comment">//x的数位和</span></span><br><span class="line">        a = a / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        sum2 += b % <span class="number">10</span>;<span class="comment">//y的数位和</span></span><br><span class="line">        b = b / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum1 == sum2) &#123;<span class="comment">//数位和相同时，值小的在前面</span></span><br><span class="line">        <span class="keyword">return</span> x &lt; y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum1 &lt; sum2;<span class="comment">//否则，数位和小的在前面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//存放1到n</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span> , cmp);<span class="comment">//sort排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; a[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题要掌握sort函数的自定义排序规则，其次就是如何拆位。</p>
<hr>
<h3 id="题目-2690-重新排序（贪心-一维差分）">题目 2690: 重新排序（贪心+一维差分）</h3>
<p><strong>题目描述</strong></p>
<p>给定一个数组 A 和一些查询 Li , Ri，求数组中第 Li 至第 Ri 个元素之和。</p>
<p>小蓝觉得这个问题很无聊，于是他想重新排列一下数组，使得最终每个查询结果的和尽可能地大。小蓝想知道相比原数组，所有查询结果的总和<strong>最多</strong>可以增加多少?</p>
<p><strong>输入格式</strong></p>
<p>输入第一行包含一个整数 n。</p>
<p>第二行包含 n 个整数 A1, A2, · · · , An，相邻两个整数之间用一个空格分隔。</p>
<p>第三行包含一个整数 m 表示查询的数目。</p>
<p>接下来 m 行，每行包含两个整数 Li、Ri ，相邻两个整数之间用一个空格分隔。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>原来的和为 6 + 14 = 20，重新排列为 (1, 4, 5, 2, 3) 后和为 10 + 14 = 24，增加了 4。</p>
<p>对于 30% 的评测用例，n, m ≤ 50 ；</p>
<p>对于 50% 的评测用例，n, m ≤ 500 ；</p>
<p>对于 70% 的评测用例，n, m ≤ 5000 ；</p>
<p>对于所有评测用例，1 ≤ n, m ≤ 105，1 ≤ Ai ≤ 106，1 ≤ Li ≤ Ri ≤ 106 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, l, r;</span><br><span class="line"><span class="type">int</span> a[N], cnt[N], diff[N];</span><br><span class="line"><span class="type">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输入原数组，令下标从1开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)<span class="comment">//构建差分数组，用于cnt数组的构建</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        diff[l]++;</span><br><span class="line">        diff[r + <span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[<span class="number">1</span>] = diff[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">//统计每个位置出现的次数</span></span><br><span class="line">    &#123;</span><br><span class="line">        cnt[i] = cnt[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//计算原数组的区间和</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum1 += a[i] * cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从小到大排序，确保大数的出现次数更多</span></span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(cnt + <span class="number">1</span>, cnt + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//计算原数组的区间和</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum2 += a[i] * cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum2 - sum1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到题目以为要考前缀和，最后果然还是上了个难度。</p>
<p><strong>利用一维差分统计数列每个位置的出现次数</strong>，然后对原数组和cnt数组进行从小到大的排序，</p>
<p>确保大数的出现次数更多，小数的出现次数更少，故大数的“贡献”更多。</p>
<p>做完之后才发现这其实根本上是贪心法。</p>
<hr>
<h3 id="题目-2688-技能升级（暴力-贪心）">题目 2688: 技能升级（暴力+贪心）</h3>
<p><strong>题目描述</strong></p>
<p>小蓝最近正在玩一款 RPG 游戏。他的角色一共有 N 个可以加攻击力的技能。其中第 i 个技能首次升级可以提升 Ai 点攻击力，以后每次升级增加的点数都会减少 Bi。<img src="https://www.dotcpp.com/oj/upload/image/20220411/20220411170126_86897.png" alt="蓝桥杯2022年第十三届省赛真题技能升级">(上取整) 次之后，再升级该技能将不会改变攻击力。</p>
<p>现在小蓝可以总计升级 M 次技能，他可以任意选择升级的技能和次数。请你计算小蓝最多可以提高多少点攻击力？</p>
<p><strong>输入格式</strong></p>
<p>输入第一行包含两个整数 N 和 M。</p>
<p>以下 N 行每行包含两个整数 Ai 和 Bi。</p>
<p><strong>输出格式</strong></p>
<p>输出一行包含一个整数表示答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">47</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 40% 的评测用例，1 ≤ N, M ≤ 1000；</p>
<p>对于 60% 的评测用例，1 ≤ N ≤ 104 , 1 ≤ M ≤ 107；</p>
<p>对于所有评测用例，1 ≤ N ≤ 105，1 ≤ M ≤ 2 × 109，1 ≤ Ai , Bi ≤ 106。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">// 如果 a &gt; b，则 a 排在前面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="type">int</span> t = (a + b - <span class="number">1</span>) / b;<span class="comment">//最大升级次数，上取整</span></span><br><span class="line">        <span class="keyword">while</span> (t--)</span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">push_back</span>(a);<span class="comment">//存放每个技能升级后可加的攻击力</span></span><br><span class="line">            a -= b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(st.<span class="built_in">begin</span>(), st.<span class="built_in">end</span>(), cmp);<span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += st[i];<span class="comment">//求前m个攻击力的累加之和</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始想用贪心法，但是不知道如何能够每次取到最大攻击力。</p>
<p>其实只需要把每组样例中可以升级的攻击力都存到vector数组中，最后进行一个降序就完成了。</p>
<p>然而，这依然属于暴力枚举，只能拿39分。</p>
<hr>
<h3 id="题目-2691-重复的数（暴力）">题目 2691: 重复的数（暴力）</h3>
<p><strong>题目描述</strong></p>
<p>给定一个数列 A = (a1, a2, · · · , an)，给出若干询问，每次询问某个区间 [li ,ri ] 内恰好出现 ki 次的数有多少个。</p>
<p><strong>输入格式</strong></p>
<p>输入第一行包含一个整数 n 表示数列长度。</p>
<p>第二行包含 n 个整数 a1, a2, · · · , an，表示数列中的数。</p>
<p>第三行包含一个整数 m 表示询问次数。</p>
<p>接下来 m 行描述询问，其中第 i 行包含三个整数 li ,ri , ki 表示询问 [li ,ri ] 区间内有多少数出现了 ki 次。</p>
<p><strong>输出格式</strong></p>
<p>输出 m 行，分别对应每个询问的答案。</p>
<p><strong>样例输入</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>样例输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong></p>
<p>对于 20% 的评测用例，n, m ≤ 500, 1 ≤ a1, a2, · · · , an ≤ 1000；</p>
<p>对于 40% 的评测用例，n, m ≤ 5000；</p>
<p>对于所有评测用例，1 ≤ n, m ≤ 100000, 1 ≤ a1, a2, · · · , an ≤ 100000, 1 ≤ li ≤ ri ≤ n, 1 ≤ ki ≤ n。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, l, r, k;</span><br><span class="line"><span class="comment">//a数组用于存放数列，st数组用于存放每个数出现的次数,flag数组用于避免重复计算</span></span><br><span class="line"><span class="type">int</span> a[N],st[N],flag[N];</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">// 如果 a &gt; b，则 a 排在前面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);<span class="comment">//关流</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//存放数列</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)<span class="comment">//存放该区间内每个数字出现的次数</span></span><br><span class="line">        &#123;</span><br><span class="line">            st[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[a[i]] == k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag[a[i]] == <span class="number">0</span>)<span class="comment">//避免重复计算</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                    flag[a[i]] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//重置</span></span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="built_in">sizeof</span>(flag));</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="built_in">sizeof</span>(st));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//必须要写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyAns</strong></p>
<p>该题是C组的压轴，没想到直接用暴力做也能拿77分。</p>
<hr>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>对于实况足球的反思</title>
    <url>/2025/01/09/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E5%AF%B9%E4%BA%8E%E5%AE%9E%E5%86%B5%E8%B6%B3%E7%90%83%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8be6272814d1724bdbe95dcfd8a9d14bc22ec769c4d67d1f657430f09abf4cc8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>大三上总结</title>
    <url>/2025/01/09/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/2025-1-9-%E5%A4%A7%E4%B8%89%E4%B8%8A%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c81576812222d8ceeea63723eae5d1483838448a3468966c2727d33298bc3e8f">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b606981ddc2211435ccab95ad8b073d60d98ad20f6d647d387dbcf4af3d8a973a37f432c01e6219d561f30ab600f104021a8661a4ed2be494d53d3cdc4383b102441eda017e52590c8898df931af3f10196bdec7a2e6cd78c3ed007a2abc1cbc048d7cd9a80977230f98066e6f79dbcb57254993a2b76674a8dd3092b06c37a9b94e1d1cbd9e9e51d6c9199fdadda687a0f7899a76f5af0987db5e0cec1f44ae8913d18f0a39f266b9b0b6962992b8d258a51c14d7ade92e5cea21d15451af3ec95316e5016c02a3d2a2caef7c949b1fe533d7e0bb69b266e93427d8522e3a8175e170a06dfc27eba3dc20bd3206bc6afb2379c5598cc4968f61fa5d3a1c0880f42348e2adff5c8ab0d525065b125e9f0458280f6c77639a84ecf7261c746948bcf08c3273f1ad1bea4ef81c3bcb706210b325d65b7d84857641dd56358714b1261c9106e6af3e3adad5257974ed1cb72f37432a63a63fc8ec0b09e935ac4c6835ad771fbc2fb91e1023743d5b5a8a76594ef2481ff12867576d1ea6c87b3b4d74a3993e753f44452606448ea1a31617b3d03fe974bce80fa13cdaeeda67541671a38c131d6127a17f7eb1630b73e7c98ebd0d35294774635572fc19a2603e02c0f2434fae9ddb119cfcd33c3657738f268f6f92e242fdcfcc0c631e853e4accd0b4a751eabbf72380476116a9ecfdef0dee6679aec8312bc65194437a0fb55a682147efa66847d3fa1344978a213ad1210b923347a38d94d2f375097f409a65776b8e149b2f9bc5462ba12459bb3e3d50bc4b9bd0d35ed34fd8270cae7249c47d2019c5f24e020cfe039887c20db42b2efa1655465274d18d707df09b06133a2b9942ad9315c68da6a3eb534eab2600955d896b20bdb97b59515e3c9cff33e8c3c256732fc8f6f4a79827bc1c4e369ab40ec36d317e49fcec64a6f8fea199a4678882eb477c5ad9c3740688e01bc391cec5d79a707d1c637433235059b87a0d762313f348ad255e51dc6675d8e9eca2e076f6a2a8e3a19945d6477b581252f8cad2d016edb148d84ff1859c04db182fdf32b09d5d30ed0ca0268299fc4bc28780f513e54dbb444467bf10c649371676fa2829bad58ab47bbcb6cc1af49409a04a9614a737ed3acce89c3fc6751cdc3fe81c191e00994e8cfdcc9e13c404b7fb573145e97ad25c840edd4388d33900898b226aed2387d93fff3be902cf2f8c48df2af2f1ef0ab428c2b6440c4427010b84fdb2fdba2db7767261d65e8513c9306c86e7bdd4979feab852481ca81b80cf426b84a3ac15453b892453c1d9909a5aedfdada919e49b5c441883709ab89586bc8f74beee5374e1ef98e3fc82a700283164801c48788f6bd4243519f3843a30216383eb39e95dcdb84b78361d35e20f5aae00e2fe9ff5dc03839d82bd5c304f4bf6fa0b282ee6be1984dfd2536f93e25729a7141a35723701fc5b341048ec3afdd4103bfec0f50e48345a548ce56ac87225eade4588c23a1e25678da87500c2c4c544b10c73dee9f3584d0f91f33f920589d3dbcee7d4797f756d1089ffdcf210a4e976e831ea2138e8b823a4e56def5910bfe89ea4eaa0ae337c116aeaabd7f06840a2183422c07ac126d9c0dd295af6faa47f0bf1b704e5e2d21cb98d34b7fa2f16c332569f78753a60dd68a2a2b8831193fd3e30937f1771c54f91156358ed14f2f0379d47fd8319a5cba5c24c37edc9dcd1364008f78c14f213c5f5e122d782e83ef2e1ad7ca2e09d20def57a14011d83a2d1962ad4a432da1e0c88e5b28c8240ab3d6b282b9e74ba455458753207507c59188d5bb75f5d202c237a53fc97ff508ff390f1c7feb0a17e34a03f4b606e1af6c42531b03cd7800533fb2c0b35eb70ff783da3bce7cd3178ff0fafd0b8f0b2dc9ea6df186730e325b3b74a287f297d6e68475c5ec52393119604ff66dded6b8d918f520e2f3ab19947851a00afcd54ee23c6a827c6f1198bdf405e52eb42f9657607d402087eb1379f54ee9de719fe9dd211d720e2ed1be4496c1884f762fd3b7ca7025b1ace2397d71bd6e51f802b919703fede1275df3c9953dfad8234a5c42e905381eb86789ef9a2bb6c4241b0f859af36c29d218a6cd760216e28faa00fc0ec46caaabf4a0e6441a2ad83f4f83752ce07eeb0b9fbe99c02706f1c686552243d584af758b7e3cfc81e10fcca43e85bce6ec1242e87daf15adf6fc77dcd04ae0ddfe63c36a098de013804e5466b1b84bb8be3a5ae0c36f6cb1f273efb532c0f62ae79d55c8ec6a418559850dd57e6936c12c847fee2cf58c1b3b402e59c024ffb51218bb3106bf384765151b6d2181312228db55340310d7209f7460e5d4b03711dfae48fb84482d0e1565dcb0fbf53980484cdc2ad6ea4f9ac8b8fe3b49864a0b87c00b3d6f3f1df3b377cdbae0138baeb3480c8899a54f4f4549345fe44fe1d1f0a503b6e54224423dbdedc7564a1f9f8724bb501fc9fbd58641b9d05bd5c6cef4c7f7232d9df32155f15b73483ae6a8deab26d88f6d4ddd7a4f1c416b7ec5f55a3dbf0cea4ee415658d1738a19e3f839cb650f0b6239f02a694567c67086d32a3061a33c31e0eeadd9874a1055b1240fa19246c11948dddaa8b31b1111ee7956926a7ba2ff9261f724a0da5e317e8744f7e4b17048f52cd0b63de2b4c98e9d91df327ce60a03c31b30dc7f4ce7a34c235ee9006d2cb1edceddc306437afc6bc7954daf86fbc8c33dae72bef04ee0314f3b3f2847fd3ae38329256401cb132aaa08d3ea19452e22fd5da9a9574002753540c7a326df2cf120aa429b7c62bdc798dfb2211a96fcccb31bdb0eff9e6afd51086ad0770c65cd92a9ffc56bdd2b77e51c6ce0ab22b755215122d5723ce849aceedaa55ca24d4a644f2116fc5154f6c09fe7b1c429afe3be2cbf35de2dbae2bae41e3406fc667c9686e4baf818299cb633ab5b894e9d85d01daa3362ebe54a79053ae9c435324565106f09478a661ab3bb1547137565e98346cd48ad2074be6d26a47ac030ab64471278dce5fd01007a6223f2e2a020880d0123f0292660dfbe337e7c1e76a0b98216dae43ffb54fbeca4bf89a5d8be51f8a811a61747a992a0c676f0954a50b9a44edad218da8842b05a6c950252de74ff9e0ab057a4fda0551ef0a1787910e154786eab95ff8ed12eea4537b7ab3813e1d5210ce5d535d9a5bb1d5d049d3d92a8d6c429286810e79395c1c3cdee2aead94cbf137a17c9967280964ec633455e1a1a5d2b96868325a0b213439e92e280d651d39945845a688f4c895c3d86e91c75b15fe0255fbebbe98785de045e826466fbc6fcd2bafd5dfa61f1f4acce39c5f50233a3ec59f0f0dff7b05066e12aa93262aa4c3a4bfc3ed3c713d7d77874268fb26cb4d2da8da9c193020dd1525ed59a307e6b80e3a21516c50c6b2c612d5402aab5ee38a44c87b6ae8298f702378a76a6bf5cd921ffe09c929054afb696fb9ab9e31ce7d8cd1000c724922aad73bda55db9a37d493592cbbd9f86fb78f05b267267f19e50b54a5f7a9a37a6c7624df24d097be1e607d1de6ec6bc736e28d5aa31145be3b0ebb5f4e2822de94d8b346e39a90164286d0d21f4bd3874be72db67d838a4309f0a293001bf5c46bf4ff7efb2227e41c411fcfb5e6b20aada4eb57bdecf2da46f523845e6bab8c2cd71b751161aed9366db03d34548b1e106eb935416acd360bb3f40cc11104b030c4fb4c5bb7b1a7a554b21b4b3d702074647fccfa5b390a4142d64b24d1e8a500bb43a5088f5ee02aeb118fa2cc86b6e461c52452be4709abf43ead01c5ecd21f59215bd081bb44b18f16a9f387ccec6d865ca95c60fce18b5f166683655748600a40867ec1692d8fda2701caa206362fe0f20e24edc245</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理期末重点复习</title>
    <url>/2024/12/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E9%87%8D%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>以下是《通信原理》复习课上老师划的重点，重点的概念和图片要好好记忆。</p>
<p>对应页数中的概念和图也要认真对待。要知道相关信号在时域和频域上的表达式和波形图。不直接考波形图的画法。</p>
<p>所有的计算题都在课后作业题的范围内。不考《信号与系统》。</p>
<span id="more"></span>
<hr>
<h2 id="第一章-通信的基本概念与理论">第一章 通信的基本概念与理论</h2>
<h3 id="1-重要的概念">1.重要的概念</h3>
<p><strong>价值</strong>：被利用的程度。</p>
<p><strong>通信</strong>：利用信号将含有信息的消息进行空间传递的过程。</p>
<p><strong>信息</strong>：一切事物运动状态或存在方式的不确定性描述。</p>
<p><strong>消息</strong>：语音、文字、音乐、数据、图片或活动图像等能够被人所感知的信息表达形式。</p>
<p><strong>信号</strong>：可以携带消息的各种物理量、物理现象、符号和图形。</p>
<p><strong>信号</strong>是消息（信息）的物理载体，是通信任务实施的具体对象。</p>
<p><strong>信源</strong>：通信系统的起点，指能把欲传输的各种消息转换为原始电信号的设备或装置。<strong>话筒、摄像机、键盘</strong>。</p>
<p><strong>信宿</strong>：通信系统的终点，指能把原始电信号还原成原始消息的设备或装置。<strong>扬声器、显示屏</strong>。</p>
<p><strong>传输介质</strong>：能够传输电信号、光信号或无线电信号的物理实体。<strong>电缆、光纤、大气、海洋</strong>。</p>
<p><strong>发送设备</strong>：能将原始电信号变换为适合信道传输的信号的设备或装置。<strong>放大器、滤波器</strong>。</p>
<p><strong>接收设备</strong>：能够接收信道传输的信号并将其转换为原始电信号的设备或装置。<strong>译码器、解调器</strong>。</p>
<p><strong>噪声</strong>：一切可能损害有用信号的信号。</p>
<p><strong>模拟信号</strong>：因变量取值随时间（自变量）的连续变化而连续变化的信号。</p>
<p><strong>离散信号</strong>：时间或其他自变量离散取值的信号。</p>
<p><strong>数字信号</strong>：用因变量的有限个取值携带数字消息的信号。</p>
<p><strong>信息量</strong>：一个能够衡量信息多少的物理量，用英文字母I表示。</p>
<p><strong>信道容量</strong>：单位时间内信道上所能传输的最大信息量。通常用信道的最大信息传输速率（比特率）表示。</p>
<p><strong>信噪比</strong>：信号平均功率与噪声平均功率之比，记为SNR或S/R。</p>
<p><strong>多路复用</strong>：一种在一个物理信道中传输多路信号的过程或方法。</p>
<p><strong>频分复用</strong>：在物理信道中，通过调制技术将多路频谱重叠的信号分别调制到信道通频带内不同频段上传输的方法。</p>
<p><strong>时分复用</strong>：在物理信道中，根据抽样定理通过脉冲调制等技术将多路频谱重叠的信号在信道中分时传输的方法。</p>
<p><strong>码元</strong>：表示M进制数字信号每一个状态的电脉冲。</p>
<p><strong>码元传输速率RB</strong>：单位时间内传输的码元个数，单位Baud，也叫作波特率。</p>
<p><strong>信息传输速率Rb</strong>：单位时间内传输的信息量，单位bit/s，也叫作比特率。</p>
<p><strong>误码率Pe</strong>：接收的错误码元数与总码元数之比。</p>
<p><strong>误信率Pb</strong>：接收的错误信息量与总信息量之比。</p>
<h3 id="2-重要的图片">2.重要的图片</h3>
<h4 id="通信系统的一般模型">通信系统的一般模型</h4>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241224193909.jpg" alt=""></p>
<h3 id="3-信号度量与香农公式">3.信号度量与香农公式</h3>
<p>P28~P30</p>
<h3 id="4-通信系统的性能评价">4.通信系统的性能评价</h3>
<p>P36~P39</p>
<h3 id="5-课后作业题">5.课后作业题</h3>
<p>P43</p>
<h2 id="第二章-模拟调制">第二章 模拟调制</h2>
<h3 id="1-重要的概念-2">1.重要的概念</h3>
<p><strong>调制</strong>：让载波某个（或几个）参量随调制信号的变化而变化的过程和方法。</p>
<p><strong>解调</strong>：从已调信号中恢复出调制信号的过程或方法。</p>
<p><strong>相干解调</strong>：在收信端利用本地载波对已调信号先相乘再滤波的解调过程或方法。</p>
<h3 id="2-重要的图片-2">2.重要的图片</h3>
<h3 id="3-DSB信号调制">3.DSB信号调制</h3>
<p>P44~P47</p>
<h3 id="4-AM信号调制">4.AM信号调制</h3>
<p>P48~P51</p>
<h3 id="5-频分复用">5.频分复用</h3>
<p>P56~P57</p>
<h3 id="6-课后作业题">6.课后作业题</h3>
<p>P71</p>
<h2 id="第三章-脉冲编码调制">第三章 脉冲编码调制</h2>
<h3 id="1-重要的概念-3">1.重要的概念</h3>
<p><strong>抽样</strong>：以固定时间间隔不断采集模拟信号当时瞬时值的过程和方法。</p>
<p><strong>量化</strong>：把连续的无限个数值（或大量的离散数值）集合转换为离散且有限个数值（或少量的离散数值）集合的过程或方法。</p>
<p><strong>PCM编码</strong>：把量化后的多进制数字序列变换成二进制数字序列的过程和方法。</p>
<h3 id="2-重要的图片-3">2.重要的图片</h3>
<h4 id="脉冲编码调制模型">脉冲编码调制模型</h4>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241224213656.jpg" alt=""></p>
<h4 id="脉冲编码调制示意图">脉冲编码调制示意图</h4>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241224213734.jpg" alt=""></p>
<h3 id="3-PCM调制">3.PCM调制</h3>
<p>P73~P79</p>
<h3 id="4-抽样定理与系统带宽">4.抽样定理与系统带宽</h3>
<p>P86~P89</p>
<h3 id="5-时分复用">5.时分复用</h3>
<p>P89~P92</p>
<h2 id="6-课后作业题-2">6.课后作业题</h2>
<p>P93~P94</p>
<h2 id="第六章-数字信号的基带传输">第六章 数字信号的基带传输</h2>
<h3 id="1-重要的概念-4">1.重要的概念</h3>
<p><strong>码间串扰</strong>：一种某一码元的实际抽样值是该码元与其他码元尾巴在抽样时刻的样值及噪声的叠加现象。</p>
<h2 id="第七章-数字信号的调制传输">第七章 数字信号的调制传输</h2>
<h3 id="1-ASK信号调制">1.ASK信号调制</h3>
<p>P141~P143</p>
<h3 id="2-FSK信号调制">2.FSK信号调制</h3>
<p>P143~P145</p>
<h3 id="3-PSK信号调制">3.PSK信号调制</h3>
<p>P145~P147</p>
<h3 id="4-课后作业题">4.课后作业题</h3>
<p>P158</p>
<h2 id="第九章-数据通信与通信网">第九章 数据通信与通信网</h2>
<h3 id="1-重要的概念-5">1.重要的概念</h3>
<p><strong>数据</strong>：客观事物属性的记录表示。<strong>文字、数字、字母、图形</strong>。</p>
<p><strong>数据信号</strong>：携带0、1数据并具有两个或多个状态的电脉冲序列。</p>
<p><strong>数据通信</strong>：通信双方（或多方）按照一定的协议（或规程），以数字（基带或调制）信号为数据载体，完成信息传输的过程和方法。</p>
<p><strong>通信协议</strong>：通信双方为了有效和可靠地传输信息而制定的必须共同遵守的规则。</p>
<h2 id="第十五章-移动通信技术">第十五章 移动通信技术</h2>
<p>P314~P317</p>
]]></content>
      <categories>
        <category>通信原理</category>
      </categories>
      <tags>
        <tag>考试复习</tag>
      </tags>
  </entry>
  <entry>
    <title>直面内心的反思</title>
    <url>/2024/12/20/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E7%9B%B4%E9%9D%A2%E5%86%85%E5%BF%83%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="cc99d6141127efb18fbbb1f47649e645e6845c49e0b8ab658d8150c624d77cfa">c70b2944c3e1cfeba771fdc86dc5072dbb15d2920ce0bcaa5e881b2fd4f3c27593748ccf3a6fe955cb62e0804cd18fee370d0238fff6cc117f05ef80be359defa3a5f5a541ff5079f115112214d0a8010437a59bd6c389577c8c8a3fbf94f91d232418ee33e71ea44f290d876586eab24ea239ee62bcbbb5d4ef91d1068f6d5fb6bb2d0179b119afdaedda9c169e2d3b7d454845a8d33230c8ab697c93a06adf757e8d8ca2243d1ea3a8934fe48f38ca5e478d9172b2622482d78690c09c6cbd578403f6496628035353b7ab1b367572e4a252fe66a057ef9e4712a5d222970b02a097ad323693de260e2db6ff6e745e2113e2bf03d85a01841494c2078e4ad95619100c62cdcd095a0870f06ee2c9d8b025a89e97f52c91d6bdf2b72bd3d1535e328e9c4aa638e9820312dae775b18bdbb463362ee48dab95a546ed492b045bfa7af5afab539a4dcb3c3413f6bb6ad7e3d669bdd51d318fa8905b4e93f0c829610a33f95806dfd59c0b0efca1ea1cbe86ea700f1f00ef91abb60910f472f593f04e74c53f017ad83dfa17bc1fecf4127253a0b96b83adbd9faa2314a81250846946bb012056258f10fda853d98501ec18f6d8253db219e09c765aab684f11f7ed37b68c0a92c3fd5c3fed86975f7c019924bb71aadabc411e4a152885d8bfa92f1a703aa5c41d6a01dbc30cc3899d30b77fc5356fb697b4a5085905c174a758d8c3b2739d9689f01b6641adcde886d3a726507c405299e0a8f9429dc8d09054d9d7228d22e37b8e3fcaeaf9c7edf8cd613fcdcca989d728ba6089d63f48e30e8bc0eba30b112260608d177f48fc4061b14b9269c04ad7e3bd3d0284997607dd520d02d3e12c2ae1caef9c81c39996ffabe7c06c2c54bda167edb4445eee7f9b85456e54b6866f586405046f4d80f4f3b148a0562604df4093c35a94ea00731ab1bf0012f71a9bcf9df3348397611b5aec2eb63ba0fd8597da2f6e3984759f6bf9d57c1704ec97bb5d8335855fae170b9fdf84d67174861d5469ce24898a1be324db2965295b1427c2d0530a6b1106aac2ce6bd4b1eb41a5c552a238b1590746e47f7c4184c473932716d8cbc87275dd97d359178acd07e419f6e75045184152e3ed7b2b8191aa942e99e74e0b03f6cfe47fdf5b16917568902f66515ea613570ca2b80bfec055f39be47f3626d03ba62e39e9220bf98804ef24b243d90909455d2e6931281ba460d46939b467954ebe402962adf01fd52650c2c66c27f7d045e47f5911dfb34252711c76d59a849d0635e042cf01f7c0e1597e24e6c95cfc997b3c63ed1a86309094be771ff1eb44cdae8684fc5f6611ada8aad8a7f424c4cb6be519ddcca5636b86946a421730302aac4ed63b83fbe513f6ddc98b71244b2b75bf5c62d87c5ee0e4e66ead64d0025005a551f307068a3630b0e85878238c2a7b8bc519bc87a4a58c1a8f8e37d903e766df1e3f88932dc490df4b0e44e2934a451557a5bba6ecc60d0f3f74e3a9128134a869a63e5b96336acd68bc706ae2b2a6a1aec2a0c0d4bdd0a55db4ad6a710d92ad43002b6cbbfd49423b42ca48f389d2ce81479e917c92fd711b8511dfb526f814037c710dcee8d471fb150b25e49cfa17f502244bea3e1c1869ddbfffa23fe8e401c03c719f89b21bc37e23c10f5b7da5e3cc2983b9d76fa696a9fbb30f9553edc562daf33d84266675c3f5ef08c1ba86da9901b75636aceacfb4b29495b4ea4af892883e7b949490f55bd9c605c40e5797c7fa66545f559333702432e1d3c09365b94d80cb45e444e547c7fa746d1c997fd3530e40bab0bd4cfcfa94eebac7b7c46d187e5b9e0b9bc9f72221de8cf0fc7e3bd92040de274a388515a686b52d6ef441af9381a214b39a004b83766fc251823dcb905fd854e2ece50639b57098af0509c0c27c23bd199bab4ccc92de9cac8b6ba78ce6d8e3ae4e6d3cac9f5208a691df9e482ac91a4df97876aa059e8189e42e7a606d93fedd633c63615744189df5a394f638e80c26733d267b9cd6f4316705efeeb8c71133ae4fe6c6181240a8f2e3e63163ddac5ec07ad9781cab994f56ee4f45232f251e3ecf18e25d48cfb2a4a1eb13df5c599a676b3e54a43fbd4868ffe41f980cbe475556bae3b366c739e60922cacb70871a47a5a4d9bb8a3eac6c7806e8ae54ca98bdde707f9b16e52bf94d102f9db013a039ab28cead779d4628e74ef0e33ec91b73228d6fbc833e147f1e54ee13548bf95630cbc647ae62911f0b53f0f4bb7c1f038fdc31426f0346c3d809a5977d4cc44b9c4ff8def77a03e7b7992f1b35d298aed6adacaebeb2c02eb737465b09504a5b040214f409838c8e1b66aa0cb60b786218154089d5e8f03ea46a092c07514343e378e112398f10ecb5f8c3d90b601102b8da858d50088e014f483adffc43824e11b11310368506ef111a606c81f7ae5bc6fb156cd3a6592e21be78cd00816ed768636ee67403ce6c0e70fe25e2da96bf9906d9148df341cd3226341a06fedc9f1d5bb09b6f2376d4a23c24a2f115c0bfe31883b8c2739b490a1dfd54f7d4b59307a22e3acc4a464e26e8ffef43ea9284e929cef3321c330158c050546767c4c951a82726c71f74a8a0c05cc296f879b8aa819a39f5365011ee06d427c42204a8fc78a8ec4c88d1511977a1d332aa93b09c1229ea7557715183743ca94808283f39b0fdc5f21388f9e66ae166b62e8486e0d327bc5d60ad355accab93646c494753449050936ea6b75d07bab9301fcd037b6bf3c13cb5cdc0b6663099ec7db3305172109a07a38a506ed416effbf33ba47b0c4076cbbbb14298d4d631c27d932dfe210376eb66ea163839e8b04e18c1cbf7013abe77fbceb4eac606ab249665f5c7f1b89992c196e70b7e068c65546461942fa740f1d16cd62163466632a0dce27d40eba5fd0654c6613636bdcfa8465cebd6e6b865bd2ee941c3c2f2d862042c1e3b1dc89701ca7cf0123f27e031ee695decc46a6df6bf74b1c096b7b6bc22bd815cdeae854537d7c9b38f3a2b240690fa4b454f664ffe8fbbdccf276094795ec3617aa4ce09f10949ced6e436c5a4edb998c540bd717d577c547c9191469355f0bf9e308da19d8fdad9c938585f42eb2a97566d7fc4ec63e7a27c8c5fd91bdc9f2b0b1ea0f36d29a3a1e2eec51abfc3db6612eba6db928656fd334b578ec2e36e1b815b8a7d4b918a910207919043b8e11e08508f7e397189070793cfaec09ffe6ea4914e4643c1a2c55e2c5d7425ee56ad5dcbadf955d8943c66e901a660007e959d37fa58fa097f56f0c6323d58be9bc85dfb12716acfa9d7c420009442935c8dd6c38b3b0210f7f6dc997500f49b69dde51b90a737ea7612ecae06ca8221a3b3ecfb3a0f1c9f14d7526b0aedd7b1aa3c3511c6e5ce93c2f509d7c634ff8ded91804a2e908e11d5022857f0fb6de61125746a017b830664a4b24876401ae17add171818d76f3af7c9dbb76e51f1d4b9b317201907dec7c012c3e4360e568e659eae9187475139acb63f4367d4555fb1b08459ae4c9b206ccc61ba792229ae5123d612756c2f1153a9f19ebd14d44d894c7ae36dc0a3abec8949bdd41a842012adcc0f555e31fc8bc3b22bfb9884ca9f70f7f9fab83ed79640e34d15f066acf5234bb3c27da53a090f77d33bf992ff91bfcbba7bdb9a9e2cf409c48da0fe8d8885a27eeb79363776cb9406465bba8c5ece13627390d57fe50141aeaee42c59f3e28a2d997bb6c03306415ae81535e5b4ecf2bb180dfdd6c8fb930a5c119b7f6114599d92312452d34fd11cd68fc847cc7a5162256ac8073c8cd8217955b48b04c4682288ce6e65d46de795a704450eaa644560dd5991e6adb0d092f37649f8235068644a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2024十二月月中总结</title>
    <url>/2024/12/14/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/2024%E5%8D%81%E4%BA%8C%E6%9C%88%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="a35f4d962c3a41bf46a4f43e993a85ba487a731b81652f24f512d6387488b593">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b60696c40e8ec3a085aed1eb99256474ff73eb727e880566002ba548e20af321549ab3712a37ee704b18d80149bd52587c1b3f1dee99887b56a6e000b4f33a2ccbefd361b56f628d86230cca9ebb7f1725dc76f3e99bccea579e96ea0168954392ce1f76a78c3d19b2f7a5f5f4f6128f2d0d2c7c99dfda583ff9b393fcb84fd18a4be028fc30f499eaf402379a40b4c7bd8d8e3247c7811386dd2cfaee533af7044b8451cb7ae26702ce482f96d6fe88eef2a30e87145a949a3a3a5cb4ac228b110e77fe8d0acf743747f5856e112c08d10bad748647b5c32907745431607a8ea2eccd367097b906b4968f9cb0fa226fb435be37e01b3749ef97575fbee89f25cdf78387a2801fa80fe06464e42819b8f4b6085aefda666707c7f9922945cdb6908f3af35ddd373aa2708e125b580536e405854226aaaf6708dfee048266ddaee62edea8fe4ece79a1308d91294f398908dca7af1512d722ca951fe3d012aa403b765947fdf389c77648a1441026c7876b910599fca5c2293c301dd950acfa6f00abfe382fb4616026a87b048c277ce7f1a81f3953c05124a7553a2f059b50404edd44ff1dfdefee8b7c79531cfa9b656dba77be17c44d2af096399861bc3fa98f48c06552bd019e9937fc0375dcc12c3d03d6235362e837728f89bbd80da64697056c833a124233ff8d8181b2b442d83cd8879ad4f77bf5c71dccb1d7de514617ff7281438c17197d8f7ba503f82016c1eb5835c53b029b787a6ddcf4d82a7d43776afc8ff8112a4585e3b22639d24f6249a1b24fce9a93651d98973d5e6482ff29b3ad0661d52025cb1596bec48e750b10a20a81b048441c0fb71137f74b4df70697bb9d0c68a77bff474a784b6c46c62c61f08885b5b9039d084384593babaad6a5add3fe77aec42625bb95668c684d46a0a7797eecb02e2b72bf9cd69f50670223bacb26ee6cf529f2a24596c20f12dce149cf296e4e612c9e18f9d82e1d8ac6a255d1ec0f14398356164ac7395fef74f09575afcdb5cf79954507af64c37897836e9b4addded70da9fbcd2bb94905eaa24ad94450da032a71640520fca9b68f31d732e4412999c5321536e45b434b621dcb0380b5d0cb105955f9b65de57448773014532db748b5e77a10e1833f635cff261254beefa2094479d4bf21351faebcb951014a4051f7f3701a0f6a9378177eac4e0436cee1dc6e7cb5e37d271d7031a9d53f106b90ccc8a74d8196618ddcd3db309f5f83de6ecad2af235b441dc3351a707feb186605e3ee98a74349c531e23824597d723cd69db37de17c4e3a27b16578b4404119b604abbfaf923cd99eb414a24822165cf0fa4cd916547fada942cd54852170f3dfd31a6a77fa6bd1da0bfe7502c3491156e451aab5aa4ae09785aace743353ba781ac09930fa7c503ecdf85fdc4f25e174777ef4654bcf4142ecc5c573c3ab8c2c5a9913d5d7460157967a8ce924a6e322c8053a628814c1152dabb263bc3ccd167926bcadcbbd213c9847855e217a80b9b859a876d7118c103cf8c095dd4527c05be22e1929ae500bcde88d0e0d687abe700d56455b2fa18f3c35ad2e804f5ee0aeedd953feb8996084a5c05195691ccfb8c837ef2c096c4dd9379b61c5fb6f3848ee69c5c212e9d51594797e68c15c9b42c432dbc417e6ce0e34d7e5d27970f2ede093222610af34d49e1f57b1a61c60bf293fca22b55b69192c46dc7200bc82d0f0f5cbda9020d87d77adb5032dcfb7177264d7abe62c8be6b5369decb7cc66c49ac4e303daa453dfad8730972b871ca524d8e4d5f48d2f718d2bf43ff4d243a10ac8340337e52f5a21b5b2156cf0649a14e01c9e41f00fa032e5e392ed2a25826099eb33f13b579c74263515c3268b0adc6c1264c714c0d77194255f1dbe9ae7f836dcc71bf2141d2a20ebbb4ac9afeb0e47cda4e19d0fe9679d98cffd1554d09d89845924d68a2acad38bb9978ca4aa3d104cce6ed9e3e1a36bb9c355afc6fdaceb3bb98451dc3da8300dc6ab0f572285831ce2a39d5cbc89315d3cad28edf243aa2792b341dce1aa626241ff031a9c41fe05f24e31f3587612d421014c08f2f8a888b17322028d86923a5740ab41e0954a76990be397186757ca24e57875ac4d49190930a4c26a366559746e0859b243e7a99a60de197536cecf276526104acd8eea23f5bb92098433d5d8b99ef388ebe3c5216bc3ebb025432c58a8931427c6518d83b0302f5a51901cfdf4d2df74e73eaad9141d0a04812fb08f092d778e3e51759519a07050cdd12e63f14a924932246c208a0db1ec674f0562026f55b9d06f88ccade9bbd9d427dfca34cc39458cf485fb03ce86b564214602815ec61b9b4cb921ebcb3d9c8f8d91e5a363eacf3b5dd7fcdea6d516b57220389adf2bc5a1571fba7707e2b0e4b3e713cdf00bf8cdbce7db6ca417715266c6953d9c60fa78081762712ae3df6396078660793cb4d52173e7e9d4d58a690d4129c52d8d957bc2336ebfef7d83272200b99ff50299c228b72af4e44ceeb0501a0c6e786050197518b7b7c021d09bfc51f1b6cdc4eb1c1270960f1dbbd9aa466d7da9455e1f1616984b2bc58bcf1dc8e8552177c43a7d91e9c0b7ad746a269f56ac27b6a7a574a6f0c571a11183aa9817ff470f84c741cbaf27cff8901260a03e955786f7019884a8ceead2563eccf193558260bcb678ebcdff97e09844d569f694d9789f2c2a100ae9d9af7e56f1594c293d9ddfcf67a1e89243f552cbb70d6e6c0c865479b9d4a4f67a6be292f80e3f3703c765ae7ded1894654f0efb9b6550d6bee75dea9c94bd2cd4722f9ea4456c738c1a7fc6cd674d82b2ac95f896e40be5c5fab3e5278b67455fa958a7ded45d7ae43ad13001146c0e9f64659af8f97dfa4c957e0355938555370287e6687a461fa3030af214e68cf0c41c7089dd08bcac3f96d0d9dd637d8c75cc471e216cb49ba3090d3a4de420ae8aeb24a0d9ba768fc5924300fd0329d19fefaadf7094d9db255cefe0ba9c87f90f958048c5313e7aec9091307074b4e29881ce7d83ee5d76538f992531c5a9fefdfd7c185ddbbfeb42d5f0bdffb87e5997a828b36ab197676d9cc18512966785cfb1609f97937097e16565db73e13917a79fbdd1f139709cbefd7d96646e179094edf3ac9e770cae21d8c2a654f9c647065f23f2d7941e2a536478e6fcc73acf2dd9e65d8c766b438bd80f1879087484c3cf1fafe9f30095016e3f6dccc1e3dd939cabd01c0017d1a3f7814a73c0ee24ae8706e697213c07a3ce3985b8a691d9bed3ecee84fb6e61865c485130035aba7c6f8183c41c3fef23e4d0476d2d8a87377bb8f7a905d57323cc796b62b32b735875075b54abde66e2e5e096faea577f9829b1cc74c829a96ba29b13fdaa47f30452453077c00dd44980506d3f0f15bd18a4fac316bc73b20c05f1528f3bbb0be0b1fd3eb475bd8a0e1251fb5b021b45e7cbc3324422d228edb356570e4b82a178a3a4689a14fef9989f4e5433469727fbd0e6157510bea1f7d90a594b74e8fdfa6a757e6c476b8b94f953bfbbac9064e8bad7907e79022544b3f0328fa4cca6a9acaa505376f3c1b2ccb648d4828827058acab1adbd3c22d2475ab3de46df6e85f6d7985358f20c39963ac8320d221997a525809eb42e783b9a7fe21d7c0762049f3a0c26e5c417f24b30a6ae593026460c75218cfb0aa9c39ae2c85c7b892210850fe3583decb620855c58522f4b3ea6ac9d7195dce1939ea2af65215d7c49d4a685ee09dfa7a0c1387ba1db259012c4ee6de3095f23489124285630093c30606a9ddc30b8e18cf55239ccfeb1b6b8a68e88e2b0f9fba4b13cabe718e7106df7ff7f2a78395099b610af698f175a15333f6a201de08482cb07ed3af37b61815f5e8b14dd751b7365c7c451e0c2f08f7cc42206ad6a7552a0b09ae28062c24b5563000fa6a9f5ebe39e751bde9d9ba7653a9d100ba077fc34b5c4fc092496ff7b97ab186b245933bda3ae47e7ef418afe89259c50d0a695c54f958b5db9f7b9f56e3fd8f57a8b67a6672d938fb671177804e0f83fb1bda08a53db175e55316b16e43bba39caf7ee632116e46482a606b33cb1e20b01f4c2a3fafafcbc61844f1ff1a03774ddb57c8effcb722573f6d10c2e9df3245ee91dc15af8616eac45ae3a93b659ac5b97669080610db1c067cc6678fdc7d12dd1b6fdcea8aca0b0648aa7c7d32a138e5774bf00ae4eb9cc768a27c0dd155bf8f2feb52614d8e6a504284c6e8e6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2024十二月月初总结</title>
    <url>/2024/12/05/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/2024%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%88%E5%88%9D%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="f414e0327e7d22ab0f3010d2a976afd66e32bf4ec62f0b964bba556226e28d82">60fd0739c5a82ca45262b2f3393acd5386795b08db20893be0374f1e7071d6d964b9d84e5327edb6de5945000ef2a761621ffe113cacfe089f3d54b2ba0ae0ef285504becda07f47a5a1cee6d14bfdca9a8dfdb62d37be0f5a2ba47c6f6348a5f924197ef69a05b01fa67799afc3297c6e2069609f62f1472d6638a39ec24c03231f2fe1bb9383ed098be1376cade167b7a8d321877f6c69a09860d197b0366d2c18f9b88f387e3e53c861e635835533c659996763b72021ba4f52358e73ea24002aeaf1e86701c29c656981a4f62f10c34a963ea92d598a3e949a988b4541413a04f0fdbd80a36f08ce0fa22483d072390ae620e5fd8725782b1fef073e74d38828f3c8b5dea5936ecc47299bce07ecdc0e05682a2b733d85ddaaef25c52e27f3006c2d8db5bd4f79f857d369b918d489b803e359a74e98feef579e7f10628091c3a186adf8649228ad5e24e67508914f9e1b645279c218d07089cd320a2a4aa2fdb6af4bdbe30a398615462aed3c9808864258490a51483a2c622cc350ca18ce973f42144c13d550c044dff77c8759776b303f71e67c46a58b1e49c9977bf717c9d5c2651f5ac33aefa8d2be2536b99c9eada3b983d391794f214e3269f50286bca26d347a82dd4876f0c96a4e018cf80a63b856b52e9328624b536ca31874fdba38e087bff92006a0862c1cdd61e4aa02213f3949627e8e76241d20290b5d6f657c5644ef8774a0f361be6ba1152783c4b44c012398360650b0dc191e7c8b82ab59e095b2b2f43b7e03bbf818abf776db1f265a15c21d7ec1061ea4a1b9d5ce29a5f896be3f4062d7f3e5640484e607696f83782f6adf1b86fff11968958096d6762aaad0018c89188d6db01c95facc5ab1121da540d049f9eb3531229b252d449da8aae1e7cea29e3f83f27403dc2005bcdf6ed881d8d58f06a70aa8fc3bbd3b0a3beed49d618055ea418af7efebf7c7e5594979bf6d8398372a0c777cb033e90b6641be793d3d2c3efdd044a0185f7a70e2341995adbaaaa36c57d6eed9b5ea2fa3a0f3fd0fc67cc90577514e36fa023eb614fa906ac3aef124481df51215aba66d21a13e6856a47ab8cdd6fac8210b70abb9be5b174b5e35ff4a02568163622d0a4ddc86ae051f3f69bd716aa380e8c7ae4b56ff9a5c94737d9dfd296a14821f1ac7e878b90400f630c0a57fdb0a074457b17e66a58c6a1f7f570ba40c90fbe1513470031f70e236df056745f8681b32f81285b9fbcb91f3eb8c7c410e42183cdec8d76406d514537a3f200c83e301f6c31d0f17f2c15a246811575c3e91c88145702bbcdd2fffc8156bd4adaf7813a2b0379d3b6e5269a348b7bd62fd4c12c8c05b3f0623b09e4c71c7f554887558acc5b7cb7fcc6110796c9534580af194973ce9df0550a74b3b3505cadde10937a5d8b95255dafb713fb0d8ecc268abe2332729e5699553ac455b52972815f5ef3e76baf67c2d212f825b5f66324628412945268a01fd0215295d020b61c04d6f91ecd24f72636fcd41c675e18cdbf269d374efabeb8a7ec6f128ebf407efe665f12ad80b4069b8580e973018e9e61cd6a8156fc5526f19da01f941194084f0547badcb37465ddcf5b270a196729d9ef9f6e2dd0c8744104f8a994330d52ab1cba9402937b11c2d4a1ac95271c4a45a9b91d562432094cd9b69ac661924b27af1d5d950f4bd9e7196dea28f016daa67217aaf026201da0b80c9a3cff05322f9c55ff36132d1824a429a9579e54e7d3b0288416f6da7ec84669af54f4d4c77c68862617494a644a924ea52a88a74bf2e1faa7a3b3eec9a935ad0d984d5b866a64c6c73c58520fa347f12e5ed58fe50faeca754cb5cab9b8accb57d2738d122de80a3b087692b94aff544db62a2c9896e2120c6bca13807a9ce0a4fe21a251ced8ff7179641b0f82c068c678832d50b82ddc2532abe2936a88f2a2bbe60ee0584c78a7be0c858300746bd640a3eaa28019121963650fe1e2d0a0108891af49fb00d8e8a86480f7fff38ee921cd49ccaf9ac7c1bb5d1aecb3a0874765106c51f3e6d29a2dfabc069583f73d3089bdfece681a24f7121b50e915c1faf4e1c3a258e69bb9d9bc0f331cc1f648d0cea8b1e784d2758d57903e32735efb626ad4e80de14e0caf03cdbc878d9524168f683593aaee85b6a339fcd5b316b8c8ea97817a2710352efca70ad38768a0037c6b168d87b56a4926ef4508ae8e95cdd09268f5734b28321bf2434e5aa8ff954eba0d190978d45ac43e795ed659aafadf41311645c6a7b612364a1003f3489c6be76e24a7affb1fb85b90677a92fcc077d01685ab4cb333c30c5e92665f486bcba154c758ee19b03f02dc713ba661ade4c7537584f600ec1fa82e720132b58118386f4a0727ede8691118b68c8923271d530d8505d5b196670317a33e8e01fe71b680b09ebe5ea55fe6139aa900802f8ec8d30c57d7f564a9dd79b687aacd76581b1a9478d74475166380f07fcfebfdcc7ea413945e3d4ce9353243ba7dc4f6fe2ce3779529ee4ad65c125029ecf0b95acde9ad17eaac30ad629c0bc976e403fc6a6d63c5b0bd7f4fd6f065e42c88f89d5a2efb119713074838d671dc8986e0e812127df6c74997c0f2e66f1197855d5f2845dc48b70c058229bc8b3b739f70b2739a5fc79e23964fa0a92aca3bf003c179a735f5d87cae42065e1218ae753bb8758553a520a306900706258f1bd6155aad8a3b0df0f7bc3ae9157c2b44b7e46e86c7663cf74fa42c99edae4e4495dd9f870dfb08778fa14551392fb63cb8deb4bc412182b0f39e828393c8ad93c0117e146965eaee738f953a9f8c556182f8f41a9861583e95162294c54176900fd9b1bc205cc9a6adf20b459da2344cd71f1289a046de769440774e6cca72357f6404c77ec0e1e9f412bced65c1f9452a11f3df259fcc51c2cef649914108e4b7c7aaf48b88ebef9a9e2ba8f76b917e367d99b713e5e5ddaf3e61d065668608734b0b1ab2f26be36d3b47d4901b6da7974bb90ca3ba0e3cf5ff82d74e1724c92fe2b7c2ac1ebff0cda050ede745f8ffdb946f006319f783ea250dc9b5e401ca1ef9e0ca10c873cb7d28422c27f35a2eb9c31c97ffa7fb194e5c4af4d2143dad2fe83fe833511979f3e368e69ce8bebce222a981af663dac25b9b2d911123bfe6871165a960173685a356d644015a415e8cf8f06f58adfa7c25797fbfb206df6cf05b8e6f206f6750692445547d1ad74c4ea1ea48570abeddbfd9f212b77816f524f82b20ab083f058c164490492164263669842527f17730d43e3131f593c29f258b58dd113a3ad913c16e07781ca5f1a055ecccf3d05bea8e793a23ca1abccb05ca3668975a2309266d37b6b0310e46f8669523a6b97d38c79b8b69260ca0ee571176f3598f81b82ed6226269e58479caaf0a62eaa62c09ab823e657ec8ce112bb2e27d6c8086154271d5bc6b7fb0384ca6c8b37af59b57ec1df4b83fc9796553fdccd03463b80878d5182bb764c6827607aac312bcf9feb265992fdb54810f8456cecd729225686ccf500ea1b6713b924c8095db37918bc90d829c31db0f1f3ac1f919c104a021f517c78cb2aed8ec82edd3c7c80dd97e8ccc5fd40a1fbeacf0005ba7ac627b3b4005fdb63b97a9c9b237bb025799db93c47c605abf1e9a7bc859bbc9499e9c7191ffa5b4ae548f46ed525366aa8503fd8226c7395dc1dce581688f3f6f8813749353cb7c255735824725aa3694a84e3dbe02407636cc684444ac620ce8e470d2744df36420e5f69a95077904839fcb793ccdf940e6e0cabebd1a9c421db04d22752a29b53dabe2093e39c96f6988166231d8a45920b971e36a33ad310a35589e03b629102206e661663b273009f25e140b56b5cfee8554556f5e18400b2637e50358fcfee13796749450e49f1dbd928e204c43d7ab7c81d445f694fc992c8135e58bbfed52497139933bc3ab986fdb9ec914ca0487bf401395c93ce7f349c1746f868107fb318163c8b0702071cf06dec144972d3248504df8d98c21126d6b7f65524e5bd8b39ee4d67406fb8afd5d090f614e20e737ae7c38571cc9d3a2327b39b30bd00052560cdc770c67416ce8f1930f0a1b179af3345a8816d9ed8f3418d798d54a23eecc2d68a6d6799fddd851a73daefffb83811592b18e95936091799b586e0bbcc5458b274bc7173573807f3ba2fcdf237dab66bd7051d84d00daed20a1c478903742492c00a0975c89680f6c9ace7ed6d1618c0d2bd7aec1727496aba8c202945c6b97e74f997f2fa9cdb519a18fe467e01233e28752dd4efa99df7d214ae17a6014960317a3e46d91480b81564fe77a9696a6b0b2a132e473ee3b7d5e888bea2b682848069ed68560d5ea3027de3047b9edea6279b7de91da496ceb44b29f4f115f08564c613a4ae663ac30b2816d8d8523a2e95de550263accbc46c5248864c93cfdf3b0619e1fa42d84bb232b382289ae8112730d8990635394581b96d291ee124417f1bd19448a41705db656f74da7bac8682d76bb5341b2b27e967cd730d9b494a2db254457a77e15f710ecfdf2a83671d9b154b34c48a581f907e5039fd0df1d01f8503a75dd212ecc45fa3bc1878881d166d9c3fd6aa02da98b9041d1d625098c4859bf18789e4618690dfe2713a1b233ecbf4c3b0c20d492b2f567a2191ec8f1255c7f79909a4ca312fe45e445e9b71c1a0f64875eec7c6ad7e2f5c080a149208d065a981a8a79ffbfcd34785e07e7b54231de09dc892790cdc56548c31229d3781d7d748d310807c0764314decc554db4c075a032f3979ed05d65b1cb49456bfab213dc73d67c9a96b88177fca605ff8dc9cf09193d50ffd3ee7c542d28e011cd73a656cc26a12168658f40af875fbb4469c269b97b247f9aedd91aadc39d43bb0321ad0f5347b429718a5bf9dc9e79642955573abfa9b0e68939d415db86352c2c1ee082c490b57f7a773ba5a3b05432f845b1093137d3254f60d0409bb8920ecd6ffca12f1c2e1de4adba7e661831ca1dc61854d14979ca54ccb3a840c9601ca34d2413b5479c92f630ea4bdf0d89e1bee35cf3713b971ced948654022a165667102574773e79e32e98d6f4f729482cf279e8df45b9fb46a5ddcde6f5ed0c474bf1fed27a999c674440d51b6e66673ead61d9fa76d1d16056e8a1bab46835c9a971c3635712dd8c42955ed4787237ac24fb76acb7640cdad342be8988bc50f38cfba3cf7a577970b4912ef17504fe1f9c45937ac81c65956a2a7c68efda7ac485313e4650675f13d04a7122b60765f579e9410e032fd9b5b948de5f2d190e190c0cf235b2dfbb163deee5a9c6e4d250b0bcb9b94533f7d7cc49d63f831b9c7005e3728aabfaedb9967447d324a9c1609cff86249f7a7674e8cd9b2655472f9794324b1a1a97af4fa6223280bac6240cc03ab780f03539820fb18cbaa13eb5b58be4afe0623f88ea8895150bdb4dfab2a037b9c2dd4341b06d520af477b77164acd82c3afdc9289a08badc7443aa1b15c5d1fd825ada7f1a673ebd3048656da35152e32f35a553c6be2015d05eec1c46b6708fe477b98aca5db0796b8469ea6d8de8c7fee63242ab197d875b1a0b4d65591f58495b76a2c4929bc819030a4037f76b1e65dfbe503777943ce878c65109cbe259321ab58640389d04f51339b2d5b94c6fd29f23031eae26ea0e1263bfad429928acbb79af2612a060a2cb7cc9fd0528bd00ccbed1061152a8b92d26d308a0da7c50a359b03db54d39feb8d5f67701356f5bd2c830f0bdeba34c561059e33c719b9791f5ace74dd84d88d79f6f885c7e342bfe54e17fed6e70033471b2d46aa4148078d44f1d0f35c2e92b0d06ce7860606d05ce0fbfa92559412594ee2ec5d06d2221c06624c61c45faf66b92c03723187f1ba6b87181c36f2fed7e89a6b0df1e500596c2a77812797ea1059f6cd3f4c0df2a2a90feaacfde5fc231c52704ec1c9b82b9b0e068f36120b0d71d0a3d598a5641678ccce2aa9db816300645f1697f3fe58e421d64671e612ce19cfbb3425e363c9e43f08a570c8be3591d9b6237595a8bcc96387b9d8a698dc15a0a62294e5cf4f9f11aa438c02b38b6ccae18e22301d6caaa6a835c4a416f3fa02a935b942c7ed475ca877c0fceae437e0b137619f490c353acfb39571e0182de6c6d4863a1778bbfeeeda56ee8e137902c5aebc4dca36c068de5bf22208aeccb799b3ca87daa26eab35b22e5f62e53db1ed13798d60fd6c5ecea96e13f6c436a71aeca05446e12ce24d35f70bb8cfccf95115d0493fd0dd4c1d0cba9779989331075c89072bbb95356fade4447cba8f5e6353ed0922bb6535527b28b9c50d8f6f0a37d10e8eaf0b9c6b13242a763ff47e75f712e3b5a7b7e4a15f6768fc86e45e31bcc499ff94544897faeedcd1ceb7de8a807e53a1db21102ac4c6ae299c49deae649eaabf878004fa973cfbfe7a86468006eccd5dc8be0005688f2e793a8beff2ff705221875bc7101eacc9e2b91316a8b8ecce6b58530e63c9145291ed3529f058ae4f18bd780a5a902f8fcb63269687f8e6a35b2061926d89537c14e8f57659709074d535f32e240f2ba88666e42d3e3f8399bc620b9b3d65bebfa4d5a4f32da0759698393bd904dd20bf7c0fca4390eb4ec8189df5b7f00126652b64ec601532c6c30478a4ea8c68699bb67408c1d26688d6c251c75546111ca5b1b7cc8e30fe2acda2097965607dc1952738486a59beb0445e629e41fa5124a2b80162e2663bdbe376f63d59cc54c1b733f086de41753dca36b7e20b295c4326db91c1bc2e9644922f53f8c1e2907afb1c45594532b974e879e82076b5cb2ecb8691833fd506c49d17f3f40049558401cbace9c077c746aaeb7de76514b434ba62af060a673f308593d28ba04284f1612873bae5c8864b328871f1f580c72d295cd07b2a3bd7ec2c20914268a936388168d5981a817bd1ca5d2d602c1a170f38e1c140e0853164b97f3b8768cf8f9baaf2164706c41cc4ee8af60d139b0738bb95b99aa9f9acf143b31036dc9d3ea208c788149b0b9a8a74c856e753e8e1f28ad8b6b6515959f782993e3df887ef27b43661f3f6130eb2e87de8f363af3fbc02b810ef0704076631b4f6c3b750238cace84177e4aabc9b0af2285b68f39879abbe02e419f9a068651dac9d162d1ea0e104ad8edfc5a1645fa382a01232a75c9a3d5104e09e1735e428338a2871f209b216cbfff8fb576b9b30ddba30f29167f6f9f4d44c124699c28d90ff97f82366bdd57ac9edaab79b324a79b067e7ea6a150869470116789af869dc5ac486ea1021495c110a9f12525e626e0005424da018fe59cbb5f1ec8cfa9db361baf8b6f41168c6ea5e6d0cc930bec914e124ba092cddd5993d1a8ee6a26734eec736a9afbf4f585b14f0d14251206add618ba84b93b1203654aac740b5448aee0b6d577608705b70734bbb5248e7942bf73445fdfe3d213bdb37f7cbc67304464a370481818fb564ee23d87a798f07ca7499c2026a75982efc23e374ed5c6240a25815084b980c4fd410769fa9d14aa255c7968f5536506a7d609c4e22b244e083b63a9bca58216825321412aa020f62607a3b52de85afe69bac68c28abd9808fd9cd4fa294c0581a7326b08ce09b8e18bf36599e1bd0fd99b483a2e69bca198b174b96287d47f44d669233fe6b26cd104d1d2b0d67354f031bbd4c4fa7d5da3e798f64271ecbd34fa16c5cfe9d30ba109abe06dc145cd23179afca83422ee07790da245fc7728a2b2428319ebfaf1074d45886c358049342363e85b2e4d6b1bf7bce49c601c7fefd581b09f32fe40f2987ee88675925342c12c6d1728644abf3e4d2dc445586c307af9307f5b05413d423e4907a61576755aa8f8459106c9c70379a9337cc52e737501b078440a7ffe9cb55d0960ecf9f2dc52819fd48ef759b55f609282d0cdfcbed31e3d0e4ef1e7a4d49974468e5c8641e63318965d281afb288d8c88a8e61e59be05d4537bc79d68b9b8cbf2c75ce7b642c63dfe900f89051031dac6bfb3a58ba8aad23680b35ad6a4688783ca8236d5980cb4a5e90e648744d119339a085629216e6964e917126b60031b9a0112764c491d032973ea2112dafe1fd6862235b45fecefdf31c04cb794abeabcd943291d30cb392bb1d3d322fe40a6958eb8c0bb3154d13b7208a23fcea4a8597ac9869c430dbd5a00d05964c87a8b1b59c38195e0e80471d1f31adc950522928bedcdf496ef3d2a5ba2bb59c298e1ef009a690d28e7c417deb9031aed87720e802679c23f07b3e3eee847c11aa39e2fa66a46a812a79a847ab1304262f8b4d54a690739322784014ed67c3908bc254b8e55c93c0ab547e9fffea794fcd33bf5cdff088cc05326e13cccd82861e4ba956bffdf7ec0ab37f0622f4fb46b5003a15c354e8174225c3544d72655152f95acfdffda41bf9cdb2470431b63f498099a6c0fc52cfe453d090b7a65da4e47b9d4132d92773be2896b6c29e1e420f90ad7a7903df6b3d2d83c3e46f4d1cf4d01d27b9bd51f359351b25668c1081e31d7be45fa75ddc2901224ed2cbf7e43b64f91fce728e193ca2aeffc7268a74c3132e172cc5d204e4918b4aa386bff4aef59911f7614b5182d71f22b19f39e9dfbf4a773d4159af5c19bc3fac2e09af8b2190bfa56f873ce506fd7f970b4d723c855528d8b4d17063aead94544842ad6d7e4f6fb5830fe1f8217a695c435422a8bc6daf14d5fff9c2e322ecdd7b0464dd785c6fa3f716b3a6503f0fc07523ebc923f74a6c943cb0274cbdc667aa977fa2a4b0b2a98db523659a7c1ed125324d5f9fe380286eadfd36705db32c2cc5ceda73501de414fbea8351c9bb352c0183c421bd28c418b3a74c1be69ec1aeb3f0c424248d900a9a894c9022b8db56bcba84921306e28226b7d3205d929a0b2d9483b096a51f953df3b30f4c32095d132e7136294e90dbb5f5dc69c471d4d0da3df6f7e2d2483c40a448a822bbc4f4ef5b484a2f58450d84d1e333cb0fff4e480c02fa67a90d927c0fe19d6130f91dbcab603583106522dc4c4f968614cb1fc6c8601cd1146b73c89b3bc933d04721dd34a068ec7b3310cb5944edc507707daa31092640d6dab11deece71f36b92122f8008382fc65e36e14a4559381547fe1f7d099356fe03984d4845d01e51b10fd20218b9ace5f90f4d889cba507b2ef5bbf95544ad83081dd66890d5c8c6d7ef0a251d26da3fddc81ba3c22b605183f6e41858882e0b1cbb1cf346a6135dda2aa4e712b31acaebb29b7b6939cecaa1d8b13f16400c8d03dd25e74fab4b3414fd1bcc4c0988b6f7a75ddc155d47a7f1d3d992c2ea6e103e2eb6f65103e6734cb12e669ba1dc5f74ec04397a60fa6c980ea0461484866a6aad1eaa653bc68eae430b0fe4b31e13c551626165218e380ecdd4799c53882c26e509dec9bc0033522280fc23887cb7c96fdb4924edb05391efb126f173aa60eafa712948a1bc313808dc0b2a7812c59b2471711e07c283390ae1a69b439ec0f5bba5902275845f0413642994837c2066272f89f35e2d060545b9b656c0afa8d97bb14ffd4a5923e55579790ae33c53be31548f305a14e44e2fcec9847c6999914ba6ecdfa957e7105d5178ab8d0507b80032ac076265586e6fb4cb7181139fed2b86f5d18dd5d82514bda85b180a83926e98e935eeed6eaa4848c3c068bc3934176a5c8db0f2a68f482ecb729785ed73bc27d2421ef664dabe26afef332f5b6f94d64f33e6693ae55e9c6118f54c617fee19c5732a7935f793d9f3981ec3b38ab4f998278c3479eebf0e5b8df02d9acc8ccd8165c4b744d20d344f150219df0b78d3d59a4add757ebf49697f626a5358295c10c402c338ad484c6c74536bfce3d1be0c1c6e9c7afc932dca360da12301718d7fcd8ab6d017e7b9ce41c619c6832b4bcef89fbeb504571da97d48f50fa7b5bad06ed1d34268c6b2aa09b30862eb76c370ec1b35e2ca12fe200835949e02b00c86a59a5295dd21e7e280e87d30671d4de4524a0439848b09610a46998acfbb8807c3adf76a86424d18a8d99f6fe4bf3c6b8cf7f6307b8c0293c9ac2586a1ae4b77afa99f61940cd3ec173ecd936649080b01bfbf1301b40c02bce38379ac688fa980f18a6caed0c4d186f54b0c029060e170d61ee7b33b3f7bba19baa11a860a6af0ec831ab77d01b3c298902825ea0824409c171c450f2dcdc770e27844aef40428aee78850159ecdaa8de7cdc3fd1d4ef0905d6ae70cf5ce3df38b20e193604b7b5a55792b4bbfb644bb401ddbc6c51d1d86b17ef422113a54a814db056d0ff05808fedf59e5839d653b8176dd822dcd427e55c2adea3e292a9deed1d8cce8c1053538b891c7f483bbf95359c5fc57796bf99f2902f8d980d56eba7c1048077f73aa78fc392e4a7df6e5a18fe58ee058caadfaf08764e60bac24bf28f50690108e85c6470280cdd4c07f600ba093c7bbb3f657a384926b094418df1dbc03f83f9508644e686354f499380b28e9b6c28212005d2895949ea507333d40f3c8186b5e3e76f430d9b6c07d0074bcb9ba381558768bb302ae9b236ce0c45055108516c205c8b4893ef2d8e29ca923054c5ab7f85c268ac029c536fe312f23f589a533c707349e22474044da7e9c82e609151e1d7f1671f32e1bde722d27caa8ab1b74d222e7bbce4c795017552e52876e58173e8eafcc0ff54dc6a2429c8d08ebbd5ed43aa46ad0bf12ba094f94e5629b0cbc95c304612393c03ceb413394417730d05ccfbcbad440f3048b88c8a09ef6a5e695be3f5f24830185d01dd4f97d472a42b98d0fa5d6e774ad091ebd827f3576262a21ed062170afc7c661e1b81dbb1556c9157e2463bbc769d9a9ab0665b0e7d75c06c25ff2dbfa6286bb1ed8388b2064d11c651419548cb052c962623364e21ab92be1e2383869415c4371af6e1059e50bac309c7fb14cae0ec2e26a3b3b91b07a2c948126eaba7a3cbbbf38a94a6e25ba3a695d357adbce3f73f03b2f9fbdbb84d4e2c2de30593e525b27703605850300853ee453888a26e15d9aee749b5446bf29a4c8feb6448e4afaa5dc3360a6bd20112bd1f83d35d7da5e7ef8332e519a8444222457f413e7d95850ee9fc3740e389ae3de6115295d0f29ea847ffc6842014cb6907d7b911e88c9e36d58efe3ed03bca64ba942ed1b3ad42082ee44dc6b8cfe9e037778a0ef74c5e64dcf3bb737531ff0c4206ae5c45e9f928d31f6187d2f9089cc4021161f8ebe4bf1d832f3e7b97507c0999bd3336728b68192e16a50f3b929ae626effd7d9f598f0b3a6f9ecb13408f8ad30214c91c62df7f015e0c6f9ad871899e15a201bb9a39f5c9bdbd3a94cfed4f250dc0f59420b073f83d86f07640d3ecd35fff48b6a4529512e9ad64527757b5a1ee1086b533b8360dd2457b5849f436880493c19210f1477972dcc4051a72e6a8daf82dab89f5a13738fcb59e2363e99ea820bdad77297e659b727fc63b89e0d1bd9c0fc7eaa742e707201e3a57958fd07ab6b08d4b6d079c3f5cf2a3b97372bdb568f563102c99d18b090b3e7e17bdca8ad64995df90c4667fc751a1cbd0e86fc42ccbf8007bb83c9a127b2708ef41625cc8410ba80d62e44d165b9c8cb1078c04d0738d9728fbf2187c191b5407a9d6d9f96539fc0b70fbe005cd8be15e319e18f3bcaa9840b443f95a2248fb6e19fd1b9625476ea801f87d7bd98c0544c74f15f64be196667caa9ed5a9a0e3269740865b8b9da8aa932d25010138551f807a322c987aabdd83d761942571dc8564e2a1209ac4a80d82b2cc3aabf70ae23b5c62d4b376d84ff5569ca4a2007ae1027b6e98e5677645412dd64ffba332689d6b13845344c50e5c73809b6ac8f1f3d192e502616aa7415ded55c903f636cd76700ac84289f126f412a88d94a24a3e59856929817990d645cb570515d9ba83387670fb6e889439b8011b66afa600a69db2c2abb93c7584272106ed1cfcdc99fda97ea1820e96470539f5667809ea91dd36f5d416cb4bed617d6cd6998fd4783aec14fab22613058c8be7b364f49a4ff95816a442377042b2653c744c45b78dfd0749239a7355b2900de050402111483f9be57ac8ac895d19434c18352a5674ae1849987e567704b089bce3de947d5924934aea4efa0a9e76a247a2400eaee790f6b46a954c29f628d2204098f6c0369bb01ec1fab96fd0c9008e668a33419299636031c253d6e3f9a02f9c8aa8242ef96c181e2a6d3b5271d52185a344c3467d03473a3c7d4beb002a4f1ee55ec0ea36b55fb54d31bb5ef69c4e091ac804d6b03927b13a020ccf709ef1be916ed430e2e6f1fe0f169006e497c3595d1b8dbdc3c3e6d196819bdfc69fafa5011256a04bc4462bdf673285fd6b27ce4c2fb8d97dc6747f1518c95e9a53380c95c2057f4a0a1a66cd1bf969063abbaac2bd62a68d7de45cf80b833ce940baf10e74c17b6f6a40363b049cbbcc0fa34e4b59cf5a3f3100b1146ee7261d4af8a38b2ea22e385090d649c05d22c53a980283c5a808fed92c786eec6d33e8fd65de83e9c52c621cd07777bbe952d8ac0a03b203a2ca3a090b6008c14add1b2afb6477765ee509e9b4536cecf210c5119e15e1706e884978fc7ff415b9a7476fd4051270e978a2fff61a200e1effe59bc61a23ebdfa4976eaeaa2a133e3f7a6ada24c88ca737a57389bdd82974d39e0d6d1f4b6bb3591dee71a4207d231159c33dbe292c065fc5b7113b7e5a8cec5a175c553ea66dca195a05b47ec624fd67fde868fe0c88c9ebe10e15c2da57b9165b9f4bd162674347dec7e52d455839e68392b670ec60ab114355f5c5e5748fafa5f14bc722df4571777a04007cac6464fa61a73a7d1faf35f93fe5fbb42f0dbe724d8a75593ef8474c8ff8afb9eb69514944234515164b0b7c1f64ec9b6423e7b3b8b9956308b157d80a36f58499a72c74a29bededd0ad05928811b37a49d793b049544257734a7542d6f0000cbc34452f1f73aee010032f48422f55811fc5d3eee43d89d792d55dbebd3d5078ef363c9bfa4aa153c9234fd654d43c9c30c7a193e640f011c1d6209d6fe06272086c489cb8c8988d3a684dfc71d20c05a1d5d8051f324752d9ef1148c5fc6bb3ce417e2491a31bf6d8ca02ba11bbdfa25faea0c4033622acb40f53b35d47bb9e5ecbc31785261a32937f65863dfbca8fe76e191f3ed9f93411045bb4c00e872f72d644376292c82f7b8eddbe59d30abd3ce2b5d9bb3d5a1f5b0051fcb2a220ed301138a035659250a80b7e1ad0d2c514d2ef8cc664ec4af8b839323c183ed97a34a3552f42d93d8e6c59f7dad2675a7b26b99db58cb77d31269a844b01263449005835f8edd51b0a4fb0811c94a9e1391e1cd918dbafc4d67d8a693ebab908f1086df36cf8fd413d6d94cf04a04fd5c25d2530e4576a35dae50a3356e41211c2148baf6d9b973e0e605a274f335952610c6467c73ae505f2e1b62fa0ff1980f0eb2c758459d99d02c58aa8d4b012355998f6acf1fc496f4e50bf44144ba1c9954ae4e23042b1e73a29644d86cd07b5ef85be542df0d544d5f4b1fbef726bae0f4d018413914bc5bd2aea0e04e5aff2dbd95046bc94c295279128ed28fc88c22ab0b9801fb1dad3e031ca816566abc76eaafe9332fe404b7e384e98b56dbffe59495eaac288d95b10b2f11c098a0c0dd654e984dce7f63131437e1a1406dd24050ea13dead70db717fa94130e49408fce2e9aae55f13e22573ec955d31fac2876424285bbe618b73a8fac6af73fdef947b396c7184c43eec54e36605325ef8f98a1f63f86dc76a602cd19db82cf732ba20813cfc5ac53dc354a2e1bf2f4eb47e9090c8af5df388004fed7f178415dc9f6a378c1921a903d93f52b0b34bd4561b600a74ad71d6d8fa589aba6ebda759b18e9cc130109c473408f8ad8e2a8254d7b583f944a73869c7166ae22fd5905cdfd96e5ecb23399244864933683146be997597bf9dde7c21c75c4d784bfe2aac844aa8fe02dcffde75061d9b3e5f70e3d97535cd8d78aafbb787b0d5857a2555282cfe3c5d73df62e25cf6d61197f8cb82cae1085da56024c6f7bb8e43ed10b6398892a71b808deb6e6401b2c774efcc14d49940e3a53e4930d2d07c3ad98943bddd52f890edddf4200f9a9771505cdfee85476771b67a427f697c22082132651411306c784ce7da213db2ca06ba4daab742565f35b41a29baccefa4da7c1ef19b308b680eccd7bf190bb7527ab104a6aa0914f7908a313890da7c6c26fd55290a6bcde8bab623ce55df3fd74318067d1ec1490c69f6f459b68aafdad5f6d6a6b10cc029bf0bf27415ddabc587cbc60c863f3ca83ebf765a975dd4fcd7f5c038cb1a1b94d8a60a3f9823788fa1e452488326523a2901d3c7827642506e7138bca88e411a965faed3feec8c0d9ad880b3ea28b9843f4ed90948fa1e2482f4de6124c94dccf71e401babc3a565ae3aa6d119a951c67e9037866a8ed411715f29c780651cdf96ac25897cef8d7d81c4f5d69314e8fb86396e0b700b91a5c4d695e412cae1954f00b9b3d8fb9a3b9adf320920c7af9239e13e1bdee66100b2d41c2067925203c44d8698b3642d0613745ffea9ac028610e0727d089ee3bf313d9fe04e33634c58a1d8c44cc8c8203a5618c916628d77d174d4d3a3e535595c632fd021d53debdc881f822abdedc776dd730df7ebf81d9a9ebbf072ae90424f30b967c8eb233466cdca8e109b49665799ca3966223226d47891a9e35429c9b93828ea921187655f492e00fc33218940334377a9c10c7e8e1a56ea7691f6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2024十一月月中总结</title>
    <url>/2024/11/18/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/2024%E5%8D%81%E4%B8%80%E6%9C%88%E6%9C%88%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d22e6df96a6aeadd60ac4e75798eac27598181f1e4b6bd8351140d57db12cbf8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2024十一月初总结</title>
    <url>/2024/11/05/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%8D%81%E4%B8%80%E6%9C%88%E5%88%9D%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e4b6dc76c0db7ec57c87cb5903884fd4bf0ac1f5ea841c547ba91cdf3cca7f35">60fd0739c5a82ca45262b2f3393acd53e987f4c909755e6196174e7512ad2b38c446e459fdb628f65d09d140f97dc6aaeba41cac45e2ceabf9129b584a8da5089232002bf19f7192d4ae3be9783d57c5b7b558ca7ffefc499c165e8d6e135b36082a7f0aa7c0e81dd0f036eb03522705e61881fc6d11751c8e3430b576985a1b32f6c17f411e8945fbbcd51607020b64fff753cb9a3b4db4736c23b274776de0baa4508d04176968ee897b4df30a9b7e58360b4af528268284891673241a4945ab330448aed82262320e41a2aa16a41928068272e46cbec91eacad3d6681eb82cfcc61247dd858b9ad13538ac0c3836a69b6ecdab20d9b8d820f92db5ae6346346eeacc2afc32f0d393ccb070009866960cb6c1be8627fbfe15017c27ea5f75a6a931bfdfd32e2dd8a0f2b85efe50862da5c769f4d132cc85349ceda09eb2becb3b7a0198fdaa8acc6856a42fb41425b782abec7d1359df114fdf9dc8fb47075123c5f30746ede493da833a4df43e01c25ca29686ee040b63b22985fa4af5e1408a8cc20033d9b7743633ef1e57175bf26aebdbf279ba4ce6f49959a669cc4f2cf0365e463b8e34a53afd1074916c5ce9a13e21b93ee9e187bc277a44004dc3da61df6e93b54bd87ffa0766e2cca3580c9e2c6be39e99f7ba7530623369a6dc7e34758aad0a6a6f3dcf3e543e198d4f11ff3486c6a8414ffa99b1964140dd217634f5153ce718fe395ef7c6377b910c4bd85279e90bc0df4750d608e134e7bd820d28321c78c03596ebcead13f21a30a2e5849b9f238cb9e2c610fa3266b1af14d6be83f783bfe11b8ba75f69a4e3ee9dda3d459be399bfff8a9b2adf25d1083660adddde9326ecb7c956f73efb7d4dde56d84463d8ef199556889f459675bb7eae9800285e5e7c6bfc6da6707f532a82451cbb41736bc91ad705f0cf857da7d9f73b323e737e27c178ea0a1f014d3536c66fba22f5ae6da28f396d1f7995dd66265052753262a307bfee7929a23e03da34510e2cbe6b815506d9c9b354969de10a2bb8dbd5653a64431ceb6645ed01c94cec3819a217a6886e4435c2f10976904e7429a8c2a528572dc325a003897de24de597bda53057eee80c4094fe48a87187bbeff52f20a6027424a95d8f1fbf8e486079e3175412e3e96380715223595e8b92851bda911cd81f275bac0b0bc5093afdef49470d90229db3da24a7c0b1c3b033be761cff8a4ce50b40b787f6a9cc51db05324bb516eb9879fdcec36ff9c5a91bb44f4221a0c8f2d33b52dd23faecc08f2ad7c772803ff1318c08719d735558dc1e8754de6b38ad6b41ace4b3b8c2a4ab9544a07367570882fb3d46a6b463102ec0278e62c11b3ec4e479332e3ea849f2bf6fce341bd037828c266d9b24e7fb816e83fa068105974d71603f418ce263afebe2518e1fd9281559116ec6c95ef9fcc3ffa5310f5e369e5fc5fabc5cc13f407e6620a2ccf8ad0c046e8bdbaf4481742f50bff0a31da2ecdbbf8a5a87eaf6f7fd39795f8cb011243a67e46d818f5443e5b4ea0833639af061809fe4a8811cb83957aea90d51283b674f165c1452bac2ecb7de7b0aec58ab0654d61472a13e0fa075af1753586151388944ddc90f97221b800f7ce394159721d6c4787c72e090b0f660c9f70ea924ca64cd477c682766640884cf9924b68f0fff09cc53ec1c3a642dbc582a33576b0cae4ed6720ee0519323a60643ca7b23672ad57759ab1ab7288111196efc38f491b3cb12f747983340e559702f0b0358e8fbebc5bbc4a565856f1f73300b63330e0fa386231acb90d26e9a66baf6adb5105aa36cc954901b78ccebcb3cd5ba1976f6ca8c4c8f85432868e37d1e4c283da7972a92d10fd381d559c67c0a144cf9492152630ec4ef34675d8070d091b1f45cddd8d1974a891b228eacd114b3ea69839317cf80105023b58df5102dcd3a703502e9504dd3f30a3c9b7819aaa17be96162623e226f50318fc9ab450a7b2892d041c440717abca564af24fe021be58dfd85a27de90797ef242e61d17c035fd829d1b547caa9b5515ae7a2f8dcb2b3c2d78dcf1873e7cdf8ace5edcae62bb4008f2d73375c10b2368cd7f9f10ce40db07d5ceb42367cfef786a10ff86a078f9f0e37d412c7a978b09f7c813a8367a820d9a74625caf3353585daff5cb4f933f38935e4b08ba36703736213582fbce12d123740637d6e56c2e7bf21546b667cea16e7e93ae3b6d7943349364e7b9904b7eabffe368a70ab7df0666bfd3b875e92fa06daafa3b882bd20c3642d446908f7ec918f556a194a7736cd8eb2b709e00731795bde0562e125a86512d1217232645ff348c6d9f987996b3c38f67ebaba98dca1b3c274125f065beb92b75a990b44f1a1d30fbd9a1f3c760ee86fe1a339c9c72964f51f60f2c17fd9427ba5913bc20f6fb91d069d2845e569e126ce28327ca98e38e6f99b5cb3bfaaebf4bca74bc2f857ea2d7247c3e489831d0b5507be9aceffdc940473dcb340294b8b76e95d39c9769a97a86daa1525a1383b3f172cabc78a60713af0febb44b716ac777beec26e1edd09f9f32b62399f0dea73debb90f28d615799bf81d1ed8cca089ed5731cb615ec44c4773edc462fec22220c89f9b9083719a822ef33d9f733f8ac526385ad82266e7fa13c0a6430315bea0919716870666325b7676222223819792a1a983ebf35964c4f9bb76f4c36cfa9b183f8f4c17f6fd7228814f16cc7ba690fdaec2dd59a03b7aaa997b39beb417fcefc0d1a56d27425a87c5da1eeb726391adaa5e285ff294a4ef799d2aa6493c841af7dd375ce35f9358a956aca37110d163eb5202f510b3ebaa70696c9bccd54939470feb62e36542b88a750c666a918ce645957edb454b46cccfb8bfe3ca5f84e860efe871371562c288afa27e9cf7f24446b747652ecf9d0f6ca625129ba817dd7d6dfb9ae8ae941b653024e2766eb9420fb72dca85cb6e3ecd1fb27cde954fb8b6fa9b1bb5360bedfdcf39cf07d530f78636bab7ede9c8685c6e8f33442071c506541f198a48fc1c8de33d627a7792e43fba2e60b7aea451b9cc2051468b3655ccd60da615e8ac2e0281df5dca419ed2d6888807e7a110600a4cbe46a0263d14c6fc270c6f3495f661be2229d8eed28b7068ee79708fae7dc4d88ea4e71d60dd96a51d6d827c034dfc41791d5219676a402440c73fe640fbe624fc627f1007b0e58dd81f164181bdc62c24a1676445c9f8c86bc81140e3b88db9f2d81f44860f9ff544ff99cfea56827f7a7797155c3c5eea438b634a975469d609345ee7f60ecb1f97088b9ccce1eff7077229f1d0f41a0efb071e26ee47e62399b2d19277cb68c59d6feebabcf1ac6fc1c93b4c7256ad7097673b05a55ecb9339b4bcde5474cdb26922289c7bab2811547dbef89eb4566740b1dc8174b414ad9d4dda932b18f712dcadb1406ce98203173230482fbf6188b1a5cdc67e57f6eba9d5b239e6fc917d75342a233a1159279bc1a2c5cac3cc9ce50966a2d53576bb5ac406bcc25829f5b985e8020770e1ba83f556c464cc1c44b6a1ada953211202edaa2e59419645ba1aeeaae2bed98d3c72b29dba8bdff513a892ee002ee9e7f20e3d94adc575854c6822d8437224ef382bb9287a188728e6456877e8ee531aff4b769684efa257f5380ea66c4b8ea478a2c5a6a9b609f09261774f633fca7fb8ebf7529cc8c24b508cf717ea37519e5f921e9a1eac6a2bde71f8b5de47152efae35ae3b3c651845701320fb8540bca62db03aa36d8a4a1a52eec633e1d6030fedcbab87bdd3cdd46e1eeca6de32f9463126c81cdc3dddd58f377707ebba001fafd6cb8e34757c6e792bb5801a8aabe4b6c763979f4f78bae228bdfea5d7d5620353d68b983e5fcbf3f961334f1792c9b93da868119481ec8ca3400cabcb043a6cc5f443b76a6b9cfac97d39894ab9955f2711a0bba6c0b3528c54568bcb27281701e54e01bdc0e1e5d9da5071946bb9662b172f4f1614db3539e85d2c958d9d01ac8585e5d57835b541cb27fdf021e805e3e8a14fd46aeaae9915ad9dfd3d53e2187692cde2ca42d4845026650256ef0aff4ccc2d2cebf784832374e3f66386d62e32206828bb6c2c786e888dd31f1d5d406c50bbf7c927f22d826196b84012971a66daa6f1d3367da24717338de28a3c82325542a766ddaea12d270a2fee09d81273ed5597cbdd43eef549a93ecf3f6616e3167e496c5ac27e17bb0a40def00717502c818ace8b96a29e767e19eb74fcd11db82daad636c858db7c0652401fb5ef46b0651b7cb4250283640254d5d41f172a3fe285c080ddc2d64735dce055d718811a0224bca21c10dd1819f1c8de12187d45828b45c6b45b6cce3e1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础指令</title>
    <url>/2024/10/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>一些Linux基础命令。</p>
<span id="more"></span>
<hr>
<h2 id="pwd命令">pwd命令</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示用户当前所处的目录</span></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure>
<h2 id="cd命令">cd命令</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变目录位置至当前目录下的dir1子目录下</span></span><br><span class="line">cd dir1</span><br><span class="line"><span class="comment">//将当前工作目录改变到当前用户的主目录</span></span><br><span class="line">cd</span><br><span class="line">cd ~</span><br><span class="line"><span class="comment">//改变到当前目录</span></span><br><span class="line">cd .</span><br><span class="line"><span class="comment">//改变目录位置至当前目录的父目录（上一级目录）</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="comment">//改变目录位置至当前目录的父目录下的dir2子目录下</span></span><br><span class="line">cd ../dir2</span><br><span class="line"><span class="comment">//使用绝对路径 改变当前目录位置到用户目录下的demo03_ws/src</span></span><br><span class="line">cd /home/zhao/demo03_ws/src <span class="comment">//在任何位置下都可以直接跳转到指定的路径 但是要加上/home/zhao/</span></span><br></pre></td></tr></table></figure>
<h2 id="ls命令">ls命令</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列出当前目录下的文件及目录</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment">//列出包括以“.”开始的隐藏文件在内的所有文件</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="comment">//依照文件最后修改时间的顺序列出文件</span></span><br><span class="line">ls -t</span><br><span class="line"><span class="comment">//列出当前目录下的文件名及其类型</span></span><br><span class="line">ls -F</span><br><span class="line"><span class="comment">//列出当前目录下所有文件的权限、所有者、文件大小、修改时间及名称</span></span><br><span class="line">ls -l</span><br><span class="line"><span class="comment">//同上，并显示出文件的所有者工作组名</span></span><br><span class="line">ls -lg</span><br><span class="line"><span class="comment">//显示出目录下以及其所有子目录的文件名</span></span><br><span class="line">ls -R</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2024国庆假期总结</title>
    <url>/2024/10/07/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/2024%E5%9B%BD%E5%BA%86%E5%81%87%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="080f5c312f409e28ebf0cfbbf2bedf99bdd133a2a6c13cf0fac361d66c8e4b8a">60fd0739c5a82ca45262b2f3393acd539b7e2b429cf1df0d7078ef663fd8858ae9a2800ff0ec9721489de3ec254590903fd1528cb50a36baf8da312a81036c4f0a6aed28994c449567520c8c7a99d22fa2facb231283c3cd1f95ec69688b2c26aebe289b590439754e049ae3159ec0ce40d811f677a7b18dfc8912d20999f5ea32ac30a57378d8bced6ea5c033f8fd323f1a3ba6c37315e1e0f2991778d54791ee4915c56c62cf6ea8295d76420d3d9e52f6371461cf395f67531d8657acd87c14500f1cc48d12c91b7969bb3ef263065ecd51284bc0945895e16ce74fbfbd01d6103a0438535d3c4859678f18e0a29a363b391ceb9ad2e4264a0aa97da2e1816547ab2bb775152f7a8f631b39e017da7b58e1072b7235489def6108b5f44bb51d55f7fc5d77119c1ad0f212fd56b29c54885106961c5d9d88cd0ef76fb78536b099cf8c2201ea88e57a73e8999d2499881a68c5e7b038434da802a8b870d5ab5c8f43ac407d9a2f8c35af8e2d5121d4387a803695c1875c0259fda4cf1bc483a5d22ff2e6c10e658f58667945dc0da6ba62c99ee99ba139fceb2ea4c657413ee0d6909838db7ad4174354ad8fb7ff3a5acc23da98eed99e699016927dc4e7f8c17acb934b46bb439e03eb81e1fc514127d2c8e4330bbd5293bd8e31d3b3b6aa6f3ecbd313047b11b5ba9ac475cf15ef14d53b1d0fa2349c9fb1f78bc0341e710343aa9d5a33f3078b6f75cccc4a903f4134fb0f4931ebabe4fba0e5dedb96e82269dcde3f01d3a86930c789f1bd8c9be4ae28f5dc4580edb0dc3117c4fc14a27ef45d38a6620f8565634601ca98c82ed1fe4ec56ce96c6d694be18f8f7eb3758a50d59749eb3e7fcb93316186eea6ebf897affa365fcb0b413290b0b8e25b8b450eb733da43620732d01682b03bb41c3669e0247983fc716b42f4644b3bdea8d485bd209446dfad3479695a21aa57cde736e621d43bcc5d36a1a5346b91f444951a82321c37976fb3c9f979d0e43982eb29d3c87d05345364d9090aa29c3f17486b341d01f35623a0722ceadd56b8649c3340b8be4acf3ec930b66ff5ba33b6730cf6e75a3ff350ac42d477cab75afbf945c3be6b1986d248caf80fe6f4c97f64227d3e395e1f1b1ac7d6e2741b5ec6fe4850189de6544d4f5953a69b9df7d798d8c972a75f80c203806e8974acaa22ea0b08ffe3e1055fcba367e4652d7b52e4ff3d07e08fa970e48658fa57d59e809ea3664da008a9257ed7b889cd707ad402a5ee88a7fe3b260a1cf5290d71cf6512daee50480719cdaa2dce72c2dd746adf92b055880354c6e871a245810dd0b2342a65b210975e072f7edbdf41883737bcf0c63db3cc59c494d0025f46205d887165abab4bb57ef237b5be52367d7998f216b458b2935cae657989b7e93de57c11ec832a2f140c660ca222e6cb934773e442346e0b9a88e7f70a9693aec5502cbdcfb9512cd8217b8241786d98b3d812c1c63a8715cab704caa900d04ddb3a17f518e7d85d214158af0454fc83ff79ecbacf32ff34dad20a408a9e7dbebb53879cfd5de55b12ce41b86450d5629d5953884dfce10ce4c9759df1a3a15e40966fbe7e6e794b31dae8ca12bbcd7a8375450b234b75a8d009fb4ba98db01fb331834f4ab3bc2ab3d1f1c1827c7285ea2c3ba6f75798983d3dc9ff71e02ca6a2dfe819ef3d5d1c6574587ca4b6cbdaf81b0066d98df3f2be5cac550fe6a7b5a5aa97a62b007e7150b5fd47c3d168e121e5deafc4b90237ba0b6cf317105d4000432e1b59489520be7e82da0bdbe39266305b4d161295a045fb373126666143c2eb708fe6a72d6cd53a77a830f35a43dbae9b6eec088aaea25c208b2785d7c50a8ae8b04c1c2716e1d023cac472ee422770e53cf9cc75f4c771c726b28d4f2839383efa511f732d83694d3685c7d2368eaffdc3c130b6152faaf261e2438d6923005677e9f48fe6d87d8f4176a7b3306f5535f405bb816bfafac172e6a220a183189dd70b044adcd37d8bb8602111e5ee2d459f3495bbe697a0498ff4381eb8854c8f186e788688ac215ba173676c422ad195787839fe5906e770e78e49fd3dea86d470b2281fe085046a81f6d263a5a1b0deb10399786164aadc533e85c3ad3b6fee3d9da0ea96f52463fa56cbdac011698e816a4a888f87c4eb251a1ae1f7eaae2d963d89fb5490ccf5464a54a2970fc7feeb5d124638b1f7b0f68721fb0a4fa62e13834f1f3ccf503298947cd5103c00e8859e6b31e3265c4a3701d3603715e6958daeed9aece2f9cfe723eafb5438699a1a8f4809f20bb511a91cad66128db942dd2fa05909da9e3a528c23a5cbab72fb469f77aa76afa9bf7e3ce014315e953d99c844d367af9e031acff256419210f61c8dce5d13df5446e9118279592e75afe40f640f68fc2e31618d82d5e2526d5d71c2737721df8a56f24be130e4ec031b23b9dd4e2b928925803e14f94835edd7aff2ced57ec1b53d1dea3ac5b48c0bfc15c8720894846bf2bb877bf4287fb5f5071bdbd3b32d7dd2ca41ef28b0f324f5125dbe97399ba87a1b6a4a0a4563d8f4b314a2a715671e82008c7d531fa5538cfea5171b753861ca487f08506dac4ca349be517ac3fe55eaec855ce482941875867a9c5fb45a2e7c1d95b85ff52e5bcdd789f9d0baec6ef12fa9000258e5213de765d7309acdf8ad08748fd7c7d3062b6c0fc0c07bb86ec0597fc132a7c4a92ef4ab5eff32791a50ce063d6d68435680b6efb7f03fca97074f0db10ee9b8369a6f22ea947e86dd8da176035614c3d785aa6573d00a5c908b7cd8d11407988d752d030c8007b6ec9b9366673b0a36e4f9359297d8295a0a35b435f9a84cf49b18176acc2f5f7f4b53dfe9145b6c2ab064f7d7e35252bf690424ae1153887bccb04093e5eb10ae5fe7a41fe1330037ed3276fceb6139f09302ffbab19e00f8d01226cc8574c937a1ad4e0c4ba7ac9c40aaa9d783d90376e0090853960bc2f84402f7a92583652c57ea0fe4bf79a2358bc2bf41ffe8a3b3d2b9c1e67541e6af37b0d2e58768a4da3b45b908c2819ad02993b143c2ee797e972cc5aacc6c1d20bcbe5e2c6f877404c68aa214cd17f2c80b9a7f981075ee6075262a8789d579ca6267000f86924452206336e9656d4e20fc15252ec8647699c6686e75dfefa6160f9870554101994374854a033d8eba9c14fc282ecb4899f09c057bd8ef1d37439f19085df83ac5c31e32e9d1cfecf40c42fa00134890f03994b405f5642f8b4f2d1cdce7ed9de421c231b2df7f4e0acd4e87fccdabbe2447b6e32bad4c5855623afd5d1590aae5ee276b04b3395f79a56b939fbe73654452a940fd1e038e1fae738bb668be2c8c3d7217921d3a22bc9f39a0bf1a948856409e1577ccc5a4ff539763200dd51aca2a9f455c994640c63444398126561dbdcb9d57fe02c22a57f3104bb9cb45f13fc07939c95715ddf954a797dc60c1f3174f3e29a21c6b32804231b45ad33e0e5e15dd60aa0f6b8f953ce22ae0742447c065a1ebbb25637fd02644e8f91e668dd91cb525d97aa82edbc9ad30c22c5ef5c41c53c9689efff67849291fc5f22b0f3f6aa676632dd0c081ec3b07827ea75a6959a92df24388e6a77c0554b15e67760071eba178cb734177dd9ea205850432342bdfffdb4e8f1ca346a199dd80f050fd4e2b5643f5e1042a358a6c1787af4cac2348320264f6307b395c7715cbd398634aebf73313c726c6e21de6ed15329c2264b588ddf524b61a444bc5ae21281d055c689f16344b9ab8dcd39e4cd654c91010c218519136dd04117c0772d0f5d6a3f7e94d1f454eef7683f54a19af71be9f58dba5b72cc0f618cb0c6832102779318e768ac42bb5160945a21ae317d89646415844df927f3a7f7a1890cf31a137918c698ab26d98e18de62c353cc7481be14469b09c167762430e1eb5256fda57bb40e7bfc6b16519994781677e92b1c99f0a2e783c4e820bff451e4cdf5bb4fa4766341bd8c1b2776e503dc8f5a6ac07b3005d1ee8020856e573a265a8979f1b8d6360e7d9d84351f5f523b7f78d5454b30ce7e5244ef1a80acfbed5a927b9626cf0e553169509109292729aa172ffc23165d5fd7d724303de82fc26</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS常用指令</title>
    <url>/2024/10/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ROS%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>村雨学习ROS时记录的一些常用指令。</p>
<p>ROS学习文档：<a href="http://www.autolabor.com.cn/book/ROSTutorials/index.html">Introduction · Autolabor-ROS机器人入门课程《ROS理论与实践》零基础教程</a></p>
<p>ROS学习视频： <a href="https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?share_source=copy_web&amp;vd_source=3cf42fa3c3edbb189995b416184bb04c">https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?share_source=copy_web&amp;vd_source=3cf42fa3c3edbb189995b416184bb04c</a></p>
<span id="more"></span>
<hr>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">wget http://fishros.com/<span class="keyword">install</span> -O fishros &amp;&amp; bash fishros <span class="comment">#鱼香ros</span></span><br><span class="line">sudo apt update <span class="comment">#更新apt</span></span><br><span class="line">Ctrl + <span class="comment">#Vscode放大效果</span></span><br><span class="line">Ctrl - <span class="comment">#Vscode缩小效果</span></span><br><span class="line">code . <span class="comment">#在工作空间打开终端输入该指令，进入Vscode</span></span><br><span class="line">pwd <span class="comment">#获得当前文件夹路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">catkin_make <span class="comment">#编译</span></span><br><span class="line">Ctrl + Shift + B <span class="comment">#在Vscode中编译</span></span><br><span class="line"></span><br><span class="line">roscore <span class="comment">#启动ros核心</span></span><br><span class="line">source ./devel/setup.bash <span class="comment">#刷新环境变量</span></span><br><span class="line">rosrun 包名 文件名（节点名） <span class="comment">#执行ros程序</span></span><br><span class="line"></span><br><span class="line">rqt_graph 或 rosrun rqt_graph rqt_graph <span class="comment">#打开计算图</span></span><br><span class="line">rostopic echo 话题名 <span class="comment">#查阅消息</span></span><br><span class="line">rosservice call 服务名 tab两次 <span class="comment">#查阅服务</span></span><br><span class="line">rosparam <span class="keyword">list</span> <span class="comment">#查看参数列表</span></span><br><span class="line">rosparam get /参数 <span class="comment">#查看参数的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建工作空间</span></span><br><span class="line">mkdir -p demo03_ws/src</span><br><span class="line">cd demo03_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL无法连接</title>
    <url>/2024/10/02/%E9%81%87%E5%88%B0%E7%9A%84bug/Mysql%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天无意中点开了mysql客户端，发现输入密码后闪退，感觉是密码输错了。于是win+R调用命令行cmd输入mysql -u root -p打开Mysql，试了几次可能的密码都登录不上，报错<strong>ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost:3306’ (10061)</strong>，无法连接到Mysql。随后又打开navicat，依然无法连接。有点小慌，害怕是刚刚清理电脑C盘文件时误删除了什么东西。于是赶紧去google，找到一篇CSDN上的博客，第一步就解决了我的问题。</p>
<span id="more"></span>
<hr>
<p><a href="https://blog.csdn.net/huang6ing/article/details/103821495">ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost’ (10061)-CSDN博客</a></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-10-02_11-05-05.png" style="zoom:50%;" />
<p>简述：在<strong>开始</strong>处搜索计算机管理，点击服务，找到Mysql，右键启动，再重新登录Mysql，就可以了！</p>
<p>猜测大概是长时间不用Mysql，系统自动停止了服务，需要手动启动。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-10-02_11-43-19.png" style="zoom:50%;" />]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>心里话</title>
    <url>/2024/09/19/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E5%BF%83%E9%87%8C%E8%AF%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d3d9af19cf50542454e2f6634336c5c0e226f0db406ccaacf8de3be1ccfe1990"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>文字给予我力量</title>
    <url>/2024/09/18/%E9%B8%A1%E6%B1%A4%E6%96%87%E5%AD%97/%E6%96%87%E5%AD%97%E7%9A%84%E6%95%91%E8%B5%8E/</url>
    <content><![CDATA[<p>有时候需要些文字来产生动力。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img514d5cb1c2a0e0cbdf7435904dd00352771be258.png%401256w_886h_!web-article-pic.png" style="zoom: 67%;" />
<span id="more"></span>
<hr>
<h2 id="欧路词典——每日一句">欧路词典——每日一句</h2>
<p><strong>当阳光明媚时，我可以做任何事情；没有一座山无法逾越，没有一件事难以克服。</strong></p>
<p><strong>勿沉溺于忧思，莫辜负生命与爱。时光若逝，永不再来。</strong></p>
<p><strong>问题不是止步不前的标志，而是前进的指引。</strong></p>
<p><strong>我要扼住命运的咽喉，绝不为命运所压倒。</strong></p>
<p><strong>一个人最大的失败在于，你梦想为某事付诸努力，但却没有勇气去这么做。</strong></p>
<p><strong>让我们起而行动莫停留，无论什么命运，都要勇于承载；不断进取，不断追求，学会努力，学会等待。</strong></p>
<p><strong>我不怕暴风雨，因为我正在学习如何驾驶我的船。</strong></p>
<p><strong>昨天已是历史，明天还是一个谜，而今天则是一份礼物。</strong></p>
<p><strong>正直，即是在无人注视时，依然行正义之事。</strong></p>
<p><strong>不要让别人的意见淹没了你自己内心的声音。</strong></p>
<p><strong>困难是用来激励人心的，而不是使人气馁。人的心灵将因挫折而茁壮成长。</strong></p>
<p><strong>不管你被贴上什么标签，只有你才能定义你自己。</strong></p>
<p><strong>尽管有很多事让人忧虑，但相比而言，值得感激的事要多得多</strong></p>
<p><strong>理想的幸福国度与我们之间，总隔着一片荒野。</strong></p>
<p><strong>有些人成功是因为命中注定，但是大多数人成功是因为他们立志于此。</strong></p>
<p><strong>你从一个地方跑到另一个地方，但你还是你。你没法从自己的身体里面逃出去。</strong></p>
<p><strong>不管生活和这个世界多么糟糕，都不要放弃，都要坚强的活着。因为一觉醒来，太阳照常升起。</strong></p>
<p><strong>当你的意志坚强了，你前进的脚步就轻快了。</strong></p>
<p><strong>坐着车走老路的人，研究的主要是路边的栅栏。</strong></p>
<p><strong>我们对于自己的不幸想的越多，它们对我们的伤害就越大。</strong></p>
<p><strong>我们的重复行为造就了我们，因此卓越不是一种行为，而是一种习惯。</strong></p>
<p><strong>有时候，我们的命运就像冬天里的果树。谁会想到它的枝芽还将再次吐绿开花，但我们期望着，也知道它们会。</strong></p>
<p><strong>尽你所能，直到你变得更明智。当你变得更明智时，就会做得更好。</strong></p>
<p><strong>不论什么时候，只要你有一个目标，你就得牺牲一定的自由去实现它。</strong></p>
<p><strong>凡是真正渴求知识的人，都能得到知识，这是知识的特性。</strong></p>
<p><strong>在这个世界上，最重要的不是我们身在何处，而是我们朝着哪个方向前进。</strong></p>
<p><strong>怀着希望去旅行，比到达目的地更有趣味。</strong></p>
<p><strong>命运害怕勇敢的人，而专去欺负胆小鬼。</strong></p>
<p><strong>努力很重要，但更重要的是相信自己。</strong></p>
<p><strong>遇到阻碍时，你应该调整方向以达目标，而不是改变你抵达目的地的决心。</strong></p>
<p><strong>合理生活最有效的方法是每天早上制定一天的计划，每天晚上检查结果。</strong></p>
<p><strong>天生我材必有用，千金散尽还复来。</strong></p>
<p><strong>后悔惊人地浪费精力，它无法为你创造任何价值，只能使你深陷其中而无法自拔。</strong></p>
<p><strong>怀有希望，就能看见无形之物，感受难以捉摸之感，完成不可能之事。</strong></p>
<p><strong>幸福生活在于心灵的宁静。</strong></p>
<p><strong>我要继续呼吸，因为明天太阳会照常升起。谁知道潮水会带来什么？</strong></p>
<p><strong>一个要走千里路的人必须忘记最终目标，每天早晨对自己说：“今天我要走完二十五英里，然后休息睡觉。”</strong></p>
<p><strong>今年的旅程相当精彩，充满惊喜和意外。让我们把过去留在过去，向前迈进吧。</strong></p>
<p><strong>不是每一个困难都能克服，但只有面对它才有机会改变它。</strong></p>
<p><strong>任何形式的瘾都是不好的，不管上瘾的是酒精、吗啡还是理想主义。</strong></p>
<p><strong>若不能在所做之事中寻到快乐，人便难以成功。</strong></p>
<p><strong>生活中没有什么需要畏惧的，只有需要了解的、我们应该了解多一些，这样就能畏惧少一点。</strong></p>
<p><strong>人们总说时间会改变一切，但实际上，你必须自己去改变。</strong></p>
<p><strong>那些最不善用时间的人，总是最先抱怨时间不够。</strong></p>
<p><strong>世界很小，人类很小，生活也很小。只有一样东西可以很大——那就是心之向往。</strong></p>
<p><strong>别人的看法我并不在意，我只是做自己的事。</strong></p>
<p><strong>你不能通过逃避生活来寻得一片宁静。</strong></p>
<p><strong>不要为十全十美担心，你永远不能做到十全十美。</strong></p>
<p><strong>要体会到一分钟的价值，就去问一个刚误了火车的旅行者。</strong></p>
<p><strong>你经历得越多，越能欣赏生命的美好，生命中的美好就会变得越多。</strong></p>
<p><strong>有时我想，把每天当作是生命中的最后一天来度过也不失为一个很好的生命法则。</strong></p>
<p><strong>自私和抱怨是心灵的阴暗，愉快的爱则使视野明朗开阔。</strong></p>
<p><strong>人只有鼓起勇气，告别海岸，才能发现新的海洋。</strong></p>
<p><strong>玫瑰绝不会从天上掉下，如果想要更多的玫瑰，我们必须自己种植。</strong></p>
<p><strong>离别的痛苦，与重逢的喜悦相比，算不了什么。</strong></p>
<p><strong>在事情未完成之前，总是看起来不可能。</strong></p>
<p><strong>问题的出现不是让你止步不前，而是为你指明方向。</strong></p>
<p><strong>生活不在于有一手好牌，而在于如何把你手中的牌打好。</strong></p>
<p><strong>最崇高的荣誉不在于永不摔倒，而在于每一次摔倒后都能再站起来。</strong></p>
<p><strong>我越是孤独，越是没有朋友，越是没有支持，我就得越尊重我自己。</strong></p>
<p><strong>我绽放是为了自己，为了悦己，而非悦人。我的喜悦源于我的存在和绽放。</strong></p>
<p><strong>不能充分掌握时间与区别事情的缓急先后，你的一切都会大大折扣。</strong></p>
<hr>
<h2 id="知乎">知乎</h2>
<h4 id="一个人最根本的能力">一个人最根本的能力</h4>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235332821.png" alt="image-20250305235332821" style="zoom: 33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235445075.png" alt="image-20250305235445075" style="zoom:33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235459675.png" alt="image-20250305235459675" style="zoom:33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235511163.png" alt="image-20250305235511163" style="zoom:33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235519562.png" alt="image-20250305235519562" style="zoom:33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235529557.png" alt="image-20250305235529557" style="zoom:33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235540510.png" alt="image-20250305235540510" style="zoom:33%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20250305235550241.png" alt="image-20250305235550241" style="zoom:33%;" />
<hr>
<h3 id="Logan">Logan</h3>
<h4 id="为什么知乎上能有那么多深刻的思想，现实里遇到的人都那么肤浅和世俗？">为什么知乎上能有那么多深刻的思想，现实里遇到的人都那么肤浅和世俗？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/644027182/answer/126772383530">https://www.zhihu.com/question/644027182/answer/126772383530</a></p>
<p>这个世界上大多数人都为生存而忙碌，业余时间打打牌，喝点小酒，看看小说就过去了，他们就像流水线固定生产出来的人型机器人，按部就班出生，长大，上学，工作，结婚，生子，努力升职加薪，加官进爵，成为人上人，日复一日，一天天变老……</p>
<p>还有一些人虽衣食无忧，自由时间也多，把时间用来旅行，研究美食，跳跳广场舞，周游世界，享受这个花花绿绿的世界。</p>
<p>以上两类人占据了这个星球总人数的绝大比例。</p>
<p>不论怎么样，从他们身上，你能感受到他们的欲望焦点主要是对物质世界。</p>
<p>我这里说的物质并非贬义，也并不仅仅是指房子，车子，是指眼睛能看见，手能触摸到的，如性爱，酒精，高空跳伞，权力，考上某所大学，出一本书，拿到博士学位，一家人在一起过年聚餐，一场生日Party，年夜饭。</p>
<p>但还有一些人，生来就敏感，他们并非不做，不参与上面的那些事，并非不追求物质。</p>
<p>但这类人好像很容易腻，物质欲望比较低，容易出戏，他们总是会不自觉地思考:「我现在做这件事的意义是什么？过去一直如此，就代表这么做正确吗？这个世界是不是被创造的？有没有外星人？宇宙的意义是什么？神灵是否存在？我们遇到这件事，如此思考是合理正确的吗？我们是不是缸中之脑？人真的拥有自由意志吗？时间是真实存在的吗？我这一生就应该这样活着吗？谎言的存在合理正确吗？人会有灵魂？会有前世今生吗？」</p>
<p>何为公平？何谓爱情？何谓亲情？何谓正直？何谓善？何谓恶？何谓幸福？何谓资本主义？何谓共产主义？何谓权力？何谓异化？何谓法制？</p>
<p>无论Ta身处底层，监狱，亦或出身富足，这类人总是本能一次次发问，甚至对着星空发呆出神……</p>
<p>这类人的欲望焦点主要是向内求，向精神世界。</p>
<p>这类人有点像外星人到了地球，观察人间，观察形形色色的每个人，思考他们种种行为背后的动机，潜意识。</p>
<p>而知乎这个app的气氛，可以极大满足这类人的求知欲，容易吸引这类人来到这个平台。</p>
<p>而往往这类人会喜欢阅读一些哲学，宗教，心理学，历史，自然学科等领域的资讯，好奇心旺盛，这种喜欢是纯粹的喜欢！不是为赚更多钱，为拿个证书，为加入某个圈子。</p>
<p>这类人会自发思考人性，社会，自然，宇宙等问题。想多了，看多了，自然而言会想输出，就会打成文字发到知乎这个平台。</p>
<p>你愿意阅读这些人写的文字，从某种意义上来说，其实你也是这类人。</p>
<p>若你不是这类人，根本懒得点开，大数据也不会推送这些信息给你，当你在知乎上提出这个问题，更证明了你是这类人。</p>
<p>离开知乎这个平台，这样的人在现实中的比例非常低。</p>
<p>即便在知乎，这样的人，比例也并不高。</p>
<p>我有次看妻子的手机，当看见她的知乎界面推送内容时，简直惊呆了。</p>
<p>她的知乎画风就像网文app，百度贴吧，天涯灌水一样的风格，感觉就像是文字版的抖音和快手。</p>
<p>千人千面啊！</p>
<p>那些你认为肤浅和世俗的人，他们往往更容易适应这个世界，因为这个世界的主流人群就是他们。</p>
<p>你和他/她们接触久了，也能发现他们的很多可爱之处。</p>
<p>我想问下，你看过张艺谋拍得一部电影《一个都不能少》吗？</p>
<p>你觉得里面那个13岁的魏老师世俗和肤浅吗？</p>
<p>你觉得电影《何以为家》里面的那个小男孩世俗肤浅吗？</p>
<p>坦白说，我身边找不到第二个刷知乎的人，就算妻子刷知乎，也是我安利她的。</p>
<p>我身边的很多人，论口才，论文字表达力，没有第二个比我强的。</p>
<p>但唯独社会上的人情世故，我是最差的那个人。</p>
<p>我听他们说话都头疼，半天啰里八嗦说不清一个事，要不就是脑子像金鱼，很多事说了，也记不住。</p>
<p>我生活的圈子就是一个十八线小县城的底层。</p>
<p>我身边的人连200字的朋友圈都写不明白。</p>
<p>我越来越沉默，越来越不想和他们对话。</p>
<p>过年聚在一起，男的打麻将一桌，女的打牌一桌，小孩沙发上玩手机，我一个人在角落里看看文章，时不时看看他们。</p>
<p>听他们聊天，我根本没办法听。</p>
<p>我身边甚至找不到第二个喜欢看《三体》《超时空接触》《南海十三郎》《本杰明巴顿奇事》《海上钢琴师》的人。</p>
<p>我们一起在这个十八线小县城长大，越长大，我和他们越没共同语言，如今几乎彻底不来往了，但他们还都彼此联系。</p>
<p>在他们眼里，我是一个与人群格格不入的宅男，思想孤僻。</p>
<p>在我眼里，他们好无聊，没意思，肤浅。</p>
<p>我干什么都是一个人，甚至自己一个人剪视频玩。</p>
<p>我也一次次思考过这个问题，上网查资料，试图从基因，成长环境等角度找到那个为什么我和他们如此不同的原因。</p>
<p>其实这就是人的先天基因和后天环境的合力倾向导致的。</p>
<p>一名医生因为职业原因，会经常消毒，这种行为也会使得他对环境卫生的阈值高过身边人太多，以至于慢慢发展成无法忍受身边人的很多卫生行为细节。同样别人也会用洁癖来形容医生，慢慢不想靠近他。</p>
<p>一个人总是观察琢磨思考很多事情背后的为什么，对人事物的看法和深度就会越来越入木三分，一针见血，这会直接影响一个人的语言和文字表达力的颗粒度，也就是细腻程度，Ta就会渐渐无法忍受很多人谈话内容，觉得太过于表面肤浅，太过于粗糙武断。</p>
<p>数学心算很厉害的人会不自觉嫌弃那些就简单的几个数字用计算器半天算不明白的人。</p>
<p>文字表达精确的人会不自觉嫌弃本来几句话可以概括完，但就是啰里八嗦几分钟说不清话的人。</p>
<p>你越擅长什么，甚至擅长到成了一种本能习惯，也就越受不了没有这项技能的人。</p>
<p>甚至严重到一定程度，你会觉得遇见的人都是蠢人，更严重了性格抑郁自闭也不是没可能。</p>
<p>我的建议是:</p>
<p>第一、每种性格都有优势和劣势，我在工厂流水线和工地打工时，就发现工厂流水线的工人智商普遍不如工地上的人聪明，但工厂流水线工人对一个简单行为大量重复的耐受度要比后者更强。</p>
<p>反而太聪明的人，很害怕天天日复一日，毫无成长的重复工作，服从性低，否则为什么导盲犬不用智商最高的牧羊犬呢？</p>
<p>第二、总是喜欢沉浸思考的人，往往执行力不太高。一是因为人的能量是恒定的，你的能量都用来思考了，就没有其他精力应付现实生活的琐碎细节了。二是思考太多，会发现不可控风险太多，瞻前顾后，没有勇气承担向前了。</p>
<p>这也是为什么最聪明，最擅长分析推理的人很难成为一把手，只能当一把手背后的那个军师。</p>
<p>大当家的智商并不是最高的，但往往是胆子和野心最大的那个人。</p>
<p>第三、精神世界是非常私人和个性化的，两个哲学家在一起可能并不是你想象的惺惺相惜，而是互相都想把对方掐死。你今天觉得某个大V思想深刻，某天发现他原来是易经八卦爱好者，而恰恰你对这个嗤之以鼻，认为这是封建迷信。然而从对方的角度看来:你何尝不是迷信理性的人，也是一个肤浅之辈。</p>
<p>人到了一定经历，不然发现一件事，这世上没有任何人与你的经历和基因完全一模一模。两个人体内激素分泌水平不同，看到同样的景色，都是不同感受，人本身就是孤独的。</p>
<p>你某天遇见某人，觉得那人有内涵，不肤浅，天天吃喝拉撒相处几年试试，你又觉得那人肤浅了。</p>
<p>不然为什么会有仆人眼里无伟人，妻子眼里无英雄。凑近多看看，什么光环都会祛魅，更何况人本身对重复的刺激就会有边际递减效应，不知不觉就麻了，不麻的那是圣人！</p>
<p>你可能未来某天觉得自己遇见了灵魂伴侣，对方知你懂你，但只要你们继续把话题的颗粒度往碎打，向下挖，聊着聊着就又感觉不是一路人了。</p>
<p>我从网上找了两个段子，放到下面:</p>
<blockquote>
<p>一天我路过一座桥，碰巧看见一个人想跳河自杀。我跑过去对他大喊道：“别跳，别死啊。”<br>
“为什么不让我跳？”他说。<br>
“因为还有很多东西值得我们活下去啊。”<br>
“有吗？比如说？”<br>
“呃……你做什么工作？”<br>
“程序员。”<br>
我说：“我也是！瞧，有共同点了吧。你是软件还是硬件？”<br>
“软件。”<br>
“我也是！PC 还是 Web？”<br>
“PC。”<br>
“我也是！Windows 还是 Linux 平台？”<br>
“Linux。”<br>
“我也是！那你使用 C 还是 C++？”<br>
“C++。”<br>
“我也是。1998 年的 C++ 98 还是 2011 年的 C++ 11？”<br>
“2011 年的 C++ 11。”<br>
“我也是。大括号写在后面还是写在下一行？”<br>
“下一行。”<br>
“去死吧！你这个异教徒人渣！”我一把将他推下桥去。</p>
</blockquote>
<p>第二个段子:</p>
<blockquote>
<p>一个人走到海边，看见另一个人想跳海自杀。<br>
他走上前去劝说：先生，请不要跳下去！<br>
那人问道：为什么?<br>
他说：生命是美好的嘛！你是无神论者还是有宗教信仰?<br>
那人答：我有宗教信仰。<br>
佛教、道教、回教还是基督教？<br>
基督教。<br>
罗马天主教还是新教?<br>
新教。<br>
我也是新教呢！圣公会还是浸信会？<br>
浸信会。<br>
太好啦！我也是浸信会，你是上帝浸信会还是主耶稣浸信会？<br>
上帝浸信会。<br>
真是太奇妙啦！我也是，那你是传统上帝浸信会还是改革上帝浸信会？<br>
改革派的。<br>
1879年的改革派还是1915年的？<br>
1915年的改革派。<br>
那人朝他屁股飞起一脚，把他踢进海里：异端！去死吧！</p>
</blockquote>
<p>你可能觉得这是笑话，但我曾经真遇见过两个人，一开始无话不说，觉得活这么大，终于遇见知音了。</p>
<p>随着话题深入，相处时间越来越久，越发觉得彼此的不同点太多了，根本不是一路人。</p>
<p>人是社会性动物，无法彻底脱离群体生存。</p>
<p>但人与人之间又像点刺猬，离得太近，就会彼此刺伤，离得太远，又会通通冻死。</p>
<p>这世上并不存在一个所谓的乌托邦，那里的人不分彼此，互相接纳，仿佛都是和你一样的同类，从此你就再也不孤独了！</p>
<p>这只是许多人的意淫。</p>
<p>要真有乌托邦，我觉得也是一堆信仰自由主义或自由神学的人构建的。</p>
<p>但往往这类群体太原子化，个性化，缺乏凝聚力，很难拥有像原教旨群体或偶像崇拜群体那种一呼百应的狂热，于是前者很容易被后者侵略，打败，夺得政权，夺得话语权。</p>
<p>所以我才写了置顶的那段话。</p>
<p>尊重不同，理解不同。</p>
<p>尽量少用肤浅这样的词语定义和自己不同的人，因为这其实是对自己的放逐和伤害。</p>
<p>就像当你仇视他人时，仇恨的情绪也会一天天腐蚀你的心灵，久而久之，你的生命会越来越阴暗苦闷。</p>
<p>每天一睁开眼，满世界都是蠢人和敌人，你活着还有什么快乐？还有什么希望和盼头？</p>
<p>在什么人群中说什么话，若说不出口，觉得违心痛苦，可以沉默。若沉默还是如坐针毡，那就脱离这样的圈子。</p>
<p>总之只要没打算死，能解决自己的温饱问题，有一定收入来源，自己一个人想怎么追求深刻都行。</p>
<p>人这辈子，眨眼而过，一生很短的，只要不伤害别人，尽力让自己开心一些。</p>
<p>怎么样过，都是短暂的一生罢了。</p>
<hr>
<h4 id="不能喝酒，被亲戚说一辈子没出息，怎么办？">不能喝酒，被亲戚说一辈子没出息，怎么办？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/647438001/answer/98043784835">https://www.zhihu.com/question/647438001/answer/98043784835</a></p>
<p>只要你能赚到比他多的钱，他的嘴就闭上了。<br>
在你没有赚到比他多的钱：</p>
<p>他可以用「不会喝酒/不会嫖娼/不会送礼/不会抽烟/不会说话/不会社交/情商太低/做人太死板/胆子太小/过于安逸」等任何理由批判你这辈子没出息。</p>
<p>笑贫不笑娼的社会环境，有钱就可以堵上别人的嘴。</p>
<hr>
<p>我一个朋友的舅舅，结婚之前，烟酒不碰，结婚以后丈夫娘说：「作为一个男人，不会喝酒，不会抽烟，以后在社会上怎么和人社交，怎么交朋友？」</p>
<p>就因为这句话，他从此开始烟酒不断，婚后开了一个小饭馆，他是厨子，老婆是服务员兼收银，但老婆又跟着别人卖保健品（无限极），到了饭点，饭店最忙的时候，结果老婆不见了，他根本忙不过来，还有两个孩子要照顾，他郁闷至极，借酒消愁，最后就成烂酒鬼了，光因为喝酒住院都有十几次了，不到45岁的年龄，死了。</p>
<p>我16岁初中毕业以后，就在网吧混了两年。<br>
19岁去了一家大宗商品交易公司当实习生，整天跟着老板喝酒，在酒桌上我给领导敬酒，倒酒，讲各种笑话，一气呵成，光喝到站不起来都好几次。</p>
<p>因为工作压力大，失恋，对未来也很迷茫，半年以后得了牛皮癣，整个人和毁容了一样，就辞职了。</p>
<p>那时觉得这辈子完了，每天在家里也不出门，我一出门，别人看见都害怕。<br>
那时我都觉得要孤独终老了，还谈什么狗屁工作和找对象的事情。</p>
<p>就在家里的电脑上自学了一些电脑技术，淘宝上开了个店赚点小钱刚够养活自己，反正也和父母住在一起。</p>
<p>也因为母亲是基督徒的缘故，我那时总是思考一些人生意义之类的，开始接触宗教，读圣经，听很多牧师讲道，每周日固定去教会，其他时间我就自己在家里，也会接触形形色色的一些底层基督徒。即便是在宗教圈子里面，也分底层和上层。当保安的基督徒和当大学教授的基督徒也不是一个圈子，这两种人对信仰的理解也是差距很大。</p>
<p>也是从那以后，我就渐渐脱离了（非基督徒）的社交关系，烟酒就都停了。<br>
谁能想到，这在家里一呆，就呆了十几年，就因为不喝酒，不抽烟被人侮辱小看了很多次。</p>
<hr>
<p>我在家里思考了很多事情，包括所谓社交的本质是什么？</p>
<p>这个社会，人与人之间接触是需要破冰的，无论是打开话题，还是叙叙旧，或谈个什么业务。<br>
而吃饭就是最好的理由。递根烟，关系就拉近了，再倒点酒，酒精可以抑制理性思维，人就容易变得感性，两个人都感性起来，就像做爱有了润滑剂，平时放不开，不好意思，或者权衡利弊不应该说的一些话，就都敢说了。</p>
<p>烟和酒，打麻将，打牌，玩游戏都有融入圈子，破冰的功效。</p>
<p>说白了，你想要从一些人身上获取利益，总得有一些「共同」的爱好进行链接，这是进入那个圈子的投名状。</p>
<p>大多数圈子谈事离不开饭，饭局离不开酒和烟，饭后离不开嫖和赌。</p>
<p>哪怕你在工厂流水线打工，下班了不得和工友吃饭吗？不得和你头上的班长和线长吃饭吗？</p>
<p>吃饭的时候，别人敬酒倒酒，你干坐着就夹菜？<br>
你知道别人心里怎么样想你吗？装你妈个B啊，装什么清高，你TM是不是看不起老子？</p>
<p>你要是说：「我身体不适，不能喝酒。」<br>
总有人说：「没事，少喝点，来来来， 给你倒上。」</p>
<p>喝完第一杯，你用手挡着，我可以了，不能在喝酒了，然后第二杯就满上了。<br>
你这一次吃饭喝酒了，下次吃饭喝不喝？<br>
你说不能喝？那为什么上次你喝了没事？</p>
<p>你要是像我一样，大家都喝，就自己不喝，既不喝酒，也不敬酒，还不递烟，多去几次这样的饭局，你就感觉浑身不得劲，别扭，还不如不去，别人带着你也不舒服。</p>
<p>你想想，你是业务员，你出去跑业务。<br>
客户喊你去大保健，点了几个妹子，你正襟危坐柳下惠，客户怎么在你旁边摸小MM的奶子。<br>
妹子凑到你身上一贴，手往你裤裆中间一摸，你啪一下打了妹子的手，干什么？谁让你乱碰我身体的？</p>
<p>客户还怎么和你谈回扣返点签合同的事？</p>
<p>久而久之，你就不想与人接触了，对所有类似这样的工作产生本能的抵抗心理。</p>
<p>接下来，我们谈谈核心的问题，不参与这样的社交方式也不是不行，主要还是赚钱。</p>
<p>你得有足够的硬实力，比如你有权力，下面的人都得看你脸色行事。<br>
或者你有业务资源，别人喝酒是为了从你这里得到利益交换。</p>
<p>或者你是一名黑客，网络小说作者，门诊小医生这种独立自由职业。<br>
或者你有病（没错，就是那种喝了我会住院）的病，诊断书随身带着。</p>
<p>会喝酒的人很多，会喝酒没出息的人很多，底层人中会喝酒的多了去，还不是照样底层。<br>
会喝酒和有没有出息没有必然关系，但很多场景离不开喝酒，而且有些钱，你不喝酒赚不了。<br>
当然，喝酒只是一个开头，往往吃喝嫖赌抽是粘在一起的。</p>
<p>在你没有强大的实力之前，这些规则你推翻不了。<br>
一些在社会上搞钱很厉害的女人，那酒量有的都很恐怖。</p>
<hr>
<p>以我个人的经历感受而言：<br>
不喝酒，不抽烟，不打牌，不打麻将，不嫖娼，你会渐渐失去与人社交的欲望，你会慢慢讨厌很多饭局，因为你身在其中如坐针毡。</p>
<p>久而久之，你的性格也会越来越封闭，甚至越来越喜欢独处，你的很多欲望也会慢慢消失，甚至产生活着越来越没意思的感觉。</p>
<p>如果没有家庭兜底，你还处于社会底层，你的生活甚至都会越来越艰难。</p>
<hr>
<p>我弟去年换了一份业务员的工作，出去谈客户，不喝根本不行，甚至客户明说，走吧，去KTV玩玩，去了客户就点两个妹子，最后我弟买单。</p>
<p>记得我弟第一次去这种场合的时候，凌晨一两点给我拍了一个视频：<br>
光线昏暗，灯红酒绿的一个包间里，两个桌子，上面摆满了酒瓶，客户在沙发的另一端坐着，怀里抱着一个衣着暴露，身材很好的性感女郎。</p>
<p>我弟微信发来这个视频和一段话：「哥，我好恶心这样的环境，一分钟都不想呆了，时刻想逃离。」</p>
<p>一年以后，我弟已然见怪不怪，以前从来不打麻将的人，开始打麻将了。<br>
以前只有和朋友偶尔出去吃饭时才喝酒，现在在家里和家人吃饭，他自己都要喝两三杯，而且血糖都10个点了，他都无所谓的态度。</p>
<p>收入也比以前的工作翻了3倍，车也换了，在我生活的底层中也算豪车了。<br>
我问他：「就你这么折腾身体，赚的钱够不够将来去医院看病？不怕自己英年早逝吗？」<br>
他说：「哥啊，我现在想不了那么多了，到时候发生了再说，有的人一辈子不抽烟不喝酒，也是英年早逝啊，说不定你比我还早走一步呢。」</p>
<p>我劝了几次他在家里就别喝了，他嫌我唐僧，太能BB，我也就不多说了。<br>
我弟要是有天真把自己喝趴下了，我妈肯定会被连累。<br>
我妈稍微一累，她就得病，她一病，我就跟着一起受累。</p>
<p>我能怎么办？就好像你看到了一些未来可能要发生不好的事情，但是你又躲不开。<br>
这就是命运。</p>
<p>就像我身边一些女人，嫁给了黄毛，黄毛有男人味，胆子大，混江湖。<br>
物质上，这些女人都有了。<br>
黄毛隔三差五被抓进去，刚给判了两年出来以后又和兄弟们在一起搞事了。</p>
<p>你们要是有兴趣的话，可以看看《狂飙》中的唐小龙，看看里面的<a href="https://zhida.zhihu.com/search?content_id=712724485&amp;content_type=Answer&amp;match_order=1&amp;q=%E9%99%88%E4%B9%A6%E5%A9%B7&amp;zhida_source=entity">陈书婷</a>带着孩子躲起来的事情。</p>
<p>她们跟着担惊受怕，想过太平日子，不想过这种提心吊胆的日子了。<br>
问题是年轻时，老实的男人，这种女人也看不上啊。</p>
<hr>
<p>前些年，我在网络中某个社交APP上写了不少小作文，有很多女人和我私信聊过天。<br>
她们对我说：「我很喜欢你这种不抽烟，不喝酒，不打牌，不乱搞，有耐性倾听，特别会分析人心理的男人，我就可讨厌自己的老公喝得烂醉如泥了，有时吐得家里都是，家里到处都是烟味，难闻死了，一回家就躺床上玩手机，还有几次打牌一下午就输了几万元，气死我了，和他根本没话说，回到家从来不体贴我的辛苦，也不帮我做家务，只有床上需要我的时候，才会凑过来和我说会话。如果可以重新嫁的话，我会选择嫁你这样的男人。」</p>
<p>刚开始，我听了类似的话很开心，内心会有种：「受宠若惊，没想到自己竟如此受欢迎，看来这世上并不是没有女人喜欢自己啊，自己还是有点魅力的！我可是自卑很久了，我可是觉得自己很差劲，很垃圾的。」</p>
<p>直到我后来听她们讲自己家庭中的各种事。<br>
比如孩子上学，都是老公托人找关系，出钱。<br>
娘家人住院了，都是老公托人找关系，出钱。<br>
娘家人办婚礼，葬礼，都是老公托人找关系，出钱。</p>
<p>她们在家里岁月静好，还能在网上找人聊天打发寂寞，不用担心下个月房贷怎么办，孩子补习班费用从哪里来，因为这些事情全是老公扛着。</p>
<p>她们开的车，加的油，车上的保险，去了美容保养的钱，身上的包包，手上的指甲油，满柜子的衣服，都是老公从酒桌上和牌桌上的人情关系赚来的。</p>
<hr>
<p>她们想要的男人并不是我这样的，而是我和他老公的结合体。<br>
既能在外独挡一面，朋友众多，赚钱养家，人情世故什么都懂，还不会在家里抽烟喝酒，回家陪老婆，爱看各种书，懂老婆的想法和心理，还可以陪孩子写作业，教孩子各种学习的方法。</p>
<hr>
<p>当我意识到，人的性格往往都是利弊共存，如同一枚硬币的正反面同时存在，你享受了这个人性格的正面，也得承受这个人性格带来的负面影响。</p>
<p>在我老婆眼里：「我不懂社交，不懂交朋友，天天在家里就是看什么破书，写没用的文字，整天胡思乱想，邋里邋遢，也不上进赚钱，不努力拼搏，看看人家谁谁谁的老公，又赚了多少钱，买了什么房子，我就跟着你住着这你爹妈留下的烂房子，多少年了……别人家的孩子报各种补习班，又带孩子去哪里旅游了，你呢？整天窝家里，孩子什么世面也没见过，作文都不知道怎么写。」</p>
<hr>
<p>很多人为什么活得如此痛苦呢？因为既要又要。<br>
我一直很孤独，内心幻想遇见一个懂自己内心世界的女人，毕竟现实中几乎和所有人都没有社交关系了。</p>
<p>可是真遇见愿意倾听，懂自己的女人，当我听她讲完她家里的那些事，听她讲完她老公的事情。<br>
我沉默了……</p>
<p>因为她眼里那个讨厌的老公，恰恰是我妻子愿意嫁的男人。<br>
而我妻子眼里糟糕的老公，恰恰是她想嫁的男人。</p>
<p>问题是，假设真换过来，我娶了她，我老婆嫁给她老公，婚姻就幸福了吗？<br>
我可以告诉你结论：不会的！</p>
<p>依旧会抱怨，依旧会羡慕别人，依旧会觉得自己的生活好苦。<br>
抱怨者恒抱怨，知足者恒知足。</p>
<p>你们猜猜和我在网络中聊天的那些阔太太，她们的老公知足吗？有没有后悔娶了她们？<br>
我跟你讲，他们也后悔了，他们只是不说罢了。<br>
当他们出去与人社交时，看到客户的老婆是局长的女儿，是某个公司的经理，听客户讲自己的老婆请客送礼贿赂出谋划策，替男人布局排雷的时候，他们也会羡慕，后悔当初没娶这种事业型女人。</p>
<p>当初傻啊，就图漂亮了，没考虑一个女人的背景家庭和事业能力。</p>
<hr>
<p>从我意识到这世上从来没有所谓的一种生活或者一个人，可以让一个人完全满意的时候，所谓的幸福其实是一种自己对生活的态度。</p>
<p>我与很多人聊天的欲望就渐渐没了，实在聊不下去了。<br>
因为你听对方说了那么多，但对方根本意识不到，TA幻想的那种生活这个世界根本不存在，但许多人的痛苦恰恰来自于：既要又要。</p>
<p>你选择了不喝酒，不抽烟，你自然会有不抽烟不喝酒的好处，也会有坏处。<br>
你选择了喝酒和抽烟，也有其对应的好处和坏处。</p>
<hr>
<h4 id="你有哪些话想对知乎上关注你的人说？">你有哪些话想对知乎上关注你的人说？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/264373660/answer/95280430232">https://www.zhihu.com/question/264373660/answer/95280430232</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p><strong>最后更新时间：2025-03-29</strong></p>
<p><strong>关于版权：</strong></p>
<p>我写的任何东西，只要你喜欢：<br>
想转发，转载，或想要引用部分写到自己书里出版，或拿去当自媒体稿件赚钱，随意。<br>
不必留言私信问询，不必强调这些文字来自哪里，原作者是谁。<br>
就当你写的或某处听过的故事即可。</p>
<p>我对自己在知乎这个平台输出的文字版权并不在乎，因为在我看来，人类的本质就是复读机。<br>
我读过100本书，看过10000篇文章，这些文字在脑子里结合过往经历，重新排列组合一番再次输出，算不算抄袭？</p>
<p>那只读过1页书，凭着记忆力背写下来，算不算抄袭？<br>
那看过100页书，无法凭着记忆力全部背下，但记得大体框架，按照这框架填充记忆细节，算不算抄袭？</p>
<p>我认为<a href="https://zhida.zhihu.com/search?content_id=712171571&amp;content_type=Answer&amp;match_order=1&amp;q=%E7%89%88%E6%9D%83%E5%88%B6%E5%BA%A6&amp;zhida_source=entity">版权制度</a>是个临时脚手架。<br>
它确实能保护创作者混口饭吃，毕竟谁都要付房租买泡面。<br>
要是写书的不收版税，拍电影的赚不到钱，很多好作品压根不会出现。</p>
<p>之前我录制过一些网课，之所以没全部免费公开，也只是为混口饭迫不得已，但其实并不想收费，可若不收费没钱赚，也压根没动力去录那些课程，人就是这么矛盾。</p>
<p>可问题是自己平时看的很多电子书（盗版），小说（盗版），电影（免费下载），各种教程（免费网盘资料），游戏（破解版），用的无数软件全是（破解版），都是从网络中白嫖。</p>
<p>一边拿着这些「侵犯别人版权」白嫖来的东西学习，录制课程。<br>
一边放到网上卖钱，一边发现有人盗版，再追究责任，我觉得自己活着可真不得劲。</p>
<p>我可是努力要追求做个光明磊落，唾弃谎言，厌恶双标，心口合一，言行一致的人。<br>
可把自己的行为订个和合本，自己都实在看不下去自己了。</p>
<p>所以当看到一些人在互联网中像个斗士一般，到处为了专利和版权与人扯皮，问别人索要赔偿时，我是既支持又反对的矛盾心理状态，只能选择沉默。</p>
<p>因为我不相信这人从来没看过盗版的书（pdf文件，TXT文件），电脑没安装过任何绿色，破解软件，操作系统也是正版的。</p>
<p>从超我的角度来看：<strong>一个人能够做到私下不使用任何盗版，才有资格站出来和人进行版权之争。</strong></p>
<p>但你们相信有这样的人存在吗？反正我没见过。<br>
我不相信！所以啊，人都是双标的，双标就是虚伪！</p>
<p>你自己天天侵犯别人的版权和专利，却因别人侵犯了你的版权和专利，和别人打官司，问别人索要赔偿，请问这个人虚不虚？</p>
<p>所以法律帮助一个天天侵犯版权的人打版权被侵犯的官司，是不是很无语，很晕？</p>
<p>请问你们喜欢双标人吗？请问你们能找到一个不双标的人？<br>
我就是看到无数的人双标，看到自己也双标，而我还很厌恶双标，所以对人类很失望，对自己也很失望，水至清则无鱼，人至察则无徒，哪有什么绝对公平和公正。</p>
<p>所以我活得痛苦，内耗严重，因为天生就喜欢求真解构，喜欢玩逻辑证明。</p>
<p>我发现那些活得最快乐的人，都是三标，四标，五标，六标，人家才不在乎什么逻辑和前后言行一致性，唯我独尊，自我感受第一。</p>
<p>总之，我认为所有创作都是站在前人肩膀上的，一个人用着全人类的文明财富，重新排列组合一下，变成收费项目，对我来说，这只是货币交易时代的无奈妥协的暂行方案。</p>
<p>这个制度虽不完美，但人还需赚钱生存，算折中办法。</p>
<p>所谓「抄袭」标准，其实随着时代在变。<br>
古人觉得模仿经典是美德，现在非得标新立异才算原创，这个变化本身就挺有意思。</p>
<p>随着整个人类思想觉悟提升，科技进步，有天金钱的意义将会瓦解重新定义。<br>
当人类不再需要为了赚更多钱解决吃喝拉撒，生老病死这些问题时，纯粹是为了与其他人类互动，交流而去创作输出时，那时就不需要什么版权和专利了，创作可能就回归最纯粹的状态。</p>
<p>就像很多人在互联网免费分享经验，朋友圈自愿写段子，纯粹为了和人交流的快乐，如：维基百科靠大家自愿编辑，<a href="https://zhida.zhihu.com/search?content_id=712171571&amp;content_type=Answer&amp;match_order=1&amp;q=%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6&amp;zhida_source=entity">开源软件</a>让全球程序员一起捣鼓。</p>
<p><strong>总结：</strong></p>
<ol>
<li>我写的文字随便用，不用标出处。它们本就是我吸收各路信息后重新炖的大杂烩。</li>
<li>文中若引用了其他作者的文章或某些图片，视频，音乐等，请谨慎对待。非要拿去用作商业用途，建议联系请示原作者。</li>
<li>我并不主张现在就该取消版权，也不是标榜自我清高，毕竟创作者也要恰饭，双标也没办法，在生存面前，双标、三标很正常。只是我认为版权专利这套规则不是天经地义，未来也许会有更好的方式。</li>
<li>对我来说，若这些文字能让人少走点弯路，多些快乐，会让我觉得自己活着有点价值和意义。</li>
</ol>
<hr>
<p><strong>关于对错：</strong></p>
<p>10岁的我会否定5岁的想法。<br>
15岁的我会否定10岁的想法。<br>
20岁的我会否定15岁的想法。<br>
……</p>
<p>只要还活着，还在接触新的信息，还在思考，就会不断推翻过去的自己。<br>
这世上的每个人，都有自己独一无二的基因和经历，并生成了各种看法，且随着年岁增长，这些看法一直在变，也许更加完善，也许全盘推翻。</p>
<p>我与过去的我并不一致，也与未来的我无法一致。<br>
各种看官亦是如此，无数个不同时空下的你和我写出的文字，在这里交织，必然会有碰撞冲突。</p>
<p>但我希望，你能尊重，理解这种不同：<br>
请阅读这些文字时，有个前置心理预设：这只是我当下的想法。<br>
也希望你在评论这些文字时，有个前置心理预设：这只是你当下的看法。</p>
<p>你今天赞同我的一些看法，将来可能经历一些事情后，会反对我。<br>
今天反对我的一些看法，将来可能经历一些事情后，会赞同我。</p>
<p>今天你将我视为挚友知音，明天或许就想让我从人间蒸发。<br>
我对所谓粉转黑，黑转粉并不在意，这是你的自由。<br>
想关注，想取消，一切随意！</p>
<p>人类很喜欢把一个人捧上神坛，偶像崇拜，再过一段时间，把这个人从神坛上拽下来，万人鞭尸，踩进地狱。<br>
太阳底下，并无新事，这种事以前发生过无数次，以后也会发生无数次。</p>
<p>我希望你能够明白：哪怕我随地吐痰，从几岁就学大人抽烟，偷过东西，不代表我讲的话是错的。<br>
也不要因为我出过什么书，有什么职称，有多少人关注，赚过多少钱，就认为我讲的话是正确的。</p>
<p>不要因为爱因斯坦搞破鞋，就把相对论扔在火堆里烧了。</p>
<p>一个人的人品和其才华，没有必然关系。<br>
演员的演技和其人品，也没有必然关系。<br>
一个人赚了很多钱，也不代表这个人就很聪明。<br>
一个很聪明的人，也不代表他的物质生活就很好。</p>
<p>这个星球上，大多数人的认知受情绪干扰太厉害，从小就被打了很多思想钢印浑然不觉，习惯把一些「公众人物」逼到神坛上，立各种人设，发现抽根烟，吐个痰，出个轨，吸个毒，甚至仅仅念错一个词，接下来墙倒众人推，不把那个人弄死，誓不罢休。</p>
<p>也因人类这种普遍的认知缺陷，使得骗子有了市场。骗子将自己营造成专家，商业大咖，利用这些人疯狂崇拜的心理，割不完的韭菜。</p>
<p>政客和媒体，利用这种认知缺陷，发动了一次次舆论战，真相已被各种水军和无脑崇拜的人吞噬。<br>
无数人将荒谬当做真理膜拜，甚至以此开宗立派，拉帮结伙，谁若不认同TA所宣扬的，必将谁视为敌人异端邪教，要么加入，要么同化，要么消灭。</p>
<p>也许你忍不住想要说服我！<br>
你未必是错的，只是我的认知还不到能够理解的时间，甚至此生都未必可以理解你的看法，只要你的动机是没有恶意攻击，你的评论一定我保证不会删除。若不然，删评拉黑，毫不客气！彼此还是不要看见对方比较好！</p>
<p>我曾经认同喜欢的文章和老师，如今回头再看，总能挑出各种毛病。<br>
但并不代表那些文章和老师就没有存在意义和价值，因为他们在精神上哺育了「幼儿时期的我」。</p>
<p>我在知乎某个回答或某篇文章下写的任何文字，看完以后不认同我的观点，认为我说的不对，或不全面，这是很正常的。</p>
<p>假设我脑子里面对某件事情的看法完整阐述来龙去脉以及思考过程需要10万字，我没办法把这10万字写到一个回答或一篇文章中。</p>
<p>在这种情况下，我只能抽出这10万字其中的几百字或几千字写一写。<br>
而你读的过程中，可能会发现我有一些关键的逻辑细节没有讲出来。</p>
<p>但没办法，10万字的成长经历和思考过程，可能最后被零碎打散成了几百篇文章中。<br>
当你读这些文章中，有点像搜集一块块拼图，最后渐渐拼凑出一个更大的抽象思考体系。</p>
<p>另外还有一些思考，确实就是不成体系的零碎猜想，就像你没办法找到大一统的语法规则去解释学英语过程中的各种变形，时不时就蹦出一些特例需要你额外记忆。</p>
<p>人生亦是如此，总有各种例外事件，目前的你无法分类归纳，只能单独按照特例去看待。</p>
<hr>
<p><strong>关于文章对人的情绪影响：</strong></p>
<p>我写很多文字的立场，都是站在「<strong>虚无解构</strong>」的角度出发。<br>
我总是提出问题，深入挖掘问题，最后给出的解决方案往往是：<strong>无能为力，只有认命</strong>。<br>
从世俗意义的角度来看：<strong>这些文章是消极悲观的。</strong><br>
所以我总会时不时在文章末尾附上文章链接，即某种解决方案，但那并不代表我完全认同或我能做到。</p>
<p>这些解决方案往往来自下面两位知乎答主的文章：</p>
<p><a href="https://www.zhihu.com/people/kvxjr369f">q9adgwww.zhihu.com/people/kvxjr369f<img src="https://picx.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff_ipico.jpg" alt="img"></a></p>
<p><a href="https://www.zhihu.com/people/nell">nell nellwww.zhihu.com/people/nell<img src="https://pic3.zhimg.com/v2-5dccc4ae6a1e34c95be659af22f30cc2_ipico.jpg" alt="img"></a></p>
<p>我写的内容读多了，并不会让你越来越热爱生活，越来越有活力，反而可能让你变成很多人眼里的丧，虚无，不上进。</p>
<p><strong>什么人适合读这些文字？</strong></p>
<p>就是你很痛苦，时不时冒出轻生念头，一直不停思考，想要找到一些答案，可浑浑噩噩，彷佛黑夜中看不到出路。</p>
<p>那么这些文章也许适合你读，能带给你一些启发。<br>
它也许并不能让你像其他人眼里的那些「正常人」生活，但可能会让你知道自己并不孤独。</p>
<p>这些文章，也许会像镇静剂，让你安静下来，不再执着什么。</p>
<hr>
<p><strong>关于备份：</strong></p>
<p>若喜欢哪篇文章，建议保存到自己的私人空间。<br>
我不保证哪天文章会突然消失或隐藏，也许没了就真没了。</p>
<hr>
<p><strong>关于文章真实度：</strong></p>
<p>有时写作过程中，我想到身边某人身上的某件事，会将这件事安插到某个网友，或不知从哪听过的某个故事，以另个身份叙述。还有一些和我聊过的网友，真实身份在互联网或国内有一定复杂的社会关系和比较敏感的社会地位。这些人给我讲过一些事，我在写的过程中，会模糊大量细节，只突出要表达的部分。</p>
<p>有时我会把不同的人身上发生过的几件事，故意模糊细节处理，甚至缝合到一个虚构的人身上，这是一种写作手法。</p>
<p>如网友变表姐，堂妹变表姐，同事变同学，时间顺序错位，空间地理错位。</p>
<p>在进行模糊处理之前，我已提前考虑过：会不会影响文章最后的价值判断总结。<br>
请各位读者放心，几乎毫不影响。</p>
<p>之所以如此做，完全就是本能，不想让真实经历完全赤裸地暴露在互联网中。</p>
<p>若互联网可以做到完全匿名输出，作者隐私绝对不会被挖出来，我想会有很多猛料爆出来。<br>
如今知乎匿名取消后，很多真实的经历和想法都不敢写了，毕竟趋吉避凶是人的本能。</p>
<blockquote>
<p>成龙大哥说过一段话：娱乐圈，很黑，黑到让大家害怕。但是我现在不能讲出来，因为这样我会遭到报应的，甚至是我的家人，所以我现在还不能讲出来。 成龙大哥还说：会把娱乐圈的黑幕写成一本书！交给律师，等自己死后一百年，再公之于众！这样到那个时候，就不会伤害谁了，我会把那些真真正正不为人知，所有人的名字，事情清清楚楚的记录下来，那将是件非常传奇的故事！<br>
信息源丰富或某个行业内有一定权力的人，我想或多或少都接触过一些普通人不知道的真正史料或行业机密。  而那些秘密，甚至可能几十年甚至上百年后才能公开。</p>
</blockquote>
<hr>
<p><strong>关于知友提问以及私信：</strong></p>
<p>有些人给我发私信或评论区有人问我一些事或想要加我微信，我在这里统一回复一下：<br>
我不想把知乎这个平台之外太多的个人信息暴露。<br>
在不同的圈子里，有不同身份，这些信息得隔离。</p>
<p><a href="https://www.zhihu.com/question/630423705">网络作者为什么不能被别人知道真实身份？</a></p>
<p>若我们私信沟通过很多，彼此有了信任基础，有些事情确实在微信沟通更加方便，到时再加。</p>
<p>还有一些私信和评论，我虽看了，但没有精力回复，因为至少要打几千甚至几万字。<br>
很多事情不是几句话可以聊完的。</p>
<p>这涉及到了你的原生家庭，性格，以及很多你经历过事情的细节和感受。<br>
在不熟悉你的基因表达倾向，具体阶层成长环境以及有关你人生重大记忆节点的情况下，任何针对你个人具体事情的回复，我认为都是胡说八道。</p>
<p>我不是算命先生，不可能听你说几句，就能掐指神算。</p>
<p>若只是简单几句话可以说清的事情，我看到了后顺手就回复了。<br>
希望理解，不回复并非不尊重，实在精力不允许。</p>
<hr>
<p><strong>关于对话身份：</strong></p>
<p>不要在知乎叫我老师，大佬，大神，大V之类，也没必要用所谓的敬语「<strong>您</strong>」。<br>
我不喜欢君君臣臣父父子子，地位高低、泾渭分明的等级制度。</p>
<p>我愿意听信某人，是因为我相信对方专业判断能力在我之上。<br>
我愿意服从某人，是因为收取了某些利益，拿人钱财，替人消灾，这是契约关系。<br>
我愿意跟从某人，是因为同志关系，要共同完成一些事业，只是分工不同。</p>
<p>这也是我不喜欢酒桌文化（权力服从性测试）的原因，我非常厌恶别人强迫我做什么。<br>
我知道自己的想法很理想化，尤其是那些费劲千辛万苦爬上去，想要体验人上人，天天想把别人变成奴隶伺候他，这种人最讨厌我这样的性格。</p>
<p>因为这类人没本事做到以德服人，以技压人，以利惠人，所以只能以暴压人。</p>
<p>评论区或私信请直接称呼我：<strong>答主或作者即可</strong>。<br>
你在我眼里是读者的身份。</p>
<p>我不喜欢粉丝这个词语，它给我的第一感觉是：「<strong>没有自身立场，容易被人煽动情绪，对人偶像崇拜，很容易被割韭菜的一个群体画像。</strong>」</p>
<p><strong>我希望你关注我的心态是：</strong>「人无完人，虽这位作者写的东西，时不时可以看出一些不太认同的地方，但他确实提供了一些我自身没有的经历样本和观察视角，使得我对世界和社会以及不同人群的理解更加多维，立体，还是值得关注的。」</p>
<hr>
<h4 id="读完了大学依然是社会的底层，那读书的意义是什么呢？">读完了大学依然是社会的底层，那读书的意义是什么呢？</h4>
<p>你觉得读完大学依旧是社会底层，还在地狱呆着。<br>
实际情况是，你要是没读大学，你是在地狱三层呆着，读完大学可能就到了人间了。<br>
只不过你天天盯着飞在你头上的人看，看不到自己脚下还有无数不如你的人，所以你觉得自己是最底层罢了。</p>
<p>人对自己拥有的，很难察觉。<br>
但对自己没有的，却异常敏感。</p>
<p>健康的人，不会觉得健康是财富。<br>
耳不聋眼不瞎，会识字，会玩智能手机，微信，会用office，会骑电动车，你觉得这算不算技能？</p>
<p>我虽然经常写文章的时候，会自嘲一句：我在十八线小县城的底层生活，但其实我知道还有更底层的人存在！</p>
<p>你觉得社会底层的人从事什么职业？送外卖？流水线？送快递？在工地当农民工？<br>
No，有很多人连这些工作也没办法干，这个群体是过亿以上的人群。</p>
<p>没错，很多人不屑干的这些工作，有无数的人想干都没办法干，因为身体各种残疾，甚至连去大城市的机会都没有，不知道怎么样用智能手机，不知道怎么样买高铁票。</p>
<p>这些人永远不会在知乎发声，因为他们连打字都不会。<br>
但你可以透过抖音，看看那些穷乡僻壤的地方，他们的身影偶尔会出现在视频的背景中。<br>
一个巨大的群体，却从来没有资格在互联网发声的群体。</p>
<hr>
<h4 id="你在知乎上得到了什么？">你在知乎上得到了什么？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/31307297/answer/96414268614">https://www.zhihu.com/question/31307297/answer/96414268614</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>我生活在一个十八线小县城的社会底层，周围人大多数都是初中学历的人，我也是。<br>
我自学了一些编程皮毛，周围人大多数从事一些电焊、厨师、快递、外卖员、在工厂打工的工作。</p>
<p>我以前就是逛QQ空间，百度贴吧，还有一些文字论坛，大概在2016年左右，我无意之间看到一张截图，截图中的文字有理有据，让我读起来非常舒服，写得真TM好啊。</p>
<p>后来我时不时在互联网中就能发现几张这样的截图文字，直到某天我发现了图片上的一个水印：知乎。</p>
<p>我纳闷：知乎是什么？之乎者也？一个人的网名？一个叫知乎的作者？<br>
我便在互联网中第一次搜索「知乎」这两个关键字。</p>
<p>它原来是一个网站，是一个app。<br>
我下载安装以后震惊了……</p>
<p>天啊，这世上竟然会有这么好的App，这上面的文字妙不可言，字字珠玑。<br>
你们不知道我当时有多么激动和难过：「激动的原因是：怎么这里的人说话那么清晰，有逻辑，通透，一针见血。难过的是，我竟然今天才发现这个app，我到底错过了多少，我以前看得那些文字和知乎上这些文字比起来简直是一坨屎，原来我以前一直是吃屎的啊。」</p>
<p>我如饥似渴，除了偶尔玩游戏，看电影，几乎所有的业余时间都用来刷知乎。<br>
当我在这里第一次读到「楼梯上的灵感、知识的诅咒、幸存者偏差、费曼学习法」等概念时，脑子里面迷迷糊糊，似乎曾经我很多抓到过，思考过，但想不太明白的一些事情突然清晰了。</p>
<p>我顺着自己求知的本能不知道读了多少……</p>
<blockquote>
<p>你有什么想说的秘密？<br>
亲人突然离世是什么体验？<br>
年纪轻轻得了癌症是什么滋味？<br>
遭遇过校园暴力的那些孩子长大以后会怎么样？<br>
被同性恋骗婚是什么体验？<br>
你身边经历过什么邪门的事情？<br>
如何正确的减肥？<br>
怎么样还原魔方？<br>
买什么打印机好？<br>
计算机专业就业前景怎么样？<br>
宗教的意义是什么？为什么现代科学这么发达，依然还有人相信宗教？<br>
这个世界上真的有辟谷，有特异功能吗？<br>
你认识陷入赌博的人后来怎么样了？<br>
毒品可以戒掉吗？<br>
怎么治疗xxx病？<br>
宇宙里有什么细思极恐的事？<br>
大海深处有什么？</p>
</blockquote>
<hr>
<p>几年前，我小舅子走路一瘸一拐，我问他怎么了，他说长了「鸡眼」，治了一个月还治不好，越来越严重。</p>
<p>基于我个人曾经看病的经历，遇到过几个庸医误诊过我的病情，以至于我对很多医生有一种本能的质疑，还有一次我在三甲医院看到曾经班上的学渣穿着大白褂的时候，我很难相信这些医生说过的话，我觉得这些人简直草台班子。</p>
<p>我们当地的医院腐败极其严重，会开很多没用的药，光明正大问病人索要红包等，这些都是当地人每个人都知道的事情，哪怕正常生个孩子，至少要送1000元的红包。</p>
<p>因此我很难尊重这些人。<br>
我敏感的洞察力透过他们的肢体语言和微表情，我看不到一个医生和护士的职业操守，我觉得他们看待病人的眼神就像一个商人打量进店的顾客穿着，琢磨着从这个身上能榨出多少钱来。</p>
<p>当然我相信，不是所有的医疗工作者都是如此，但好医生，我觉得不多。</p>
<p>因为这种创伤记忆加上好奇心，我让小舅子脱了鞋子，我仔细看了看他的脚。<br>
看完以后，他穿上鞋子走了，我打开知乎搜索有关鸡眼的文章，第一篇出来的就是丁香医生的文章：「跖疣很容易被误诊成鸡眼，这二者的区别是什么？」</p>
<p>于是我告诉小舅子：「你被误诊了，你是跖疣，赶紧换一个医生按照跖疣的方案治疗。」<br>
他就换了医生，没过多久，治好了，可以正常走路了。</p>
<hr>
<p>有段时间，我们当地很多人做投资：「<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=%E4%BF%84%E7%BD%97%E6%96%AF3M&amp;zhida_source=entity">俄罗斯3M</a>」，一个叔叔非要拉着我妈干，一个月就给30%利息，很多人都尝过甜头了。</p>
<p>于是我上知乎搜索有关3M的文章，一位答主引用了百度指数以及过去类似庞氏骗局跑路的时间规律，他有理有据的分析：以目前的百度搜索指数（折线图），大概一个星期就会跑路。</p>
<p>我完全被这篇文章说服了，对我妈说：「千万别投资了，马上就跑路了。」<br>
我妈以及他身边的人根本不信我，甚至我妈那些朋友嘲讽我，话外话里阴阳怪气我：「永远不懂抓住机会赚钱的穷逼，怪不得翻不了身，一直活在社会底层。」</p>
<p>但我妈看我很认真严肃，犹豫了几天。<br>
果然几天后，网站无法提现了，提示升级维护。</p>
<p>那些人也没当回事，直到第二天，第三天还是无法提现时，许多人慌了。<br>
因为他们赚到钱尝到甜头以后，你以为他们会就止于此吗？No，他们的贪婪完全被激发了，会追加投资。最近几年，我听说了身边不少人为了在网上兼职赚钱结果被骗了钱，我发现这些套路都是惊人的相似：先给一些甜头，激发人性了贪婪，这些人就完全失去理智了。</p>
<p>甚至有的人不仅上过一次当，而是好几次，我一直无法理解这些人的脑回路，想不明白这些人难道就没有分辨能力吗？吃过一次亏还是无法记住这个教训吗？</p>
<p>随着我对这些人的深入观察和思考，最后发现：原来有些人的脑回路和我天生区别很大，这使得他们很难免疫上当。<br>
具体有关这些人思维模式的分析，我在其他文章中谈过。</p>
<hr>
<p>有一次，我无意刷知乎，突然看到几行字，武汉出现了不明肺炎传播很恐怖，过一会我再刷，不见了，被删除了。出于敏感，我立马跑到<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=Youtube&amp;zhida_source=entity">Youtube</a>上去查相关信息，瞬间天塌了，还有几天就是除夕了，难道世界末日要来了吗？</p>
<p>在加上早几年我就看过韩国电影<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=%E3%80%8A%E6%B5%81%E6%84%9F%E3%80%8B&amp;zhida_source=entity">《流感》</a>《极度恐慌》等电影，以及<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=%E3%80%8A%E9%87%8D%E5%90%AF%E5%AE%B6%E5%9B%AD%E3%80%8B&amp;zhida_source=entity">《重启家园》</a>等小说，还有各种丧尸的电影，于是我赶紧对身边人讲：「今年别过年了，千万别去超市买什么年货和对联了，要来全球瘟疫了，根本控制不住的，甚至就是历史上最大的一次瘟疫，搞不好世界末日了，赶紧屯粮。」</p>
<p>别人沉浸在过春节的气氛中，在超市买各种鱼，水果，春联，灯笼等年货。<br>
我却像个逃命的人，躲着人群，匆匆去了批发市场买了挂面，蜡烛，电池，盐，方便面，榨菜，大白菜，维生素C片，八宝粥，橘子罐头，火腿肠，矿泉水，创可贴，应急手电，还把家里几口大水缸全部囤满了水。（这几口大水缸是我小时候奶奶和母亲腌制咸菜，存储粮食，囤水用的，随着生活条件变好，已经很久没用了，里面很脏。我都一一搬出来，用水冲干净，刷子刷干净。）</p>
<p><img src="https://pic1.zhimg.com/80/v2-2dd1edc1a319a30dd82caf65bea1cd8f_1440w.webp?source=2c26e567" alt="img"></p>
<p>图是网上随便找的</p>
<p>我算好了院子里几口人所有的食物消耗，每天定量多少，大概可以支撑几个月，维持基本的营养均衡，没办法，这就是我一个初中生所有的知识储备水平以及财力支撑所能想到的应急方案，我当时也没什么钱，不然我还会购买发电机，汽油，野外求生包，以及各种常见药片。</p>
<p>我还准备好了防身武器（一把铁锤和斧头），对一脸懵逼的母亲和父亲说：「<strong>准备好迎接世界末日吧，几个月以后说不定整个经济会瘫痪，我们的食物要是消耗干净了，等外边的人死差不多了，我们就要出去找食物了。可能用不了半个月，我们就要面临没水没电没网的日子了。</strong>」</p>
<p>我脑子里面已经出现了各种画面，都是曾经看过的《末日小说》还有美剧<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=%E3%80%8A%E8%A1%8C%E5%B0%B8%E8%B5%B0%E8%82%89%E3%80%8B&amp;zhida_source=entity">《行尸走肉》</a>《生化危机1~4》，当时的我心里感叹：「<strong>他奶奶的，没想到小说和电影里面拍得桥段竟然成真了，这个世界真荒谬啊，真TM刺激。」</strong></p>
<p>你们猜猜我家人听我说了这些以后，什么反应？<br>
我妈和我爸一脸懵逼，他们觉得儿子是不是疯了？我儿子疯了！马上过年了，我儿子竟然疯了，胡言乱语，到处说什么要爆发全球大瘟疫了，会死很多人。</p>
<p>我还给小舅子发了信息，告诉他赶紧屯粮，准备好防身武器，把大门锁好，今年别过年了，千万别去人多的地方了，因为病毒可能已经扩散了，毕竟是春运啊，什么狗屁贴对联走亲戚，还过个毛年啊。</p>
<p>我就像电影<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=%E3%80%8A%E4%B8%96%E7%95%8C%E6%9C%AB%E6%97%A52012%E3%80%8B&amp;zhida_source=entity">《世界末日2012》</a>中的那个预警者：</p>
<p><img src="https://picx.zhimg.com/80/v2-0b268f38310ccea3cb2091438a79c09c_1440w.webp?source=2c26e567" alt="img"></p>
<p>《电影：（2012世界末日）中预警者的截图》</p>
<p>可我爹妈都觉得我疯了，我说：「求求你们相信我一次吧。」<br>
就这样看似平静过了几天后，一过完年，立马下令全国封城。<br>
我妈这时才明白：「我儿子没疯，原来世界末日真的要来了。」</p>
<p>封城确实封了，但我担心的断水、断电、断网并没有发生，也没有出现什么社会秩序崩溃，人们抢劫杀人。</p>
<p>我好像成了「跳梁小丑」，我的应急过度反应成了事后众人的笑谈。</p>
<hr>
<p>总之：自从我接触知乎开始，我时不时惊叹哇塞这个人说得好好啊，他怎么能用文字把我内心模糊的想法都说出来，简直是我的嘴替啊。 我模糊的，无数的文字帮助我清晰了自己的思维。我没想到的，无数的文字内容替我想到了。</p>
<p>我每天刷知乎，都觉得自己像个傻逼。<br>
没错，我在知乎上第一次看到了一个词：「傻B速率」，这是一个安慰鼓励我的词语。<br>
因为我天天都觉得自己是傻逼，整整几年啊，一个人每天都觉得自己是傻逼。</p>
<p>连续几年，我就是刷知乎，我根本不敢在知乎发表文字，因为我觉得自己这样的蠢货和无知者，有什么资格在知乎上发表我的文字，和他们那些优雅，充满逻辑辩证，引经据典的文字比起来，我的文字简直是一坨屎，全是支离破碎的身边统计学谬误。</p>
<p>但我看了那么多文字，就像吃了很多食物的大胖子，怎么可能不拉屎。<br>
于是当我实在憋胀的时候，就会写在朋友圈发表，不吐不快。</p>
<p>朋友圈的人秀吃，秀喝，秀买车买房，秀旅行，秀孩子。<br>
只有我一个人秀各种对生活中的观察和思考，秀我对人性的看法，秀我对某部电影的观后感，秀我读了某篇文章的感受。</p>
<p>你们以为我成了朋友圈大文豪了吗？并没有。<br>
还记得我这篇文章的第一段话吗？</p>
<blockquote>
<p>我生活在一个十八线小县城的社会底层，周围人大多数都是初中学历的人，我也是。 我自学了一些编程皮毛，周围人大多数从事一些电焊、厨师、快递、外卖员、在工厂打工的工作。</p>
</blockquote>
<p>我慢慢意识到，我朋友圈的这些人对文字没兴趣，超过几百字的文字，他们都没耐心看。<br>
他们可以看完几百万字的网络玄幻小说，但他们对有逻辑性的文字，哪怕只有几百字，他们会有生理性的厌恶本能。</p>
<p>他们可以连续刷几个小时抖音，他们也没有耐心看完知乎一篇2000字的文章。</p>
<p>我身边找不到第二个刷「知乎」的人。<br>
我越来越无法忍受身边的人说话，没有逻辑，身边几个人坐在一起，我听着他们说话支离破碎，双标，前后矛盾，概念不清，搞得我头昏脑胀，压根没办法把事情窜起来。</p>
<p>他们叽叽哇哇说了大半天，我经常一两句话概括，我说你不就是这个意思吗？干嘛那么啰嗦呢？<br>
他们说：「对对对，我就是这个意思。」</p>
<p>他们的表达中总是出现各种：「就是那个，我就是这个意思……反正，总之就那样。」<br>
他们的微信聊天记录：「几乎没有超过三行字以上的描述，和别人交流要么就是发语音条，要么就是发视频。」</p>
<p>我能看到他们的潜意识，看到他们的双标，但他们自己看不到。<br>
当我说出他这个想法有问题，有逻辑错误，将来遇到XX事，肯定会打脸，你之所以坚持这么想，是因为你缺了一个XX经历，只要你经历过后，你这个想法就会改变。</p>
<p>他们根本无法理解我说过的话。<br>
我看着他们在我面前，说一些低劣的谎言，浑身都是BUG，他们却把这种说谎的艺术自诩成社会上的人情世故，这是情商高，还说我是一个死脑筋，抠字眼的人。</p>
<p>我看着他们说着那些一下子就能戳穿的谎言，欺骗身边人，忽悠顾客，甚至身边出了两个卖保健品的人靠着忽悠老头老太太买了房，买了车。</p>
<p>我越来越看不懂这个世界了，也看不懂他们了。<br>
我明明曾经把这些人视为朋友，我曾经也和他们在一起吃饭喝酒，我们一起玩游戏，一起看小说，一起称兄道弟，为什么我如今和他们竟然正常沟通说话都成了一种奢望。</p>
<p>为什么我一听他们说话，我就头疼，厌蠢症压不住的发作，血压都在飙升，我感觉自己呼吸都困难，我觉得自己好像在猪圈里生活。<br>
他们也越来越讨厌我，觉得我思维怪异，像个怪胎，脑子坏掉了，不正常，还说我闷在家里不出去与社会接触，已经废了。</p>
<p>我越来越孤独，和所有的家人，朋友，我都没办法沟通了。<br>
于是我在网上加了一些微信宗教群，我在里面自言自语诉说自己的各种看法和观点，不知不觉就打了几万字，别人在微信群说话，都是一行字，两三字，我像刷屏一般，一发就是一大坨。</p>
<p>他们攻击我，对我说：「你不能简单点吗？太喜欢长篇大论了，天天刷屏，谁有耐心看你那些又臭又长的文字。」</p>
<p>于是我退群了，干什么都是一个人。<br>
当我退群后，过了一个星期，微信上突然有个人加我：「我很喜欢看你的文字，太精彩了，你的逻辑太好了，分析什么问题，环环相扣，一针见血说出事物的本质，我能看看你写的其他东西吗？」</p>
<p>我当时想掉眼泪，这件事发生在我31岁。<br>
她比我大20岁，花了两三个月时间，她几乎看完了我写下的几百万文字。</p>
<p>她感叹：「你脑子里面到底装了多少东西啊，生来病死，衣食住行，对世界，经济，国家，宗教，哲学，心理学，两性关系的思考，带给我很多新的视角和启发。」</p>
<p>她鼓励我不要隐藏这些文字，把这些文字发到互联网上吧。<br>
于是我注册了「今日头条」，发了几十篇，几千人关注了我，赚了几百元。</p>
<p>可由于傻逼速率的原因，我发现自己写下的文字，过段时间回头再看，就像一坨屎，完全看不下去，我这写得什么狗屎玩意啊，简直是误人子弟，于是我统统删除了，把号都注销了。</p>
<p>她后来和我渐渐也没了联系，我又进入了一个人的状态，很是孤独，而且我越来越发现她的愚蠢。<br>
我推荐她买「支付宝的相互保」，很便宜，一个月才扣几元钱，简直是最有性价比的保险产品，史上最便宜的重疾保险，遇到重大疾病就可以赔付30万，她竟然觉得卖保险的都是骗子，不相信我的话，觉得我是在忽悠她。</p>
<p>她挺喜欢看电影，我问她看完电影有什么感受，你最喜欢哪一部？<br>
她支支吾吾什么都说不出来，最后说了句：「我就是随便看看，我没有你看完电影的那些感悟。」</p>
<p>到了后来，我发现她记不住我说过的很多话，我对她越来越没耐心。<br>
但是毕竟她是第一个走进我内心，愿意倾听我的女人。<br>
所以我很撕裂：我既依赖她，又觉得她太笨了。</p>
<p>总之她也觉得我说的那些话越来越不通俗易懂了，越来越抽象了，慢慢就没联系了。</p>
<p>那时有个APP很火，<a href="https://zhida.zhihu.com/search?content_id=712398462&amp;content_type=Answer&amp;match_order=1&amp;q=Soul&amp;zhida_source=entity">Soul</a>，遇见懂你的灵魂伴侣，Soul。</p>
<p>因为很孤独的原因，出于好奇，我下载了那个APP，我就在上面写日记，写自己每天脑子里面的各种想法。<br>
结果有几篇成了爆款，系统推送了。</p>
<p>于是我的私信爆炸了，全国各地的女人搭讪我，向我表白，系统都不允许别人和我私信了，想要给我发信息，必须得花钱送礼物才可以对话。</p>
<p><img src="https://picx.zhimg.com/80/v2-032203589c462b3ae272232516b49cb5_1440w.webp?source=2c26e567" alt="img"></p>
<p>她们有的是高中老师，有的是公务员，有的是初中语文老师，有的是外贸从业者，有的是护士，有的是公司领导，这些人基本都读过大学。</p>
<p>她们说：「好喜欢我的文字，总能把她们内心的想法说出来，好像遇见了世界上最懂她们内心世界的男人。」</p>
<p>我受宠若惊，诚惶诚恐。<br>
要知道现实中的我身边这些初中毕业的女人，她们对我都不屑一顾，她们觉得我不喝酒，不会打牌，整天窝在家里，不与人接触，穿衣打扮土里土气，根本就不是一个正常的男人，在她们眼里，瞎了眼的女人才会喜欢我。</p>
<p>而网上一下子这么多女人给我发私信，论学历，论收入，完全吊打我身边的这些女人。<br>
这种巨大的割裂，让我感觉好不真实啊。</p>
<p>这些女人和我聊什么内容，她开个头，甚至她说完第一句话，我就能猜到她第二句，第三句话，第四句话要说什么，我总能抢先说出她内心的话。</p>
<p>甚至当她们话到嘴边不知道下一句如何说卡壳时，我立马接上话，你要表达XXXXXX。<br>
她们就非常兴奋开心，惊讶道：「对对对，你简直是我肚子里面的蛔虫，我想什么，你都知道，而且你这个词语用的真好啊，这个词语我是第一次听到。」</p>
<p>我说：「因为我能感觉到你逻辑运行的轨迹，你是一个有逻辑条例的女人，你提供给我的信息足以让我感知到你真实完整的想法。」</p>
<p>后来我注销了Soul，离开了那里，因为我太累了。<br>
也是那次经历让我明白了一件事：「为什么我在低学历的人群中，如此被他们厌恶讨厌，反而越是学历高的圈子，似乎对我蛮欣赏的。」</p>
<p>我也意识到了自己身上似乎有一个很多男人没有的能力：「我似乎可以带给很多高学历的女人一种叫做情绪的价值，而她们一旦品尝过这种价值，就会对我产生迷恋、崇拜，占有欲的想法。」</p>
<p>我在Soul上遇到一个美女，是传媒公司的小领导，车房自己都有，现实追求者众多。<br>
但她就是一个都看不上，单身多年。</p>
<p>可我看了她在Soul上写的文字后，似乎就触摸到她的灵魂，彷佛能感受到她的喜怒哀乐。<br>
于是我把从她文字中感受到的内容，写成了一堆读后感，发给了她。</p>
<p>她震惊了，每天晚上11点睡觉的她破天荒和我聊到了凌晨4点。<br>
她说：「我害怕你，我不敢联系你了，我想要拼命抓住你，不行了，我要是再和你聊天，我简直无法控制自己了，我的冷静，我的理性在你面前消失，我的思维完全被你带着走，我在现实中，从未遇见过一个像你这样的男人。」</p>
<p>类似的事情，发生过几次。<br>
在没有这些经历之前，我一直以为美女都会嫁给有钱人，但是我想不到这个世界上有一些美女，她们经济独立，她们最渴望的是男人懂她们的内心世界。</p>
<p>只要男人懂她们的内心世界，她们对男人其他方面的要求会宽松很多。</p>
<p>在那个男人破不开她们内心的壁垒之前，她们就是高冷，拒人以千里之外的，她们宁缺毋滥，并不是所有的女人都那么俗气，就想着彩礼，嫁给男人让男人养活买买买。</p>
<p>其实我并没有做什么，我只是听她们讲一些童年的事情，甚至生活中的一些小事，我就会本能分析：「你之所以会有这样的想法，情绪，反应，是因为你是一个什么样子的人，你不仅对这件事会如此反应，假设你在生活中遇见另一件事（XX），看似这两件事没关系，但你依旧会作出一样的反应，这与你天生的敏感还有逻辑有关系，也与你原生家庭父母中从小对你的影响有很大关系~~巴拉巴拉，我可以说很多。」</p>
<p>她就会陷入沉思，琢磨我说过的话，接下来就会非常认同我的分析。</p>
<p>这些经历，促使我思考，为什么有人喜欢我，有人厌恶我，结论是：「越是擅长用逻辑和理性思考，抽象思维好的人，越喜欢我。越是情绪化的人，对物质欲望比较强，喜欢感官刺激的人，对我越厌恶。如果对方是异性的话，就会激活一种叫做智性恋的爱情情绪反应。」</p>
<p>你们以为我会止步于此吗？<br>
并不会，确实有那么一段时间，我沉溺在桃花运中沾沾自喜，那也是我人生最「自信」的一段时间，甚至用自信这个词语都不够形容，应该叫「得意膨胀」，原来我还是蛮优秀的，原来喜欢认同我的人还是很多嘛。</p>
<p>我后来把自己的这些感悟和经历，也写成了几篇文章。<br>
直到某天，我看到一些《PUA女性，如何骗炮，骗女人钱》的群里流出来的一份培训资料。<br>
我发现：「这TM和我的感悟竟然一模一样。」</p>
<p>有一次家人看《爱情保卫战》，我跟着看了一会，家人特喜欢涂磊，感叹他的语言犀利。<br>
在涂磊没有评论之前，我就说出了自己的看法，结果涂磊和我说得几乎一样。<br>
家人用诧异的眼神看着我：「你以前看过这一集吗？你怎么知道涂磊要说什么啊？」</p>
<p>在家人的眼里，我还是那个怪胎，与社会格格不入，每天不务正业，和废了一样，连家门都走不出去，被世俗排斥。</p>
<p>傻逼速率还在我身上进行，只是从曾经的一天几次，变成了几天一次。<br>
现在连读过普通大学的女人，也觉得我是神经病了。</p>
<p>上一次和我聊得很愉快的一个女人，是清华大学毕业的人。<br>
她对我的形容是：「一般人会受不了我的价值观，开始评头论足，但是你却可以理解，你有非常不一般的洞察力，虽然你学历不高，但我觉得你身上有一种一般人没有的聪明或者说是一种通透的智慧，你的共情能力很强。而且你的智商并不低，你要是当初有一个好的成长环境，完全可以考上大学，走出那个小县城的。」</p>
<p>如今，在很多读二本和一本的大学人眼里，我已然是一个思维怪异，不正常的男人。</p>
<p>当我有天看了一篇文章：<br>
<a href="https://www.zhihu.com/question/27279221/answer/1660887879">智商差距过大是否真的无法交流？</a></p>
<p>回忆自己过去的种种经历，难道我智商变高了？智商不是固定不变的吗？<br>
我只是随着摄入信息的积累，认知和大众越来越不兼容罢了。</p>
<p>但不论是认知还是智商，当与周围人差距越来越大时，若是无法找到适合自己生存新的社交圈，这个人必然会成为孤独的一个人，不是因为我喜欢孤独。</p>
<p>我带着8岁的女儿在一小面馆吃饭时，当她问我一些为什么的时候，我会即兴编造一些小故事回应她。<br>
后来有次妻子带女儿去那个小面馆吃饭，她回来告诉我一件事：「今天面馆的老板娘对我说：你老公好有才华啊，上次你老公带着孩子在这里吃饭，我读初中的女儿也在旁边那个桌子吃饭，她听到你老公和你女儿的很多对话。我女儿对我说：妈妈，那个叔叔回应她女儿为什么的时候？他讲的每个故事仔细想下去，都有很深的哲理性。」</p>
<p>当我听妻子说了这件事后，开心了很久，生活中为数不多的开心，被人「看见、看懂」的感觉。</p>
<p><img src="https://pic1.zhimg.com/80/v2-4f982bf18f92b801b835676983bb9aef_1440w.webp?source=2c26e567" alt="img"></p>
<p>电视剧《三体》截图，汪淼和他的女儿</p>
<p>我女儿就读的小学，教她的老师，大部分学历就是大专，只有一个比较高的学历，是从省城来的老师，学历研究生。</p>
<p>我女儿回家后经常对我说：「爸爸，你以前给我讲过的一些道理和学习方法，今天我们班上的XX老师也说了。」</p>
<p>我听了以后呵呵一笑，内心无奈道：「就算那个老师讲了又能怎么样呢？以我女儿的智商，她无法真正理解那些话。当我教女儿一道数学题，我让她读题时，读到第三句话就想不起第一句话的时候；当我发现女儿从二年级就开始学九九乘法口诀表，学到四年级了，还总是背错写错的时候；当我带着女儿出门，这个小城，我骑着小踏板摩托，她就站到前面，从小到大不知道带她走了多少次的路，她依然记不住路的时候，我就知道女儿不是应试教育的那块料。」</p>
<p>女儿刚出生时，我对她充满了期待，为父要把自己这些年从网上学会的那些方法全部教会你，让你将来长大离开这个小县城，进入一个聪明人的圈子，那里的人讲逻辑，说话能说清，沟通效率高，不要像父亲一样活得如此孤独。</p>
<p>可是那些我曾经引以为傲的学习方法在她身上几乎无效。<br>
我女儿天生就特别喜欢感官刺激的事物，对抽象刺激的信息一点兴趣都没有。</p>
<p>她好像和我弟弟一样，总是控制不住自己一次次偷吃零食。<br>
那些无聊的动画片，她似乎永远看不腻。<br>
上学不是忘记拿这个，就是忘记拿那个，甚至连老师布置的作业是什么也不知道。</p>
<p>和我小时候一点都不一样。<br>
我小时候一个东西只要看过以后，就不想再看第二遍，觉得既然知道了，再看一次的快乐在哪里？<br>
而且我看过的动画片和电影，我可以讲给别人听，很多台词我都能记住。<br>
但她们看完以后，脑子空空，只能说个十几句话默默的大概，大量的细节丢失。</p>
<p>所以我特别讨厌别人剧透，一剧透，所有的快乐都没了，对未知的期待都没了。<br>
但是我发现，越是低智商的人，越喜欢剧透，越喜欢一个东西反复重复看。</p>
<p>而我总是很容易腻味。</p>
<p>一句话我对别人重复三次，别人还记不住，我就这辈子不想再和这个人说话了，难道是猪脑子吗？一个事情强调三次，还是重复犯这个错误。</p>
<p>然而我身边几乎全是这样的人，他们辛苦忙碌工作，喝酒应酬，业余时间：大保健，打牌，扑克，刷抖音，斗地主，最喜欢两件事：搞钱，攀比，要么溜须拍马跪舔有钱有权的人，要么瞧不起谁谁谁是个穷逼。</p>
<p>这些人没有时间观念，总是迟到，答应你的事情总是遗忘，开口全是模糊的词语。<br>
他们从来不觉得自己是一个没有诚信的人。</p>
<p>我现在已经明白女儿为何如此和我不同了，也理解身边的人为何和我不同了。 我从曾经被他们贬低，自卑，到后来我越来越瞧不起他们，再到后来我能理解他们，但他们却对我非常鄙视。  他们不是鄙视我这个人，他们是鄙视所有不如他们有钱的人。 我早已习惯了这种鄙视的眼神，习惯了他们在我面前秀优越感。</p>
<p>曾经有段时间，我特别喜欢预测一些人的行为。<br>
但我发现世界的构成很复杂，一个微小的扰动，一个人就走上了另一条路。<br>
甚至某个人会因突然的意外残疾，死亡。</p>
<p>我也不敢那么傲慢，自以为自己可以看懂一切了。</p>
<hr>
<p><strong>我像那条52hz的鲸鱼。</strong></p>
<blockquote>
<p>它叫Alice，它1989年被发现，从1992年开始被追踪。在其他鲸鱼眼里，Alice就像是个哑巴。它这么多年来没有一个亲属或朋友，唱歌的时候没有人听见，难过的时候也没有人理睬。原因是在我们的空气中，这只孤独鲸的波长只有6.6米，而正常鲸的有17~23米，它的波长一直是与众不同的。</p>
</blockquote>
<hr>
<p><strong>人人生来都是孤独的灵魂，谁也无法真正感同身受理解一个人。</strong></p>
<p>现在的我，时常觉得活着越来越没意思。<br>
别人感兴趣的事情，我似乎一点兴趣都没有，各种对物质的欲望消失了，干什么都没动力。<br>
厌恶人与人之间的虚伪和勾心斗角。</p>
<p>以前我也是和别人一样，靠攀比的驱动力而奋斗。<br>
当攀比的驱动力解构后，找不到新的驱动力，整天活得像行尸走肉。</p>
<p>所有的刺激，都会随着边际递减效应越来越麻木。</p>
<p>就像《鱿鱼游戏》中的吴一男说：「身无分文的人和家财万贯的人的共通点就是人生毫无乐趣可言。为什么呢？因为身无分文的人什么都买不起，啥也享受不到，只能干瞪眼，所以人生毫无乐趣；而家财万贯的人则是因为什么都可以买到、啥都玩腻了，所以人生毫无乐趣。当一个人物质极大丰富，要是没有更崇高的目标，必然会沦落到无限追求生理感官刺激！」</p>
<hr>
<p>我的味蕾对食物早已厌倦，吃，只是为了活着。<br>
电影早已看腻了，知乎上很多文章也没兴趣看了。</p>
<hr>
<p>我想：这就是我通过知乎直接或间接得到的。</p>
<hr>
<h4 id="你对不生孩子晚年会很凄惨的观点的看法？">你对不生孩子晚年会很凄惨的观点的看法？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/580078784/answer/97200683633">https://www.zhihu.com/question/580078784/answer/97200683633</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>我觉得这个问题很有趣:</p>
<p>其实人到了一定年龄，很多人都和父母聊过将来得了病以后要不要治的问题，老了以后不能自理怎么办的问题！</p>
<p>很多父母往往会说一句类似的话:「我要是真到了那天，别给我治，别往医院浪费钱，我就喝药自杀，我不会连累你们的。」</p>
<p>我父母也说过类似的话。</p>
<p>可知乎上很多网友也说:「我爹妈年轻时也说过类似的话，等老了真病了，躺在医院，让你借钱去治病，让你找医生，甚至明明一些已经宣判死刑，没有治疗意义的重疾，父母在那一刻好像求生欲拉满了，就像溺水之人拼尽所有的力气挣扎，想要活下来，Ta已经忘记曾经说过:我有天要是生病了，不治，不连累你们！」</p>
<hr>
<p>其实生孩子也是如此。</p>
<p>一些年轻人总是会说丁克，不婚不育，只谈恋爱，有的甚至提前就结扎了，几年以后，其中一方后悔了，甚至两个人都后悔了。</p>
<p>还有的人年轻时生了一个孩子，老了以后后悔只生了一个。</p>
<hr>
<p>之前我在知乎上看过有人说北京一些家属院的老人很孤独，这些人只生了一个孩子，把孩子送到了国外读书定居，老了以后，一个人孤独的活着。他年轻时嘲笑别人的孩子没自己孩子出息，老了以后羡慕别的老人和自己的孩子孙子逢年过节时一家其乐融融。</p>
<hr>
<p>有的父母天天逼孩子学习，往死逼，后来孩子自杀了，请问这样的父母会不会后悔呢？我们当地有个酒店老板的儿子，考上大学以后自杀了。遗书的内容是:「你们想要的大学给你们考上了！」</p>
<hr>
<p>之前我看过一些基督教传教书籍，比如《游子吟》和《认识真理》，作者为了论证人死以后，灵魂是真实存在的，是真的存在天堂和地狱，所以人要趁活着相信上帝，悔改自己的罪。作者如何证明呢？就是引用了一些濒死体验，书中大概是这样描述的:「有些人在医院抢救时，从死亡抢救回来以后，极其恐惧，拼命求医生拯救自己，因为它的灵魂去到了地狱，见到了极其可怕的事情。刚开始抢救的医生不以为然，后来随着抢救的病例增多，听那些病人描述死亡以后看见的一些可怕或美好的事……这个医生收集了很多样本……」</p>
<p>请问这些人在那一刻，会不会后悔年轻时没有相信上帝呢？没有接受宗教呢？</p>
<p>我接触过一些不同的宗教徒，虽然彼此的宗教观不同，甚至水火不容，但是在自杀这件事的观点惊人相似:「自杀以后，这个人灵魂的结局会很糟糕，比那些被他杀，意外死亡，病死的人要可怕的多。」</p>
<p>很多人都希望推行安乐死，但另一股阻止安乐死，或者堕胎的群体，恰恰与宗教有很大关系。</p>
<p>全世界信仰宗教的人有多少呢？</p>
<hr>
<p>我外婆和外公，年轻时经常吵架，互相咒骂对方去死。外公死了以后，外婆得了脑梗，在农村的土坑上坐了七年，她时常看着窗外发呆，有一次我听到她喃喃呓呓一遍一遍叫着外公的名字。</p>
<hr>
<p>我弟弟和我弟妹从结婚以后就几乎天天吵架，大街上路过的人都能听到。有一天我弟醒来泪流满面，哭着对我说:「哥，我梦到xx（我弟妹的名字）死了，我一次次叫她，她都没反应，我崩溃了，我后悔了，我后悔没有对她好！」</p>
<p>在那天，我弟没和我弟妹吵，很温柔。但没过几天，又继续往死吵，又过了三四年，已经离婚了。</p>
<hr>
<p>我舅妈刚结婚的时候，喜欢打扮自己，化妆，烫发，很时髦。我舅舅觉得这是不守妇道，非常生气，严令禁止，从那以后我舅妈几乎再也没化妆，没穿过一件自己喜欢的衣服，一辈子就是我舅舅说什么，她听什么。</p>
<p>等我舅妈死了以后，我和舅舅坐在院子里，舅妈就躺在我身后的棺材里。舅舅陷入了回忆，诉说舅妈的过去，说着说着开始哽咽，流泪，他说:「我太自私了，我从来没体谅过她做女人的快乐，我只考虑自己的感受，她自从和我在一起后，她都没烫过发，穿过自己喜欢的衣服！」</p>
<hr>
<p>类似的事情，我还可以写很多，包括我自己也后悔过自己的一些决定！</p>
<p>其实说来说去就一句话:「我们如何确定自己/他人做的某个决定，不会再将来的某一刻后悔。」</p>
<p>电影<a href="https://zhida.zhihu.com/search?content_id=712555482&amp;content_type=Answer&amp;match_order=1&amp;q=%E3%80%8A%E6%9C%AC%E6%9D%B0%E6%98%8E%E5%B7%B4%E9%A1%BF%E5%A5%87%E4%BA%8B%E3%80%8B&amp;zhida_source=entity">《本杰明巴顿奇事》</a>在敬老院，有人对巴顿说：「本杰明，我们命中注定要失去所爱之人，不然我们怎么知道他们在我们的生命中有多重要？」</p>
<p><img src="https://pic1.zhimg.com/80/v2-882cab589649e2e5c35fbedaa707bd2e_1440w.webp?source=2c26e567" alt="img"></p>
<hr>
<p>我们总会遗憾，也会后悔，无论我们做了什么样的决定，无论我们和谁结婚，无论我们是否生孩子，无论我们选择哪份工作。</p>
<p>因为得到即失去，失去即得到。</p>
<p>要真正消解这种后悔和遗憾，需要有超越性永恒的信仰。</p>
<p>因为所有的遗憾和后悔，其实追根溯源，都是因为人类会死亡。</p>
<p>类似问题的答案其实讨论的就一个问题:「如何真正原谅自己！」</p>
<p><a href="https://www.zhihu.com/question/280659978/answer/1993168089?utm_psn=1872249148209778688">如何坦然地面对人生中的离别？www.zhihu.com/question/280659978/answer/1993168089?utm_psn=1872249148209778688</a></p>
<p><a href="https://www.zhihu.com/question/19795293/answer/1323213160?utm_psn=1872251909781454848">死亡的意义是什么？www.zhihu.com/question/19795293/answer/1323213160?utm_psn=1872251909781454848</a></p>
<hr>
<h4 id="发现我一生难以触及的文笔-DeepSeek-十几秒就可以生成上千字，感觉努力提升文笔没有意义，怎么办">发现我一生难以触及的文笔 DeepSeek 十几秒就可以生成上千字，感觉努力提升文笔没有意义，怎么办?</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/11067457870/answer/100385331380">https://www.zhihu.com/question/11067457870/answer/100385331380</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p><strong>我们来假设一下:</strong></p>
<p>你需要打官司，给你Deepseek，禁止聘请律师，你是否有信心？<br>
给你一道很难的数学题/物理题，你依靠<a href="https://zhida.zhihu.com/search?content_id=713192363&amp;content_type=Answer&amp;match_order=1&amp;q=DeepSeek&amp;zhida_source=entity">DeepSeek</a>，你能解出来吗？如何验证可靠性？<br>
让你开发一款软件或依靠Deepseek去写小说，每个月赚5000元，多久可以达到这个目标？可以写出像刘慈欣，余华，莫言一样的文学高度？<br>
让你现在利用Deepseek去股市投资，有把握盈利吗？</p>
<hr>
<p>百年前，识字，算数，便称得上文化人。<br>
70/80年代，开车是一项专业技能。<br>
90年代，打字员是一份正式职业。</p>
<p>这些曾经的技术壁垒，如今都已化作时代浪潮中的寻常浪花。AI技术的演进轨迹同样遵循此理——今天看来高不可攀的智能工具，终将成为明日的基础设施。</p>
<p>我不知道未来的AI能进化到什么程度，但你没发现吗？在现阶段，能使用<a href="https://zhida.zhihu.com/search?content_id=713192363&amp;content_type=Answer&amp;match_order=1&amp;q=Chatgpt&amp;zhida_source=entity">Chatgpt</a>和Deepseek前提恰恰是:</p>
<blockquote>
<p>1.你必须有相关专业知识。<br>
2.你可以把问题描述清晰。<br>
3.你还得有甄别对错的专业审查能力。</p>
</blockquote>
<p>你若只有小学数学水平，给你一道大学数学题，你连题目都看不懂，你也不知道怎么样告诉DeepSeek，就算你原封不动把题目输入进去，Deepseek给你一堆东西，你完全看不懂，请问意义何在？</p>
<p>以我们现在的大脑结构，就算Ai回答的答案100%正确，它可以告诉你如何用计算机编程，如何写小说，如何弹钢琴，如何理解法律条款，但阅读理解消化这些文字的过程，并不会时间减少，你依然得学习和思考。</p>
<p>Ai可以提升一个人的工作和学习效率，但它没办法让一个工地农民工一夜之间成为建筑师，也没办法让一个不懂代码的人，一夜之间学会计算机编程。</p>
<p>AI输出的知识需要人类心智的溶解剂才能被真正吸收。就像钢筋水泥不会自动组成摩天大楼，AI生成的代码、法律条文或文学创作，现阶段仍需人类的理解力与创造力进行重构。</p>
<p>它本质上，是一个有互动功能的高级搜索引擎，或者私人智能老师！</p>
<p>没有网络的时候，你需要咨询专业人士，或者去图书馆一本本翻专业的书，<strong>接下来自己阅读，分析，理解。</strong></p>
<p>有了网络，你可以利用百度和Google，然后一个个网站打开点进去看，<strong>接下来自己阅读，分析，理解。</strong></p>
<p>现在有了AI，你可以直接提问，它立马会给你一个答案，<strong>依旧得自己阅读，分析，理解。</strong></p>
<p>看到了吗？哪些时间减少了，哪些时间没变？</p>
<hr>
<p>现阶段的Ai，提升了很多专业人士的工作学习效率，当身边人不会利用它，你先会利用了，这部分节省出来的时间，就是你多赚的钱。</p>
<p>以前你是一天只能更新5000字的网络小说作者，现在可以一天更新3万字。<br>
以前你是一天只能阅读2篇文献的人，现在一天能够阅读20篇了。<br>
以前你写一个程序，需要一个月，现在两天时间搞定了。</p>
<p>而市场给出的价格和薪水，还是按照以前的时间成本计算，这就是生产力带来的时间效率差。</p>
<hr>
<p>第一个例子:</p>
<p>我考上了公务员，去了某单位上班，里面都是大妈大爷级别的人，他们打字用一指禅，做Excel表不懂公式和VBA教程，上级也是一个老领导，上级布置的任务，他们每个星期需要三天时间才能做完，而我懂<a href="https://zhida.zhihu.com/search?content_id=713192363&amp;content_type=Answer&amp;match_order=1&amp;q=VBA%E7%BC%96%E7%A8%8B&amp;zhida_source=entity">VBA编程</a>，我三分钟搞定他们三天的工作，剩下的时间我就是像刘慈欣一样，在单位摸鱼写小说赚外快。</p>
<hr>
<p>第二个例子:</p>
<p>我是一名90年代，在县城就读五年级的小学生，我很早就学会了音标，自然拼读还有宫殿记忆，思维导图等很多技巧。这些方法来自我的母亲从北京买回来的DVD教学光盘，县城的其他同学都没有这些信息源，虽然他们智商和我差不多，但因为技巧的不同，我5分钟背一篇古诗，他们就得20分钟。我一天能背50个单词，他们只能背10个。</p>
<p>我还记得比他们牢固，遗忘速率慢。你说他们怎么和我竞争？这就是教育资源的差异性！</p>
<hr>
<p>第三个例子:</p>
<p>在飞鸽传书的年代，你是第一批掌握电报技术的国家，别人八百里快马传送军情的时候，你已经开始发电报了。当你拿着木棍和石头的时候，人家的大炮都轰过来了，这还怎么打？</p>
<hr>
<p>如今的Ai也是如此，在某些行业，如医生，律师，程序员，设计师，教师，公务员等职业，Ai已经可以节省大量工作时间了，在市场还没彻底反应过来的这段时间，你节省的时间就是多赚的钱，也就是信息差红利。</p>
<hr>
<p>不知道十年后，五十年后的Ai，又会发展成什么样子。</p>
<p>比起古人，我们生在这个时代，仅仅这几十年的时间，我们的生活细节一变再变。</p>
<p>从井水到入户的自来水管；从冬天生火做饭取暖到现在的微波炉，煤气灶，地暖，空调；从坐着马车，拖拉机，三轮，绿皮车出行到现在满大街的汽车，高铁；从出门看地图，找人问路到现在的全自动导航；从磁带听歌到如今的手机蓝牙耳机；从去图书馆查资料到现在一部手机，一台电脑查资料。</p>
<p>信息交互传播的速度越来越快，如此密集的信息碰撞，很好奇未来的科技会发展到何等境界，某天DNA会不会彻底解码可以自由修改了，那时的人类会不会寿命很久很久，是不是真的有天像电影《超验骇客》和小说《无限恐怖》中描述的那样，人类打开了基因锁。</p>
<p>婚姻，职业观，未来的社会又会出现什么样的社会伦理，未来的哲学家们又如何思考人的意义？</p>
<p>当未来的人类在星舰观景舱回望历史，孩子们也许会困惑于祖辈竟需要手动编程，就像我们惊叹古人用烽火传讯。</p>
<p>但在某个星光璀璨的夜晚，当他们的意识通过神经接口漫游银河时，也许会为人类在蒙昧时期点燃的智能火种而热泪盈眶。</p>
<p>我仿佛看见100年后:</p>
<p>22世纪的小学生在全息课堂翻开历史课本，「2023年」这个数字会像「1903年」之于我们一样。</p>
<p>那时的人类回望今天这个时代，就像我们驻足莱特兄弟试飞的小山坡。<br>
技术的发展总是先于大多数人类的感知。<br>
1945年三位一体核试验扬起的沙砾，要等蘑菇云升天才被确认为新时代的尘埃；<br>
<a href="https://zhida.zhihu.com/search?content_id=713192363&amp;content_type=Answer&amp;match_order=1&amp;q=%E5%9B%BE%E7%81%B5%E6%B5%8B%E8%AF%95&amp;zhida_source=entity">图灵测试</a>通过的瞬间，也不过是剑桥某个阴雨午后键盘的轻微颤动。</p>
<p>文明的年轮总在矛盾中生长。从智人第一次用燧石点燃火把，到量子计算机重构物质；从甲骨文的龟裂纹路，到神经网络的脉冲信号。</p>
<p>此刻我们正站在相似的时空褶皱里，无数人类看着DeepSeek对话框闪烁的光标，正在编织未来智能纪元的经纬线。</p>
<p>当莱特飞行器12秒的航迹划破长空时，围观者中既有欢呼的梦想家，也有紧攥《圣经》的末日论者。</p>
<p>每个技术奇点都会撕开认知的断层，就像蒸汽机车曾被认为会抽空人的灵魂，电报被指控会毒害少女的神经。</p>
<p>每次技术黎明都伴随着伦理的黄昏，每个智能奇点都暗藏着人性的考验。但正是这种永不停歇的自我超越，让人类在浩瀚时空中刻下独一无二的印记：我们不仅是工具的使用者，更是意义的缔造。</p>
<p>AI掀起的风暴终将归于平静，而那些在浪潮中始终紧握罗盘的人，那些在代码洪流里打捞思想珍珠，在算法迷雾中守护人文灯塔的探索者——才是文明真正的压舱石。</p>
<p>当我们的曾孙用<a href="https://zhida.zhihu.com/search?content_id=713192363&amp;content_type=Answer&amp;match_order=1&amp;q=%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3&amp;zhida_source=entity">脑机接口</a>瞬间调取此刻的历史影像时，或许会对2023年的焦虑报以宽容的微笑，就像我们看着1923年报纸上「汽车时速30英里会导致人脸变形」的警告哑然失笑，但这份微笑里必定包含着敬意。</p>
<p>因为我们人类就是这么一路走过来的。</p>
<hr>
<p>刘慈欣的短篇小说《朝闻道》中，有这样一个故事：</p>
<p>外星人排险者定期检测地球，突然有一天，排险者的警报响起，一级警戒。检测人员赶紧去调阅倒带，看看发生了什么，这么严重。</p>
<p>结果发现，是在37万年前，有个地球上的原始人仰望星空超过了预警阀值。</p>
<p>人类不解，为何这就触发了警报？排险者说：「这很难理解吗？当生命意识到宇宙奥秘的存在时，距它最终解开这个奥秘只有一步之遥了。」</p>
<p>很多人匍匐在地面前进，不知道天有多高，不知道海有多远。直到一个人偶然抬头，看见一丝一闪，泄露了天机。虽然不知道什么意思，但他会说：「看，那就是星星。」</p>
<hr>
<h4 id="你最近突然想明白了什么事情？">你最近突然想明白了什么事情？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/614213086/answer/106576641615">https://www.zhihu.com/question/614213086/answer/106576641615</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p><strong>我发现很多人都会陷入身边统计学的谬误，无法意识到自己的认识缺陷（信息茧房），这其中不乏一些高学历的人，也正因这一点，让我对一些高学历的人开始祛魅。</strong></p>
<p>我举几个例子：</p>
<p><strong>第一个例子：</strong><br>
某人教父母玩智能手机，教了几次父母就都学会了，别人网上吐槽自己的父母连电视遥控器都学不会，怎么样教都教不会，TA就会高高在上说：「是你对父母没耐心，不会教。」</p>
<p><strong>第二个例子：</strong><br>
某人的儿子考上清华大学了，此人在知乎上的教育话题下分享自己是如何培养孩子的，用了什么样的教育方法，总之一个中心思想：「<strong>你们的孩子考不上985，考不上清华大学，是你们的教育能力不行，是因为你们的孩子没有生在我这样的家庭中，没有遇到我这样的爸爸。</strong>」此人是<a href="https://zhida.zhihu.com/search?content_id=714429872&amp;content_type=Answer&amp;match_order=1&amp;q=500%E5%BC%BA%E4%BC%81%E4%B8%9A&amp;zhida_source=entity">500强企业</a>高管，自诩培养管理经验丰富，带过很多团队。他根本无法理解有的孩子就像没有记忆力和抽象能力一样。</p>
<p><strong>第三个例子：</strong><br>
我曾经在网上遇到过一个美女，我看了她的照片，大概穿衣风格是这样的。</p>
<p><img src="https://picx.zhimg.com/80/v2-ce4e5d752bc074d4b9ed460a92cac7f4_1440w.webp?source=2c26e567" alt="img"></p>
<p>我在十八线小县城长大，如果我们这里大街上有个女人这么穿，很多人会忍不住内心评价：「<strong>这女人不正经，不守妇道，狐狸精。</strong>」当然也会有很多男人上前搭讪，要个微信号什么的，甚至追求。</p>
<p>于是我忍不住对她说：「<strong>你这种穿着太开放了，感觉有点像KTV夜总会所谓的公主风格，感觉很开放~~（贬义）</strong>」<br>
人家不以为然说道：「<strong>我们这里的女人都是这么穿的，是你生活的地方太落后的缘故吧。</strong>」<br>
当时我想了想，她说的也许是对的吧，毕竟我们这里的经济很贫穷，确实经济越落后的地方，往往女性的衣服越保守是有一定道理的，也许我是在这样的环境中成长起来，所以我的思维非常保守封闭，当时的我对自己特无奈，脑子里面两个想法都在打架：「<strong>自己为什么如此封闭，为什么很难接受一个女性在大街上如此穿衣，可我又压不住内心的真实想法，就好像是一种天然的本能告诉我：这样的女人不正经，我的理性告诉我：女性的穿衣风格和正经不正经没有必然关系。但我的感性就是一次次涌出：这种女人不正经。</strong>」</p>
<p><strong>直到今天，我依然很难接受一个女人在大街上这么穿，只是我的理性能够控制自己不说出来，但微表情还是会带一种看（夜总会公主和有钱人小三）的感觉。</strong></p>
<p>后来有次我去了她的城市，一出火车站，我就在大街上扫视街上的人怎么样穿衣服，你们猜猜我看到的画面是什么？</p>
<p><img src="https://picx.zhimg.com/80/v2-36090d5167412f28a2c5341e1457d2b3_1440w.webp?source=2c26e567" alt="img"></p>
<p>我大概在她的城市大街上溜达了几天，看到类似TA那种穿衣服风格的女人，不超过3个。<br>
我很喜欢思考一些心理学和社会学现象，她难道是故意骗我吗？她难道不出门吗？她难道注意不到大街上那么多人和她的穿衣风格不同吗？她难道给孩子开家长会注意不到其他妈妈的穿着吗？她难道瞎吗？</p>
<p>后来我就这个问题深入思考，也找到了答案。<br>
人只会注意自己愿意注意的焦点。她长的漂亮，母亲也是比较时髦（洋气）的女人，所以从小就给她这样打扮穿着，这种审美已经像烙印一样烙在TA的深层意识中，TA要是不这么打扮出门，按照普通女人的风格穿，TA会浑身不自在难受。她嫁给了一个富二代，富二代身边的一些朋友的老婆们自然而然很多都是十指不沾阳春水，也喜欢打扮得比较时髦。 这个圈子的女人一年到头不会骑一下电动车，不会淋一滴雨，出门太阳伞，除了在旅游景区或某些消费商城，这类女人甚至根本不会出现在我图中的大街上，所以TA当初才会对我说：「<strong>我们这里的女人都这么穿。</strong>」</p>
<p>而那些家长会上的其他妈妈，她开车路上经过的无数骑电动车的宝妈的穿着，她压根屏蔽了，从来不会注意这类群体。<br>
包括她老公的车，在当地也算豪车了，但是她和她老公根本意识不到自己的车是豪车，认为自己开的车很普通，因为他们只会盯着比自己更贵的车看。</p>
<p>后来我还发现了一个有趣的现象，一般母亲是美女，孩子往往打扮也很时髦（洋气），如果你看到一张幼儿园小朋友的合影照片，某个小朋友的穿着比较时髦，大概率这个小朋友的妈妈就是美女。</p>
<hr>
<p><strong>第四个例子：</strong></p>
<p>我身边有些同学是<a href="https://zhida.zhihu.com/search?content_id=714429872&amp;content_type=Answer&amp;match_order=1&amp;q=%E5%9B%BD%E4%BC%81%E5%91%98%E5%B7%A5&amp;zhida_source=entity">国企员工</a>，在农民工同学面前哭穷说：「你一个月工资就七八千，我一个工资才4500，我赚的没你多，你比我厉害。」</p>
<p>农民的工作环境：「<strong>暴晒，粉尘，淋雨，噪音，潮湿，高空坠物，触电，断手断脚，机器夹伤扭伤，各种身体职业病，从来没有任何节日福利，有个事请假，今天一天没工资，一年365天，怎么可能真的干够365天。有时候干完活了，年底都算不了工资，还得讨薪，至于五险一金有个球，去工地包工头给买个意外险就不错了，爹妈没有退休金，一把年纪了还在打工，用的手机是1000多的Vivo。</strong>」</p>
<p>那位国企员工的工作环境：「<strong>坐在那里玩手机，有宿舍，有空调，有洗澡间，整天就是喝茶玩手机，上二休一，夜班就是睡觉，每个月领4500，每个月准时到账，缴纳五险一金，逢年过节就是米面油，超市卡，冬天和夏天有气温补贴，年终奖再发几万，爹妈有退休金，房车都给准备好了，用的是苹果手机。</strong>」</p>
<p>这位国企同学，我也不知道他是真的陷入「信息茧房」了，就像张维为一样，还是故意装傻充愣，就拿自己每个月4500元的工资和农民工同学一个月七八千的工资比呢？</p>
<p>但我发现真不是个别现象。</p>
<hr>
<p><strong>第五个例子：</strong><br>
在知乎上看到某个人说自己的记忆力不怎么样，逻辑能力不怎么样，自己的爸爸妈妈总是嘲笑自己笨，但这个人的学历是清华大学，其父母更是名校教授导师。</p>
<hr>
<p><strong>第六个例子：</strong></p>
<p><a href="https://www.zhihu.com/question/633268628/answer/3322125445">本人24岁，博士留学瑞士，因在当地吃了一碗牛肉面被妈妈说浪费，愤而拉黑家长，我做错了吗？我该怎么办？</a></p>
<p>这个人跟母亲没办法用逻辑和理性沟通，所以采取了一种「情绪哄着」说的沟通方式，避免了无谓争执，像她母亲这样的人，我在生活中不知道接触了多少个，很窒息，我很佩服答主的作法。</p>
<p>即便如此，她的评论区依然一些人鄙视她，大概意思无非：「<strong>你对父母不够尊重，欺骗父母，不以诚待人，我的父母有些事情也不懂，我只要告诉他们，他们就可以理解。</strong>」</p>
<p>他们无法理解有的父母是下面这一种：<br>
<a href="https://www.zhihu.com/question/4923274337/answer/80918052617?utm_psn=1876226939980759040">「厌蠢症」属于一种隐性的傲慢吗？</a><br>
<a href="https://www.zhihu.com/question/504983307?utm_psn=1876227949281275904">现在的年轻人为什么跟父母沟通不来了？</a></p>
<hr>
<p><strong>举这几个例子，我要表达什么？</strong><br>
人与人的悲欢并不相通，谁也无法和谁真的感同身受，人们很喜欢站着说话不腰疼，喜欢何不食肉糜，包括我自己审视自身过往的一些言谈举止，也发现不少何不食肉糜。</p>
<p>普通人的很多对话就像小学语文课本上的《小马过河》。</p>
<p><strong>每个人都是孤独的个体！</strong><br>
<strong>这世上没有人真的理解你。</strong></p>
<p>不仅没人理解你，很多人会把自己的个人经验上升到普世大道理给你讲出来，你要是真信了，将来很容易打脸翻车。</p>
<hr>
<h4 id="怎么样才算是有福之人？">怎么样才算是有福之人？</h4>
<p>作者：Logan<br>
链接：<a href="https://www.zhihu.com/question/488633584/answer/108098067053">https://www.zhihu.com/question/488633584/answer/108098067053</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>长得好看的，从小被人夸漂亮，但也总被人盯着看。<br>
陌生人随便搭讪，说是「给你面子」。<br>
同事背后嚼舌根，说是「靠脸吃饭」。<br>
谈恋爱时总被怀疑是不是真心，闺蜜聚会也莫名其妙变成攀比现场。<br>
可你用这张脸帮被霸凌的小孩说话，就能用这点优势，为更多人争取公平，大家愿意听美女讲话，漂亮是把钥匙，可以开很多门。但别忘了自己也得长本事。<br>
<strong>但美貌还可能变成枷锁，让人忽视内在的成长，最后在岁月中迷失自己。这是福？还是祸？</strong></p>
<p>长相普通的，从小没人夸你漂亮，找工作总输给花瓶。相亲总被发好人卡，朋友圈发自拍没人点赞。但这样反倒让你练出真本事，客户都认你的专业，朋友有事第一个找你帮忙。现在你明白，长得普通就像穿运动鞋——是不好看，但跑得远还不磨脚。<br>
<strong>但长相普通的，内心陷入自卑，皮囊成为刑具时，如何救赎被困的灵魂？这是福？还是祸？</strong></p>
<p>脑子聪明的，同事都说你是「聪明又才华」，老板啥活都扔给你。朋友总说「帮我写个总结呗」，好像你的时间不要钱。最烦别人说「你不是聪明吗？这都不会」，他们哪知道你为个方案熬了三个通宵。不过当你写的文章救了个想自杀的学生，就知道聪明是老天爷赏的灯——既能照亮自己，也能给迷路的人指方向。<br>
<strong>但才华也可能让人孤独，甚至被嫉妒和排挤包围，最后在自我怀疑中沉沦。这是福？还是祸？</strong></p>
<p>手握权力的，表面风光，其实步步惊心。酒桌上每句话都可能是试探，提拔谁都有可能被反咬一口。家人抱怨「你像个机器人」，却不知道你凌晨三点还在看灾情报告。直到有一天，你用权力打通了留守儿童的上学路，才明白权力是把双刃剑——既能斩断不公，也能劈开希望。<br>
<strong>但权力也可能腐蚀人心，让人在欲望中迷失，最后沦为制度的囚徒。这是福？还是祸？</strong></p>
<p>含着<a href="https://zhida.zhihu.com/search?content_id=714734070&amp;content_type=Answer&amp;match_order=1&amp;q=%E9%87%91%E9%92%A5%E5%8C%99&amp;zhida_source=entity">金钥匙</a>出生的，生日来的全是爹妈生意伙伴。谈恋爱总被问家里几套房。同学一边骂「富二代没本事，只会靠父母」，一边求你帮忙找工作，给点资源。后来你用零花钱给山里建了图书馆，看着孩子们抱着新书笑，才明白钱就像放大镜——能把善意放得很大，也能把私心照得更清楚。<br>
<strong>但财富也可能让人失去奋斗的动力，甚至成为亲情和友情的绊脚石，最后在孤独中迷失自我。这是福？还是祸？</strong></p>
<p>穷苦家的孩子，10岁就明白钱有多重要。同学聊演唱会，你在送外卖；同事喝下午茶，你在跑滴滴。最难受不是穷，是生病不敢去医院，是去女朋友家被嫌弃。但现在你开的小公司，专门给穷学生暑假工机会。你知道饿肚子的滋味，所以公司冰箱永远有免费面包。那些吃过的苦，都变成你教新员工的<a href="https://zhida.zhihu.com/search?content_id=714734070&amp;content_type=Answer&amp;match_order=1&amp;q=%E4%BA%BA%E7%94%9F%E8%AF%BE&amp;zhida_source=entity">人生课</a>。<br>
<strong>但穷苦也可能化作噬心的毒藤，在日复一日的挣扎中绞杀希望，最终将灵魂困在永夜。这是福？还是祸？</strong></p>
<p>有人把<a href="https://zhida.zhihu.com/search?content_id=714734070&amp;content_type=Answer&amp;match_order=1&amp;q=%E8%8D%86%E6%A3%98&amp;zhida_source=entity">荆棘</a>编成王冠，有人拿金碗盛满眼泪。<br>
有人抓着好牌打得稀烂，有人摸到烂牌闯出名堂。</p>
<p>那些让你哭的事，后来成了救命的本事。<br>
那些曾得意的，反而让你摔过最狠的跤。</p>
<p>十年前那场失恋让你遇见此生挚爱，半年前升职却埋下猝死危机。<br>
现在的祸可能是未来的福，眼前的福或许是明天的雷。</p>
<p>何谓福？何谓祸？<br>
何谓得？何谓失？</p>
<p>真正的聪明人不是算命先生，而是：</p>
<p>下雨知道躲，天晴晒被褥。<br>
吃肉不显摆，吃糠也不哭。<br>
被人夸时脑子清醒，被人骂时左耳进右耳出。</p>
<p>过日子就像煮粥，火大了就搅一搅，凉了就添把柴。<br>
熬着熬着就出香味了。<br>
哪有什么绝对的好命苦命，全看你怎么把日子过出人味儿。</p>
]]></content>
      <categories>
        <category>喜欢的文字</category>
      </categories>
      <tags>
        <tag>励志</tag>
      </tags>
  </entry>
  <entry>
    <title>Next博客升级</title>
    <url>/2024/09/15/Next8.2.0%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>当前最新的Next主题已经到了8.20.0版本，其中最吸引我的是支持在移动端显示侧边栏以及目录的功能。</p>
<p>原以为升级主题会很困难，查了一些资料后得知只需要下载最新的主题文件，在blog的根目录配置文件中选择想要的主题即可。</p>
<p>不过新的主题是默认配置，至于头像，背景，点击特效等等的自定义配置还需要重新搞一下，大体上就是对照着旧主题配置文件修改，或者直接重新来过也不是不行，只是需要花一点时间，慢慢来吧，先用着旧主题，抽空慢慢升级。</p>
<p>官方文档：<a href="https://theme-next.js.org/">NexT - Theme for Hexo (theme-next.js.org)</a></p>
<p>希望这一次能仔细研究官方文档。</p>
<span id="more"></span>
<hr>
<h3 id="下载Next最新的主题，文件自动下载到blog-themes">下载Next最新的主题，文件自动下载到blog\themes</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/next-theme/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-09-15_10-46-20.png" style="zoom:50%;" />
<p>将旧主题重命名为next_old，方便日后切换主题。</p>
]]></content>
      <categories>
        <category>Plan</category>
      </categories>
      <tags>
        <tag>博客问题</tag>
      </tags>
  </entry>
  <entry>
    <title>大二学年成绩感想</title>
    <url>/2024/09/14/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E5%AD%A6%E5%B9%B4%E6%88%90%E7%BB%A9%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="d6b1f03c142adcabbdbd31b47129f284b22551f56e32decaed4715f2a9a83a61">60fd0739c5a82ca45262b2f3393acd53fc8e7e15d1c545acc2197dc8f5c7cf9c3804eb77684d95844cfa50a923752dcb12d413e9d35611828e3da0c9351f7f0c29623364e01d7bbf0f2af25a84601302e73645863318a932e0ee20708643cc0a631fc49f26bc4c775803357f96df75fb5c6680b0112ab4ee25f5363229f2d0f2efbff1c288319710be2fa0b7790e2badb165de9b57a51443a434c635481ae0e10841f51cdc4df79da8633cda17a7fe270ffdb243766043bb123b78d61102381baf040d3b04e690b663a3c5267e8f2c984117adbf6b966c13269a87bb81fe87f0a97e5fec44c6ea805c131982112c7e99e064bbdcf10cbc01c1ca8b47cf6e4559e7bdb9d740282345459ca7ab4c407c9bd214a49713c5df6665bdc24a8baab9eef3a9d0a64532cb7931b18d398ff23ae9c75f3b0bd8ffb58f3a76a4f0061330982d2ca89a0ed139651694fa261db2b954f404c2b625256635507f43f8d8b4f3a79f84dea55c6f2ac44d3d6771af65cd90c18827476e31553fd33c50db39ac8e783242e7147511050f5fb54d6f284d29657d513100a0c0e6323a8ab23f6658c57d5ff93cd39040bf1ebaa120a28dd3c1d1ee33e5f20fa092710336675d5678dfdacc0f41f827c250224d6bd7453ef88d8645cb4787be743cce1f70cf376d8fb42d66c1f6035e3d363e840c1afe2ee985f0549deb7faa88f3d7ecd157cf259d95c121dc43348ca6541b83d15b6b95426451295e95641a430419bf1a641d1a8747242a87325523617511ccbc9aa4fa9468948fb5a21395951cf1c527b1772523404a6c3fbf7de097994c838dad9e70992f452a54707b176bcc22967f3d4b8a459328a4276370f9b1ec734dfb441131fdc05c995a42db1b8063a52c027068bff7a82cbe568d7e91bccc37eb59847ce4a21d98cabd6446a60bbf25eb41957863068431e511bfe45bfe29cc76aa8bde45d28989bd640f64dfdd52896b232e2f5020db9d0fbd14b6005ebfbbd395144b9ec36249bdce7be7219faa3b83b2f2471cf487ea9413d5799bdb11586c8423c7313d6bbf559e90e611a01e0bbb4c581ee5676a4d811c40cd2a452365b6d0231ed710d35bda0ff528d9d046c72bd35a474be711b28d4df12d82e965b4062c09fb42243f8195b15adb2ecd0af67c3bde4ba6f887ce4b0e138df897c35fcd0afed2c431e1021d1077636ca5d773739343004d5aa08668dde8d17364185b6c03c4bbca3229bcfbd4b5c9c50f5c6255e8eb90f8ef2dc840704ed9470998b003f28b87eafeed21649e378692b2195dfe02008ac805d147aacad489ac9c71fabe01124ad7e447209d143edfb843b691bb28e004c3907b378c82c95f105b81ba548b7ed9e4e04bc8ab9ea1c4e9ff2dfc5b9c45d9c004c7316e7796683caa346dcee0680be74bbfe69eacedcadfd6ba60b5351cd9a51aa7148af33e968457ffc7bf14897fa793907166c53c225125285142b4d1e615a80a8a8563a1832a635bbe5a60025c25585ddb795e21e186de7e4104d0f15a83b126bbb54d3af68541021b44bfc9cf61be10da25a68b0b5b273d8133d478c831d4b1da82baec44aa1d27fbb424895a9c2544461f55e617059841a924ccb20308f4b247f8e840de59734c9143a8bad45c1da5a283ded41cd25f62cae50d497adda2f88ec4650696997575bd738bfa2fbbdcfe73365db6e352ecac0279ee6df2f294d4a957acddcfa70c809e1336d0ff1753869294f0204b09ba52a4d3b4a803657ca83083221f5db624aa6e7168015be9eb4fb09bb6cd8c1579f480b1ad893da1741f248047a45e1031543f71497b9e6cc9ce3fcd299e01348f246751d7338ccd2efb5831a7a4b94af32fac8fecbdff56d28e92a7008dcfed855f447b63465a9615d9e64a26803b27430505e56df8095b913daf186fc4e49318a354e904a3401ba7e0828e77d3f27616cbd5fc4b119a3c72b060f5ce3a8936803798b147749ac3cb51207804f03f6a989347bf9ae328f9d287a97b42f16de81ba29aa28ea6a7b136c5fa0083a363a898d00d0d288cf13db5e738fae3d7df4a156de1fccf240b4e3640aef47452890a313095c0c511ee908f0295745f314ea1046f5dffffb467447ddeb723272c9b789673e58279b7a688ed91a8588a040530106811863c5de233f93d451e4fc184006d16a25e77373bc4e7bedd8223ec3c08090b41b1e0e37097bfaf9012dbac4d2220957f35a72cf62d7875802fa6155aa4572c040c12c6423e5e3a95960dbb62e5b6125e3143070419bb06b267b33738794262307d95bd0fe1412fd96265b2aa0f0a72231636aa6960a34d075c20afe457a315352c72b8b77edbd48ba2e13629a69b536edce8f666c0927df2934958919d41c5f179273ee41444838d31fadb14d4557dd569bae98a0543a460968c7e12dbfb5d5b151aecadf3bee835b8978a9cf773860776d5ea05bd4fd37d65b1db931d8ec732ac73ab6d705a447ccd0914921326df84502630c05ab4b53924213224ee755a0e92cb78f5ed28f54f1b6f75487e63c462429c9392b17aa69367b1d028b0af9f2324d6c19db1deccdabcf5d966775ec3b1140f24d023e44bf99e4b29a8207c39617ced7c4b95603c2249d348c14d4130dadb3f9dbb816c8703ade1ec046727a3f4e5a3d1ba53219b0a3b77e5df6ce3d76c0b9232a3e1cf5217ce04190b0b676eae855a1a57f1a08ed8cb81879cc1d5581a1bb97f8331461a5a6ba3d60ad3a35b58cfec35cef2fdfc8198b18bb95ba1f9d3b815c45cea470bbcd4d644d17cd91600341b5f469c68f7b23b91dd969a8a5f2c7fe669a0a846d64cbb1d7410bf7972c5c457adc29d55b7cabaf9c09efd588d7f9cb5b8a794326aa15e5fce0b2f6eabecf4c3c59615772fde92a5cedb793e999f7efd404577bf269825499fdfe95047c295552d8435253daaa18b29b934d27c9cff9ce5f1af00efefd68dc209ac75a65f36037dd8d4be6a8040ef414463ec75eb352ad508973e234c65108d1c57973530494aa9172ae682b49ca4c56bbdcf288db372c3f3769dc3434a637c52fbcfabbf30bc934dba0d059a8c66cf2b2421679d2b0d35d1d32a8e660bf2cb9e8325e719ebe69101841eb0dde6038c97715a7c10d74946f59d29e64ece3755a14e8c2ce47c33f17941a1e8c0771859daafbb7fe796650183d291d2ec8e014ca5ec79e17ca7b41aacfd73c756ba1102610a1759164aa0fb5474c4281d70b631c431488526f6e06a9d0339bc7c40c4405e14673bc547971d80478ad32efa5012270f1734c2eaa34d24d8cda3fb0e3f027a7134dcf0b0edc53a5a47fbb41df8e4d75107176a83a7c8e11d24b6b6b6bb1fd01d85714b3b8d2955c64b350c00d4e05f40112c7c92a474b595444c267a7da7b4525a7abf280ab4e2f0698491e094ffa87fef49d50ad620930b04de22f529de2338e3ffdd6ebe8a71ff256738465c69c5ccbe2966818312ed6e1d51d3551c94bd93421f0d0123b079b0ef1cadda335c0b756709033d8186181293bb8b42579747b27853fbd584aa95c8c0244da9bf7d117137f853f164b17bb39d42c1ac19ccf331d5f2e01d2764ab9ba7507e93d69280de5e74bfce9824b8fd2f795cdab90766b70f5caf70b9611cbe6ceed2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大三上开学感想</title>
    <url>/2024/09/05/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%B8%89%E4%B8%8A%E5%BC%80%E5%AD%A6%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="3e29edb2805d5daa527b8e04a3cf8f181a198f8827c42cb298743e5f63ab0384">60fd0739c5a82ca45262b2f3393acd5331a643f82cc90bcc50b07e0ca1292855090b932f614a4683a486b535812b54746288569d8da9ed6dd18f2bb49e64e047fa0a8f9787a6da6fe5e247692ab971c387732afc5d18303fe8f314e8691000706fd73bb233d17fc90ed8a8e2ba29fc76c004183222016bd24c0de5c1a2e549e9f0f0dd9a2ceb9d65e58d7515a86c1796a5faee9d2b4a5d48d2d3e977059d69f52a8088683e3ab441b304d5721ba10ae80366b30d4e5e67978548d85291152f0b795e8c3d4faba022163dc92e0ceae7d99033096f44941432c1f41199605559cbae60e8a50f7203e1ed13e646a3d1b819d59fc40455493b40933155fa02dc0565a639588cdbaa45d337478592583faf5b5a64e64e9abaf390f7978aedad7e216d9f28bc9d3675dd5e85c549675686e8b7b478ca2df7b2e3064b772b634c6d36469536a2792c8d9565d8c2219f287bc9127a8ed50cddec33c6d080850958ac7bb4df595161847544e3cd5fd016639766ff9b6bb140857e7f6dce903bbc8cd765414928c05238d74bc6aa700936ef7ad977935bc7efbce9a61c580c97b743e775bf0ed1c286622fc16a9d8b11e22f97a98383d8d04918044b46d43e1fd0ae77725d21bb857620401188dee45b97657a35b9ad1bfa0578eebfefcbb2327fb30825f52439d0724989aec61648820f135e2e3b8542eec36d757480db7b421817de4037ff282532be2399b0865f253906c879f736214627ac0c8857ccbb73348797c53aef1a74ea06e3f68104a87b363d6437461fca29c5900fefd200d277f508e0d0bc581cd2868a9db58143d734e6531847509eb09372af944f546f8afa769e5fd76f5636f670f7c396b73d836611920e32923dd5086879bd35f9508fc17ebaee8a975bc4e439e8174144d08ce6413515fe04a2b6004727db30378ec016cc98022e12d519df36bbdae734e0066bdcdc73433b027b695a4f04fd87d50d6404ce6f4d70539dcaeaf6a02d065893ce17f21673b0a1ef65f97f2a0331aaeb144ad3cbb79046c414e05dde3cb66cc2b2b0c012fa78b418f816dd50954b6901e40038042ce12d5e0f1844d1f0f75ddc83c22b429b7a08668ecaef6ddb8c8cafa0804f983658232866aabb2ed4b82d50b65c972971ec21bd4bce56a991d8feb2e8534fc8ae14bb4df1412002eff86a3b3a61ffa8a74ec7d2ff344ed81ecddcfe9f2d6b48860bf3d1a1d8142b5813ba4ac3b155f65d65ca376d6f7385effcb8370df56a80b96154ec2b8fb0b7150ae5f8e07ca71b9ef093445bf67e50e19df2ebb6b67aedde5c8c6387d54295928b97851bac786616bc616d2a6bae85b3f0704f2bbc9a19e3f2a841116cbcbaab06d84b65c72af00a8695d39dfd8fd8d2416b90f0e9b27cec6836321b904223151825673c8a0c4fc75c0548404f662f49e6ec4ab01c015a965c39b24d77f8e46cf040e63eec09b4f706c61d75b6d3b2e8666a20e31a24418c0325bab15d26c2419059df78d6ee5792d9b6e874d8ffd5a4b8efdf0589fdb4bae0bb9f235b3ecc3c75893c98fb98d2456607bfe30df1bdc56dc135051934656696f33491534979f736c67315870aafb80ef363fa4124acc70e3bf1669f46ffba759e3ac9d6a298fe90ff73ed514799427376fa84ecee985d32c40a53ab935d42ea9aef43e996386e71826caf12a50aab061444e54a7375d3c3bce0fc015966d5703414157283339f7685d0e9e0d17d18ead23477597ff6c2c5f14d14576c839690d219fe2cc6468aef8852401e0e743393cd044c521e4cdafaa90d95238d1205a42fea2c65c51adda190a0cf5b089245a04eed5337c044b6b76203b744ac44e0b9c4aa2223fa583a75be2c32b9fd1cb6bea45941b3d9aa3e6b9c28f676cea27adc1340173485838573113d6678e5f6fff26475f04482003f3e9735ba1035062d9a20839c45ef40a43caaf3e9defb97fddbeb838fb10f986547f8e06077567601521da05ddd5a78662d05f57286b6f36a39ab633453eb83906b5a3d138dc7415ad6d201ab35468bf738a03715e550c203ac7ceb5ee4ba1b3f0a5879d5bfea9875d569aa5e406bb1cb32ca42ec1c67622c047503eb3995130aa7aa833551033a888c61b13d41a2c5dc4720787b3a7b6d856ce2594bb76546484f7817d15255f907272a6be98945b67cef0eca3c84b8edd710b9b3fb5f1311e4c4b664b9d78621d680500219b1eea655b6af89c798fdd24a65078f3b4af87d58e4cd454319d6dd3c7552b6238b4499298f92a0ec81a3d1356b97cdd15b3d8e3da34075498ae70fc183fab3857399f0a9642f85e8a3457f5bb0e71e0f66dbf45ee7ed6f2860a79457faa1d4a3e45119421e0eff09bc6aae9583b6b4f618f3d788889586416dc7b3dcd627b5739f3cb9677d5e0d513dbf130e08cfdf215f3f8d3906c82bf0581c5f6605deb187bf61b10a3f6945ebe782e17610dc8a8decf218ea84ca62fa0df7dd1977b7f8c5134108e728c1d03fe4130583a5104feab63f9a6813b98010347b152daa96ecc57e060cc12561200087b37076dc6e579957f05cf6fc571aee89c9be2b9a510fcb1eb258c61de21b24007fb76a6ed40a24357dc75dc32e26ab645c0e719492b946bf5aecd30757dc26409a660c95f765db63492cb27ff792875edaf66ba22f1300079abfaf75028369ce3a00f1b4698ff562c5162161d14c109a86f2e56dae3aea51d717de00457015d2b1cd336dd2b30afc6466402d4325e351b9bf510eca887f012e72975f7c1517d0d3658c53eef3d457de19a0f50a3bbda568500683e55bca71e4b05cca3f11c18ba13addbf30e7ba1c1aa58af8a9a8767ad344f41884eebfb433ea36893eeac1c88ae6401b9722157aa2b398079c9e63e155b45b3910442b0e6c1599ad1aaccf9b85f2784ec73e9a4953985c5b4d6eb5c658631596b74e4b8c86bf83f8db3002697c89ccbe5d41494313e718af2b89c05d5211a01328e25eeef1af3e69558550d6cb2a41f2bc0e88e5395f41af49a43be8a74806420e02d77da764e154db58f24c43bc0a8c86116acb7483bd07f9fff19eb9879567c752169a7e9b0a056ff93af405fa5e865018ac0541b90765aa982707f3dfd16d5ee0e478dce2b8d8a32ae5b7abe7e12c80153d1914cfb60445e1a591734c5d139ac2b8eef8225466941d33d4518b793400481b0c831ba1a510761d42a1240ecc73f1f55de0c393582c8c40da30ee9f060bcb0f15242a5cdaf0fa443c0ad8eb228c4304333e56ffdd97965c42fbdfd7fcd915bcdce285809001bcabccb09dfc3367923abf57e507547f5ff40d9d85a62c6a2e7aa05a74e097988bc38d7e2a943013c805761dbf40f3fb6e3face14dce272217210a3d70c2b3d629741b3327f6dc6f54c91b89c3f56873bd487f19dc498bea4e993e7b3517ab5f8a9956e2f618f891845484187adddfc847371edca9f16a6f80fdc8e868459913c3d79017d66e3661184010c384d9dff72e2294b5d70817dccabc23fc4539cb543b5889101904846de13b6859cc1d8f7d6f781b507e7e262d98ab0e90861755de71097e4726a7848f55e1127d29d6734a6b42bfd438f4424f5aae5c607f6e5bc4fe09e0c26f14e44f5802bfc4eccce01fc01152c6dd099f610b576d54bfdccb088213beefb4ef32048825f11d0b84da742e9566440de42307e93d4e142337e4dff3ce06aec59bc5dc18f770f5bd7e560fbef335792d63349a340fca58aecc0ecb98be329ec963f81f7d62af3d136ed5274510db386097e1486e11f6bcff84d7a6efdc1e6a8e5113b44cbe2024f5845b5d37f1a48a635011712762eac5b78b2e60faac1a05bd039800e8a11b151d7aec9283f08abee2be644d517d168d585e1df87d1bcb8736b5ea99d31152b842e9bf6df1d59e775bd8441251726eefb1b55ccb943c4d96b8cc4c0cb0db3fa99d4e5cc4e9d84c9173f0ce4c245a96e82de92f3317e48cf10f6cb1ff75a397d5118ef65193df73537f042a6febab5fc8bbe6074a973abb7e958174ea9f94e1f3fae07fa24be881101d3e874f95d91700e85969ab49d77be7c29582b71c9d3f0a75431ccb101ce11a7f34552a226328d1c1f91b496f31669049c4a7766a7552bbbdac01ffd91a1d98675895dc4540f7fa38e612147798c9f8d415a7c1ee41d6897d7545b2b33c2fbcf394e807882c18045c50c790fc8e971073650e25d486c4bc594d8c5446d73529c0f9e9aeceec4da3fa57c05b0d0478da5c9b1c7b0a0e9c0b4c38bf35aa08248383842e7a2d010230aaa60c7b61ff304c74b34b202abe3e6ded69fb2ee36ea3a468cec8dcd247c1e21886acf1267b8d239fc9cad3b8ce68e0bfe77de3ab4f9dbd35b2925381f6bc8421d3856b80f3fe904eff18d1b8b53881a61735e8bd3df960a291c6e03b32af904bb8111059d25bb97f9e034954a50f06b8dd96c50fc3c553f9e5ed6ae9d7da359d131a93467c6612c9e8a0bcaf60b8ce0fbd8b616f4a31c1e16323bd8f6862c41f80f15f68cac3a96d55e482547fbb3d74969467f892e9224ae949f51d04c1b7197779701e20a9a059815ae729bbdac72f6f9348555427ef1b810ddfacc35e3b5a64ad1640596472f5d41d9bfda409fa21f166e66774c57208bd0e299f32685173b7ac91589d4bd564ddf77da5b0cadea02405a6f782286a3da9a45ac275b38128780f2ba7a6d834d4f2f94b2be11b80668522c4a19de5ba6f5da2f66dfce45364e3276a105cda428396896914a098d976794498a65f1623bddb548f3a9009085d7c9d3f6e89427041c61c77e36e47797d27a61dfb6c257f078b3086368a6713978d20826c43c6214c354c84559cc15a7e0bf47b8e578e0d46d87be765231b6509cc5bdf7a5424495dbf0e91c574cca92692cc8f325fe3e3e8edbc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2024/07/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>鉴于我已经有其他编程语言的基础，这里只摘录了我认为比较生熟的知识点。</p>
<span id="more"></span>
<hr>
<h2 id="Python基本语法">Python基本语法</h2>
<h3 id="注释">注释</h3>
<p>Python中单行注释以 <strong>#</strong> 开头，多行注释可以用多个 <strong>#</strong> 号。</p>
<p>还可以用三个单引号 <strong>‘’’</strong> 或三个双引号 <strong>“”&quot;</strong> 来定义，这种注释方式并不能嵌套使用。</p>
<p>单行注释可以<strong>嵌套</strong>在多行注释中，而且不会引起语法错误。</p>
<h3 id="行与缩进">行与缩进</h3>
<p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p>
<p><strong>缩进的空格数</strong>是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="comment">#可运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)    </span><br><span class="line"><span class="comment">#缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure>
<h3 id="多行语句">多行语句</h3>
<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>
<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ****，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="同一行显示多条语句">同一行显示多条语句</h3>
<p>Python 可以在同一行中使用多条语句，语句之间使用分号 <strong>;</strong> 分割。</p>
<h3 id="print-输出">print 输出</h3>
<p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=“”</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></table></figure>
<h3 id="读取键盘输入">读取键盘输入</h3>
<p>Python 提供了 <a href="https://www.runoob.com/python3/python3-func-input.html">input() 内置函数</a>从标准输入读入一行文本，默认的标准输入是键盘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请输入：菜鸟教程</span></span><br><span class="line"><span class="comment">#你输入的内容是:  菜鸟教程</span></span><br></pre></td></tr></table></figure>
<h3 id="import-与-from…import">import 与 from…import</h3>
<p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p>
<p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p>
<p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p>
<p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p>
<h3 id="数字-Number-类型">数字(Number)类型</h3>
<p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li><strong>bool</strong> (布尔), 如 True。</li>
<li><strong>float</strong> (浮点数), 如 1.23、3E-2</li>
<li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<hr>
<h3 id="字符串-String">字符串(String)</h3>
<ul>
<li>
<p>Python 中<strong>单引号</strong> <strong>’</strong> 和<strong>双引号</strong> <strong>&quot;</strong> 使用完全相同。</p>
</li>
<li>
<p>使用三引号(<strong>‘’’</strong> 或 <strong>“”&quot;</strong>)可以指定一个多行字符串。</p>
</li>
<li>
<p>转义符 <code>\</code>。</p>
</li>
<li>
<p>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r&quot;this is a line with \n&quot;</strong> 则 <strong>\n</strong> 会显示，<strong>并不是换行</strong>。</p>
</li>
<li>
<p>按字面意义级联字符串，如 <strong>&quot;this &quot; &quot;is &quot; “string”</strong> 会被自动转换为 <strong>this is string</strong>。</p>
</li>
<li>
<p>字符串可以用 <strong>+</strong> 运算符<strong>连接</strong>在一起，用 ***** 运算符重复。</p>
</li>
<li>
<p>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</p>
</li>
<li>
<p>Python 中的字符串不能改变，不能向一个索引位置赋值。</p>
</li>
<li>
<p>Python <strong>没有单独的字符类型</strong>，一个<strong>字符</strong>就是长度为 1 的<strong>字符串</strong>。</p>
</li>
<li>
<p>字符串切片 <strong>str[start:end]</strong>，其中 start（包含）是切片开始的索引，end（不包含）是切片结束的索引。</p>
</li>
<li>
<p>字符串的切片可以加上<strong>步长</strong>参数 step，语法格式如下：str[start:end:step]</p>
</li>
<li>
<p>字符串索引：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-07-21_10-25-25.png" alt=""></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;字符串&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第六个的字符（不包含第六个）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nrunoob&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure>
<h2 id="基本数据类型">基本数据类型</h2>
<p>Python 中的<strong>变量不需要声明</strong>。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p>在 Python 中，<strong>变量就是变量，它没有类型</strong>，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p>
<h3 id="多个变量赋值">多个变量赋值</h3>
<p>Python允许你同时为多个变量赋值。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p>
<p>您也可以为多个对象指定多个变量。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="数值运算">数值运算</h3>
<ul>
<li>数值的除法包含两个运算符：<strong>/</strong> 返回一个浮点数，<strong>//</strong> 返回一个整数。</li>
<li>在混合计算时，Python会把整型转换成为浮点数。</li>
<li><code>**</code>表示平方</li>
<li>Python支持复数，复数由实数部分和虚数部分构成，可以用 <strong>a + bj</strong>，或者 <strong>complex(a,b)</strong> 表示， 复数的实部 <strong>a</strong> 和虚部 <strong>b</strong> 都是浮点型。</li>
</ul>
<h3 id="bool（布尔类型）">bool（布尔类型）</h3>
<ul>
<li>
<p>布尔类型只有两个值：True 和 False。</p>
</li>
<li>
<p><strong>bool 是 int 的子类</strong>，因此布尔值可以被看作整数来使用，其中 True 等价于 1。</p>
</li>
<li>
<p>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会<strong>将 True 视为 1，False 视为 0</strong>。</p>
</li>
<li>
<p>可以使用 <code>bool()</code> 函数将其他类型的值转换为布尔值。</p>
<p><strong>注意:</strong> 在 Python中，所有<strong>非零</strong>的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p>
</li>
</ul>
<h3 id="List（列表）">List（列表）</h3>
<p>List（列表） 是 Python 中<strong>使用最频繁</strong>的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表是写在<strong>方括号</strong> <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被<strong>索引和截取</strong>，列表被截取后返回一个包含所需元素的新列表。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-07-21_10-34-50.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]  <span class="comment"># 定义一个列表</span></span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 打印整个列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 打印列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 打印列表第二到第四个元素（不包含第四个元素）</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 打印列表从第三个元素开始到末尾</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])     <span class="comment"># 打印列表从第一个元素到第五个元素，步长为2（a,c,e）</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 打印tinylist列表两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 打印两个列表拼接在一起的结果</span></span><br></pre></td></tr></table></figure>
<p>与Python字符串不一样的是，<strong>列表中的元素是可以改变</strong>的，可以给其赋值和更新。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line">list1.append(<span class="string">&#x27;Baidu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;更新后的列表 : &quot;</span>, list1)</span><br><span class="line"><span class="comment">#更新后的列表 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;, &#x27;Baidu&#x27;]</span></span><br><span class="line">list1[<span class="number">0</span>] = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;修改第一个元素后的列表：&quot;</span>,list1)</span><br><span class="line"><span class="comment">#修改第一个元素后的列表： [&#x27;Python&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;, &#x27;Baidu&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;原始列表 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除第三个元素 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="comment">#原始列表 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 1997, 2000]</span></span><br><span class="line"><span class="comment">#删除第三个元素 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 2000]</span></span><br></pre></td></tr></table></figure>
<h4 id="嵌套列表">嵌套列表</h4>
<p>使用嵌套列表即<strong>在列表里创建其它列表</strong>，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Tuple（元组）">Tuple（元组）</h3>
<p>元组（tuple）与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组写在<strong>小括号</strong> <strong>()</strong> 里，元素之间用逗号隔开。</p>
<p>元组中的元素类型也可以不相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure>
<p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p>
<p>其实，可以把字符串看作一种特殊的元组。</p>
<hr>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>
<p>如果你想<strong>创建只有一个元素的元组</strong>，需要注意<strong>在元素后面添加一个逗号</strong>，以<strong>区分它是一个元组</strong>而不是一个普通的值，这是因为在没有逗号的情况下，Python会将括号解释为数学运算中的括号，而不是元组的表示。</p>
<p>如果<strong>不添加逗号</strong>，如下所示，<strong>它将被解释为一个普通的值</strong>而不是元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#type(example)用于查看一个变量的类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>string、list 和 tuple 都属于 sequence（序列）。</p>
<h4 id="修改元组">修改元组</h4>
<p>元组中的元素值是不允许修改的，但我们<strong>可以对元组进行连接组合</strong>，如下实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line"><span class="built_in">print</span> (tup3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="删除元组">删除元组</h4>
<p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span> (tup)</span><br><span class="line"><span class="keyword">del</span> tup <span class="comment">#删除tup元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除后的元组 tup : &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (tup)</span><br><span class="line"></span><br><span class="line"><span class="comment">#以上实例元组被删除后，再次输出变量会有异常信息，输出如下所示：</span></span><br><span class="line">(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">删除后的元组 tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;d:\PythonLearning\test.py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> (tup)</span><br><span class="line">           ^^^</span><br><span class="line">NameError: name <span class="string">&#x27;tup&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h3 id="Set（集合）">Set（集合）</h3>
<p>Python 中的集合（Set）是一种<strong>无序</strong>、可变的数据类型，用于存储唯一的元素。</p>
<p>集合中的<strong>元素不会重复</strong>，并且可以进行<strong>交集、并集、差集</strong>等常见的集合操作。</p>
<p>在 Python 中，集合使用大括号 <strong>{}</strong> 表示，元素之间用逗号 <strong>,</strong> 分隔。</p>
<p>另外，也可以使用 <strong>set()</strong> 函数创建集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;            <span class="comment"># 直接使用大括号创建集合</span></span><br><span class="line">set2 = <span class="built_in">set</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])      <span class="comment"># 使用 set() 函数从列表创建集合</span></span><br></pre></td></tr></table></figure>
<p>**注意：**创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;执行结果</span></span><br><span class="line"><span class="string">&#123;&#x27;Zhihu&#x27;, &#x27;Baidu&#x27;, &#x27;Taobao&#x27;, &#x27;Runoob&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;&#125;</span></span><br><span class="line"><span class="string">Runoob 在集合中</span></span><br><span class="line"><span class="string">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;r&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;z&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="集合的基本操作">集合的基本操作</h4>
<h5 id="1、添加元素">1、添加元素</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</span></span><br><span class="line">s.add( x )</span><br><span class="line"></span><br><span class="line"><span class="comment">#还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等。x可以有多个，用逗号分开。</span></span><br><span class="line">s.update( x )</span><br></pre></td></tr></table></figure>
<h5 id="2、移除元素">2、移除元素</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span></span><br><span class="line">s.remove( x )</span><br><span class="line"></span><br><span class="line"><span class="comment">#此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span></span><br><span class="line">s.discard( x )</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以设置随机删除集合中的一个元素，多次执行测试结果都不一样。</span></span><br><span class="line">s.pop() </span><br></pre></td></tr></table></figure>
<h5 id="3、计算集合元素个数">3、计算集合元素个数</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(s)</span><br></pre></td></tr></table></figure>
<h5 id="4、清空集合">4、清空集合</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure>
<h5 id="5、判断元素是否在集合中存在">5、判断元素是否在集合中存在</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。</span></span><br><span class="line">x <span class="keyword">in</span> s</span><br></pre></td></tr></table></figure>
<h3 id="Dictionary（字典）">Dictionary（字典）</h3>
<p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p>
<p><strong>列表是有序的</strong>对象集合，<strong>字典是无序的</strong>对象集合。两者之间的区别在于：字典当中的元素是通过<strong>键</strong>来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2, key3 : value3&#125;</span><br></pre></td></tr></table></figure>
<p><strong>键(key)必须使用不可变类型</strong></p>
<p>在同一个字典中，键(key)<strong>必须是唯一的</strong>。</p>
<p>值可以取任何数据类型，但<strong>键</strong>必须是不可变的，如<strong>字符串，数字</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125; <span class="comment">#空字典</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看字典的数量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Length:&quot;</span>, <span class="built_in">len</span>(<span class="built_in">dict</span>))</span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">dict</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;执行结果</span></span><br><span class="line"><span class="string">1 - 菜鸟教程</span></span><br><span class="line"><span class="string">2 - 菜鸟工具</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;runoob&#x27;, &#x27;code&#x27;: 1, &#x27;site&#x27;: &#x27;www.runoob.com&#x27;&#125;</span></span><br><span class="line"><span class="string">dict_keys([&#x27;name&#x27;, &#x27;code&#x27;, &#x27;site&#x27;])</span></span><br><span class="line"><span class="string">dict_values([&#x27;runoob&#x27;, 1, &#x27;www.runoob.com&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改字典">修改字典</h4>
<p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>] = <span class="number">8</span>               <span class="comment"># 更新 Age</span></span><br><span class="line">tinydict[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&quot;菜鸟教程&quot;</span>  <span class="comment"># 添加信息</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;School&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;School&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">tinydict[<span class="string">&#x27;Age&#x27;</span>]:  <span class="number">8</span></span><br><span class="line">tinydict[<span class="string">&#x27;School&#x27;</span>]:  菜鸟教程</span><br></pre></td></tr></table></figure>
<h4 id="删除字典元素">删除字典元素</h4>
<p>能<strong>删除单一的元素</strong>也能<strong>清空字典</strong>，清空只需一项操作。</p>
<p>显式删除一个字典用del命令，如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tinydict = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> tinydict[<span class="string">&#x27;Name&#x27;</span>] <span class="comment"># 删除键 &#x27;Name&#x27;</span></span><br><span class="line">tinydict.clear()     <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> tinydict         <span class="comment"># 删除字典</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;School&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;School&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#但这会引发一个异常，因为用执行 del 操作后字典不再存在：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/runoob-test/test.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">NameError: name <span class="string">&#x27;tinydict&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h4 id="字典键的特性">字典键的特性</h4>
<p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p>
<p>两个重要的点需要记住：</p>
<ol>
<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，<strong>后一个值会被记住</strong>。</li>
<li><strong>键必须不可变</strong>，所以可以用数字，字符串或元组充当，而用列表就不行。</li>
</ol>
<h3 id="数据类型转换">数据类型转换</h3>
<h4 id="隐式类型转换">隐式类型转换</h4>
<p>在隐式类型转换中，Python 会<strong>自动</strong>将一种数据类型转换为另一种数据类型，不需要我们去干预。</p>
<p>对两种不同类型的数据进行运算，<strong>较低</strong>数据类型（整数）就会<strong>转换为较高</strong>数据类型（浮点数）以避免数据丢失。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#该函数可以查看括号中数据的类型</span></span><br><span class="line"><span class="built_in">type</span>(num_int)</span><br></pre></td></tr></table></figure>
<p><strong>整型</strong>和<strong>字符串类型</strong>运算结果<strong>会报错</strong>，输出 TypeError。 Python 在这种情况下无法使用隐式转换。</p>
<p>但是，Python 为这些类型的情况提供了一种解决方案，称为<strong>显式转换</strong>。</p>
<h4 id="显式类型转换">显式类型转换</h4>
<p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。</p>
<p>可以使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="number">1</span>)   <span class="comment"># x 输出结果为 1</span></span><br><span class="line">y = <span class="built_in">int</span>(<span class="number">2.8</span>) <span class="comment"># y 输出结果为 2</span></span><br><span class="line">z = <span class="built_in">int</span>(<span class="string">&quot;3&quot;</span>) <span class="comment"># z 输出结果为 3</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="number">1</span>)     <span class="comment"># x 输出结果为 1.0</span></span><br><span class="line">y = <span class="built_in">float</span>(<span class="number">2.8</span>)   <span class="comment"># y 输出结果为 2.8</span></span><br><span class="line">z = <span class="built_in">float</span>(<span class="string">&quot;3&quot;</span>)   <span class="comment"># z 输出结果为 3.0</span></span><br><span class="line">w = <span class="built_in">float</span>(<span class="string">&quot;4.2&quot;</span>) <span class="comment"># w 输出结果为 4.2</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">str</span>(<span class="string">&quot;s1&quot;</span>) <span class="comment"># x 输出结果为 &#x27;s1&#x27;</span></span><br><span class="line">y = <span class="built_in">str</span>(<span class="number">2</span>)    <span class="comment"># y 输出结果为 &#x27;2&#x27;</span></span><br><span class="line">z = <span class="built_in">str</span>(<span class="number">3.0</span>)  <span class="comment"># z 输出结果为 &#x27;3.0&#x27;</span></span><br><span class="line"></span><br><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_str = <span class="string">&quot;456&quot;</span></span><br><span class="line">num_str = <span class="built_in">int</span>(num_str)    <span class="comment"># 强制转换为整型</span></span><br><span class="line">num_sum = num_int + num_str</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_int 与 num_str 相加结果为:&quot;</span>,num_sum)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_sum))</span><br><span class="line"></span><br><span class="line"><span class="comment">#num_int 与 num_str 相加结果为: 579</span></span><br><span class="line"><span class="comment">#sum 数据类型为: &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Python逻辑运算符">Python逻辑运算符</h2>
<p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">逻辑表达式</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">and</td>
<td style="text-align:left">x and y</td>
<td style="text-align:left">布尔&quot;与&quot; - 如果 <strong>x 为 False</strong>，x and y <strong>返回 x</strong> 的值，否则返回 y 的计算值。</td>
<td style="text-align:left">(a and b) 返回 20。</td>
</tr>
<tr>
<td style="text-align:left">or</td>
<td style="text-align:left">x or y</td>
<td style="text-align:left">布尔&quot;或&quot; - 如果 <strong>x 是 True</strong>，<strong>返回 x</strong> 的值，否则它返回 y 的计算值。</td>
<td style="text-align:left">(a or b) 返回 10。</td>
</tr>
<tr>
<td style="text-align:left">not</td>
<td style="text-align:left">not x</td>
<td style="text-align:left">布尔&quot;非&quot; - 如果 <strong>x 为 True</strong>，<strong>返回 False</strong> 。如果 x 为 False，它返回 True。</td>
<td style="text-align:left">not(a and b) 返回 False</td>
</tr>
</tbody>
</table>
<h2 id="Python与数学">Python与数学</h2>
<h3 id="数学函数">数学函数</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs(x)</a></td>
<td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html">ceil(x)</a></td>
<td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td style="text-align:left">cmp(x, y)</td>
<td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td>
<td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td>
<td style="text-align:left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td>
<td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td>
<td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td>
<td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td>
<td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td>
<td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td>
<td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td>
<td style="text-align:left">x**y 运算后的值。</td>
</tr>
<tr>
<td style="text-align:left">[round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td>
<td style="text-align:left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td>
<td style="text-align:left">返回数字x的平方根。</td>
</tr>
</tbody>
</table>
<h3 id="随机数函数">随机数函数</h3>
<p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p>
<p>Python包含以下常用随机数函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td>
<td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td>
</tr>
<tr>
<td style="text-align:left">[randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td>
<td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td>
<td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td>
</tr>
<tr>
<td style="text-align:left">[seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td>
<td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td>
<td style="text-align:left">将序列的所有元素随机排序</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td>
<td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td>
</tr>
</tbody>
</table>
<h3 id="三角函数">三角函数</h3>
<p>Python包括以下三角函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html">acos(x)</a></td>
<td style="text-align:left">返回x的反余弦弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html">asin(x)</a></td>
<td style="text-align:left">返回x的反正弦弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html">atan(x)</a></td>
<td style="text-align:left">返回x的反正切弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html">atan2(y, x)</a></td>
<td style="text-align:left">返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html">cos(x)</a></td>
<td style="text-align:left">返回x的弧度的余弦值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html">hypot(x, y)</a></td>
<td style="text-align:left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html">sin(x)</a></td>
<td style="text-align:left">返回的x弧度的正弦值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html">tan(x)</a></td>
<td style="text-align:left">返回x弧度的正切值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html">degrees(x)</a></td>
<td style="text-align:left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html">radians(x)</a></td>
<td style="text-align:left">将角度转换为弧度</td>
</tr>
</tbody>
</table>
<h3 id="数学常量">数学常量</h3>
<table>
<thead>
<tr>
<th style="text-align:left">常量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pi</td>
<td style="text-align:left">数学常量 pi（圆周率，一般以π来表示）</td>
</tr>
<tr>
<td style="text-align:left">e</td>
<td style="text-align:left">数学常量 e，e即自然常数（自然常数）。</td>
</tr>
</tbody>
</table>
<h1>Python条件控制</h1>
<h2 id="if-语句">if 语句</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure>
<p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p>
<p><strong>注意：</strong></p>
<ul>
<li>1、每个条件后面要使用<strong>冒号 :</strong>，表示接下来是满足条件后要执行的语句块。</li>
<li>2、使用缩进来划分语句块，<strong>相同缩进数的语句</strong>在一起组成一个语句块。</li>
<li>3、在 Python 中没有 <strong>switch…case</strong> 语句，但在 Python3.10 版本添加了 <strong>match…case</strong>，功能也类似。</li>
</ul>
<p><strong>实例</strong>：狗的年龄计算判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你家狗狗的年龄: &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你是在逗我吧!&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相当于 14 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相当于 22 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    human = <span class="number">22</span> + (age -<span class="number">2</span>)*<span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对应人类年龄: &quot;</span>, human)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 退出提示</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;点击 enter 键退出&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="match…case">match…case</h2>
<p>match 后的对象会<strong>依次与 case 后的内容进行匹配</strong>，如果匹配成功，则执行匹配到的表达式，否则直接跳过，<strong>_</strong> 可以匹配一切。</p>
<p>语法格式如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个 case 也可以设置多个匹配条件，条件使用 ｜ 隔开，例如：</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>|<span class="number">403</span>|<span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Not allowed&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>case _:</strong> 类似于 C 和 Java 中的 <strong>default:</strong>，当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功。</p>
<h1>Python循环语句</h1>
<h2 id="while-循环">while 循环</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure>
<p>同样需要注意冒号和缩进。另外，在 <strong>Python 中没有 do…while 循环</strong>。</p>
<p>以下实例使用了 while 来计算 1 到 100 的总和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure>
<h3 id="while-循环使用-else-语句">while 循环使用 else 语句</h3>
<p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p>
<p>语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure>
<p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。</p>
<h3 id="斐波那契数列实例">斐波那契数列实例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fibonacci series: 斐波纳契数列</span></span><br><span class="line"><span class="comment"># 两个元素的总和确定了下一个数</span></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>其中代码 <strong>a, b = b, a+b</strong> 的计算方式为先计算右边表达式，然后同时赋值给左边。</p>
<p>例如：先得到b和a+b的值，然后再把b赋值给a,把a+b赋值给b。</p>
<h3 id="end-关键字">end 关键字</h3>
<p>关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符，实例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fibonacci series: 斐波纳契数列</span></span><br><span class="line"><span class="comment"># 两个元素的总和确定了下一个数</span></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(b, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line"><span class="comment">#运行结果    </span></span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">377</span>,<span class="number">610</span>,<span class="number">987</span>,</span><br></pre></td></tr></table></figure>
<h2 id="for-语句">for 语句</h2>
<p>Python for 循环可以<strong>遍历</strong>任何可迭代对象，如一个列表或者一个字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure>
<p>for 循环实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="built_in">print</span>(site)</span><br><span class="line"><span class="comment">#site是个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">Baidu</span><br><span class="line">Google</span><br><span class="line">Runoob</span><br><span class="line">Taobao</span><br></pre></td></tr></table></figure>
<h2 id="for…else">for…else</h2>
<p>在 Python 中，for…else 语句用于在循环结束后执行一段代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="comment"># 循环主体</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环结束后执行的代码</span></span><br></pre></td></tr></table></figure>
<p>当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，</p>
<p>如果在循环过程中遇到了 <strong>break 语句</strong>，则会<strong>中断循环</strong>，此时不会执行 else 子句。</p>
<h2 id="range-函数">range() 函数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果你需要遍历数字序列，可以使用内置 range() 函数。它会生成数列，例如:</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)<span class="comment">#前5个，从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用 range() 指定区间的值：</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">9</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i)<span class="comment">#从数字5开始，到数字8（不包括数字9）</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使 range() 以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做&#x27;步长&#x27;):</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i)<span class="comment">#从数字0开始，到数字9（不包括数字10），步长为3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h1>Python函数</h1>
<h2 id="语法">语法</h2>
<p>Python 定义函数使用 def 关键字，一般格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（参数列表）:</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>
<p>实例：比较两个数，并返回较大的数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数的定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(a, b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<h2 id="参数传递">参数传递</h2>
<p>在 python 中，<strong>类型属于对象</strong>，对象有不同类型的区分，<strong>变量是没有类型的</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;Runoob&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上代码中，<strong>[1,2,3]</strong> 是 List 类型，<strong>“Runoob”</strong> 是 String 类型，而变量 a 是没有类型，它仅仅是一个对象的引用（一个指针），可以指向 List 类型对象，也可以指向 String 类型对象。</p>
<h3 id="可更改-mutable-与不可更改-immutable-对象">可更改(mutable)与不可更改(immutable)对象</h3>
<p>在 python 中，strings, tuples, 和 numbers 是<strong>不可更改</strong>的对象，而 list,dict 等则是<strong>可更改</strong>的对象。</p>
<ul>
<li>**不可变类型：**变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 <strong>5 被丢弃</strong>，不是改变 a 的值，相当于新生成了 a。</li>
<li>**可变类型：**变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li>**不可变类型：**类似 <strong>C++ 的值传递</strong>，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li>
<li>**可变类型：**类似 <strong>C++ 的引用传递</strong>，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
<p><strong>python 中一切都是对象</strong>，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>
<h3 id="不定长参数">不定长参数</h3>
<p>你可能需要一个函数能处理比当初声明时更多的参数。加了**星号 *** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vartuple)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">输出: </span><br><span class="line"><span class="number">70</span></span><br><span class="line">(<span class="number">60</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<p>加了<em><em>两个星号 <em>*</em></em> 的参数会以</em><em>字典</em>*的形式导入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, **vardict </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo(<span class="number">1</span>, a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">输出: </span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果单独出现星号 *<strong><strong>，则星号 ***** 后的参数</strong>必须用关键字</strong>传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b,*,c</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line"></span><br><span class="line">x = test(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>)<span class="comment">#关键字传入</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<h2 id="匿名函数">匿名函数</h2>
<p>Python 使用 <strong>lambda</strong> 来创建匿名函数。所谓匿名，意即不再使用 <strong>def</strong> 语句这样标准的形式定义一个函数。</p>
<p>ambda 函数的语法只包含一个语句，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>
<p>设置参数 a 加上 10:</p>
<h3 id="实例">实例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a : a + <span class="number">10</span> </span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<h1>Python栈和队列</h1>
<p>Python中列表是可变的，这是它区别于字符串和元组的最重要的特点，一句话概括即：<strong>列表可以修改，而字符串和元组不能。</strong></p>
<p>以下是 Python 中列表的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">list.append(x)</td>
<td style="text-align:left"><strong>把一个元素添加到列表的结尾</strong>，相当于 a[len(a):] = [x]。</td>
</tr>
<tr>
<td style="text-align:left">list.extend(L)</td>
<td style="text-align:left">通过<strong>添加指定列表的所有元素</strong>来扩充列表，相当于 a[len(a):] = L。</td>
</tr>
<tr>
<td style="text-align:left">list.insert(i, x)</td>
<td style="text-align:left"><strong>在指定位置插入一个元素</strong>。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td>
</tr>
<tr>
<td style="text-align:left">list.remove(x)</td>
<td style="text-align:left"><strong>删除列表中值为 x 的第一个元素</strong>。如果没有这样的元素，就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.pop([i])</td>
<td style="text-align:left"><strong>从列表的指定位置移除元素，并将其返回。<strong>如果</strong>没有指定索引</strong>，a.pop()<strong>返回最后一个元素</strong>。元素随即从列表中被移除。（方法中 <strong>i 两边的方括号表示这个参数是可选的</strong>，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td>
</tr>
<tr>
<td style="text-align:left">list.clear()</td>
<td style="text-align:left"><strong>移除列表中的所有项</strong>，等于del a[:]。</td>
</tr>
<tr>
<td style="text-align:left">list.index(x)</td>
<td style="text-align:left"><strong>返回列表中第一个值为 x 的元素的索引</strong>。如果没有匹配的元素就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.count(x)</td>
<td style="text-align:left"><strong>返回 x 在列表中出现的次数</strong>。</td>
</tr>
<tr>
<td style="text-align:left">list.sort()</td>
<td style="text-align:left"><strong>对列表中的元素进行排序</strong>。（从小到大）</td>
</tr>
<tr>
<td style="text-align:left">list.reverse()</td>
<td style="text-align:left"><strong>颠倒列表中的元素。</strong></td>
</tr>
<tr>
<td style="text-align:left">list.copy()</td>
<td style="text-align:left"><strong>返回列表的浅复制</strong>，等于a[:]。</td>
</tr>
</tbody>
</table>
<h2 id="栈">栈</h2>
<h3 id="将列表当做栈使用">将列表当做栈使用</h3>
<p>在 Python 中，可以使用列表（list）来实现栈的功能。栈是一种<strong>后进先出</strong>（LIFO, Last-In-First-Out）数据结构，意味着最后添加的元素最先被移除。列表提供了一些方法，使其非常适合用于栈操作，特别是 <strong>append()</strong> 和 <strong>pop()</strong> 方法。</p>
<p>用 append() 方法可以把一个元素添加到栈顶，用不指定索引的 pop() 方法可以把一个元素从栈顶释放出来。</p>
<h4 id="栈操作">栈操作</h4>
<ul>
<li><strong>压入（Push）</strong>: 将一个元素添加到栈的顶端。</li>
<li><strong>弹出（Pop）</strong>: 移除并返回栈顶元素。</li>
<li><strong>查看栈顶元素（Peek/Top）</strong>: 返回栈顶元素而不移除它。</li>
<li><strong>检查是否为空（IsEmpty）</strong>: 检查栈是否为空。</li>
<li><strong>获取栈的大小（Size）</strong>: 获取栈中元素的数量。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、创建一个空栈</span></span><br><span class="line">stack = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、压入（Push）操作</span></span><br><span class="line">stack.append(<span class="number">1</span>)</span><br><span class="line">stack.append(<span class="number">2</span>)</span><br><span class="line">stack.append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(stack)  <span class="comment"># 输出: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、弹出（Pop）操作</span></span><br><span class="line">top_element = stack.pop()</span><br><span class="line"><span class="built_in">print</span>(top_element)  <span class="comment"># 输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(stack)        <span class="comment"># 输出: [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、查看栈顶元素（Peek/Top）</span></span><br><span class="line">top_element = stack[-<span class="number">1</span>] <span class="comment">#访问列表的最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(top_element)  <span class="comment"># 输出: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、检查是否为空（IsEmpty）</span></span><br><span class="line">is_empty = <span class="built_in">len</span>(stack) == <span class="number">0</span> <span class="comment">#`==`判断栈中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"><span class="built_in">print</span>(is_empty)  <span class="comment"># 输出: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6、获取栈的大小（Size）</span></span><br><span class="line">size = <span class="built_in">len</span>(stack) <span class="comment">#返回栈中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(size)  <span class="comment"># 输出: 2</span></span><br></pre></td></tr></table></figure>
<h5 id="完整实例"><strong>完整实例</strong></h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>: <span class="comment">#栈类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = [] <span class="comment">#使用列表用作栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.stack.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> self.stack.pop() <span class="comment">#如果栈不为空，会移除并返回队列中的最后一个元素。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;pop from empty stack&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>] <span class="comment">#如果栈不为空，会返回队列中的最后一个元素。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;peek from empty stack&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) == <span class="number">0</span> <span class="comment">#`==`判断栈中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) <span class="comment">#返回栈中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">stack = Stack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈顶元素:&quot;</span>, stack.peek())  <span class="comment"># 输出: 栈顶元素: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈大小:&quot;</span>, stack.size())    <span class="comment"># 输出: 栈大小: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;弹出元素:&quot;</span>, stack.pop())  <span class="comment"># 输出: 弹出元素: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈是否为空:&quot;</span>, stack.is_empty())  <span class="comment"># 输出: 栈是否为空: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;栈大小:&quot;</span>, stack.size())    <span class="comment"># 输出: 栈大小: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">栈顶元素: <span class="number">3</span></span><br><span class="line">栈大小: <span class="number">3</span></span><br><span class="line">弹出元素: <span class="number">3</span></span><br><span class="line">栈是否为空: <span class="literal">False</span></span><br><span class="line">栈大小: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="队列">队列</h2>
<h3 id="将列表当作队列使用">将列表当作队列使用</h3>
<p>在 Python 中，列表（list）可以用作队列（queue），但由于列表的特点，直接使用列表来实现队列并不是最优的选择。</p>
<p>队列是一种<strong>先进先出</strong>（FIFO, First-In-First-Out）的数据结构，意味着<strong>最早添加的元素最先被移除</strong>。</p>
<p>使用列表时，如果频繁地在列表的开头插入或删除元素，性能会受到影响，因为这些操作的时间复杂度是 O(n)。为了解决这个问题，Python 提供了 collections.deque，它是<strong>双端队列</strong>，可以<strong>在两端高效地添加和删除元素</strong>。</p>
<h4 id="使用-collections-deque-实现队列">使用 collections.deque 实现队列</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个空队列</span></span><br><span class="line">queue = deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向队尾添加元素</span></span><br><span class="line">queue.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)  <span class="comment"># 输出: 队列状态: deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从队首移除元素</span></span><br><span class="line">first_element = queue.popleft()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除的元素:&quot;</span>, first_element)  <span class="comment"># 输出: 移除的元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)            <span class="comment"># 输出: 队列状态: deque([&#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看队首元素（不移除）</span></span><br><span class="line">front_element = queue[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队首元素:&quot;</span>, front_element)    <span class="comment"># 输出: 队首元素: b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查队列是否为空</span></span><br><span class="line">is_empty = <span class="built_in">len</span>(queue) == <span class="number">0</span> <span class="comment">#`==`判断队列中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列是否为空:&quot;</span>, is_empty)     <span class="comment"># 输出: 队列是否为空: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取队列大小</span></span><br><span class="line">size = <span class="built_in">len</span>(queue) <span class="comment">#返回队列中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, size)            <span class="comment"># 输出: 队列大小: 2</span></span><br></pre></td></tr></table></figure>
<h4 id="使用列表实现队列">使用列表实现队列</h4>
<p>虽然 deque更高效，但如果坚持使用列表来实现队列，也可以这么做。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 创建队列</span></span><br><span class="line">queue = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 向队尾添加元素</span></span><br><span class="line">queue.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)  <span class="comment"># 输出: 队列状态: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 从队首移除元素</span></span><br><span class="line">first_element = queue.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除的元素:&quot;</span>, first_element)  <span class="comment"># 输出: 移除的元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列状态:&quot;</span>, queue)            <span class="comment"># 输出: 队列状态: [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 查看队首元素（不移除）</span></span><br><span class="line">front_element = queue[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队首元素:&quot;</span>, front_element)    <span class="comment"># 输出: 队首元素: b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5. 检查队列是否为空</span></span><br><span class="line">is_empty = <span class="built_in">len</span>(queue) == <span class="number">0</span> <span class="comment">#`==`判断队列中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列是否为空:&quot;</span>, is_empty)     <span class="comment"># 输出: 队列是否为空: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6. 获取队列大小</span></span><br><span class="line">size = <span class="built_in">len</span>(queue) <span class="comment">#返回队列中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, size)            <span class="comment"># 输出: 队列大小: 2</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="完整实例-2"><strong>完整实例</strong></h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>: <span class="comment">#队列类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.queue = [] <span class="comment">#使用列表用作队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.queue.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty(): <span class="comment">#如果队列不为空，会移除并返回队列中的第一个元素。</span></span><br><span class="line">            <span class="keyword">return</span> self.queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;dequeue from empty queue&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty(): <span class="comment">#如果队列不为空，会返回队列中的第一个元素。</span></span><br><span class="line">            <span class="keyword">return</span> self.queue[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;peek from empty queue&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.queue) == <span class="number">0</span> <span class="comment">##`==`判断队列中是否有元素，如果没有则返回true，反之返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.queue) <span class="comment">#返回队列中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">queue = Queue()</span><br><span class="line">queue.enqueue(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">queue.enqueue(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">queue.enqueue(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队首元素:&quot;</span>, queue.peek())    <span class="comment"># 输出: 队首元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, queue.size())    <span class="comment"># 输出: 队列大小: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除的元素:&quot;</span>, queue.dequeue())  <span class="comment"># 输出: 移除的元素: a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列是否为空:&quot;</span>, queue.is_empty())  <span class="comment"># 输出: 队列是否为空: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列大小:&quot;</span>, queue.size())    <span class="comment"># 输出: 队列大小: 2</span></span><br></pre></td></tr></table></figure>
<p>虽然可以使用列表来实现队列，但<strong>使用 collections.deque 会更高效和简洁</strong>。</p>
<p>它提供了 O(1) 时间复杂度的添加和删除操作，非常适合队列这种数据结构。</p>
<h2 id="列表推导式">列表推导式</h2>
<p>列表推导式提供了从序列创建列表的简单途径。</p>
<p>将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#让3乘列表中的每一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">[<span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#让队列中的每个元素平方</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[x, x**<span class="number">2</span>] <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">[[<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">16</span>], [<span class="number">6</span>, <span class="number">36</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用if语句过滤部分元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &gt; <span class="number">3</span>]</span><br><span class="line">[<span class="number">12</span>, <span class="number">18</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &lt; <span class="number">2</span>]</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h2 id="del-语句">del 语句</h2>
<p>使用 del 语句可以从一个列表中<strong>根据索引来删除一个元素，而不是值来删除元素</strong>。这与使用 pop() 返回一个值不同。</p>
<p>可以用 del 语句从列表中删除一个切割，或清空整个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>] <span class="comment">#删除索引从2到3的所有元素（不包括4）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[:] <span class="comment">#删除从开始到结束的所有元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以用 del 删除实体变量：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</span><br></pre></td></tr></table></figure>
<h1>Python模块</h1>
<p>模块是一个包含所有你定义的函数和变量的文件，<a href="http://xn--g6qy6dca976psl2a.py">其后缀名是.py</a>。模块可以被别的程序引入，以使用该模块中的函数等功能。</p>
<h2 id="import-语句">import 语句</h2>
<p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]</span><br></pre></td></tr></table></figure>
<p>一个模块只会被导入一次，不管你执行了多少次 <strong>import</strong>。这样可以防止导入模块被一遍又一遍地执行。</p>
<p><strong>特点：</strong></p>
<ul>
<li>模块的所有功能都被导入，但需要通过 <code>module_name.</code> 前缀来访问。</li>
<li>不会污染当前命名空间，因为所有功能都在模块的命名空间下。</li>
</ul>
<h2 id="from-…-import-语句">from … import 语句</h2>
<p>Python 的 from 语句让你<strong>从模块中导入一个指定的部分</strong>到当前命名空间中，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure>
<h2 id="from-…-import-语句-2">from … import * 语句</h2>
<p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong></p>
<ul>
<li>你可以直接使用模块中的所有公共功能，而<strong>不需要模块名前缀</strong>。</li>
<li>可能会污染当前命名空间，因为<strong>如果导入的模块与当前命名空间中已有的变量或函数名称冲突，它们会被覆盖</strong>。</li>
<li>可读性较差，因为<strong>很难判断某个功能是从哪里导入</strong>的。</li>
</ul>
<h2 id="name-属性">__name__属性</h2>
<h3 id="name-变量的作用"><code>__name__</code> 变量的作用</h3>
<ul>
<li><code>__name__</code> 是一个内置变量，用来标识当前模块的名字。</li>
<li>如果一个模块（或脚本）是被直接运行的，那么 <code>__name__</code> 的值将被设置为 <code>'__main__'</code>。</li>
<li>如果一个模块是被另一个模块导入的，那么 <code>__name__</code> 的值将是该模块的名字。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;程序自身在运行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我来自另一模块&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<p><strong>1.直接运行这个脚本</strong>：</p>
<ul>
<li>当你直接运行包含这段代码的 Python 脚本时，<code>__name__</code> 的值将是 <code>'__main__'</code>。</li>
<li>因此，<code>if</code> 条件成立，输出会是 <code>'程序自身在运行'</code>。</li>
</ul>
<p><strong>2.作为模块被导入</strong>：</p>
<ul>
<li>如果这个脚本被另一个 Python 脚本导入作为模块，那么 <code>__name__</code> 的值将是该模块的名字（即文件名，不包括扩展名）。</li>
<li>在这种情况下，<code>if</code> 条件不成立，<code>else</code> 分支会执行，输出 <code>'我来自另一模块'</code>。</li>
</ul>
<h3 id="总结">总结</h3>
<p>该结构通常用于<strong>区分模块是直接运行还是被导入</strong>，从而<strong>控制模块的行为</strong>，确保<strong>只有在模块作为主程序运行时，特定的代码才会执行</strong>。</p>
<h1>异常处理</h1>
<p>异常捕捉可以使用 <strong>try/except</strong> 语句。</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/07/try_except.png" alt="img" style="zoom:50%;" />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>)) <span class="comment">#将字符串转换为整数，其实我们输入的内容都是字符串，例如7</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的不是数字，请再次尝试输入！&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="try-except…else">try/except…else</h2>
<p><strong>try/except</strong> 语句还有一个可选的 <strong>else</strong> 子句，如果使用这个子句，那么必须放在所有的 except 子句之后。</p>
<p>else 子句将在 try 子句没有发生任何异常的时候执行。</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/07/try_except_else.png" alt="img" style="zoom:50%;" />
<p>使用 else 子句比把所有的语句都放在 try 子句里面要好，这样可以避免一些意想不到，而 except 又无法捕获的异常。</p>
<h2 id="try-finally-语句">try-finally 语句</h2>
<p>try-finally 语句无论是否发生异常都将执行最后的代码。</p>
<img src="https://www.runoob.com/wp-content/uploads/2019/07/try_except_else_finally.png" alt="img" style="zoom:50%;" />
<h2 id="抛出异常">抛出异常</h2>
<p>在 Python 中，<code>raise</code> 语句用于主动抛出一个指定的异常。</p>
<p>可以用来引发一个异常，从而控制程序的流程，或者在特定条件下终止程序的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_positive</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;这个数字不是正数！&quot;</span>) <span class="comment">#抛出异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    check_positive(-<span class="number">5</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e: <span class="comment">#捕捉异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;捕获到异常:&quot;</span>, e)</span><br></pre></td></tr></table></figure>
<p>有时，你可能想要捕获一个异常，然后再次抛出它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ZeroDivisionError(<span class="string">&quot;除数不能为零！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;捕获到异常:&quot;</span>, e)</span><br><span class="line">        <span class="comment"># 再次抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = divide(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;在外部捕获到的异常:&quot;</span>, e)</span><br></pre></td></tr></table></figure>
<p>在这个例子中，如果除数为零，程序会主动抛出 <code>ZeroDivisionError</code>。</p>
<p>这个异常会被 <code>try-except</code> 结构内部捕获，并且在捕获后，异常会被再次抛出，并在外部捕获到。</p>
<h1>Python面向对象</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span> <span class="comment">#两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>): <span class="comment">#虽然它以双下划线开头，但这并不意味着它是私有的，只是一个约定俗成的标识。</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line">s = student(<span class="string">&#x27;ken&#x27;</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">3</span>) <span class="comment">#类的实例化</span></span><br><span class="line">s.speak()</span><br><span class="line"></span><br><span class="line"><span class="comment">#多继承示例</span></span><br><span class="line"><span class="comment">#另一个类，多继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span>%(self.name,self.topic))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker,student):</span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">&quot;Tim&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure>
<p>在 Python中，self 是一个惯用的名称，用于表示<strong>当前调用者</strong>的类的实例（对象），代表当前对象的地址。</p>
<p>类有一个名为 <code>__</code>init<code>__</code>() 的特殊方法（<strong>构造方法</strong>），该方法在类实例化时会<strong>自动调用</strong>。</p>
<p>在类的内部，类方法必须包含参数 <strong>self</strong>，且为<strong>第一个参数</strong>，<strong>self</strong> 代表的是类的实例。</p>
<p><strong>self</strong> 的名字并不是规定死的，也可以使用 <strong>this</strong>，但是最好还是按照约定使用 <strong>self</strong>。</p>
<p><strong>两个下划线</strong>开头，声明该方法为<strong>私有方法</strong>，只能在类的内部调用 ，不能在类的外部调用。</p>
<h2 id="方法重写">方法重写</h2>
<p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br><span class="line"><span class="built_in">super</span>(Child,c).myMethod() <span class="comment">#用子类对象调用父类已被覆盖的方法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>实况足球有感</title>
    <url>/2024/07/14/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E5%AE%9E%E5%86%B5%E8%B6%B3%E7%90%83%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e542f22c531659fd6f6e923314459c359bdcfb7466a70721fe38f08491b7def7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>实况足球</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下学期总结</title>
    <url>/2024/07/13/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>简短的学期总结。</p>
<p>真是觉得现在的自己写不出什么像样的文字了，有时间去读一读书吧。</p>
<span id="more"></span>
<hr>
<p>今天，已经是我回家的第二天，闲来无事，写一个学期总结。</p>
<p>我的大二下就这么过去了，好快，好快。这个学期可能是我目前最轻松的一个学期了，因为我没有选任何额外的专业课。这也就意味着除了后面的实验课，我没有其他的早八，可以每天九点起床，洗个澡再去上课。每天的生活就是宿舍-教室-食堂三点一线，时不时还会去东门买点小吃。我已经记不清看了多少场球赛了，上半学期是马竞的欧冠淘汰赛，下半学期又是法国的欧洲杯。为了防止睡过头而错过比赛，我都会提前在KFC买好咖啡，直接熬一个通宵，然后第二天如果没课就睡到十一点多。最拼命的一次就是看马竞vs国米，马竞主场逆转国米，给我激动坏了，本来五点多就结束的比赛，我硬是刷赛后新闻到七点才睡觉，然后九点多又爬起来去上计组。我的足球生活很是惬意，我加了一个马竞up的球迷群，每天都会在群里聊天；我又开始玩起了实况足球，最开始是国服，后来又下载了国际服，每天都会打活动（其实挺花时间的）。</p>
<p>我清楚的知道，这个学期的我有点松懈。第一次参加竞赛（大英）便惨败而归；概率论的期中仅仅只有62分；计组的期中也只考了七十多分；第一次英语六级感觉也是遭遇滑铁卢。不过幸好，我及时醒悟，全力为期末考试做好准备。截至目前，还剩毛概和体育课没有出成绩，但我本学期的绩点已经破天荒地来到4.09，平均绩点也上升到3.59，破3.6已经是志在必得。可能是这学期的课比较简单？也不知道其他同学的成绩如何，罢了，我不想去操心别人。在社交上，这学期通过体育课认识了几个不错的朋友，与之前有过矛盾的一个朋友也算是破镜重圆。</p>
<p>马上，我就要升入大三，至于保研本校还是考研985，我还没有想好，还需要一些时间让我去思考。当下我唯一能确定的就是，我必须得<strong>全方面</strong>地提升我的个人能力——心态，自律，口才，勇气，决心，专业知识······我必须不断地进步，不能再懈怠，不能再患得患失，踌躇不前。我得利用好剩下一年多的时间去完善自己，让自己具有竞争力。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>法国被淘汰后的足球感想</title>
    <url>/2024/07/11/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E6%B3%95%E5%9B%BD%E8%A2%AB%E6%B7%98%E6%B1%B0%E5%90%8E%E7%9A%84%E8%B6%B3%E7%90%83%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240711021426.jpg" style="zoom:50%;" />
<span id="more"></span>
<hr>
<p>今天凌晨五点，法国队1:2不敌西班牙，正式结束了2024年欧洲杯之旅。一整天心情都很差，因为在我眼中，法国队还是18年那支所向披靡的法国队，还是22年那支极具统治力，只是在决赛惜败给黑幕的法国队。然而事实是，格子的老化使中场失去了创造力；被德尚赋予厚望的后腰楚阿梅尼成为了法国队的最弱一环；开赛第一场姆巴佩便受伤，导致状态根本不在线，不少绝佳机会都白白浪费掉。法国队在开场第8分钟便取得进球，那时我真的以为这支队伍终于迎来了爆发，但一颗正冉冉升起的新星打破了我的幻想。16岁的亚马尔一脚无解的弧线球，迅速将比赛扳平。随后奥尔莫独自一人杀入法国本应该是最稳固的后防，晃过楚阿梅尼，一脚射门打在孔德腿上折射入网。然而此时仅仅只是比赛第25分钟。算上补时至少有70分钟的时间供法国队追平比分，但这件事直到比赛结束也没有发生。不禁想起18年世界杯横空出世的姆巴佩轻而易举地淘汰掉梅西，只是这一次的主角换成了亚马尔，配角换成了姆巴佩。关于比赛内容，我不想再说其他的，就是技不如人，仅此而已。</p>
<p>赛后不出所料，评论区被胜利者占领。部分巴萨球迷疯狂地吹捧亚马尔，说他是新球王，梅西的接班人。不知道他们是否还记得，上一个他们如此夸耀的球员是现在被巴萨抛弃到布莱顿的法蒂。</p>
<p>无论怎样，法国队已经出局，格子无缘国家队大满贯，姆巴佩亲手葬送了自己的金球奖，我想我也该回归到现实生活中了。在这个学期，我熬了太多夜，看了太多比赛，足球一度占据了我生活中最大的比重。最让我激动的两场比赛应该就是——马竞主场逆转国米，法国点球淘汰葡萄牙。毫无疑问，足球耗费了我太多的精力，我会不时的关注比赛新闻，在球迷群里聊天，花时间看比赛，看赛后分析，哦对了，还有玩实况足球。我热爱足球，但足球不应该是我的大多数。下学期我就大三了，有比足球更重要的事情等着我去做，我得好好努力了。</p>
<p>但我依然会热爱足球，始终会坚定不移地支持马竞，支持法国队。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下六月中总结</title>
    <url>/2024/06/19/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%85%AD%E6%9C%88%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>上午结束了概率论的期末考试，休息了一下午，写个总结给自己鼓鼓劲吧。</p>
<p>————2024/6/17</p>
<span id="more"></span>
<hr>
<p>这半个月以来，经历了大大小小的四场考试，那么就让我细细说来。</p>
<p><strong>第一场</strong>——数据库期末。经过上个月的数据库实验，一些重要的sql语句早已烂熟于心，但荒谬的是这门课的考试更多是以概念为核心。考试是开卷的形式，于是我花了两三天时间把课本过了一遍，最后也如同我想象中那般，在书上基本可以找到答案。然而题量却大的惊人，一共一个半小时的时间，有10道选择，一堆简答题，写sql语句，写触发器语句，画E-R图等等。即使我已经很熟悉课本，看一眼题目就知道对应的知识点大致在书上的哪一块，但每一道题都得写很长很长的一段话，于是在过去四十多分钟后，我才艰难地把简答题写完。画E-R图那一题更加恶心，三个实体，每个实体都有一堆属性，而且全部都是中文，一共要画两个局部图和一个总体图，由于时间实在是不够，再加上我并不确定我画的是否正确，于是干脆只画了一个局部图，又画了两个框架图上去。最后一题是查询，大概是要使用关系代数，但是题目上除了说明要查询的内容之外什么都没写，因为我对关系代数比较生疏，同样再加上时间没剩多少，于是索性用sql语句写了（实体和属性依然是中文）。写完后就收卷了，这场考试就这么潦草地收场了。后来我特意去问老师最后一题可不可以使用sql语句，但是直到现在她也没有回我，甚至在考完试不久后就迫不及待地把课程群解散了，好可笑。</p>
<p>第二场——习思想期中。这种思政课的考试很水，通常都是提前发下来题库，学生只要把题都刷了，就会考的很好。所以我也是如此对待这门课程，花了两三天时间把题刷完，然后回看了一两遍。最后只用5分钟考了99分，可惜错的那一分是二选一自己改错了，没有相信自己的直觉。</p>
<p>第三场——英语六级。很遗憾，我的第一次英语六级考试似乎以失败告终了。虽然在三个多月前就开始背单词，一共四千多个，直到考前还剩下五百多个，但是要复习的单词达到了将近三千个。没错，我并没有完全地将背单词这项任务坚持下去，这已经导致了我并没有充足的信心去参加考试。刷过的真题也仅限于在准备之前的学术英语阅读时的三套，甚至一套听力都没有完整地听过。于是，选词填空还是好多词都不认识，听力前两篇什么都没听懂，任凭一句又一句的对话从我耳边溜走。第三篇听力时才进入状态，但估计也对不了几道。阅读其实还可以，不算难，但在写题的时候还是感觉差点什么，我无法很专注地去快速浏览题目和文章，常常会在一个地方纠结很久。最可笑的是，六级考试的顺序是先写作文，然后再听力，最后是阅读和翻译，然而我并不清楚。所以在开考时，我先翻到了阅读部分，幸运的是我坐在第一排，前面的老师看到我的操作后将我制止，及时纠正我的错误行为。后来一想也挺后怕的，要是我坐在后排，直接开始写阅读，没有老师制止我，那么等到半个小时后放听力，我的作文将会是一片空白，结局会更加惨烈。不知道能不能考过吧，但即使能过，也就是400多分，很失望，特别失望，希望12月份那一次可以好好准备，脑子清醒点。</p>
<p>第四场——概率论与数理统计。由于期中考试并没有考好，大概七十多分，于是我很想把这次期末考好。先把笔记大致过了一遍，然后准备开始写复习题，然而考试前五天我才发现复习题足足有十套，还有一套21年的真题和一套期中试题。最初的打算是努努力把所有题都写了，但途中发现我对知识点掌握的并不娴熟，我需要一边翻笔记才能一边做题，有时候还得看着答案做。第一套写的很慢很慢，于是我决定能写多少写多少，重要的是掌握解题的方法，毕竟大多都是同类型的题目。最后我写了完整的五套，把十套的选择和填空都写了。考前一天的晚上，我重新回顾笔记，开始背一些重要的公式。结局还行，所有题都写了，并在最后五分钟检查卷子的时候发现了第一个填空题的错误，然后迅速地将其改正。希望会有一个令我满意的分数。至此，我大学期间所有的数学课程正式结束。除了大一上没好好学，高数上考的一团糟之外，其他课程好像学的也还可以，但对于数学的学习远未结束，下学期的大学生数学竞赛以及一年后的考研数学，还需下一番功夫。</p>
<p>我知道我时常陷入迷茫，心不在焉、患得患失。我害怕失败，害怕自己因不够细心而导致全盘皆输；我太过于追求完美但同时又不够自信；我渴望建立一个理想的生活，但常常发现理想与现实总有大大小小的不能接受的差别。但无论如何，请一定守住内心中的美好、尽量远离一切消极的腐朽的思想、保持一个乐观愉快的心情、照顾好自己的身体、珍惜当下。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下五月总结</title>
    <url>/2024/05/31/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E4%BA%94%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>匆忙的五月即将结束，崭新的六月马上来临！</p>
<p>————2024/5/30</p>
<span id="more"></span>
<hr>
<p>今天上午结束了为期两周的数据库课设，也总算是有了让我喘息的时间，在这个闲暇的短暂而宝贵的夜晚，写个总结吧。</p>
<p>整个五月可以说是忙碌的，五一假后便又是继续两周的数据库实验，虽说实验不难，但是前期要做的准备工作有很多，例如如何将数据成功导入数据库，这是实验的起点。还记得刚开始十分迷茫，对着所谓的实验指导书亦步亦趋却毫无效果，网上查了一些资料也都是鱼龙混杂，最后还是问了班里的一位同学，结合他的建议又继续在网上查找资料，所幸最后顺利完成。这个实验带来的压力还挺大的，不是指它本身有多么困难以至于无从下手，而是每一次的实验都要提前自己做完，然后在相应的时间去找老师验收。这个等待验收的过程是无比煎熬的，因为我不知道我做的是否正确，我是否能正确回答老师的提问。如果说数据库实验是餐前小菜，那么接下来两周的数据库课设便是一道硬菜了。</p>
<p>还是熟悉的老样子，老师只管下发任务，至于如何完成是学生自己的事。我从上上周的周日开始做课设，先是在CSDN找相应的教程，但是发现大都不符合我想要的效果，而且纯文字图片看上去就很复杂晦涩。最后终于在B站找到了一个大体上相符的教学视频，于是我认真地把视频看完，然后开始着手做我的课设，每天修修改改，一直做到了昨天，大概持续了10天的样子。但平心而论，如果让我彻底地真正地一个人做这个课设，我是绝对做不出来的。例如如何将winforms编程模块与mysql数据库相连，这同时也是整个课设的起点，然而，视频里教学的是与sqlserver连接，对应的代码经过我修改后还是用不了。那天晚上急的我焦头烂额，疯狂地查找资料却根本看不懂，最后没办法了我打算也使用sqlserver，但这个软件却安装失败了。电脑也没有电了，我只能上床睡觉，很是绝望。但是我怎么可能睡得着呢，于是我刷着那个视频的评论区，终于在最下面，发现了一条评论，发了使用mysql的连接代码，于是我决定第二天先试一试这段代码，如果还是不行就想办法重新安装sqlserver。运气很好，第二天早上用这段代码完美连接上mysql数据库。我使用管理员账号登录系统后，当“登录成功”的消息框弹出时，我激动坏了，因为一切又都充满了希望。（晚上12点了，明晚再写吧。）</p>
<p>在做课设的过程中，自然会遇到不少问题。比如要实现数据备份和数据恢复这个功能，我查了好多资料，都是直接备份数据库，而且需要在命令行界面执行代码，很少复杂。那天晚上始终没有什么头绪，走了很多弯路，想不到任何方法。然而第二天一早去教室后静下心来，慢慢思考，突然灵光乍现，想到可以创建一张专门用来备份数据的表，于是这个本来很复杂的问题就被轻松解决了。总之，我认为这次课设对于我的帮助是很大的。从一开始只会跟着视频一行一行抄代码，到后来可以自己独立地编写一个功能模块，或许这就是学习编程的快乐所在吧，把陌生的看起来很复杂的东西一层层剖析开来，最终完全掌握并为我所用。在学习的过程中，遇到问题是难免的，有时可以轻松地在网上找到答案，但也有时耗费数小时也只会是徒劳。迷茫、惊慌、不知所措会在这时将我团团包围。但若在此时放弃，之前所做的一切都将功亏一篑，逃避只是暂时的，迟早有一天这个难题会再度降临，若那时已经无处可逃，那又该如何呢？所以啊，静下心来，慢慢思考，开拓思维，<strong>事情再难也总会有解决的办法</strong>，倘若随随便便就被一点点困难给吓倒，那谈何光明的未来。</p>
<p>总之，这个持续了一个月的数据库实验及课设已经彻底结束，我分别拿到了100和95的高分，也算是对得起自己。</p>
<p>明天就是崭新的六月了，迎接我的便是一场又一场的考试。做好时间规划，认真复习，结局是好是坏并不那么重要，关键是我到底有没有认真地去对待。加油吧，<strong>想清楚自己到底想要什么</strong>，并为之努力和奋斗。做什么、如何做<strong>无关于他人，仅在于自己</strong>。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>C#新知</title>
    <url>/2024/05/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C%20sharp/</url>
    <content><![CDATA[<p>由于写数据库课设的时候需要用到C#中的winform控件，于是自己从菜鸟教程上过了一遍C#基础。</p>
<p>语法大部分和C++类似，所以这里只记录了不熟的或是新的知识点。</p>
<span id="more"></span>
<hr>
<h2 id="foreach-循环">foreach 循环</h2>
<p>在前面的实例中，我们使用一个 for 循环来访问每个数组元素，您也可以使用一个 <strong>foreach</strong> 语句来遍历数组。</p>
<p>以下实例我们使用 foreach 来遍历一个数组：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ArrayApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">MyArray</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">int</span> []  n = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>]; <span class="comment">/* n 是一个带有 10 个整数的数组 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 初始化数组 n 中的元素 */</span>         </span><br><span class="line">         <span class="keyword">for</span> ( <span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">         &#123;</span><br><span class="line">            n[i] = i + <span class="number">100</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">         <span class="keyword">foreach</span> (<span class="built_in">int</span> j <span class="keyword">in</span> n )</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="built_in">int</span> i = j<span class="number">-100</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Element[&#123;0&#125;] = &#123;1&#125;&quot;</span>, i, j);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">Element[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Element[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">Element[<span class="number">2</span>] = <span class="number">102</span></span><br><span class="line">Element[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">Element[<span class="number">4</span>] = <span class="number">104</span></span><br><span class="line">Element[<span class="number">5</span>] = <span class="number">105</span></span><br><span class="line">Element[<span class="number">6</span>] = <span class="number">106</span></span><br><span class="line">Element[<span class="number">7</span>] = <span class="number">107</span></span><br><span class="line">Element[<span class="number">8</span>] = <span class="number">108</span></span><br><span class="line">Element[<span class="number">9</span>] = <span class="number">109</span></span><br></pre></td></tr></table></figure>
<h2 id="类-vs-结构">类 vs 结构</h2>
<p>类和结构在设计和使用时有不同的考虑因素，类适合表示复杂的对象和行为，支持继承和多态性，而结构则更适合表示轻量级数据和值类型，以提高性能并避免引用的管理开销。</p>
<p>类和结构有以下几个基本的不同点：</p>
<p><strong>值类型 vs 引用类型：</strong></p>
<ul>
<li><strong>结构是值类型（Value Type）：</strong> 结构是值类型，它们在栈上分配内存，而不是在堆上。当将结构实例传递给方法或赋值给另一个变量时，将复制整个结构的内容。</li>
<li><strong>类是引用类型（Reference Type）：</strong> 类是引用类型，它们在堆上分配内存。当将类实例传递给方法或赋值给另一个变量时，实际上是传递引用（内存地址）而不是整个对象的副本。</li>
</ul>
<p><strong>继承和多态性：</strong></p>
<ul>
<li><strong>结构不能继承：</strong> 结构不能继承其他结构或类，也不能作为其他结构或类的基类。</li>
<li><strong>类支持继承：</strong> 类支持继承和多态性，可以通过派生新类来扩展现有类的功能。</li>
</ul>
<p><strong>默认构造函数：</strong></p>
<ul>
<li><strong>结构不能有无参数的构造函数：</strong> 结构不能包含无参数的构造函数。每个结构都必须有至少一个有参数的构造函数。</li>
<li><strong>类可以有无参数的构造函数：</strong> 类可以包含无参数的构造函数，如果没有提供构造函数，系统会提供默认的无参数构造函数。</li>
</ul>
<p><strong>赋值行为：</strong></p>
<ul>
<li>类型为类的变量在赋值时存储的是引用，因此两个变量指向同一个对象。</li>
<li>结构变量在赋值时会复制整个结构，因此每个变量都有自己的独立副本。</li>
</ul>
<p><strong>传递方式：</strong></p>
<ul>
<li>类型为类的对象在方法调用时通过引用传递，这意味着在方法中对对象所做的更改会影响到原始对象。</li>
<li>结构对象通常通过值传递，这意味着传递的是结构的副本，而不是原始结构对象本身。因此，在方法中对结构所做的更改不会影响到原始对象。</li>
</ul>
<p><strong>可空性：</strong></p>
<ul>
<li>**结构体是值类型，不能直接设置为 *<em>null*</em>：**因为 <strong>null</strong> 是引用类型的默认值，而不是值类型的默认值。如果你需要表示结构体变量的缺失或无效状态，可以使用 <strong>Nullable<T></strong> 或称为 <strong>T?</strong> 的可空类型。</li>
<li><strong>类默认可为null：</strong> 类的实例默认可以为 <code>null</code>，因为它们是引用类型。</li>
</ul>
<p><strong>性能和内存分配：</strong></p>
<ul>
<li><strong>结构通常更轻量：</strong> 由于结构是值类型且在栈上分配内存，它们通常比类更轻量，适用于简单的数据表示。</li>
<li><strong>类可能有更多开销：</strong> 由于类是引用类型，可能涉及更多的内存开销和管理。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构声明</span></span><br><span class="line"><span class="keyword">struct</span> MyStruct</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构不能有无参数的构造函数</span></span><br><span class="line">    <span class="comment">// public MyStruct()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStruct</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构不能继承</span></span><br><span class="line">    <span class="comment">// struct MyDerivedStruct : MyBaseStruct</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类可以有无参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类支持继承</span></span><br><span class="line">    <span class="comment">// class MyDerivedClass : MyBaseClass</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 结构是值类型，分配在栈上</span></span><br><span class="line">        MyStruct structInstance1 = <span class="keyword">new</span> MyStruct(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        MyStruct structInstance2 = structInstance1; <span class="comment">// 复制整个结构</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类是引用类型，分配在堆上</span></span><br><span class="line">        MyClass classInstance1 = <span class="keyword">new</span> MyClass(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        MyClass classInstance2 = classInstance1; <span class="comment">// 复制引用，指向同一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改结构实例不影响其他实例</span></span><br><span class="line">        structInstance1.X = <span class="number">5</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Struct: <span class="subst">&#123;structInstance1.X&#125;</span>, <span class="subst">&#123;structInstance2.X&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改类实例会影响其他实例</span></span><br><span class="line">        classInstance1.X = <span class="number">6</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Class: <span class="subst">&#123;classInstance1.X&#125;</span>, <span class="subst">&#123;classInstance2.X&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">Struct: <span class="number">5</span>, <span class="number">1</span></span><br><span class="line">Class: <span class="number">6</span>, <span class="number">6</span></span><br></pre></td></tr></table></figure>
<h2 id="枚举eunm"><strong>枚举eunm</strong></h2>
<p>枚举列表中的每个符号代表一个整数值，一个比它前面的符号大的整数值。默认情况下，第一个枚举符号的值是 0。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Days &#123; Sun, Mon, tue, Wed, thu, Fri, Sat &#125;;</span><br><span class="line">          <span class="comment">// 0    1    2    3    4    5    6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例：</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">enum</span> Day &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x = (<span class="built_in">int</span>)Day.Sun;</span><br><span class="line">        <span class="built_in">int</span> y = (<span class="built_in">int</span>)Day.Fri;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sun = &#123;0&#125;&quot;</span>, x);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fri = &#123;0&#125;&quot;</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">Sun = <span class="number">0</span></span><br><span class="line">Fri = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h2 id="C-类的静态成员">C# 类的静态成员</h2>
<p>我们可以使用 <strong>static</strong> 关键字把类成员定义为静态的。当我们声明一个类成员为静态时，意味着无论有多少个类的对象被创建，只会有一个该静态成员的副本。</p>
<p>关键字 <strong>static</strong> 意味着类中只有一个该成员的实例。静态变量用于定义常量，因为它们的值可以通过直接调用类而不需要创建类的实例来获取。静态变量可在成员函数或类的定义外部进行初始化。你也可以在类的定义内部初始化静态变量。</p>
<p>下面的实例演示了<strong>静态变量</strong>的用法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StaticVarApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticVar</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> num;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StaticTester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StaticVar s1 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            StaticVar s2 = <span class="keyword">new</span> StaticVar();</span><br><span class="line">            s1.count();</span><br><span class="line">            s1.count();</span><br><span class="line">            s1.count();</span><br><span class="line">            s2.count();</span><br><span class="line">            s2.count();</span><br><span class="line">            s2.count();         </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;s1 的变量 num： &#123;0&#125;&quot;</span>, s1.getNum());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;s2 的变量 num： &#123;0&#125;&quot;</span>, s2.getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">s1 的变量 num： <span class="number">6</span></span><br><span class="line">s2 的变量 num： <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>你也可以把一个<strong>成员函数</strong>声明为 <strong>static</strong>。这样的函数只能访问静态变量。静态函数在对象被创建之前就已经存在。</p>
<h2 id="C-继承">C# 继承</h2>
<h3 id="继承接口（Interface-Inheritance）">继承接口（Interface Inheritance）</h3>
<p>一个接口可以继承自一个或多个其他接口，派生接口继承了基接口的所有成员。</p>
<p>派生接口可以扩展基接口的成员列表，但不能改变它们的访问修饰符。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个基接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IBaseInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Method1</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个派生接口，继承自基接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IDerivedInterface</span> : <span class="title">IBaseInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Method2</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现派生接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">IDerivedInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method1 implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method2 implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建 MyClass 类的实例</span></span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用继承自基接口的方法</span></span><br><span class="line">        obj.Method1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用派生接口新增的方法</span></span><br><span class="line">        obj.Method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上实例中 MyClass 类实现了 IDerivedInterface 接口，因此必须提供 IDerivedInterface 中定义的所有方法，包括从 IBaseInterface继承的 Method1() 方法。 在 Main 方法中，我们创建了 MyClass 的实例 obj 并调用了它的方法。</p>
<h3 id="C-多重继承">C# 多重继承</h3>
<p>多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。</p>
<p><strong>C# 不支持多重继承</strong>。但是，您可以使用接口来实现多重继承。下面的程序演示了这点：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">InheritanceApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span>(<span class="params"><span class="built_in">int</span> w</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"><span class="built_in">int</span> h</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> height;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 基类 PaintCost</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">PaintCost</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="built_in">int</span> <span class="title">getCost</span>(<span class="params"><span class="built_in">int</span> area</span>)</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 派生类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span>, <span class="title">PaintCost</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getArea</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getCost</span>(<span class="params"><span class="built_in">int</span> area</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">return</span> area * <span class="number">70</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle Rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">         <span class="built_in">int</span> area;</span><br><span class="line">         Rect.setWidth(<span class="number">5</span>);</span><br><span class="line">         Rect.setHeight(<span class="number">7</span>);</span><br><span class="line">         area = Rect.getArea();</span><br><span class="line">         <span class="comment">// 打印对象的面积</span></span><br><span class="line">         Console.WriteLine(<span class="string">&quot;总面积： &#123;0&#125;&quot;</span>,  Rect.getArea());</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;油漆总成本： $&#123;0&#125;&quot;</span> , Rect.getCost(area));</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-多态性">C# 多态性</h2>
<p>多态是同一个行为具有多个不同表现形式或形态的能力。</p>
<p><strong>多态性</strong>意味着有多重形式。在面向对象编程范式中，多态性往往表现为&quot;一个接口，多个功能&quot;。</p>
<p>多态性可以是静态的或动态的。在<strong>静态多态性</strong>中，函数的响应是在编译时发生的。在<strong>动态多态性</strong>中，函数的响应是在运行时发生的。</p>
<p>在 C# 中，每个类型都是多态的，因为包括用户定义类型在内的所有类型都继承自 Object。</p>
<p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgdt-java.png" alt=""></p>
<p>现实中，比如我们按下 F1 键这个动作：</p>
<ul>
<li>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li>
<li>如果当前在 Word 下弹出的就是 Word 帮助；</li>
<li>在 Windows 下弹出的就是 Windows 帮助和支持。</li>
</ul>
<p>同一个事件发生在不同的对象上会产生不同的结果。</p>
<h3 id="动态多态性">动态多态性</h3>
<p>C# 允许您使用关键字 <strong>abstract</strong> 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p>
<p>请注意，下面是有关抽象类的一些规则：</p>
<ul>
<li>您不能创建一个抽象类的实例。</li>
<li>您不能在一个抽象类外部声明一个抽象方法。</li>
<li>通过在类定义前面放置关键字 <strong>sealed</strong>，可以将类声明为<strong>密封类</strong>。当一个类被声明为 <strong>sealed</strong> 时，它不能被继承。抽象类不能被声明为 sealed。</li>
</ul>
<p>下面的程序演示了一个抽象类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorphismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">int</span> <span class="title">area</span>()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>:  <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> length;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = a;</span><br><span class="line">         width = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> () <span class="comment">//子类重写父类中的抽象方法</span></span></span><br><span class="line">      &#123; </span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * length); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         <span class="built_in">double</span> a = r.area();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>,a);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当有一个定义在类中的函数需要在继承类中实现时，可以使用<strong>虚方法</strong>。</p>
<p>虚方法是使用关键字 <strong>virtual</strong> 声明的。</p>
<p>虚方法可以在不同的继承类中有不同的实现。</p>
<p>对虚方法的调用是在运行时发生的。</p>
<p>动态多态性是通过 <strong>抽象类</strong> 和 <strong>虚方法</strong> 实现的。</p>
<p>以下实例创建了 Shape 基类，并创建派生类 Circle、 Rectangle、Triangle， Shape 类提供一个名为 Draw 的虚拟方法，在每个派生类中重写该方法以绘制该类的指定形状。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 虚方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行基类的画图任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>() <span class="comment">//子类重写父类中的虚方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个圆形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个长方形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Triangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;画一个三角形&quot;</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List&lt;Shape&gt; 对象，并向该对象添加 Circle、Triangle 和 Rectangle</span></span><br><span class="line">        <span class="keyword">var</span> shapes = <span class="keyword">new</span> List&lt;Shape&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Rectangle(),</span><br><span class="line">            <span class="keyword">new</span> Triangle(),</span><br><span class="line">            <span class="keyword">new</span> Circle()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 foreach 循环对该列表的派生类进行循环访问，并对其中的每个 Shape 对象调用 Draw 方法 </span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> shape <span class="keyword">in</span> shapes)</span><br><span class="line">        &#123;</span><br><span class="line">            shape.Draw();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;按下任意键退出。&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-接口（Interface）">C# 接口（Interface）</h2>
<p>接口定义了所有类继承接口时应遵循的语法合同。接口定义了语法合同 <strong>“是什么”</strong> 部分，派生类定义了语法合同 <strong>“怎么做”</strong> 部分。</p>
<p>接口定义了属性、方法和事件，这些都是接口的成员。接口只包含了成员的声明。成员的定义是派生类的责任。接口提供了派生类应遵循的标准结构。</p>
<p>接口使得实现接口的类或结构在形式上保持一致。</p>
<p>抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。</p>
<p>接口本身并不实现任何功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约。</p>
<p>抽象类不能直接实例化，但允许派生出具体的，具有实际功能的类。</p>
<p>接口声明默认是 public 的，通常接口命令以 <strong>I</strong> 字母开头，</p>
<hr>
<p>以下实例定义了两个接口 IMyInterface 和 IParentInterface。</p>
<p>如果一个接口继承其他接口，那么实现类或结构就需要实现所有接口的成员。</p>
<p>继承接口后，我们需要实现接口的方法，方法名必须与接口定义的方法名一致。</p>
<p>以下实例 IMyInterface 继承了 IParentInterface 接口，因此接口实现类必须实现 MethodToImplement() 和 ParentInterfaceMethod() 方法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">![<span class="number">0129</span>A8E9<span class="number">-30F</span>E<span class="number">-431</span>D<span class="number">-8</span>C48<span class="number">-399</span>EA4841E9D](C:/Users/<span class="number">86176</span>/Desktop/<span class="number">0129</span>A8E9<span class="number">-30F</span>E<span class="number">-431</span>D<span class="number">-8</span>C48<span class="number">-399</span>EA4841E9D.jpg)<span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IParentInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IMyInterface</span> : <span class="title">IParentInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InterfaceImplementer</span> : <span class="title">IMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InterfaceImplementer iImp = <span class="keyword">new</span> InterfaceImplementer();</span><br><span class="line">        iImp.MethodToImplement();</span><br><span class="line">        iImp.ParentInterfaceMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodToImplement</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;MethodToImplement() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ParentInterfaceMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ParentInterfaceMethod() called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-命名空间（Namespace）">C# 命名空间（Namespace）</h2>
<p><strong>命名空间</strong>的设计目的是提供一种让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p>
<p>我们举一个计算机系统中的例子，一个文件夹(目录)中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img0129A8E9-30FE-431D-8C48-399EA4841E9D.jpg" alt=""></p>
<p>下面的程序演示了命名空间的用法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      first_space.namespace_cl fc = <span class="keyword">new</span> first_space.namespace_cl();</span><br><span class="line">      second_space.namespace_cl sc = <span class="keyword">new</span> second_space.namespace_cl();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果:</span></span><br><span class="line">Inside first_space</span><br><span class="line">Inside second_space</span><br></pre></td></tr></table></figure>
<h3 id="using-关键字"><em>using</em> 关键字</h3>
<p><strong>using</strong> 关键字表明程序使用的是给定命名空间中的名称。例如，我们在程序中使用 <strong>System</strong> 命名空间，其中定义了类 Console。我们可以只写：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine (<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>我们可以写完全限定名称，如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">&quot;Hello there&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>您也可以使用 <strong>using</strong> 命名空间指令，这样在使用的时候就不用在前面加上命名空间名称。该指令告诉编译器随后的代码使用了指定命名空间中的名称。下面的代码演示了命名空间的应用。</p>
<p>让我们使用 using 指定重写上面的实例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> first_space;</span><br><span class="line"><span class="keyword">using</span> second_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">abc</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">efg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      abc fc = <span class="keyword">new</span> abc();</span><br><span class="line">      efg sc = <span class="keyword">new</span> efg();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="嵌套命名空间">嵌套命名空间</h3>
<p>可以使用点（.）运算符访问嵌套的命名空间的成员，如下所示：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;In SomeNameSpace&quot;</span>);</span><br><span class="line">            Nested.NestedNameSpaceClass.SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span>   </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NestedNameSpaceClass</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span> </span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;In Nested&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">In SomeNameSpace</span><br><span class="line">In Nested</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下四月总结</title>
    <url>/2024/05/06/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%9B%9B%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>今天刚结束了五一假期，我觉得还是很有必要写一个<strong>四月总结</strong>。</p>
<p>————2024/5/6</p>
<span id="more"></span>
<hr>
<p>四月可以说是让我极度迷茫的一个月。算是认真准备的大英竞赛在开考十分钟前才发现忘带耳机，于是听力只能外放。高中让我无比自信的英语，在那两个小时里却使我万分折磨。即使我拼命地写，却还是空了三十多分的题，剩下没空的那些题写的也是一塌糊涂。似乎我的所有努力都付诸东流。即使在考前我就做好了心理准备，但当我真正不得不面临失败时，我却无法接受。</p>
<p>带着遗憾、悲愤的心情，下午我又去参加了概率论的期中考试。这场考试我自以为做好了充足的准备，把笔记和作业都认真地过了一遍，好像是志在必得。然而，三道大题我只做出来一道，这一道的最终结果还缺少了两处取值范围，前面的选填好像也有错的题。我又一次对自己产生了疑问，为什么我做不出来，为什么啊？几天后从老师口中得知，大家考的都不错，依然有考满分的同学。似乎别人的成功将我自己的失败无限放大，那一阵子我都特别消极，感觉自己就是一个失败者。想起大一下学期为了弥补落后的绩点，努力学习，最终高数拿到98分的自己，现在的我到底是怎么了。</p>
<p>好像，我确实不够努力。</p>
<p>对于大英竞赛的准备，也仅限于做了十套左右的听力，没有完完整整地做完过一套真题，没有进行过限时训练，没有思考过怎么才能把题做完，只是单纯地以为自己只有听力差，忽视了其他方面的学习。</p>
<p>对于概率论，我完全放弃了在教室听课，因为学校老师讲的快且讲不好。于是我从B站找视频自学，也把每一章的笔记都认真整理了。每一次的作业也都认真写了。但除此之外，我好像没再努力了。在教室，由于落后老师的讲课进度，听不懂他在说什么，于是我索性就不听，在下面做自己的事情，大多数时候都是玩手机，同时还得提防着老师不时的点人。做好的笔记平时也从不点开，只是在考前过了一遍，这就导致我在考试的时候忘记了分布函数是如何写范围的，要是我平时多看看，那么唯一会的一道大题也就不会错了。</p>
<p>总而言之，我太过自视清高了，以为自己稍微学一学就能考好，把那些暗地里比我努力十倍的同学不放在眼里，真是可笑。</p>
<p>但是不论怎样，失败并非世界末日，接下来我能做的就是更加努力，真正的努力。</p>
<p><strong>菜，就多练</strong>啊。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-实验中遇到的问题</title>
    <url>/2024/04/27/%E9%81%87%E5%88%B0%E7%9A%84bug/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong>吐槽一下</strong>：老师就光给了所谓的实验指导，里面甚至还有错误，一切都得靠自己去摸索，去谷歌，去求助同学，真的是费时又费力。</p>
<p>为什么不能给一个详细的操作步骤呢，有时候在网上真的找不到解决问题的方法，会因为一个报错卡住好长时间，热情逐渐被磨灭。</p>
<p>所以老师的作用到底体现在了哪里？</p>
<span id="more"></span>
<hr>
<h1>一、数据导入遇到的一系列问题</h1>
<h2 id="1-要先建立没有外键的表">1.要先建立没有外键的表</h2>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-23-31.png" style="zoom: 50%;" />
<p>例如在本实验中，要先建立没有箭头指向的表，也就是REGION表和PART表，它们不用参考其他的表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 地区表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> REGION(</span><br><span class="line">    R_REGIONKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    R_NAME <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    R_COMMENT <span class="type">varchar</span>(<span class="number">152</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 零件表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> PART(</span><br><span class="line">    P_PARTKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    P_NAME <span class="type">varchar</span>(<span class="number">55</span>),</span><br><span class="line">    P_MFGR <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    P_BRAND <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    P_TYPE <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">    P_SIZE <span class="type">int</span>,</span><br><span class="line">    P_CONTAINER <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    P_RETAILPRICE <span class="type">real</span>,</span><br><span class="line">    P_COMMENT <span class="type">varchar</span>(<span class="number">23</span>)</span><br><span class="line">);</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 国家表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> NATION(</span><br><span class="line">    N_NATIONKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    N_NAME <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    N_REGIONKEY <span class="type">int</span>,</span><br><span class="line">    N_COMMENT <span class="type">varchar</span>(<span class="number">152</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(N_REGIONKEY) <span class="keyword">references</span> REGION(R_REGIONKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 供应商表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> SUPPLIER(</span><br><span class="line">    S_SUPPKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    S_NAME <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    S_ADDRESS <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    S_NATIONKEY <span class="type">int</span>,</span><br><span class="line">    S_PHONE <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    S_ACCTBAL <span class="type">real</span>,</span><br><span class="line">    S_COMMENT <span class="type">varchar</span>(<span class="number">101</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(S_NATIONKEY) <span class="keyword">references</span> NATION(N_NATIONKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> CUSTOMER(</span><br><span class="line">    C_CUSTKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    C_NAME <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">    C_ADDRESS <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    C_NATIONKEY <span class="type">int</span>,</span><br><span class="line">    C_PHONE <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    C_ACCTBAL <span class="type">real</span>,</span><br><span class="line">    C_MKTSEGMENT <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    C_COMMENT <span class="type">varchar</span>(<span class="number">117</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(C_NATIONKEY) <span class="keyword">references</span> NATION(N_NATIONKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 供应商-零件表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> PARTSUPP(</span><br><span class="line">    PS_PARTKEY <span class="type">int</span>,</span><br><span class="line">    PS_SUPPKEY <span class="type">int</span>,</span><br><span class="line">    PS_AVAILQTY <span class="type">int</span>,</span><br><span class="line">    PS_SUPPLYCOST <span class="type">real</span>,</span><br><span class="line">    PS_COMMENT <span class="type">varchar</span>(<span class="number">199</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(PS_PARTKEY,PS_SUPPKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(PS_PARTKEY) <span class="keyword">references</span> PART(P_PARTKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(PS_SUPPKEY) <span class="keyword">references</span> SUPPLIER(S_SUPPKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ORDERS(</span><br><span class="line">    O_ORDERKEY <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    O_CUSTKEY <span class="type">int</span>,</span><br><span class="line">    O_ORDERSTATUS <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    O_TOTALPRICE <span class="type">real</span>,</span><br><span class="line">    O_ORDERDATE <span class="type">date</span>,</span><br><span class="line">    O_ORDERPRIORITY <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    O_CLERK <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line">    O_SHIPPRIORITY <span class="type">int</span>,</span><br><span class="line">    O_COMMENT <span class="type">varchar</span>(<span class="number">79</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key(O_CUSTKEY) <span class="keyword">references</span> CUSTOMER(C_CUSTKEY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单明细表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> LINEITEM(</span><br><span class="line">    L_ORDERKEY <span class="type">int</span>,</span><br><span class="line">    L_PARTKEY <span class="type">int</span>,</span><br><span class="line">    L_SUPPKEY <span class="type">int</span>,</span><br><span class="line">    L_LINENUMBER <span class="type">int</span>,</span><br><span class="line">    L_QUANTITY <span class="type">decimal</span>,</span><br><span class="line">    L_EXTENDEDPRICE <span class="type">real</span>,</span><br><span class="line">    L_DISCOUNT <span class="type">real</span>,</span><br><span class="line">    L_TAX <span class="type">real</span>,</span><br><span class="line">    L_RETURNFLAG <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    L_LINESTATUS <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    L_SHIPDATE <span class="type">date</span>,</span><br><span class="line">    L_COMMITDATE <span class="type">date</span>,</span><br><span class="line">    L_RECEIPTDATE <span class="type">date</span>,</span><br><span class="line">    L_SHIPINSTRUCT <span class="type">char</span>(<span class="number">25</span>),</span><br><span class="line">    L_SHIPMODE <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">    L_COMMENT <span class="type">varchar</span>(<span class="number">44</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(L_ORDERKEY, L_LINENUMBER),</span><br><span class="line">    <span class="keyword">foreign</span> key(L_ORDERKEY) <span class="keyword">references</span> ORDERS(O_ORDERKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(L_PARTKEY) <span class="keyword">references</span> PART(P_PARTKEY),</span><br><span class="line">    <span class="keyword">foreign</span> key(L_SUPPKEY) <span class="keyword">references</span> SUPPLIER(S_SUPPKEY)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="2-建完表后需要调整表结构，以便之后导入数据。">2.建完表后需要调整表结构，以便之后导入数据。</h2>
<p>本实验中要部分导入的数据和表结构不符合，需要调整。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-35-16.png" alt=""></p>
<p>但是老师给出的sql命令语句是错误的，需要自己重新写。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调整表结构</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> PART modify <span class="keyword">column</span> P_TYPE <span class="type">varchar</span>(<span class="number">25</span>) after P_MFGR;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> PART modify <span class="keyword">column</span> P_RETAILPRICE <span class="type">real</span> after P_TYPE;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> CUSTOMER modify <span class="keyword">column</span> C_NATIONKEY <span class="type">int</span> after C_NAME;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ORDERS modify <span class="keyword">column</span> O_ORDERDATE <span class="type">date</span> after O_CUSTKEY;</span><br></pre></td></tr></table></figure>
<h2 id="3-将CSV文件导入数据库">3.将CSV文件导入数据库</h2>
<h3 id="1-将CSV文件的编码格式改为UTF-8"><strong>1.将CSV文件的编码格式改为UTF-8</strong></h3>
<p>mysql默认的编码格式UTF-8,所以得把要导入文件的编码格式都改为UTF-8。</p>
<p>操作：将csv文件的后缀改为txt，用记事本打开，选择<code>另存为</code>,在右下方将编码格式改为UTF-8，再将后缀改回csv，保存。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-40-00.png" alt=""></p>
<h3 id="2-导入数据前的准备工作"><strong>2.导入数据前的准备工作</strong></h3>
<h4 id="1-查看是否允许从外部路径导入文件">1.查看是否允许从外部路径导入文件</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输入指令</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结果</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> require_secure_transport <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> secure_file_priv         <span class="operator">|</span>       <span class="operator">|</span> <span class="comment">-- 这里要为空才可以，表示可以从任意的外部路径向数据库中导入数据</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<p>最开始会出现secure_file_priv=‘系统给的默认路径’，表示系统只能从默认路径中导入数据。</p>
<p>但是我后来将csv文件移动到该目录下，依然无法导入，可能还存在些问题。</p>
<p><strong>修改方式</strong>：复制系统给的默认路径，在我的电脑里找到该路径。</p>
<p>或者在我的电脑里输入C:\ProgramData\MySQL\MySQL Server 8.0\my.ini</p>
<p>能够看到一个my.ini配置文件，右键属性，点击安全，编辑。选中Users，勾选完全控制，点击应用，确定。</p>
<p>之后才有权限修改my.ini文件。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-26_23-57-47.png" style="zoom: 50%;" />
<p>打开my.ini文件，搜索[mysqld]，找到secure-file-priv=‘系统给的默认路径’，将引号里的内容全部删掉，空格也不要有。</p>
<p>即<code>secure-file-priv=''</code></p>
<p><strong>关键一步</strong>：重启mysql，并不是exit退出再登录。而是在计算机管理中，点击服务，找到mysql，右键重新启动。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-04-51.png" style="zoom:50%;" />
<p>然后再重新登录mysql。</p>
<h4 id="2-查看是否允许本地导入">2.查看是否允许本地导入</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输入指令</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;local_infile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结果</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;local_infile&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> local_infile  <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span> <span class="comment">-- 这里要为on</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改为on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile<span class="operator">=</span><span class="keyword">on</span>;</span><br></pre></td></tr></table></figure>
<p>最开始local_infile=off，需要执行指令修改为on。</p>
<h3 id="3-导入数据">3.导入数据</h3>
<p>一般来说已经可以导入数据了，但是我执行导入数据的语句后依然会报错，要么就是没有权限导入，要么就是找不到文件。</p>
<p><strong>解决方法</strong>：从命令行中进入mysql，同时设置local-infile变量为1</p>
<p>win + R进入指令框，输入cmd打开命令行。但是我在登录mysql的时候，会报错<code>'mysql' 不是内部或外部命令，也不是可运行的程序</code></p>
<p>因为我一直在使用mysql的客户端，似乎没有配置过环境变量。</p>
<hr>
<p>命令行中的mysql实际上是一个可执行程序。</p>
<p>出现报错的原因是，系统找不到mysql.exe这个程序。</p>
<p><strong>解决办法</strong>：给系统一个目录，让系统可以找到。</p>
<p>把mysql.exe所在的目录，添加到环境变量中即可。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-21-49.png" style="zoom:50%;" />
<p>复制该路径，搜索高级系统设置</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-24-15.png" style="zoom:50%;" />
<p>点击环境变量</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-04-27_00-26-49.png" alt=""></p>
<p>在用户变量找到Path，点击编辑，将复制的路径添加到里面。重启cmd命令行，即可运行mysql。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通常登录mysql的指令</span></span><br><span class="line">C:\Users\<span class="number">86176</span><span class="operator">&gt;</span>mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="comment">-- 输入密码即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入数据时要执行的指令</span></span><br><span class="line">C:\Users\<span class="number">86176</span><span class="operator">&gt;</span>mysql <span class="operator">-</span>h localhost <span class="operator">-</span>u root <span class="comment">--local-infile=1 -p</span></span><br><span class="line">Enter password: <span class="comment">-- 输入密码即可</span></span><br></pre></td></tr></table></figure>
<p>现在就彻底地完成了所有导入数据前的准备工作。可以进行数据导入了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 导入CSV数据</span></span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;C:\\Users\\86176\\Desktop\\database\\lineitem.csv&#x27;</span> # 文件路径</span><br><span class="line"><span class="keyword">into</span> <span class="keyword">table</span> LINEITEM           # 表名</span><br><span class="line"><span class="type">character</span> <span class="keyword">set</span> utf8                 # 编码</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>           # 分隔符</span><br><span class="line">lines terminated <span class="keyword">by</span> <span class="string">&#x27;\r\n&#x27;</span>;        # 换行符，windows下是\r\n</span><br></pre></td></tr></table></figure>
<p>第一行的文件路径要把<code>\</code>都改为<code>\\</code></p>
<p><strong>注意</strong>：导入数据的顺序和建表的顺序要一致，即先导入没有外键的表的数据，否则会出现空表。</p>
<h1>二、mysql登录不上 ERROR 1045 (28000)</h1>
<p>在登录mysql的时候，突然登不上了。</p>
<p>使用mysql客户端输入密码后会直接闪退，使用命令行输入mysql -u root -p，在输入密码后会出现以下报错。</p>
<p>ERROR 1045 (28000): Access denied for user ‘user’@‘localhost’ (using password: YES)</p>
<p>折腾半天后，我认为是系统可能把我的登录密码给抹除了，所以需要强行地修改密码。</p>
<p>在CSDN找到一篇文章完美的解决了我的问题。</p>
<p><a href="https://blog.csdn.net/m0_46308522/article/details/128851046?spm=1001.2014.3001.5506">https://blog.csdn.net/m0_46308522/article/details/128851046?spm=1001.2014.3001.5506</a></p>
<p>以下修改方式适用于mysql8.0版本：</p>
<p>Step1.停止 MySQL 服务</p>
<p>需要在计算机管理中点击服务，找到mysql，点击停止服务。</p>
<p>Step2.创建一个名为 <code>mysql-init.txt</code> 的文本文件，里面有一行内容</p>
<p><code>ALTER USER 'root'@'localhost' IDENTIFIED BY '你想设置的密码';</code>，然后保存</p>
<p>说明：</p>
<ul>
<li>后续会调用这个文件，以设置为 <strong>‘你想设置的密码’</strong>。</li>
<li>这个文件可以放在任意路径下，为便于后续的步骤，我直接放在 C 盘根目录下了</li>
</ul>
<p>Step3.</p>
<p>1.以管理员身份运行 cmd</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgeff35470f3481f589cdfb6eff1d94cb7.png" alt=""></p>
<p>2.切换到 MySQL 8.0 程序所在的 bin 目录，可以输入该指令：cd C:\Program Files\MySQL\MySQL Server 8.0\bin</p>
<p>3.输入 <code>mysqld --defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 8.0\my.ini&quot; --init-file=C:\\mysql-init.txt</code></p>
<p>我尝试的时候直接复制粘贴即可，但可能不适用于所有人。</p>
<p>具体的输入指令：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-13_14-30-37.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-13_14-30-50.png" alt="Snipaste_2024-05-13_14-30-50" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-05-13_14-31-02.png" alt="Snipaste_2024-05-13_14-31-02" style="zoom:50%;" />
<p>4.输入完上述命令后，回车。发现光标停留在空行上，这说明修改成功，如下图所示：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img6dc858dd50ecddebe9e62a9b7574e535.png" alt=""></p>
<p>5.关闭当前命令行，必须关闭，否则无法启动 MySQL 服务</p>
<p>6.删除 <code>mysql-init.txt</code> 文件</p>
<p>7.在计算机管理—服务中启动mysql，然后再次登录（使用新设置的密码），发现可以登录成功</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下对于当前成绩的思考</title>
    <url>/2024/04/07/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%89%8D%E4%B8%89%E5%AD%A6%E6%9C%9F%E7%9A%84%E7%BB%A9%E7%82%B9%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p><strong>停止精神内耗，只管前进。</strong></p>
<p>————2024/4/7 晚</p>
<span id="more"></span>
<hr>
<p>今天上午公布了前三学期的成绩以及排名。相较于上学期的12名，我又上涨了3名来到第9名。这一次前面的8位同学全部都是转专业而来。虽然略有欣喜，但一想到只有专业前三才能保研到外校，剩下的人都只能被锁在长大，失望便涌上心头。残酷的事实是我再怎么努力追赶，也无法冲进前三。中午去问了学长，得知这样的离谱政策依旧在实施。所以摆在我面前的只有两条路，保研本校或者考研985。</p>
<p>下午一直在刷知乎，企图找到和我同样境遇的人。但是什么样的回答都有，导致我越看反而越焦虑，我不知道我到底该做出什么样的抉择。<br>
但是转头一想，我真的稳了吗？我真的已经能够保研本校了吗？——显然不是的。这才仅仅过了三个学期，还有三个学期的仗要打。我真的有点操之过急了。</p>
<p>其实答案早就有了，高考出分后我在知乎写的那篇文章上，就已经有了。“希望未来能继续努力，考研去实现我的梦想。”</p>
<p>等到明年的这个时候，或许我会开始复习考研知识，看看自己的实力到底如何，有没有信心。如果觉得可以一试，那就十月份报名考研，如果觉得自己能力不够，那就留在长大。没有什么选择是绝对正确的，我只相信一切都将是最好的安排。不要再被这样的事情耗费我的心力了，先将它抛之脑后，认真做事吧。</p>
<p>接下来的计划就是:<br>
好好学习，稳固绩点，不要挂科。学好英语，学好数学，学好技术。努力使自己积极乐观，充满动力。</p>
<p>结语——<strong>只有拥有足够强烈的使命感甚至是宿命感才能做出些什么，要把人生当做是一段波澜壮阔的征程，勇敢前行。</strong></p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下三月总结</title>
    <url>/2024/04/02/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%BC%80%E5%AD%A6%E4%B8%80%E4%B8%AA%E6%9C%88%E5%90%8E%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong>最近有些浮躁，有些焦虑，写个总结重启一下</strong>。</p>
<p>————2024/4/2 晚</p>
<span id="more"></span>
<hr>
<p>过去的这一个月其实挺清闲的。因为这学期没有选额外专业课的原因，我每天都可以睡到早上九点钟，很是奢侈。于是晚睡没有了压力，最近这些天几乎都是晚上一点后才会休息。</p>
<p>三月份做了好多我认为有意义的事情。刚开学几天就把寒假一直在学的HTML尽数补全、去看了很好看的《沙丘2》、熬了一整夜亲眼见证了马竞逆转国米、利用零碎时间把MySQL基础学完、去看了从初中一直在追的怪兽电影《哥斯拉大战金刚2》、开始做MySQL的查询习题、概率论的笔记也写到了第四章。</p>
<p>然而在教室上课的收获却少之又少。专业课和概率论都是看b站的网课，因为那些老师的讲课水平真的不太行，在他们的课上最多听个乐。唯一让我觉得开心的是毛概的老师讲的很好，她也是我班的代理班主任，没有只是照着ppt念，有着清晰的讲课思路。还记得第一堂课上她对我们说：“希望这门课不只是一门获取成绩的手段，还能够提高你们的人文素养。”所以啊，到底什么课才是水课呢。</p>
<p>前不久已经开始了各大高校的研究生复试，有春风得意，也有名落孙山。研究生这个字眼离我越来越近，一年后的今天，我会选择什么样的道路呢。上学期的排名仍然没有出，但我觉得我应该还在线内。接下来的计划也一定是让绩点稳中有进。我已经逐渐开始意识到，课业成绩仅仅能够体现做题的能力，大学的大多数考试，无非就是背题库。即使我觉得可笑，但我又不得不这样去做。所以我将更侧重于专业技能和个人知识素养的提升上，绩点的维持只会是顺手而为。听说在保研和考研复试中，科研和竞赛都挺重要的，但是我孤身一人，没有遇到志同道合的朋友，当然，我自身也没有足够的实力，于是现在根本不知道怎么去参与这些事情。所以还是认真学习，同时不断地扩展自己的知识体系，自身足够强大才是关键。接下来的一个月，<strong>专注自己的道路，保持良好的学习节奏，继续努力沉淀</strong>吧，会赢的！</p>
<p>我总觉得，<strong>人是要往高处走的，即使是粉身碎骨</strong>。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL——34道查询练习题</title>
    <url>/2024/03/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E2%80%94%E2%80%9434%E9%81%93%E6%9F%A5%E8%AF%A2%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p><strong>村雨的34道MySQL查询练习题</strong></p>
<p>基于bilibili动力节点的教学视频</p>
<span id="more"></span>
<hr>
<h2 id="emp员工表"><strong>emp员工表</strong></h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-34-29.png" alt=""></p>
<h2 id="dept部门表"><strong>dept部门表</strong></h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-16.png" alt=""></p>
<h2 id="salgrade工资等级表"><strong>salgrade工资等级表</strong></h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-52.png" alt=""></p>
<h2 id="1、取得每个部门最高薪水的人员名称"><strong>1、取得每个部门最高薪水的人员名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="comment">-- 按部门分组，找出每个部门的最高薪资</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">select</span> ename,t.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t <span class="comment">-- 将上面的查询结果作为新表t与emp表连接</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> t.deptno <span class="keyword">and</span> sal <span class="operator">=</span> max_sal; <span class="comment">-- 查询条件：emp表中薪水等于所属部门的最高薪水</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> deptno <span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="2-哪些人的薪水在部门的平均薪水之上"><strong>2.哪些人的薪水在部门的平均薪水之上</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno; <span class="comment">-- 按部门分组，求出每个部门的平均薪水</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,ename,sal</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal,deptno <span class="comment">-- 将上面的查询结果作为新表t和emp表连接</span></span><br><span class="line">      <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> t.deptno <span class="keyword">and</span> sal <span class="operator">&gt;</span> avg_sal; <span class="comment">-- 筛选出薪水大于所在部门平均薪水的员工</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> avg_sal     <span class="operator">|</span> deptno <span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> BLAKE <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> ALLEN <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+-------+---------+</span></span><br></pre></td></tr></table></figure>
<p><strong>将两张表连接后</strong>：可以看到每一行都有sal和员工所属部门的avg_sal，筛选出sal &gt; avg_sal的员工</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-30-50.png" alt=""></p>
<h2 id="3-取得部门中（所有人的）平均的薪水等级，如下"><strong>3.取得部门中（所有人的）平均的薪水等级，如下</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(grade) <span class="keyword">as</span> avg_grade</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal <span class="comment">-- 将emp表和salgrade表连接起来-非等值连接</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="comment">-- 按部门分组</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> deptno;<span class="comment">-- 按部门编号升序查询结果-默认是升序</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>    <span class="number">3.6667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>    <span class="number">2.8000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>    <span class="number">2.5000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="4-不准用分组函数（Max），取得所有员工中的最高薪水（给出两种解决方案）"><strong>4.不准用分组函数（Max），取得所有员工中的最高薪水（给出两种解决方案）</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">第一种：降序取第一行</span><br><span class="line"><span class="keyword">select</span> ename,sal </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>  <span class="comment">-- 按照工资降序查找，那么第一行便是最高薪水</span></span><br><span class="line">limit <span class="number">1</span>; <span class="comment">-- 只取前1行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"></span><br><span class="line">第二种：表的自连接</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> a.sal <span class="comment">-- distinct去重</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="operator">&lt;</span> b.sal; <span class="comment">-- 除了最高薪水都会被筛选出来</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> a.sal <span class="comment">-- 找出薪水不在这里面的员工，即只有最高薪水的员工不在</span></span><br><span class="line">              <span class="keyword">from</span> emp a</span><br><span class="line">              <span class="keyword">join</span> emp b</span><br><span class="line">              <span class="keyword">on</span> a.sal <span class="operator">&lt;</span> b.sal);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"></span><br><span class="line">第三种:使用组函数最简单</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal <span class="comment">-- 没有手动分组，整张表默认为一组。但是select后只能跟组函数</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="5-取得平均薪水最高的部门的部门编号（至少给出两种解决方案）"><strong>5.取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">第一种：降序取第一行</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avg_sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">limit <span class="number">1</span>; <span class="comment">-- 取前1行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line"><span class="number">1.</span>取得每个部门的平均薪水</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span>取得部门平均薪水中最高的薪水</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(avg_sal) <span class="keyword">as</span> max_avg_sal</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal </span><br><span class="line">     <span class="keyword">from</span> emp </span><br><span class="line">     <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t; <span class="comment">-- 把第一步的查询结果当作新表t</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> max_avg_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">3.</span>在emp表中筛选平均薪水等于第二步查询结果的部门</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line"><span class="keyword">having</span> avg_sal <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(avg_sal) <span class="keyword">as</span> max_avg_sal <span class="comment">-- 条件筛选</span></span><br><span class="line">                   <span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal </span><br><span class="line">                        <span class="keyword">from</span> emp </span><br><span class="line">                        <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="6-取得平均薪水最高的部门的部门名称"><strong>6.取得平均薪水最高的部门的部门名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得平均薪水最高的部门</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avg_sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">limit <span class="number">1</span>; <span class="comment">-- 取前1行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span>将第一步的查询结果作为新表t和dept表连接</span><br><span class="line"><span class="keyword">select</span> dname,avg_sal</span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line">      <span class="keyword">order</span> <span class="keyword">by</span> avg_sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">      limit <span class="number">1</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="7-求平均薪水的等级最低的部门的部门名称"><strong>7.求平均薪水的等级最低的部门的部门名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得部门的平均薪水</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">2.</span>取得部门平均薪水所对应的等级</span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,grade</span><br><span class="line"><span class="keyword">from</span> salgrade s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">      <span class="keyword">from</span> emp </span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> avg_sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+-------+</span></span><br><span class="line"><span class="number">3.</span>将第二步的查询结果与dept表连接</span><br><span class="line"><span class="keyword">select</span> dname,q.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> t.<span class="operator">*</span>,grade</span><br><span class="line"><span class="keyword">from</span> salgrade s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">      <span class="keyword">from</span> emp </span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line">      <span class="keyword">on</span> avg_sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal) <span class="keyword">as</span> q</span><br><span class="line"> <span class="keyword">on</span> d.deptno <span class="operator">=</span> q.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> deptno <span class="operator">|</span> avg_sal     <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+-------------+-------+</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+-------------+-------+</span></span><br><span class="line"><span class="number">4.</span>使第三步的查询结果按薪资等级升序，取第一行</span><br><span class="line"><span class="keyword">select</span> dname,grade</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> dname,q.<span class="operator">*</span></span><br><span class="line">      <span class="keyword">from</span> dept d</span><br><span class="line">      <span class="keyword">join</span> (<span class="keyword">select</span> t.<span class="operator">*</span>,grade</span><br><span class="line">            <span class="keyword">from</span> salgrade s</span><br><span class="line">            <span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">                  <span class="keyword">from</span> emp </span><br><span class="line">                  <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> t</span><br><span class="line">                  <span class="keyword">on</span> avg_sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal) <span class="keyword">as</span> q</span><br><span class="line">       <span class="keyword">on</span> d.deptno <span class="operator">=</span> q.deptno) <span class="keyword">as</span> p</span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> grade</span><br><span class="line"> limit <span class="number">1</span>;</span><br><span class="line"> <span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> dname <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> SALES <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br></pre></td></tr></table></figure>
<h2 id="8-取得比普通员工（员工代码没有在mgr-字段上出现的）的最高薪水还要高的领导人姓名">8.<strong>取得比普通员工（员工代码没有在mgr 字段上出现的）的最高薪水还要高的领导人姓名</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>先取得所有领导代码</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> mgr </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>; <span class="comment">-- 重点:使用 not in 的时候要确保所查范围中没有NULL</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> mgr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2.</span>不属于领导的就是普通员工，找出普通员工中的最高薪水</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr </span><br><span class="line">                    <span class="keyword">from</span> emp </span><br><span class="line">                    <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>); <span class="comment">-- 重点:使用 not in 的时候要确保所查范围中没有NULL</span></span><br><span class="line">                                            <span class="comment">-- 在 SQL 中与 NULL 的比较通常会返回未知，而不是 True 或 False</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">3.</span>取得大于第二步查询结果的领导名</span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr </span><br><span class="line">                                 <span class="keyword">from</span> emp </span><br><span class="line">                                 <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>));</span><br><span class="line"> <span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="9-取得薪水最高的前五名员工"><strong>9.取得薪水最高的前五名员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> <span class="comment">-- 降序</span></span><br><span class="line">limit <span class="number">5</span>; <span class="comment">-- 取前5行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="10-取得薪水最高的第六到第十名员工"><strong>10.取得薪水最高的第六到第十名员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="comment">-- 10名员工的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">5</span>,<span class="number">5</span>; <span class="comment">-- 从第六名员工开始，也就是下标5；第六到第十长度为5</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="11-取得最后入职的5名员工"><strong>11.取得最后入职的5名员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,hiredate</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hiredate <span class="keyword">desc</span> <span class="comment">-- 日期也可以排序</span></span><br><span class="line">limit <span class="number">5</span>; <span class="comment">-- 降序取前5行</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> hiredate   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="12-取得每个薪水等级有多少员工"><strong>12.取得每个薪水等级有多少员工</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得每个员工的薪水等级</span><br><span class="line"><span class="keyword">select</span> ename,grade</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal; <span class="comment">-- 非等值连接</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="number">2.</span>对薪水等级进行分组，并对每个组计数</span><br><span class="line"><span class="keyword">select</span> grade,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_grade <span class="comment">-- 对每个组的全部元组进行计数，用*即可</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> grade</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> grade; <span class="comment">-- 按等级升序</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> grade <span class="operator">|</span> count_grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="13-面试题"><strong>13.面试题</strong></h2>
<p>有 3 个表 <strong>S(学生表)</strong>，<strong>C（课程表）</strong>，<strong>SC（学生选课表）</strong></p>
<p><strong>S</strong>（SNO，SNAME）<code>代表</code>（学号，姓名）</p>
<p><strong>C</strong>（CNO，CNAME，CTEACHER）<code>代表</code>（课号，课名，教师）</p>
<p><strong>SC</strong>（SNO，CNO，SCGRADE）<code>代表</code>（学号，课号，成绩）</p>
<p><strong>导入三张表</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(</span><br><span class="line"> SNO <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> CNO <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> SCGRADE <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S</span><br><span class="line">(</span><br><span class="line"> SNO <span class="type">VARCHAR</span>(<span class="number">200</span> ),</span><br><span class="line"> SNAME <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> C</span><br><span class="line">(</span><br><span class="line"> CNO <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> CNAME <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line"> CTEACHER <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;张&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;政治&#x27;</span>, <span class="string">&#x27;王&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;李&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;赵&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> C ( CNO, CNAME, CTEACHER ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;物理&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;学生 1&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;学生 2&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;学生 3&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S ( SNO, SNAME ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;学生 4&#x27;</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;40&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;30&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;20&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;80&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;40&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;60&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC ( SNO, CNO, SCGRADE ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;80&#x27;</span>); </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="S表、C表、SC表"><strong>S表、C表、SC表</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">S表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> SNO  <span class="operator">|</span> SNAME  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> 学生 <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> 学生 <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> 学生 <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"></span><br><span class="line">C表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+----------+</span></span><br><span class="line"><span class="operator">|</span> CNO  <span class="operator">|</span> CNAME <span class="operator">|</span> CTEACHER <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> 语文  <span class="operator">|</span> 张       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> 政治  <span class="operator">|</span> 王       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> 英语  <span class="operator">|</span> 李       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> 数学  <span class="operator">|</span> 赵       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> 物理  <span class="operator">|</span> 黎明     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+----------+</span></span><br><span class="line"></span><br><span class="line">SC表：</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> SNO  <span class="operator">|</span> CNO  <span class="operator">|</span> SCGRADE <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">40</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">30</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">20</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> <span class="number">80</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> <span class="number">40</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> <span class="number">60</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">80</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+---------+</span></span><br></pre></td></tr></table></figure>
<h3 id="问题-1-找出没选过黎明老师的所有学生姓名"><strong>问题 1.找出没选过黎明老师的所有学生姓名</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>先取得黎明老师所教课程的课号</span><br><span class="line"><span class="keyword">select</span> cno</span><br><span class="line"><span class="keyword">from</span> c</span><br><span class="line"><span class="keyword">where</span> cteacher <span class="operator">=</span> <span class="string">&#x27;黎明&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> cno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2.</span>取得所有选了黎明老师课程的同学</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno <span class="operator">=</span> (<span class="keyword">select</span> cno</span><br><span class="line">              <span class="keyword">from</span> c</span><br><span class="line">              <span class="keyword">where</span> cteacher <span class="operator">=</span> <span class="string">&#x27;黎明&#x27;</span>) ;</span><br><span class="line"> <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> sno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">3.</span>哪位同学的学号不在第二步的查询结果当中，就说明该同学没有选黎明老师的课程</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sname <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> sc <span class="comment">-- 左外连接，将join左边的表看成主表，能够将s表中所有的数据都依次查询；能够查出学生4</span></span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">where</span> s.sno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> sno</span><br><span class="line">                  <span class="keyword">from</span> sc</span><br><span class="line">                  <span class="keyword">where</span> cno <span class="operator">=</span> (<span class="keyword">select</span> cno</span><br><span class="line">                               <span class="keyword">from</span> c</span><br><span class="line">                               <span class="keyword">where</span> cteacher <span class="operator">=</span> <span class="string">&#x27;黎明&#x27;</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure>
<h3 id="问题-2-列出-2-门以上（含-2-门）不及格学生姓名及平均成绩-巨难"><strong>问题 2:列出 2 门以上（含 2 门）不及格学生姓名及平均成绩(巨难)</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得不及格学生的学号</span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> sno  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2.</span>计算不及格学生的不及格科目数量</span><br><span class="line"><span class="keyword">select</span> sno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> nopass_number</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> sno</span><br><span class="line">      <span class="keyword">from</span> sc</span><br><span class="line">      <span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.sno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+</span></span><br><span class="line"><span class="operator">|</span> sno  <span class="operator">|</span> nopass_number <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span>             <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+</span></span><br><span class="line"><span class="number">3.</span>将第二步的查询结果和s表相连，取得所要的学生姓名</span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> sno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> nopass_number</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> sno</span><br><span class="line">            <span class="keyword">from</span> sc</span><br><span class="line">            <span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> t</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> t.sno) <span class="keyword">as</span> q</span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> q.sno</span><br><span class="line"><span class="keyword">where</span> nopass_number <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">4.</span>再连接一张sc表，计算所要学生的平均成绩</span><br><span class="line"><span class="keyword">select</span> sname,<span class="built_in">avg</span>(scgrade) <span class="keyword">as</span> avg_grade</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> sno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> nopass_number</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> sno</span><br><span class="line">            <span class="keyword">from</span> sc</span><br><span class="line">            <span class="keyword">where</span> scgrade <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> t</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> t.sno) <span class="keyword">as</span> q</span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> q.sno</span><br><span class="line"><span class="keyword">join</span> sc</span><br><span class="line"><span class="keyword">on</span> s.sno <span class="operator">=</span> sc.sno</span><br><span class="line"><span class="keyword">where</span> nopass_number <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.sname; <span class="comment">-- group by 要放在 where 后面</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span> avg_grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span>        <span class="number">46</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br></pre></td></tr></table></figure>
<h3 id="问题-3-既学过-1-号课程又学过-2-号课程所有学生的姓名"><strong>问题 3:既学过 1 号课程又学过 2 号课程所有学生的姓名</strong></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sname <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">FROM</span> s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="comment">-- 检查条件是否存在，而不关心具体返回的值是什么</span></span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">WHERE</span> sno <span class="operator">=</span> s.sno <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">WHERE</span> sno <span class="operator">=</span> s.sno <span class="keyword">AND</span> cno <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sname  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 学生 <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure>
<p>EXISTS命令解析：（chatgpt解答）</p>
<ul>
<li><code>SELECT DISTINCT s.sname</code>: 这部分指定了要从数据库中返回的结果。<code>DISTINCT</code> 关键字用于确保返回的结果中不会包含重复的学生姓名。<code>s.sname</code> 表示从学生表 <code>s</code> 中选择学生姓名作为结果。</li>
<li><code>FROM s</code>: 这是查询的主要来源，它告诉数据库查询需要从哪个表中检索数据。在这里，我们从学生表 <code>s</code> 中检索数据。</li>
<li><code>WHERE EXISTS (...) AND EXISTS (...)</code>: 这是一个用 <code>EXISTS</code> 关键字组合的条件。它在每次查询中检查是否存在满足条件的记录，并根据其结果返回相应的行。</li>
<li><code>SELECT 1 FROM sc WHERE sno = s.sno AND cno = 1</code>: 这是第一个 <code>EXISTS</code> 子查询。它检查课程表 <code>sc</code> 中是否存在一行记录，其学生编号 (<code>sno</code>) 与学生表中当前学生的学生编号 (<code>s.sno</code>) 匹配，并且课程编号 (<code>cno</code>) 为 1。</li>
<li><code>SELECT 1 FROM sc WHERE sno = s.sno AND cno = 2</code>: 这是第二个 <code>EXISTS</code> 子查询，类似于第一个子查询，只不过检查的是课程编号为 2 的记录。</li>
<li><code>AND</code>: 这是一个逻辑运算符，表示两个条件都必须满足。换句话说，要返回学生的姓名，两个子查询都必须返回至少一行记录。</li>
<li>在 SQL 中，<code>SELECT 1</code> 是一个常见的用法，它的作用是在子查询中返回一个固定值 <code>1</code>。在这种情况下，它的实际作用是检查条件是否存在，而不关心具体返回的值是什么。因此，<code>SELECT 1</code> 可以用作条件是否满足的简单表示，而不会涉及到具体的数据。</li>
</ul>
<h2 id="14-列出所有员工及领导的姓名"><strong>14.列出所有员工及领导的姓名</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="comment">-- 左外连接，将a表作为主表；将KING无上级的NULL也查出来。</span></span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> 员工   <span class="operator">|</span> 领导  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> FORD  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> JONES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> SCOTT <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> JONES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> CLARK <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br></pre></td></tr></table></figure>
<h2 id="15-列出受雇日期早于其直接上级的所有员工的编号-姓名-部门名称"><strong>15.列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">select</span> a.empno,a.ename,dname</span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> dept d <span class="comment">-- 再连接一张dept表</span></span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> a.hiredate <span class="operator">&lt;</span> b.hiredate; <span class="comment">-- 查询条件</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> empno <span class="operator">|</span> ename <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="16-列出部门名称和这些部门的员工信息-同时列出那些没有员工的部门"><strong>16.列出部门名称和这些部门的员工信息,同时列出那些没有员工的部门</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自连接</span></span><br><span class="line"><span class="keyword">select</span> dname,e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 右外连接，将dept表作为主表；将没有员工的部门的NULL也查出来。</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OPERATIONS <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<h2 id="17-列出至少有5个员工的所有部门"><strong>17.列出至少有5个员工的所有部门</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dname,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d <span class="comment">-- 连接dept表，得到部门名</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dname <span class="comment">-- 按部门名字分组，可以看成每一个部门都是一个组，都是一张表</span></span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">5</span>; <span class="comment">-- 查询条件：每张表元组数大于等于5</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> dname    <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> RESEARCH <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES    <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="18-列出薪资比-SMITH-多的所有员工信息"><strong>18.列出薪资比&quot;SMITH&quot;多的所有员工信息</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>先取得SIMTH的薪资</span><br><span class="line"><span class="keyword">select</span> sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> sal    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">2.</span>查询比薪资第一步查询结果高的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> sal</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<h2 id="19-列出所有-CLERK-办事员-的姓名及其部门名称-部门的人数"><strong>19.列出所有&quot;CLERK&quot;(办事员)的姓名及其部门名称,部门的人数</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得职位为CLERK的员工姓名</span><br><span class="line"><span class="keyword">select</span> ename,deptno</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> deptno <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="number">2.</span>将第一步的查询结果当作新表t与dept表连接，取得部门名</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> ename,deptno</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">3.</span>取得每个部门的员工人数</span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="number">4.</span>将第二步的查询结果与第三步的查询结果作为新表q连接</span><br><span class="line"><span class="keyword">select</span> ename,dname,count_emp</span><br><span class="line"><span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> ename,deptno</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> d.deptno <span class="operator">=</span> t.deptno</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> q</span><br><span class="line"><span class="keyword">on</span> t.deptno <span class="operator">=</span> q.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="20-列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数"><strong>20.列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得每个部门的最低薪资</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="number">2.</span>取得最低薪资大于<span class="number">1500</span>的工作</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job</span><br><span class="line"><span class="keyword">having</span> min_sal <span class="operator">&gt;</span> <span class="number">1500</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="number">3.</span>取得每份工作的雇员人数</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------+</span></span><br><span class="line"><span class="number">4.</span>将第二步的查询结果与第三步的查询结果作为新表t连接</span><br><span class="line"><span class="keyword">select</span> e.job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal,count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> job,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_emp</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> job) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> e.job <span class="operator">=</span> t.job</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.job</span><br><span class="line"><span class="keyword">having</span> min_sal <span class="operator">&gt;</span> <span class="number">1500</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="21-列出在部门-SALES-销售部-工作的员工的姓名-假定不知道销售部的部门编号"><strong>21.列出在部门&quot;SALES&quot;&lt;销售部&gt;工作的员工的姓名,假定不知道销售部的部门编号</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>一开始不知道销售部的部门编号，所以要查询销售部的部门编号</span><br><span class="line"><span class="keyword">select</span> deptno</span><br><span class="line"><span class="keyword">from</span> dept</span><br><span class="line"><span class="keyword">where</span> dname <span class="operator">=</span> &quot;SALES&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">2.</span>经过第一步的查询结果后，已经知道销售部的部门编号，接下来直接查就可以了</span><br><span class="line"><span class="keyword">select</span> ename</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> (<span class="keyword">select</span> deptno</span><br><span class="line">                <span class="keyword">from</span> dept</span><br><span class="line">                <span class="keyword">where</span> dname <span class="operator">=</span> &quot;SALES&quot;);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+                </span></span><br></pre></td></tr></table></figure>
<h2 id="22-列出薪金高于公司平均薪金的所有员工-所在部门名称-上级领导名称-雇员的工资等级"><strong>22.列出薪金高于公司平均薪金的所有员工,所在部门名称,上级领导名称,雇员的工资等级</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>取得公司的平均薪资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2073.214286</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">2.</span>连接需要的表</span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>,dname <span class="keyword">as</span> <span class="string">&#x27;所在部门&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;上级领导&#x27;</span>,grade <span class="keyword">as</span> <span class="string">&#x27;工资等级&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> salgrade</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> 员工   <span class="operator">|</span> 所在部门   <span class="operator">|</span> 上级领导 <span class="operator">|</span> 工资等级 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> FORD     <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> SCOTT    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> CLARK    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line">注意到员工一栏没有KING，所以需要使用外连接：</span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>,dname <span class="keyword">as</span> <span class="string">&#x27;所在部门&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;上级领导&#x27;</span>,grade <span class="keyword">as</span> <span class="string">&#x27;工资等级&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> salgrade</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> 员工   <span class="operator">|</span> 所在部门   <span class="operator">|</span> 上级领导 <span class="operator">|</span> 工资等级 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> FORD     <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span> <span class="comment">-- 取得KING的信息</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> SCOTT    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span> BLAKE    <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> CLARK    <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+----------+</span></span><br><span class="line"><span class="number">3.</span>基于第二步的查询结果，筛选薪资大于公司平均薪资的元组</span><br><span class="line"><span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工&#x27;</span>,dname <span class="keyword">as</span> <span class="string">&#x27;所在部门&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;上级领导&#x27;</span>,grade <span class="keyword">as</span> <span class="string">&#x27;工资等级&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp a</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> a.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp b</span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">join</span> salgrade</span><br><span class="line"><span class="keyword">on</span> a.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal</span><br><span class="line"><span class="keyword">where</span> a.sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avg_sal</span><br><span class="line">             <span class="keyword">from</span> emp);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> 员工  <span class="operator">|</span> 所在部门   <span class="operator">|</span> 上级领导 <span class="operator">|</span> 工资等级 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> RESEARCH   <span class="operator">|</span> JONES    <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> SALES      <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> RESEARCH   <span class="operator">|</span> KING     <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+----------+----------+             </span></span><br></pre></td></tr></table></figure>
<h2 id="23-列出与-SCOTT-从事相同工作的其他所有员工及其所在部门的名称"><strong>23.列出与&quot;SCOTT&quot;从事相同工作的其他所有员工及其所在部门的名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询&quot;SCOTT&quot;的工作</span><br><span class="line"><span class="keyword">select</span> job</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> job     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> ANALYST <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span>将emp表和dept表连接</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">3.</span>筛选工作位第一步查询结果的员工</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> (<span class="keyword">select</span> job</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> dname    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> RESEARCH <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> RESEARCH <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line">注意到查询结果有<span class="string">&#x27;SCOTT&#x27;</span>,把他剔除</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> (<span class="keyword">select</span> job</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>)</span><br><span class="line">  <span class="keyword">and</span> ename <span class="operator">&lt;&gt;</span> <span class="string">&#x27;SCOTT&#x27;</span>; <span class="comment">-- 剔除条件</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> dname    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> RESEARCH <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="24-列出薪资等于部门30中员工的薪资的其他员工的姓名和薪资"><strong>24.列出薪资等于部门30中员工的薪资的其他员工的姓名和薪资</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询部门<span class="number">30</span>中员工的薪资</span><br><span class="line"><span class="keyword">select</span> sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span>查询其他薪资等于第一步查询结果的员工</span><br><span class="line"><span class="keyword">select</span> ename,sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="keyword">select</span> sal</span><br><span class="line">              <span class="keyword">from</span> emp</span><br><span class="line">              <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>)</span><br><span class="line">  <span class="keyword">and</span> deptno <span class="operator">&lt;&gt;</span> <span class="number">30</span>; <span class="comment">-- 剔除部门30的员工</span></span><br><span class="line"></span><br><span class="line">查询结果：<span class="keyword">Empty</span> <span class="keyword">set</span> </span><br></pre></td></tr></table></figure>
<h2 id="25-列出薪资高于在部门30工作的所有员工的薪资的员工姓名和薪资和所在部门的名称"><strong>25.列出薪资高于在部门30工作的所有员工的薪资的员工姓名和薪资和所在部门的名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询部门<span class="number">30</span>的员工薪资</span><br><span class="line"><span class="keyword">select</span> sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">2.</span>因为要高于所有员工，所以比<span class="built_in">max</span>(sal)还要高,故先要查询到<span class="built_in">max</span>(sal)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> max_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">3.</span>将emp表和dept表连接</span><br><span class="line"><span class="keyword">select</span> ename,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">4.</span>基于第三步的查询结果，筛选出薪资大于部门<span class="number">30</span>最高薪资的员工</span><br><span class="line"><span class="keyword">select</span> ename,sal,dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">as</span> max_sal</span><br><span class="line">             <span class="keyword">from</span> emp</span><br><span class="line">             <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="string">&#x27;30&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> sal     <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING  <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------------+             </span></span><br></pre></td></tr></table></figure>
<h2 id="26-列出在每个部门工作的员工数量-平均工资和平均服务期限"><strong>26.列出在每个部门工作的员工数量,平均工资和平均服务期限</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询每个部门的员工数量（其实还存在着一个没有员工的<span class="number">40</span>部门）</span><br><span class="line"><span class="keyword">select</span> d.deptno,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp <span class="comment">-- count()条件改变为员工名</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 使用右外连接，将dept表看作主表；能够查出40部门</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+</span></span><br><span class="line"><span class="number">2.</span>基于第一步的查询结果，查询每个部门的平均工资</span><br><span class="line"><span class="keyword">select</span> d.deptno,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp,ifnull(<span class="built_in">avg</span>(sal),<span class="number">0</span>) <span class="keyword">as</span> avg_sal</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span> avg_sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>    <span class="number">0.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+</span></span><br><span class="line"><span class="number">3.</span>基于第二步的查询结果，查询每个部门的平均服务期限</span><br><span class="line"><span class="keyword">select</span> d.deptno,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp,ifnull(<span class="built_in">avg</span>(sal),<span class="number">0</span>) <span class="keyword">as</span> avg_sal,</span><br><span class="line">       ifnull(<span class="built_in">avg</span>(timestampdiff(<span class="keyword">YEAR</span>, hiredate, now())), <span class="number">0</span>) <span class="keyword">as</span> avg_servicetime <span class="comment">-- 服务时间</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> count_emp <span class="operator">|</span> avg_sal     <span class="operator">|</span> avg_servicetime <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span>         <span class="number">42.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span>         <span class="number">40.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span>         <span class="number">42.3333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span>    <span class="number">0.000000</span> <span class="operator">|</span>          <span class="number">0.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-------------+-----------------+</span></span><br></pre></td></tr></table></figure>
<p>计算两个日期的“年差”，差了多少年？</p>
<p>TimeStampDiff(间隔类型, 前一个日期, 后一个日期)</p>
<p>例如：timestampdiff(YEAR, hiredate, now())</p>
<p><strong>间隔类型</strong>：</p>
<p>SECOND   秒</p>
<p>MINUTE   分钟</p>
<p>HOUR   小时</p>
<p>DAY   天</p>
<p>WEEK   星期</p>
<p>MONTH   月</p>
<p>QUARTER   季度</p>
<p>YEAR   年</p>
<hr>
<h2 id="27-列出所有员工的姓名、部门名称和工资"><strong>27.列出所有员工的姓名、部门名称和工资</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,dname,sal</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span> sal     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="28-列出所有部门的详细信息和人数"><strong>28.列出所有部门的详细信息和人数</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.deptno,d.dname,d.loc,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 右外连接，为了查出部门40</span></span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.deptno,d.dname,d.loc; <span class="comment">-- 因为要取得部门的所有信息，所以将dept表的所有字段都分组</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+-----------+ -- select后只能跟进行分组的字段和分组函数</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> dname      <span class="operator">|</span> loc      <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NEW</span> YORK <span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span> DALLAS   <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> SALES      <span class="operator">|</span> CHICAGO  <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span> OPERATIONS <span class="operator">|</span> BOSTON   <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="29-列出各种工作的最低工资以及对应的雇员姓名"><strong>29.列出各种工作的最低工资以及对应的雇员姓名</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询每种工作的最低薪资</span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+</span></span><br><span class="line"><span class="number">2.</span>将第一步的查询结果作为新表t与emp表连接</span><br><span class="line"><span class="keyword">select</span> t.job,t.min_sal <span class="keyword">as</span> min_sal,e.ename</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line">      <span class="keyword">from</span> emp</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> job) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> e.job <span class="operator">=</span> t.job <span class="keyword">and</span> e.sal <span class="operator">=</span>t.min_sal; <span class="comment">-- 表连接兼筛选的条件</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> min_sal <span class="operator">|</span> ename  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span> SMITH  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> WARD   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> MARTIN <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span> CLARK  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span> KING   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> FORD   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<h2 id="30-列出各个部门的MANAGER-领导-的最低薪资"><strong>30.列出各个部门的MANAGER(领导)的最低薪资</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">min</span>(sal) <span class="keyword">as</span> min_sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> min_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br></pre></td></tr></table></figure>
<h2 id="31-列出所有员工的年薪-按年薪从低到高排序"><strong>31.列出所有员工的年薪,按年薪从低到高排序</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,(sal<span class="operator">+</span>ifnull(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span> <span class="keyword">as</span> year_sal <span class="comment">-- 年薪=（月工资+津贴）*12</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> year_sal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> year_sal <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>  <span class="number">9600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">11400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">13200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">15600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">18000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">21000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">22800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">29400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">31800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">34200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">35700.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">36000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">36000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="number">60000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="32-求出员工领导的薪水超过3000的员工名称和他的领导名称"><strong>32.求出员工领导的薪水超过3000的员工名称和他的领导名称</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">emp表自连接</span><br><span class="line"><span class="keyword">select</span> a.ename,b.ename</span><br><span class="line"><span class="keyword">from</span> emp a <span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">join</span> emp b <span class="comment">-- 领导表</span></span><br><span class="line"><span class="keyword">on</span> a.mgr <span class="operator">=</span> b.empno</span><br><span class="line"><span class="keyword">where</span> b.sal <span class="operator">&gt;</span> <span class="number">3000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> ename <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> JONES <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br></pre></td></tr></table></figure>
<p><strong>33.求出部门名称中带’S’字符的部门员工的工资合计、部门人数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询</span></span><br><span class="line"><span class="keyword">select</span> dname,ifnull(<span class="built_in">sum</span>(sal),<span class="number">0</span>) <span class="keyword">as</span> sum_sal,<span class="built_in">count</span>(ename) <span class="keyword">as</span> count_emp</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="comment">-- 右外连接，为了查出40部门</span></span><br><span class="line"><span class="keyword">on</span>  e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> dname <span class="keyword">like</span> <span class="string">&#x27;%S%&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dname;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> sum_sal  <span class="operator">|</span> count_emp <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> RESEARCH   <span class="operator">|</span> <span class="number">10875.00</span> <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALES      <span class="operator">|</span>  <span class="number">9400.00</span> <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OPERATIONS <span class="operator">|</span>     <span class="number">0.00</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+-----------+</span></span><br></pre></td></tr></table></figure>
<h2 id="34-给任职日期超过30年的员工加薪10"><strong>34.给任职日期超过30年的员工加薪10%</strong></h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> emp  <span class="comment">-- 修改emp表</span></span><br><span class="line"><span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">*</span> <span class="number">1.1</span> </span><br><span class="line"><span class="keyword">where</span> timestampdiff(<span class="keyword">YEAR</span>, hiredate, now()) <span class="operator">&gt;</span> <span class="number">30</span>; <span class="comment">-- 工作年龄</span></span><br><span class="line"></span><br><span class="line"> 修改前：</span><br><span class="line"> <span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line">修改后：</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> DEPTNO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">880.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1760.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1375.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">3272.50</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1375.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">3135.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">2695.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">5500.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1650.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1210.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">1045.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1430.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+--------+</span></span><br></pre></td></tr></table></figure>
<hr>
<p>34道MySQL查询练习题终于做完，从一开始的生疏到后来的得心应手，亲手实际果然是提高编程能力的最快途径！</p>
<p>——2024/4/3</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记</title>
    <url>/2024/03/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>村雨的MySQL学习笔记</strong></p>
<p>前言：开学一个月以来，利用零散的时间总算学完了MySQL。当然，也只是初步地学习完一些基本知识，还需加以扩展和练习。</p>
<p>本笔记基于bilibili动力节点的教学视频，主讲人是杜老师，我很喜欢。</p>
<p>相关的学习资料：<a href="https://pan.baidu.com/s/1Mbs1UaRGjxidwvLyBIcXhg">https://pan.baidu.com/s/1Mbs1UaRGjxidwvLyBIcXhg</a><br>
提取码：1796</p>
<span id="more"></span>
<hr>
<h1>MySQL</h1>
<h2 id="1-数据库常见概念">1.数据库常见概念</h2>
<h3 id="1-1概念">1.1概念</h3>
<p><strong>数据库</strong>：DataBase，简称<strong>DB</strong>。按照一定格式存储数据的一些文件的组合。</p>
<p>顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p>
<p><strong>数据库管理系统</strong>：DataBaseManagement，简称<strong>DBMS</strong>。</p>
<p>数据库管理系统专门用来管理数据库中的数据，可以对数据进行<strong>增删改查。</strong></p>
<p><strong>常见的数据库管理系统</strong>：MySQL、Oracle、MS SqlServer、DB2、sybase等…</p>
<p><strong>SQL</strong>：结构化查询<strong>语言</strong></p>
<p>程序员需要学习SQL语句，学会编写SQL语句，然后DBMS负责执行SQL语句，最终来完成在数据库中对数据的增删改查操作。</p>
<p>SQL是一套标准，这个SQL在mysql中可以使用，同时在Oracle中也可以使用，还可以在DB2中使用。</p>
<p><strong>三者之间的关系？</strong><br>
DBMS—&gt;执行SQL —&gt;操作DB</p>
<h3 id="1-2-SQL语句分类">1.2 SQL语句分类</h3>
<p><strong>DQL</strong>：数据<strong>查询</strong>语言（凡是<strong>带有select关键字</strong>的都是查询语句）select…</p>
<p><strong>DML</strong>：数据<strong>操作</strong>语言（凡是对表当中的数据进行<strong>增删改</strong>的都是DML）</p>
<p>insert增   delete删    update改</p>
<p>主要是操作表中的数据。</p>
<p><strong>DDL</strong>：数据定义语言（凡是带有<strong>create、drop、alter</strong>的都是DDL）</p>
<p>DDL主要操作的是<strong>表的结构</strong>，不是表中的数据。</p>
<p>create：新建，等同于增   drop：删除   alter：修改<br>
（这个增删改和DML不同，这个主要是对<strong>表结构</strong>进行操作）</p>
<p><strong>TCL</strong>：事务控制语言</p>
<p>事务提交：commit;<br>
事务回滚：rollback;</p>
<p><strong>DCL</strong>：数据控制语言。</p>
<p>授权：grant  撤销权限：revoke</p>
<h3 id="1-3MYSQL中的数据类型">1.3MYSQL中的数据类型</h3>
<p><strong>varchar(最长255)</strong>: <strong>可变长度的字符串</strong>，比较智能，节省空间。会根据实际的数据长度动态分配空间。</p>
<p>优点：节省空间<br>
​		缺点：需要动态分配空间，<strong>速度慢</strong>。</p>
<p><strong>char(最长255)</strong><br>
:<strong>定长字符串</strong>，不管实际的数据长度是多少，分配固定长度的空间去存储数据。</p>
<p>优点：不需要动态分配空间，<strong>速度快。</strong><br>
​		缺点：使用不当可能会导致空间的浪费。</p>
<p><strong>varchar和char应该怎么选择？</strong><br>
​</p>
<p>性别字段选什么？因为性别是固定长度的字符串，所以选择char。<br>
​</p>
<p>姓名字段选什么？每一个人的名字长度不同，所以选择varchar。</p>
<p><strong>int(最长11)</strong>：数字中的整数型。等同于java中的int。</p>
<p><strong>bigint</strong>：数字中的长整型。等同于java中的long。</p>
<p><strong>float</strong>：单精度浮点型数据</p>
<p><strong>double</strong>：双精度浮点型数据</p>
<hr>
<p><strong>date</strong>：短日期类型</p>
<p><strong>datetime</strong>：长日期类型</p>
<p>date是<strong>短日期</strong>，默认为：%Y%m%d（<strong>年月日</strong>），datetime为<strong>长日期</strong>，默认为：%Y%m%d %h:%i:%s（<strong>年月日时分秒</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">例如：<span class="type">date</span>：<span class="string">&#x27;2024-05-23&#x27;</span>    datetime：<span class="string">&#x27;2024-05-23 11:17:23&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> datediff(now(),datetime) <span class="keyword">from</span> t_lend <span class="keyword">where</span> <span class="keyword">no</span> <span class="operator">=</span> <span class="number">6</span>; <span class="comment">-- 获得目标时间与当前时间的差值，返回天数</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>clob</strong>：字符大对象，最多可以存储4G的字符串。（Character Large OBject）</p>
<p>比如：<strong>存储一篇文章</strong>，存储一个说明。<strong>超过255个字符的</strong>都要采用CLOB字符大对象来存储。</p>
<p><strong>blob</strong>：二进制大对象，专门用来<strong>存储图片、声音、视频等流媒体数据</strong>。（Binary Large OBject）</p>
<p>往BLOB类型的字段上插入数据的时候，例如插入一个图片、视频等等，需要使用IO流才行。</p>
<p>表中数据类型的使用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">t_movie 电影表（专门存储电影信息的表）</span><br><span class="line">编号<span class="keyword">no</span>(<span class="type">bigint</span>)   名字name(<span class="type">varchar</span>)   故事情节storyplot(<span class="type">clob</span>)	</span><br><span class="line">上映日期playtime(<span class="type">date</span>)   时长<span class="type">time</span>(<span class="keyword">double</span>)   海报image(<span class="type">blob</span>)</span><br><span class="line">类型type(<span class="type">char</span>)							</span><br></pre></td></tr></table></figure>
<h3 id="1-4SQL脚本的执行">1.4SQL脚本的执行</h3>
<p>xxxx.sql这种文件被称为sql脚本文件，其中编写了大量的sql语句。</p>
<p>我们执行sql脚本文件的时候，该文件中所有的sql语句会全部执行。</p>
<p>批量执行SQL语句，可以使用sql脚本文件。</p>
<p>mysql&gt; <code>source</code> D:\course\03-MySQL\document\vip.sql</p>
<p>比如你在实际的工作中，第一天到公司，项目经理会给你一个xxx.sql文件，你执行这个脚本文件，你电脑上的数据库数据就有了。</p>
<h3 id="1-5数据库和表的导入导出">1.5数据库和表的导入导出</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据导出：</span></span><br><span class="line">	在windows的dos命令窗口中：</span><br><span class="line">		mysqldump bjpowernode<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456</span><br><span class="line">	可以导出指定的表吗？</span><br><span class="line">		mysqldump bjpowernode emp<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="comment">-- 导出emp表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据导入：</span></span><br><span class="line">	注意：需要先登录到mysql数据库服务器上。</span><br><span class="line">	创建数据库：<span class="keyword">create</span> database bjpowernode;</span><br><span class="line">	使用数据库：use bjpowernode;</span><br><span class="line">	然后初始化数据库：source D:\bjpowernode.sql (拉取)</span><br></pre></td></tr></table></figure>
<h3 id="1-6数据库常用命令">1.6数据库常用命令</h3>
<p><strong>exit</strong> --退出数据库</p>
<p><strong>show databases;</strong> --查看mysql中有哪些数据库。(mysql自带四个数据库)</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_11-16-59.png" alt=""></p>
<p><strong>use test;</strong> --表示正在使用一个名字叫做test的数据库。</p>
<p><strong>create database 数据库名;</strong> --创建数据库</p>
<p><strong>show tables;</strong> --查看某个数据库下有哪些表。（mysql自带很多张表）</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_11-35-14.png" style="zoom: 50%;" />
<p><strong>select * from 表名;</strong> --查看表中所有数据</p>
<p><strong>desc 表名;</strong> -查看表的结构</p>
<p><strong>select version();</strong> --查看mysql数据库的版本号</p>
<p><strong>select database();</strong> --查看当前使用的是哪个数据库</p>
<p><strong>\c</strong> --用来<strong>终止</strong>一条命令的输入。</p>
<p><strong>注意</strong>：不区分大小写</p>
<hr>
<p><strong>SQL中的注释语句（三种）</strong></p>
<p>一、<strong>单行注释</strong><br>
采用 “–”(双减号)进行单行注释，注意：&quot;–&quot;与注释内容<strong>要用空格隔开</strong>才会生效</p>
<p>二、<strong>多行注释</strong><br>
采用 /<em>…</em>/进行多行注释</p>
<p>三，（单行）注释<br>
在mysql数据库中就可使用&quot;#&quot;进行单行注释。</p>
<p>&quot;#&quot;与注释内容之间有没有空格注释效果都会生效。</p>
<p>除此之外，数据库可视化管理工具SQLyog如果连接的是mysql数据库，而mysql数据库支持SQL，那么mysql就支持使用SQL标准注释和&quot;#“注释，那么在SQLyog中也就可以使用SQL标准注释和”#&quot;注释。</p>
<h3 id="1-7模式">1.7模式</h3>
<p><strong>一个数据库中可以建立多个模式</strong>，一个模式下通常包含多个表、视图和索引等数据库对象。</p>
<p>对于<strong>模式的理解</strong>：</p>
<p>例如你的数据库里面有很多的表。就以一个学校作为例子吧：</p>
<p>有很多表分别用于存储学生、课程、成绩、学分等信息。</p>
<p>还有很多表用于存储 老师、工资、奖金等信息。</p>
<p>还有很多表用于存储学校的固定资产、流动资产、财务相关信息。</p>
<p>如果这么多的表，都混杂在一起。管理起来非常麻烦。</p>
<p>通过 create schema ， 划分区域，</p>
<p>把学生的，创建一个 schema 叫 <strong>Student</strong></p>
<p>教师的，创建一个 schema 叫 <strong>Teacher</strong></p>
<p>学校财务的，创建一个 schema 叫 <strong>School</strong></p>
<p>这样，对于专门负责学生信息管理的，就只负责 Student 这个 schema，表名全部是 <strong>Student.具体表名</strong>。</p>
<p>对于，负责教师系统开发的人来说，程序里面的表名，都是<strong>Teacher.具体表名</strong>。</p>
<p>学校财务的也是一样，查询的时候，是：SELECT * FROM <strong>School.具体表名</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.定义模式</span></span><br><span class="line"><span class="keyword">create</span> schema <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">authorization</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">-- 如果没有指定模式名，默认为用户名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.删除模式</span></span><br><span class="line"><span class="keyword">drop</span> schema <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> cascade(级联)<span class="operator">/</span>restrict(限制);</span><br><span class="line"><span class="comment">-- 使用级联：表示在删除模式的同时把该模式下所有的数据库对象都删除</span></span><br><span class="line"><span class="comment">-- 使用限制：只有在该模式下没有任何数据库对象时才能执行删除语句</span></span><br><span class="line"><span class="comment">-- 后续的删除表同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.在某个模式下创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span>.<span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(</span><br><span class="line">	<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [列级完整约束性条件],</span><br><span class="line">	<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [列级完整约束性条件],</span><br><span class="line">	...</span><br><span class="line">	[表级完整约束性条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>当我们用Create User创建数据库用户时，我们可以为该用户指定一个已经存在的Schema作为默认Schema，</p>
<p>如果我们不指定，则该用户所默认的Schema即为dbo模式。</p>
<h2 id="2-表及增、删、改">2.表及增、删、改</h2>
<p>数据库中最基本的单元是表：<strong>table</strong></p>
<p>任何一张表都有行和列</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_11-30-14.png" alt=""></p>
<p>行（row）：数据\记录</p>
<p>列（column）：字段</p>
<hr>
<p>自己导入的<strong>bjpowernode表</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-10-05.png" style="zoom:67%;" />
<p><strong>emp员工表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-34-29.png" alt=""></p>
<p>EMPNO：员工编号   ENAME：姓名   JOB：岗位   MGR：上级领导编号</p>
<p>HIREDATE：入职日期   SAL：工资   COMM：津贴   DEPTNO：部门编号</p>
<p><strong>dept部门表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-16.png" alt=""></p>
<p>DEPTNO：部门编号   DNAME：部门名称   LOC：部门地点</p>
<p><strong>salgrade工资等级表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-29_23-35-52.png" alt=""></p>
<p>GRADE：工资等级   LOSAL：最低工资   HISAL：最高工资</p>
<hr>
<p>以上三个表的结构：</p>
<p><strong>emp员工表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-52-40.png" alt=""></p>
<p><strong>dept部门表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-53-38.png" alt=""></p>
<p><strong>salgrade工资表</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_21-54-21.png" alt=""></p>
<hr>
<p>给查询的<strong>列起别名</strong>：<strong>select 原名 as 别名 from dept;</strong> （as关键字也可以省略，用空格代替）</p>
<p>例如将dname改为supername</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-32-30.png" alt=""></p>
<p><strong>注意</strong>：只是将查询后表的结果修改，原表不会发生实际变化。<strong>select永远不能进行实质的修改操作</strong>。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-37-26.png" alt=""></p>
<p>若<strong>别名中含有空格或者别名是中文</strong>，会编译错误。</p>
<p>解决方法：将别名用<strong>单引号</strong>括住（数据库标准），也可以使用双引号（在mysql中可以使用）。</p>
<hr>
<p><strong>字段参与数学运算</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-46-26.png" style="zoom:50%;" />
<p>将工资乘12：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-47-07.png" style="zoom:50%;" />
<hr>
<h3 id="2-1创建一个表create">2.1创建一个表create</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 学号、姓名、年龄、性别、邮箱地址</span></span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">		<span class="keyword">no</span> <span class="type">int</span>,</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">		sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">		age <span class="type">int</span>(<span class="number">3</span>),</span><br><span class="line">		email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">	);</span><br><span class="line"><span class="comment">-- 完整性约束在第八部分具体解释</span></span><br></pre></td></tr></table></figure>
<p>（<strong>以下内容了解即可</strong>）</p>
<p>快速创建表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<p>将一个查询结果当做一张新建的表，可以实现表的快速复制。</p>
<p>将查询结果直接插入到一张表中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp2 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<h3 id="2-2删除一个表drop">2.2删除一个表drop</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 当这张表不存在的时候会报错！</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果这张表存在的话，删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student; <span class="comment">-- 即使表不存在也不会报错</span></span><br></pre></td></tr></table></figure>
<p>对表结构的修改需要使用：<strong>alter</strong>-属于DDL语句</p>
<p><strong>desc</strong> t_student    查看表结构</p>
<h3 id="2-3插入数据insert">2.3插入数据insert</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>); <span class="comment">-- 字段名和值要对应</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>,name,sex,age,email)</span><br><span class="line">	<span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(email,name,sex,age,<span class="keyword">no</span>) <span class="comment">-- 可以乱序,但要一一对应</span></span><br><span class="line">	<span class="keyword">values</span>(<span class="string">&#x27;lisi@123.com&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>) <span class="keyword">values</span>(<span class="number">3</span>); <span class="comment">-- 只插入一个字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;lisi@123.com&#x27;</span>); <span class="comment">-- 省略字段名，但是值要全部写出来</span></span><br></pre></td></tr></table></figure>
<p>insert语句一旦执行成功了，必然会多一条记录。没有给其它字段指定值的话，<strong>默认值是NULL</strong>。</p>
<p><strong>一次插入多条数据</strong></p>
<p>insert into t_user(字段名1,字段名2) values(),(),(),();</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user( <span class="comment">-- 建一个新表t_user</span></span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    birth <span class="type">date</span>, <span class="comment">-- 日期类型，默认：%Y%m%d（年月日）   日期格式：1980-10-11</span></span><br><span class="line">    create_time datetime</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,birth,create_time) <span class="keyword">values</span> <span class="comment">-- 插入三条数据</span></span><br><span class="line">		(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;1980-10-11&#x27;</span>,now()), </span><br><span class="line">		(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;1981-10-11&#x27;</span>,now()),</span><br><span class="line">		(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;1982-10-11&#x27;</span>,now());</span><br></pre></td></tr></table></figure>
<p>数据库命名规范：所有的标识符都用小写字母，单词与单词之间用下划线衔接。</p>
<p>date是<strong>短日期</strong>，默认为：%Y%m%d（<strong>年月日</strong>），datetime为<strong>长日期</strong>，默认为：%Y%m%d %h:%i:%s（<strong>年月日时分秒</strong>）</p>
<h3 id="2-4修改数据update">2.4修改数据update</h3>
<p>update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3… where 条件;</p>
<p>若没有<strong>where条件限制</strong>，会导致对应字段的数据全部更新。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span>, birth <span class="operator">=</span> <span class="string">&#x27;2000-10-11&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span>, birth <span class="operator">=</span> <span class="string">&#x27;2000-10-11&#x27;</span>, create_time <span class="operator">=</span> now() <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-5删除数据delete">2.5删除数据delete</h3>
<p><strong>delete</strong>语句删除数据的原理：</p>
<p>表中的数据被删除了，但是这个数据在硬盘上<strong>真实的存储空间不会被释放。</strong></p>
<p>缺点是：删除效率比较低。</p>
<p>优点是：<strong>支持回滚rollback</strong>，后悔了可以恢复数据。</p>
<p><strong>truncate</strong>语句删除数据的原理：</p>
<p>这种删除效率比较高，表被一次截断，物理删除。</p>
<p>缺点：不支持回滚rollback。</p>
<p>优点：快速删除。</p>
<h4 id="2-5-1delete">2.5.1delete</h4>
<p>delete from 表名 where 条件;</p>
<p>没有条件，整张表的数据会全部删除！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-2truncate">2.5.2truncate</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp2; <span class="comment">-- （属于DDL操作。）</span></span><br></pre></td></tr></table></figure>
<h3 id="2-6修改基本表">2.6修改基本表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.增加一列，其数据类型为字符型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Student <span class="keyword">add</span> Semail <span class="type">varchar</span>(<span class="number">30</span>);</span><br><span class="line"><span class="comment">-- 2.修改某个字段的数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Student <span class="keyword">alter</span> <span class="keyword">column</span> Sbirthdate type <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 3.为某个字段增加唯一性约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Course <span class="keyword">add</span> <span class="keyword">unique</span>(Cname);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> <span class="comment">-- 删除某一列</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> <span class="comment">-- 删除指定的完整性约束</span></span><br><span class="line">rename <span class="keyword">column</span> <span class="comment">-- 修改字段名</span></span><br></pre></td></tr></table></figure>
<h2 id="3-表查询">3.表查询</h2>
<h3 id="3-1简单查询">3.1简单查询</h3>
<p><strong>select  字段  from  表名;</strong></p>
<p>例如查询部门名称：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-02-55.png" alt=""></p>
<p><strong>查询多个字段</strong>：<strong>select  字段1,字段2，字段3…  from  表名;</strong></p>
<p>例如查询部门编号和部门名称：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-03_22-07-10.png" alt=""></p>
<p><strong>查询所有字段</strong>：<strong>select * from 表名;</strong>（效率低，可读性差，实际开发中不建议）</p>
<hr>
<h3 id="3-2条件查询">3.2条件查询</h3>
<p><strong>where</strong> 后接条件语句</p>
<p><strong>= 等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资等于800的员工姓名和编号：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"><span class="comment">-- 查询SMITH的编号和薪资：</span></span><br><span class="line">		<span class="keyword">select</span> empno,sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>字符串使用单引号</span><br></pre></td></tr></table></figure>
<p><strong>&lt;&gt;或!= 不等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资不等于800的员工姓名和编号：</span></span><br><span class="line">	<span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">!=</span> <span class="number">800</span>;</span><br><span class="line">	<span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;&gt;</span> <span class="number">800</span>; <span class="operator">/</span><span class="operator">/</span> 小于号和大于号组成的不等号</span><br></pre></td></tr></table></figure>
<p><strong>&lt; 小于</strong>  <strong>&lt;= 小于等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资小于等于3000的员工姓名和编号：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>
<p>**&gt; 大于 ** <strong>&gt;= 大于等于</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资大于等于3000的员工姓名和编号：</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;=</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>
<p><strong>between … and …  在两个值之间, 等同于 &gt;= and &lt;=</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资在2450和3000之间的员工信息：（包括2450和3000）</span></span><br><span class="line"><span class="comment">-- 第一种方式：&gt;= and &lt;=</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;=</span> <span class="number">2450</span> <span class="keyword">and</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span>;</span><br><span class="line"><span class="comment">-- 第二种方式：between … and …	</span></span><br><span class="line">        <span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">2450</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br><span class="line">        （必须遵循左小右大）</span><br></pre></td></tr></table></figure>
<p><strong>is null 为空（is not null 不为空）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询哪些员工的津贴/补助为null：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal,comm <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 查询哪些员工的津贴/补助不为null：</span></span><br><span class="line">		<span class="keyword">select</span> empno,ename,sal,comm <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line">		（使用 <span class="keyword">is</span> ，不可以使用 ... <span class="operator">=</span> <span class="keyword">null</span>）</span><br></pre></td></tr></table></figure>
<p><strong>and 并且  、or 或者</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资大于2500，并且部门编号为10或20的员工：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">2500</span> <span class="keyword">and</span> (deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> deptno <span class="operator">=</span> <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- and和or同时出现，and优先级较高。如果想让or先执行，需要加“小括号”,以后在开发中，如果不确定优先级，就加小括号就行了。</span></span><br></pre></td></tr></table></figure>
<p><strong>in 包含，相当于 or ; not in 不包含</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询工作岗位是MANAGER或者是SALESMAN的员工:</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);<span class="operator">/</span><span class="operator">/</span>依旧是或者的意思</span><br><span class="line"><span class="comment">-- 查询工作岗位不是MANAGER或者不是SALESMAN的员工:</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>not 取非，主要用在 is 或 in 中</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-3模糊查询">3.3模糊查询</h3>
<p><strong>like</strong>;<strong>not like</strong></p>
<p>模糊查询支持**%或下划线**匹配</p>
<p>%匹配任意<strong>多个</strong>字符</p>
<p>下划线：任意<strong>一个</strong>字符。</p>
<p>（%是一个特殊符号，_ 也是一个特殊符号）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">找出名字中含有O的：</span><br><span class="line">	<span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%O%&#x27;</span>;</span><br><span class="line">找出名字中第二个字母是A的：</span><br><span class="line">    <span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br><span class="line">找出名字中以K开始的：</span><br><span class="line">    <span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;K%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">找出名字中有“_”的：</span><br><span class="line">	<span class="keyword">select</span> name <span class="keyword">from</span> t_student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%_%&#x27;</span>; <span class="comment">-- 这样不行</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> name <span class="keyword">from</span> t_student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>; <span class="comment">-- \转义字符，右下斜杠</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4排序">3.4排序</h3>
<p><strong>order by</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工薪资并排序：</span></span><br><span class="line"><span class="keyword">select</span>  ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal; <span class="operator">/</span><span class="operator">/</span> 默认是升序！！！</span><br></pre></td></tr></table></figure>
<p>指定降序：<strong>desc</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p>指定升序：<strong>asc</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		ename,sal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		sal <span class="keyword">asc</span>, ename <span class="keyword">asc</span>; <span class="comment">-- sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。</span></span><br></pre></td></tr></table></figure>
<p>了解：<strong>根据字段的位置</strong>也可以进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>; <span class="comment">-- 这里的2表示第二列，在bjpowernode表中指sal</span></span><br></pre></td></tr></table></figure>
<p>不建议在开发中这样使用，<strong>不健壮</strong>，列的顺序可能会被修改。</p>
<p>综合使用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工薪资在1250到3000并按照薪资降序排列：</span></span><br><span class="line"> <span class="keyword">select</span> </span><br><span class="line">    ename,sal</span><br><span class="line"> <span class="keyword">from</span> </span><br><span class="line">    emp</span><br><span class="line"> <span class="keyword">where</span> </span><br><span class="line">    sal <span class="keyword">between</span> <span class="number">1250</span> <span class="keyword">and</span> <span class="number">3000</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-5去重distinct">3.5去重distinct</h3>
<p>将查询结果去重，但原表的数据不会被改变。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将部门的工作进行去重：</span></span><br><span class="line">       <span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：distinct关键字只能出现在字段的最前面</span></span><br><span class="line"><span class="comment">-- 例如将部门工作和部门编号进行联合去重：</span></span><br><span class="line">       <span class="keyword">select</span> <span class="keyword">distinct</span> job,deptno <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 允许使用分组函数，例如统计工作岗位的数量：</span></span><br><span class="line">       <span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> job) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<h3 id="3-6分页">3.6分页</h3>
<p><strong>limit</strong>的作用：将查询<strong>结果集</strong>的一部分取出来。通常使用在分页查询中。</p>
<p>完整用法：limit startIndex, length		startIndex是<strong>起始下标</strong>，length是<strong>取出内容的长度</strong>。起始<strong>下标从0开始</strong>。</p>
<p>默认用法：limit 5; 这是取前5.</p>
<p><strong>按照薪资降序，取出工资排名在前5名的员工</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">select</span> </span><br><span class="line">		ename,sal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">		sal <span class="keyword">desc</span></span><br><span class="line">	limit <span class="number">5</span>; <span class="comment">-- 取前5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在mysql中limit在order by之后执行！！！！！！</span></span><br></pre></td></tr></table></figure>
<p><strong>取出工资排名在[3-5]名的员工：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		ename,sal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		sal <span class="keyword">desc</span></span><br><span class="line">	limit</span><br><span class="line">		<span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 0,1,2,3,4</span></span><br><span class="line"><span class="comment">-- 2表示起始位置从下标2开始，就是第三条记录。</span></span><br><span class="line"><span class="comment">-- 3表示取出内容的长度。</span></span><br></pre></td></tr></table></figure>
<p>每页显示3条记录：</p>
<p>第1页：limit 0,3		[0 1 2]</p>
<p>第2页：limit 3,3		[3 4 5]</p>
<p>第3页：limit 6,3		[6 7 8]</p>
<p>每页显示pageSize条记录</p>
<p>第pageNo页：limit (pageNo - 1) * pageSize  , pageSize</p>
<h2 id="4-函数">4.函数</h2>
<h3 id="4-1单行处理函数">4.1单行处理函数</h3>
<p>单行处理函数的特点：<strong>一个输入对应一个输出。</strong></p>
<p>和单行处理函数相对的是：多行处理函数。（特点：<strong>多个输入对应一个输出。</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- lower 转换为小写：</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">lower</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp; <span class="comment">-- as---&gt;起别名</span></span><br><span class="line"><span class="comment">-- upper 转换为大写：</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">upper</span>(ename) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- substr 取子串 substr(被截取的字符串, 起始下标从1开始,截取的长度):</span></span><br><span class="line">	<span class="keyword">select</span> substr(ename, <span class="number">1</span>, <span class="number">2</span>) <span class="keyword">as</span> ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 注意：起始下标从1开始，没有0。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出名字中第一个字母是A的员工:</span></span><br><span class="line">			第一种方式：模糊查询</span><br><span class="line">				<span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;A%&#x27;</span>; <span class="comment">-- 使用like</span></span><br><span class="line">			第二种方式：substr函数</span><br><span class="line">				<span class="keyword">select</span> </span><br><span class="line">					ename </span><br><span class="line">				<span class="keyword">from</span> </span><br><span class="line">					emp </span><br><span class="line">				<span class="keyword">where</span> </span><br><span class="line">					substr(ename,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- concat函数进行字符串的拼接：</span></span><br><span class="line">	<span class="keyword">select</span> concat(empno,ename) <span class="keyword">from</span> emp;<span class="operator">/</span><span class="operator">/</span>将员工编号和员工姓名拼接</span><br><span class="line"><span class="comment">-- length 取长度:</span></span><br><span class="line">	<span class="keyword">select</span> length(ename) <span class="keyword">as</span> ename_length <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- trim 去空格:</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;  KING&#x27;</span>; <span class="comment">-- 字符串中有空格，查不到</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span><span class="built_in">trim</span>(<span class="string">&#x27;  KING&#x27;</span>); <span class="comment">-- 使用trim函数，自动去掉空格</span></span><br><span class="line"><span class="comment">-- str_to_date 将字符串转换成日期</span></span><br><span class="line"><span class="comment">-- date_format 格式化日期</span></span><br><span class="line"><span class="comment">-- format 设置千分位</span></span><br><span class="line"><span class="comment">-- round 四舍五入：</span></span><br><span class="line">		<span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名;</span><br><span class="line">		<span class="keyword">select</span> ename <span class="keyword">from</span> emp;</span><br><span class="line">		<span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">from</span> emp; <span class="comment">-- select后面直接跟“字面量/字面值”，会将所有行都变成该值</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">1</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留1个小数</span></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留2个小数</span></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留到整数</span></span><br><span class="line">		<span class="keyword">select</span> round(<span class="number">1236.567</span>, <span class="number">-1</span>) <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> emp; <span class="comment">-- 保留到十位</span></span><br><span class="line"><span class="comment">-- rand() 生成随机数：</span></span><br><span class="line">		<span class="keyword">select</span> round(rand()<span class="operator">*</span><span class="number">100</span>,<span class="number">0</span>) <span class="keyword">from</span> emp; <span class="operator">/</span><span class="operator">/</span> <span class="number">100</span>以内的随机数</span><br><span class="line"><span class="comment">-- ifnull 可以将 null 转换成一个具体值：</span></span><br><span class="line">		<span class="comment">-- ifnull是空处理函数。专门处理空的。</span></span><br><span class="line">		<span class="comment">-- 注意：在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL</span></span><br><span class="line">		<span class="comment">--       NULL和另一个值的比较运算的结果为UNKNOWN</span></span><br><span class="line">		<span class="comment">--       在查询语句中，只有使where子句和having短语中的条件为true的元组才会被选中作为输出结果</span></span><br><span class="line">		<span class="keyword">select</span> ename, sal <span class="operator">+</span> comm <span class="keyword">as</span> salcomm <span class="keyword">from</span> emp; <span class="comment">-- comm是补助，部分员工补助为null，和薪资相加还会显示为null</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">select</span> ename, (sal <span class="operator">+</span> ifnull(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span> <span class="keyword">as</span> salcomm <span class="keyword">from</span> emp; <span class="comment">-- 算年薪，判断comm是否为null，若是转化为0</span></span><br><span class="line"></span><br><span class="line">case...when...then...when...then...else...end; 多层命令</span><br><span class="line"><span class="comment">-- 当员工的工作岗位为MANAGER时，薪资上涨10%，为SALESMAN时，薪资上涨50%，其他员工正常：</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">           ename,</span><br><span class="line">           job,</span><br><span class="line">           sal <span class="keyword">as</span> oldsal,</span><br><span class="line">           (<span class="keyword">case</span> job <span class="keyword">when</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">then</span> sal<span class="operator">*</span><span class="number">1.1</span> <span class="keyword">when</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">then</span> sal<span class="operator">*</span><span class="number">1.5</span> <span class="keyword">else</span> sal <span class="keyword">end</span>) <span class="keyword">as</span> newsal</span><br><span class="line">         <span class="keyword">from</span></span><br><span class="line">           emp;</span><br></pre></td></tr></table></figure>
<h3 id="4-2分组函数">4.2分组函数</h3>
<p>多行处理函数的特点：输入多行，最终输出一行。</p>
<p><strong>count</strong>   计数</p>
<p><strong>sum</strong>   求和</p>
<p><strong>avg</strong>   平均值</p>
<p><strong>max</strong>   最大值</p>
<p><strong>min</strong>   最小值</p>
<p>注意：分组函数在使用的时候必须先进行分组，然后才能使用。<strong>如果没有对数据进行分组，整张表将默认为一组</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出最高工资：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 找出最低工资：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计算工资和：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计算平均工资：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计算员工数量：</span></span><br><span class="line">		<span class="keyword">select</span> <span class="built_in">count</span>(ename) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的问题</strong>：</p>
<p>第一点：分组函数<strong>自动忽略NULL</strong>，你不需要提前对NULL进行处理。</p>
<p>第二点：分组函数中count(<code>*</code>)和count(具体字段)有什么区别？</p>
<p><strong>count(具体字段)</strong>：表示统计<strong>该字段下</strong>所有<strong>不为NULL的元素的总数。</strong></p>
<p><strong>count(*)</strong>：统计表中<strong>所有字段的总行数</strong>。（只要有一行数据count则++）</p>
<p>因为<strong>任意一行记录都不可能全为NULL</strong>，一行数据中有一列不为NULL，那么这行数据就是有效的。</p>
<p>第三点：分组函数<strong>不能够直接使用在where子句中</strong>。</p>
<h3 id="4-3group-by">4.3group by</h3>
<p><strong>找出每个工作岗位的工资和</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实现思路：先按照工作岗位分组，然后对每个组的工资求和。</span></span><br><span class="line">		<span class="keyword">select</span> </span><br><span class="line">			job,<span class="built_in">sum</span>(sal)</span><br><span class="line">		<span class="keyword">from</span></span><br><span class="line">		    emp</span><br><span class="line">		<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">			job;</span><br><span class="line"><span class="comment">-- 执行顺序：</span></span><br><span class="line"><span class="comment">-- 先从emp表中查询数据。根据job字段进行分组。然后对每一组的数据进行sum(sal)</span></span><br></pre></td></tr></table></figure>
<p>在一条select语句当中，如果有group by语句的话，select后面只能跟：<strong>参加分组的字段</strong>，以及<strong>分组函数</strong>。其它的一律不能跟。</p>
<p><strong>找出每个部门的最高薪资</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实现思路：先按照部门编号分组，然后求每一组工资的最大值。</span></span><br><span class="line">	    <span class="keyword">select</span> </span><br><span class="line">	        deptno,<span class="built_in">max</span>(sal) </span><br><span class="line">	    <span class="keyword">from</span> </span><br><span class="line">	        emp </span><br><span class="line">	    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">	        deptno;</span><br></pre></td></tr></table></figure>
<h3 id="4-4联合分组">4.4联合分组</h3>
<p><strong>找出“每个部门，不同工作岗位”的最高薪资</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 技巧：把两个字段联合成1个字段看。（两个字段联合分组）</span></span><br><span class="line">		<span class="keyword">select</span> </span><br><span class="line">			deptno, job, <span class="built_in">max</span>(sal)</span><br><span class="line">		<span class="keyword">from</span></span><br><span class="line">			emp</span><br><span class="line">		<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">			deptno, job</span><br><span class="line">		<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		    deptno <span class="keyword">asc</span>; <span class="comment">-- 按照部门编号升序排列</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5having">4.5having</h3>
<p>使用having可以对分完组之后的数据<strong>进一步过滤</strong>。</p>
<p>having不能单独使用，having不能代替where，having必须和group by<strong>联合使用</strong>。</p>
<p><strong>找出最高薪资大于3000的部门</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deptno,<span class="built_in">max</span>(sal) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    emp </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    sal <span class="operator">&gt;</span> <span class="number">3000</span> <span class="comment">-- where子句中可以使用字段，但不可使用分组函数</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deptno;</span><br></pre></td></tr></table></figure>
<p><strong>找出平均薪资高于2500的部门</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deptno,<span class="built_in">avg</span>(sal) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    emp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deptno</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    <span class="built_in">avg</span>(sal) <span class="operator">&gt;</span> <span class="number">2500</span>; <span class="comment">-- 本例中就不可以使用where，因为where子句中无法使用分组函数avg()</span></span><br></pre></td></tr></table></figure>
<p>where和having，优先选择where，where实在完成不了，再选择having。</p>
<h3 id="4-6总结sql执行顺序">4.6总结sql执行顺序</h3>
<p>语法顺序：select  --&gt; from --&gt; where --&gt; group by --&gt; having --&gt; order by</p>
<p>执行顺序：from --&gt; where --&gt; group by --&gt; having --&gt; select --&gt; order by</p>
<ol>
<li>从某张表中查询数据。</li>
<li>先经过where条件筛选出有价值的数据。</li>
<li>对这些有价值的数据进行分组。</li>
<li>分组之后可以使用having继续筛选。</li>
<li>select查询出来。</li>
<li>最后进行排序。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除MANAGER岗位之外，</span></span><br><span class="line"><span class="comment">-- 要求按照平均薪资降序排：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		job, <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp</span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">		job <span class="operator">&lt;&gt;</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line">	<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">		job</span><br><span class="line">	<span class="keyword">having</span></span><br><span class="line">		<span class="built_in">avg</span>(sal) <span class="operator">&gt;</span> <span class="number">1500</span></span><br><span class="line">	<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">		avgsal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="5-连接查询">5.连接查询</h2>
<p>从一张表中单独查询，称为<strong>单表查询</strong>。</p>
<p>将emp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。<strong>两张表都有相同字段</strong>deptno部门编号。</p>
<p>这种跨表查询，多张表联合起来查询数据，被称为<strong>连接查询</strong>。</p>
<p>当两张表进行连接查询，<strong>没有任何条件限制</strong>的时候，最终查询结果条数，是两张表条数的乘积，这种现象被称为：<strong>笛卡尔积现象</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    ename,dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    emp, dept; <span class="comment">-- 两张表的每行数据将进行对乘。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-1内连接之等值连接">5.1内连接之等值连接</h3>
<p><strong>查询每个员工所在部门名称，显示员工名和部门名</strong>：</p>
<p>将emp e表和dept d表进行连接。条件是：e.deptno = d.deptno  （部门编号相同）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL92语法：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		e.ename,d.dname</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp e, dept d   <span class="comment">-- 使用空格起别名</span></span><br><span class="line">	<span class="keyword">where</span></span><br><span class="line">		e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- sql92的缺点：结构不清晰，表的连接条件和后期进一步筛选的条件，都放到了where后面。</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">-- SQL99语法：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		e.ename,d.dname</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp e</span><br><span class="line">	<span class="keyword">inner</span> <span class="keyword">join</span>   <span class="comment">-- inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）</span></span><br><span class="line">		dept d</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		e.deptno <span class="operator">=</span> d.deptno; <span class="comment">-- 条件是等量关系，所以被称为等值连接。</span></span><br><span class="line"><span class="comment">-- sql99优点：表连接的条件是独立的，连接之后，如果还需要进一步筛选，可以往后继续添加where。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2内连接之非等值连接">5.2内连接之非等值连接</h3>
<p><strong>找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; <span class="comment">-- 条件不是等量关系，称为非等值连接。</span></span><br></pre></td></tr></table></figure>
<h3 id="5-3内连接之自连接">5.3内连接之自连接</h3>
<p><strong>查询所有员工的上级领导，要求显示员工名和对应的领导名</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 技巧：一张表看成两张表。</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a.mgr <span class="operator">=</span> b.empno; <span class="comment">-- 员工的领导编号 = 领导的员工编号</span></span><br></pre></td></tr></table></figure>
<p>缺点：公司中最高领导KING没有上级，内连接无法显示NULL，需要使用外连接。</p>
<h3 id="5-4外连接">5.4外连接</h3>
<p>内连接：（A和B连接，AB两张表<strong>没有主次关系是平等的</strong>）</p>
<p>内连接的特点：将能够匹配上ON后面的条件的数据查询出来。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- outer是可以省略的，带着可读性强。</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
<p>right的含义：表示将join关键字右边的这张表<strong>看成主表</strong>，能够<strong>将这张表的数据全部查询出来</strong>，捎带着关联查询左边的表。</p>
<p>在外连接中，两张表连接时<strong>产生了主次关系</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	dept d </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="comment">-- 将join左边的表看成主表</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
<p>带有right的是右外连接，又叫做<strong>右连接</strong>。</p>
<p>带有left的是左外连接，又叫做<strong>左连接</strong>。</p>
<p>任何一个右连接都有左连接的写法，， 任何一个左连接都有右连接的写法。</p>
<p><strong>案例：查询所有员工的上级领导，要求显示员工名和对应的领导名</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="comment">-- 将join左边的员工表看成主表，把所有员工都查出来，即使KING的上级为NULL</span></span><br><span class="line">	emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a.mgr <span class="operator">=</span> b.empno; <span class="comment">-- 员工的领导编号 = 领导的员工编号</span></span><br></pre></td></tr></table></figure>
<p>使用外连接可以显示公司最高领导KING的上级为NULL。</p>
<h3 id="5-5多表连接">5.5多表连接</h3>
<p><strong>三张表，四张表怎么连接？</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		a</span><br><span class="line">	<span class="keyword">join</span></span><br><span class="line">		b</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		a和b的连接条件</span><br><span class="line">	<span class="keyword">join</span></span><br><span class="line">		c</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		a和c的连接条件</span><br><span class="line">     <span class="keyword">join</span></span><br><span class="line">		d</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		a和d的连接条件</span><br></pre></td></tr></table></figure>
<p><strong>找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,e.sal,d.dname,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure>
<p><strong>找出每个员工的部门名称以及工资等级，还有上级领导，要求显示员工名、领导名、部门名、薪资、薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,e.sal,d.dname,s.grade,l.ename</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="comment">-- 左外连接，为了显示KING的上级NULL</span></span><br><span class="line">	emp l</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.mgr <span class="operator">=</span> l.empno;</span><br></pre></td></tr></table></figure>
<h2 id="6-子查询">6.子查询</h2>
<p>select语句中<strong>嵌套</strong>select语句，被嵌套的select语句称为子查询。</p>
<p>子查询可以出现在 select后面，from 后面，where 后面。</p>
<h3 id="6-1where子句中的子查询">6.1where子句中的子查询</h3>
<p><strong>找出比最低工资高的员工姓名和工资</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">   ename,sal </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">   emp </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">   sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure>
<h3 id="6-2from子句中的子查询">6.2from子句中的子查询</h3>
<p>from后面的子查询，可以将子查询的查询结果当做一张临时表。（技巧）</p>
<p><strong>找出每个岗位的平均工资的薪资等级</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	t.<span class="operator">*</span>, s.grade <span class="comment">-- 查询t表的全部字段和s表的grade字段</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> job,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job) t <span class="comment">-- 将括号中的sql查询结果看作是t表</span></span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; <span class="comment">-- t表和s表的连接条件 </span></span><br></pre></td></tr></table></figure>
<h3 id="6-3带有exists谓词的子查询">6.3带有exists谓词的子查询</h3>
<p>这篇文章讲的就很好：</p>
<p><a href="https://blog.csdn.net/weixin_43987915/article/details/113761623?spm=1001.2014.3001.5506">最明白的 not exists 双层嵌套讲解 SQL 查询语句_not exist 嵌套-CSDN博客</a></p>
<h2 id="7-union的用法">7.union的用法</h2>
<p>union的作用是：<strong>合并</strong>查询结果集，完成<strong>拼接</strong>。</p>
<p><strong>查询工作岗位是MANAGER和SALESMAN的员工</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="comment">-- 第一个sql语句没有分号</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>; <span class="comment">-- 最后一个sql语句有分号</span></span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-06-04_10-35-19.png" alt=""></p>
<p>优点：对于表连接，每连接一次新表，都要进行笛卡尔积匹配，而且匹配次数会成倍的翻。</p>
<p><strong>union可以减少匹配次数，效率更高。</strong></p>
<p>例如：a表 连接 b表 连接 c表</p>
<p>a表-10条记录   b表-10条记录   c表-10条记录</p>
<p>表连接的匹配次数：10<code>*</code>10<code>*</code>10=1000次</p>
<p>union的匹配次数：a表连接b表—&gt;10<code>*</code>10=100次   a表连接c表—&gt;10<code>*</code>10=100次</p>
<p>​                                 100+100=200次</p>
<p><strong>使用union时的注意事项</strong>：</p>
<p>合并查询结果集时，两个结果集的字段列数要相同，此外，字段的数据类型也要一致（mysql中不报错，oracle中会报错）。</p>
<p>使用union将多个查询结果合并起来时，<strong>系统会自动去掉重复元组</strong>。如果要保留重复元组，可使用<code>union all</code>。</p>
<p><strong>注</strong>：除了<strong>union</strong>(求并集[或])，还有<strong>intersect</strong>(求交集[且])，以及<strong>except</strong>(求差集[A-B])。</p>
<h2 id="8-约束">8.约束</h2>
<p>在创建表的时候，可以给表中的字段加上一些约束，来保证表中数据的完整性、有效性。</p>
<h3 id="8-1约束类型">8.1约束类型</h3>
<p>非空约束：not null</p>
<p>唯一性约束: unique</p>
<p>主键约束: primary key （简称PK）</p>
<p>外键约束：foreign key（简称FK）</p>
<p>检查约束：<strong>check</strong>（mysql不支持，oracle支持）</p>
<p>我们这里重点学习四个约束：<strong>not null，unique，primary key，foreign key</strong>。</p>
<h3 id="8-2not-null">8.2not null</h3>
<p>非空约束not null约束的字段不能为NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">		id <span class="type">int</span>,</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">-- not null只有列级约束，没有表级约束</span></span><br><span class="line">	);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id) <span class="keyword">values</span>(<span class="number">3</span>); <span class="comment">-- 只插入id，不插入name，name字段不被默认为NULL</span></span><br><span class="line">	<span class="comment">-- 报错：ERROR 1364 (HY000): Field &#x27;name&#x27; doesn&#x27;t have a default value</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3unique">8.3unique</h3>
<p>唯一性约束unique约束的<strong>字段不能重复</strong>，但是<strong>可以为NULL</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>,</span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;wangwu@123.com&#x27;</span>); <span class="comment">-- wangwu</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_vip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;wangwu@sina.com&#x27;</span>); <span class="comment">-- 重复的wangwu</span></span><br><span class="line"><span class="comment">-- 报错：ERROR 1062 (23000): Duplicate entry &#x27;wangwu&#x27; for key &#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id) <span class="keyword">values</span>(<span class="number">4</span>); <span class="comment">-- 只插入id，不插入name，name字段被默认为NULL</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id) <span class="keyword">values</span>(<span class="number">5</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name     <span class="operator">|</span> email            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> zhangsan <span class="operator">|</span> zhangsan<span class="variable">@123</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> lisi     <span class="operator">|</span> lisi<span class="variable">@123</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> wangwu   <span class="operator">|</span> wangwu<span class="variable">@123</span>.com   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+------------------+</span></span><br><span class="line"><span class="comment">-- name字段虽然被unique约束了，但是可以为NULL</span></span><br></pre></td></tr></table></figure>
<h4 id="8-3-1联合唯一">8.3.1联合唯一</h4>
<p>例如name和email两个字段联合起来具有唯一性。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	<span class="keyword">unique</span>(name,email) <span class="comment">-- 约束没有添加在列的后面，这种约束被称为表级约束。</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@sina.com&#x27;</span>);</span><br><span class="line">	<span class="comment">-- name和email两个字段联合起来具有唯一性</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@sina.com&#x27;</span>); <span class="comment">-- 重复插入</span></span><br><span class="line">	<span class="comment">-- 报错：ERROR 1062 (23000): Duplicate entry &#x27;zhangsan-zhangsan@sina.com&#x27; for key &#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在mysql当中，如果一个字段<strong>同时被not null和unique约束</strong>的话，该字段自动变成<strong>主键</strong>字段。（注意：在oracle中不一样）</p>
<h3 id="8-4primary-key">8.4primary key</h3>
<p>主键值是每一行记录的<strong>唯一</strong>标识。主键值是每一行记录的<code>身份证号</code>。</p>
<p>主键的特征：not null + unique（主键值<strong>不能为NULL</strong>，同时也<strong>不能重复</strong>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">		<span class="comment">-- 1个字段作为主键，叫做：单一主键</span></span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">			id <span class="type">int</span> <span class="keyword">primary</span> key,  <span class="comment">-- 列级约束 </span></span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">            <span class="keyword">primary</span> key(id)  <span class="comment">-- 表级约束</span></span><br><span class="line">		);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">-- 错误：不能重复</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">		ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;2&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span> <span class="comment">-- id=2重复</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">-- 错误：不能为NULL</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhaoliu&#x27;</span>); <span class="comment">-- id不能为NULL</span></span><br><span class="line">		ERROR <span class="number">1364</span> (HY000): Field <span class="string">&#x27;id&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br></pre></td></tr></table></figure>
<h4 id="8-4-1复合主键">8.4.1复合主键</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">		<span class="comment">-- id和name联合起来作为主键：复合主键</span></span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">			id <span class="type">int</span>,</span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">			email <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">			<span class="keyword">primary</span> key(id,name)</span><br><span class="line">		);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 错误：不能重复</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_vip(id,name,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry &#x27;1-lisi&#x27; for key &#x27;PRIMARY&#x27; -- id=1，name为lisi的数据已经存在</span></span><br></pre></td></tr></table></figure>
<p>在实际开发中不建议使用复合主键，<strong>建议使用单一主键</strong>。</p>
<p>因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一个表中主键约束能加两个吗？</span></span><br><span class="line">		<span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line">		<span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">			id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">			name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">primary</span> key</span><br><span class="line">		);</span><br><span class="line">		ERROR <span class="number">1068</span> (<span class="number">42000</span>): Multiple <span class="keyword">primary</span> key defined <span class="comment">-- 多个主键报错</span></span><br></pre></td></tr></table></figure>
<p>结论：在一张表中，主键约束只能添加1个。（<strong>主键只能有1个</strong>）</p>
<p><strong>主键分类</strong></p>
<p><strong>自然</strong>主键：主键值是一个自然数，和业务没关系。</p>
<p><strong>业务</strong>主键：主键值和业务紧密关联，例如拿银行卡账号做主键值，这就是业务主键。</p>
<h4 id="8-4-2主键自增">8.4.2主键自增</h4>
<p>在mysql当中，有一种机制，可以帮助我们自动维护一个主键值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_vip;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, <span class="comment">-- auto_increment表示自增，从1开始，以1递增！</span></span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> t_vip(name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">结果：</span><br><span class="line">		<span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line">		<span class="operator">|</span> id <span class="operator">|</span> name     <span class="operator">|</span></span><br><span class="line">		<span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line">		<span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br></pre></td></tr></table></figure>
<h3 id="8-5foreign-key">8.5foreign key</h3>
<p>如果一个实体的某个字段指向另一个实体的主键，该字段就叫做<strong>外键</strong>。</p>
<p>被指向的实体，称之为主实体（主表），也叫父实体（父表）。</p>
<p>负责指向的实体，称之为从实体（从表），也叫子实体（子表）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class( <span class="comment">-- 班级表作为主表</span></span><br><span class="line">	classno <span class="type">int</span> <span class="keyword">primary</span> key, <span class="comment">-- 班号作为主键</span></span><br><span class="line">	classname <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student( <span class="comment">-- 学生表作为子表</span></span><br><span class="line">	<span class="keyword">no</span> <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, <span class="comment">-- 学号作为主键且自增 </span></span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	cno <span class="type">int</span>,</span><br><span class="line">	<span class="keyword">foreign</span> key(cno) <span class="keyword">references</span> t_class(classno) <span class="comment">-- 学生的班号参照班级表的班号（在主表中是主键），这里学生的班号作为外键</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_class(classno, classname) <span class="keyword">values</span>(<span class="number">100</span>, <span class="string">&#x27;北京市大兴区亦庄镇第二中学高三1班&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_class(classno, classname) <span class="keyword">values</span>(<span class="number">101</span>, <span class="string">&#x27;北京市大兴区亦庄镇第二中学高三1班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;lilei&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;hanmeimei&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">101</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(name,cno) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">101</span>);</span><br></pre></td></tr></table></figure>
<p><strong>外键值可以为空</strong>，可以理解为：一名学生必定会关联到一个存在的班级，但是来了一个转校生，他还没有分班，现在属于学生子表，还没有关联到班级主表中的任何一条记录。</p>
<p>t_class是父表，t_student是子表（理解记忆）</p>
<p><strong>删除表</strong>的顺序：先删子，再删父。</p>
<p><strong>创建表</strong>的顺序：先创建父，再创建子。</p>
<p><strong>删除数据</strong>的顺序：先删子，再删父。</p>
<p><strong>插入数据</strong>的顺序：先插入父，再插入子</p>
<p>子表中的外键引用父表中的某个字段，<strong>被引用的这个字段不一定是主表的主键</strong>，但是<strong>要具有unique约束（数据不重复</strong>）。</p>
<h2 id="9-存储引擎">9.存储引擎</h2>
<p>存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）</p>
<p>实际上存储引擎是一个表<strong>存储/组织数据</strong>的方式。</p>
<p>不同的存储引擎，表<strong>存储数据</strong>的方式不同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t_student;</span><br><span class="line"><span class="comment">-- 可以在建表的时候给表指定存储引擎。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_student` (</span><br><span class="line">  `<span class="keyword">no</span>` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `cno` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`<span class="keyword">no</span>`),</span><br><span class="line">  KEY `cno` (`cno`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `t_student_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`cno`) <span class="keyword">REFERENCES</span> `t_class` (`classno`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="comment">-- 这里可以查看引擎</span></span><br></pre></td></tr></table></figure>
<p>在建表的时候可以在最后的小括号&quot;)&quot;的右边使用：</p>
<p>ENGINE来<strong>指定存储引擎</strong>。mysql默认的存储引擎是：<strong>InnoDB</strong></p>
<p>CHARSET来<strong>指定</strong>这张表的<strong>字符编码方式</strong>。mysql默认的字符编码方式是：<strong>utf8</strong> (qbk支持中文)</p>
<h3 id="9-1mysql支持的存储引擎">9.1mysql支持的存储引擎</h3>
<p><code>show engines \G </code>  查看mysql支持哪些存储引擎</p>
<p>mysql的版本不同支持存储引擎的情况不同。</p>
<h3 id="9-2MyISAM存储引擎">9.2MyISAM存储引擎</h3>
<p>使用三个文件表示每个表：</p>
<ol>
<li>格式文件 — 存储表结构的定义（mytable.frm）</li>
<li>数据文件 — 存储表行的内容（mytable.MYD）</li>
<li>索引文件 — 存储表上索引（mytable.MYI）：索引可以看作是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</li>
</ol>
<p>MyISAM存储引擎特点：</p>
<ol>
<li>可被转换为压缩表、只读表来节省空间。</li>
<li>MyISAM不支持事务机制，安全性较低。</li>
</ol>
<h3 id="9-3InnoDB存储引擎">9.3InnoDB存储引擎</h3>
<p>这是mysql默认的存储引擎，是一个<strong>重量级</strong>的存储引擎。</p>
<p>InnoDB<strong>支持事务</strong>，支持数据库崩溃后的自动恢复机制。</p>
<p>InnoDB存储引擎最主要的特点是：<strong>非常安全</strong>。</p>
<p>它管理的表具有下列主要特征：</p>
<ol>
<li>
<p>每个 InnoDB表在数据库目录中以.frm 格式文件表示</p>
</li>
<li>
<p>InnoDB的<strong>表空间tablespace</strong> 用于存储表的内容（表空间是一个逻辑名称。表空间存储数据和索引。）</p>
</li>
<li>
<p>提供一组用来记录事务性活动的日志文件</p>
</li>
<li>
<p>用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</p>
</li>
<li>
<p>提供全 ACID 兼容</p>
</li>
<li>
<p>在 MySQL 服务器崩溃后提供自动恢复</p>
</li>
<li>
<p>多版本（MVCC）和行级锁定</p>
</li>
<li>
<p>支持外键及引用的完整性，包括级联删除和更新</p>
<p>InnoDB最大的特点就是支持事务以保证数据的安全。</p>
<p>效率不是很高，并且不能压缩，也不能转换为只读表，不能很好的节省存储空间。</p>
</li>
</ol>
<h3 id="9-4MEMORY存储引擎">9.4MEMORY存储引擎</h3>
<p>使用MEMORY存储引擎的表，其<strong>数据存储在内存中</strong>，且行的长度固定，这两个特点使得 MEMORY 存储引擎非常<strong>快</strong>。</p>
<p>MEMORY 存储引擎管理的表具有下列特征：</p>
<ol>
<li>在数据库目录内，每个表均以.frm 格式的文件表示。</li>
<li>表数据及索引被存储在内存中。（目的就是快，查询快）</li>
<li>表级锁机制。</li>
<li>不能包含 TEXT 或 BLOB 字段。</li>
</ol>
<p>MEMORY 存储引擎以前被称为HEAP 引擎。</p>
<p>MEMORY引擎优点：<strong>查询效率是最高的</strong>。不需要和硬盘交互。</p>
<p>MEMORY引擎缺点：<strong>不安全</strong>，关机之后数据消失。因为数据和索引都是在内存当中。</p>
<h2 id="10-事务">10.事务</h2>
<p>一个事务其实就是一个完整的业务逻辑。是一个最小的工作单元，不可再分。</p>
<p><strong>什么是一个完整的业务逻辑</strong>：</p>
<p>假设转账，从A账户向B账户中转账10000元。将A账户的钱减去10000元（update语句）<br>
，将B账户的钱加上10000元（update语句）<br>
。</p>
<p>这就是一个完整的业务逻辑。</p>
<p>以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。</p>
<p>这两个update语句<strong>要求必须同时成功或者同时失败</strong>，这样才能保证钱的数量是正确的。</p>
<p>insert   delete   update  <strong>只有</strong>这三个命令和事务有关系，其它命令都没有关系。</p>
<p>做某件事的时候需要多条DML语句共同联合起来才能完成，所以才需要事务的存在。</p>
<p>事务：就是<strong>批量的DML语句同时成功，或者同时失败</strong></p>
<h3 id="10-1InnoDB实现事务">10.1InnoDB实现事务</h3>
<p>InnoDB存储引擎：提供一组用来<strong>记录事务性活动的日志文件</strong></p>
<p>在事务的执行过程中，<strong>每一条DML语句</strong>的操作都会记录到 “事务性活动的日志文件” 中。</p>
<p>在事务的执行过程中，我们可以<strong>提交事务</strong>，也可以<strong>回滚事务</strong>。</p>
<p>提交事务： <strong>commit</strong>;</p>
<ul>
<li>清空事务性活动的日志文件，将数据<strong>全部彻底持久化</strong>到数据库表中。</li>
<li>提交事务标志着，事务的结束。并且是一种<strong>全部成功的结束</strong>。</li>
</ul>
<p>回滚事务：<strong>rollback</strong>;   (永远只能回滚到上一次的提交点）</p>
<ul>
<li>将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</li>
<li>回滚事务标志着，事务的结束。并且是一种<strong>全部失败的结束</strong>。</li>
</ul>
<p>在mysql中，每执行一条DML语句，系统会自动提交事务，这与实际开发中<strong>多条DML语句联合工作</strong>不符</p>
<p>故要将mysql的自动提交机制<strong>关闭</strong>：start transaction;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_bak;</span><br><span class="line">		<span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction; <span class="comment">-- 关闭自动提交机制，开启我们自己的事务</span></span><br><span class="line">	Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> dept_bak <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;tj&#x27;</span>);</span><br><span class="line">	Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> dept_bak <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;tj&#x27;</span>);</span><br><span class="line">	Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_bak;</span><br><span class="line">	<span class="operator">+</span><span class="comment">--------+-------+------+</span></span><br><span class="line">	<span class="operator">|</span> DEPTNO <span class="operator">|</span> DNAME <span class="operator">|</span> LOC  <span class="operator">|</span></span><br><span class="line">	<span class="operator">+</span><span class="comment">--------+-------+------+</span></span><br><span class="line">	<span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> abc   <span class="operator">|</span> tj   <span class="operator">|</span></span><br><span class="line">	<span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> abc   <span class="operator">|</span> tj   <span class="operator">|</span></span><br><span class="line">	<span class="operator">+</span><span class="comment">--------+-------+------+</span></span><br><span class="line">	<span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>; <span class="comment">-- 回滚事务</span></span><br><span class="line">	Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_bak;</span><br><span class="line">	<span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) <span class="comment">-- 因为一直都没有提交事务，回滚到插入数据之前的节点</span></span><br></pre></td></tr></table></figure>
<h3 id="10-2事务的四个特性">10.2事务的四个特性</h3>
<p><strong>A：原子性</strong>   说明事务是最小的工作单元，不可再分。</p>
<p><strong>C：一致性</strong>   所有的事务要求在同一个事务当中，所有的操作必须同时成功，或者同时失败，以保证数据的一致性。</p>
<p><strong>I：隔离性</strong>   A事务和B事务之间具有一定的隔离。</p>
<p>教室A和教室B之间有一道墙，那么这道墙就是隔离性。</p>
<p><strong>D：持久性</strong>   事务<strong>最终结束</strong>的一个保障。事务提交，就相当于将没有保存到硬盘上的数据保存到硬盘上。</p>
<h3 id="10-3事务的隔离性">10.3事务的隔离性</h3>
<h4 id="10-3-1事务与事务之间的四个隔离级别">10.3.1事务与事务之间的四个隔离级别</h4>
<p><strong>读未提交：read uncommitted（最低的隔离级别，没有提交就读到了）</strong></p>
<ul>
<li>事务A可以读取到事务B<strong>未提交</strong>的数据。</li>
<li>存在的问题是：<strong>脏读现象</strong>(Dirty Read)，我们称读到了脏数据。</li>
<li>这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步。</li>
</ul>
<p><strong>读已提交：read committed（提交之后才能读到）</strong></p>
<ul>
<li>
<p>事务A只能读取到事务B<strong>提交之后</strong>的数据。</p>
</li>
<li>
<p>解决了脏读的现象。</p>
</li>
<li>
<p>不可重复读取数据。</p>
<p>例如：在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取的时候，读到的数据是4条，3不等于4，称为不可重复读取。</p>
</li>
<li>
<p>这种隔离级别是<strong>比较真实</strong>的数据，每一次读到的数据是绝对的真实。</p>
</li>
<li>
<p>oracle数据库默认的隔离级别是：read committed</p>
</li>
</ul>
<p><strong>可重复读：repeatable read（提交之后也读不到，永远读取的都是刚开启事务时的数据）</strong></p>
<ul>
<li>
<p><strong>事务A开启之后</strong>，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变，这就是可重复读。</p>
</li>
<li>
<p>可重复读可能会出现<strong>幻影读</strong>。每一次读取到的数据都是幻象，不够真实。</p>
<p>例如：早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是早晨9点的，读到的是假象。</p>
</li>
<li>
<p>mysql中默认的事务隔离级别：repeatable read</p>
</li>
</ul>
<p><strong>序列化/串行化：serializable（最高的隔离级别）</strong></p>
<ul>
<li>这是最高的隔离级别，效率最低。但是解决了以上的所有问题。</li>
<li>这种隔离级别表示<strong>事务排队</strong>，不能并发！</li>
<li>synchronized，线程同步（事务同步的）每一次读取到的数据都是最真实的，并且效率是最低的。</li>
</ul>
<h4 id="10-3-2验证各种隔离级别">10.3.2验证各种隔离级别</h4>
<p>mysql查看隔离级别：select @@transaction_isolation;</p>
<p><strong>验证：read uncommited</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted; <span class="comment">-- 设置全局事务的隔离性为读未提交</span></span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;                                     use bjpowernode;</span><br><span class="line">													</span><br><span class="line"><span class="keyword">start</span> transaction;                                   <span class="keyword">start</span> transaction; <span class="comment">-- 开启事务  </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 第一次查表是空</span></span><br><span class="line">													</span><br><span class="line">												<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>); <span class="comment">-- 事务B向表中插入数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 第二次查表可以看到事务B插入的数据</span></span><br></pre></td></tr></table></figure>
<p><strong>验证：read commited</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed; <span class="comment">-- 设置全局事务的隔离性为读已提交</span></span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;</span><br><span class="line">													use bjpowernode;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">													<span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 空</span></span><br><span class="line">													<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 空</span></span><br><span class="line">													<span class="keyword">commit</span>; <span class="comment">-- 事务B将数据提交</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 事务A才能看到事务B插入的数据</span></span><br></pre></td></tr></table></figure>
<p><strong>验证：repeatable read</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;</span><br><span class="line">													use bjpowernode;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">													<span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; </span><br><span class="line">													<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line">													<span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">													<span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 永远读取的都是刚开启事务时的数据，事务B提交数据之后也读不到</span></span><br></pre></td></tr></table></figure>
<p><strong>验证：serializable</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level serializable;</span><br><span class="line">事务A													事务B</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">use bjpowernode;</span><br><span class="line">													use bjpowernode;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">													<span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">values</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">-- 直到事务A提交，事务B都无法进行操作                       </span></span><br><span class="line">                                                          <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user; <span class="comment">-- 操作被隔断，需要等事务A彻底完成                                          </span></span><br></pre></td></tr></table></figure>
<h2 id="11-索引">11.索引</h2>
<p>索引<strong>在表的字段上添加</strong>，是<strong>提高查询效率</strong>的一种机制。</p>
<p>一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引。</p>
<p>索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p>
<p>MySQL在查询方面主要就是<strong>两种方式</strong>：全表扫描  ；根据索引检索。</p>
<p>在mysql数据库当中索引也是需要排序的，并且这个所以的排序和<strong>TreeSet数据结构</strong>相同。</p>
<p>TreeSet（TreeMap）底层是一个自平衡的二叉树。在mysql当中索引是一个<strong>B-Tree数据结构</strong>。</p>
<p>遵循<strong>左小右大</strong>的原则存放数据，采用<strong>中序遍历</strong>方式遍历取数据。</p>
<p><strong>索引的实现原理</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-25_11-09-21.png" style="zoom: 50%;" />
<ul>
<li>
<p>Tip1：在任何数据库当中<strong>主键都会自动添加索引对象</strong>，id字段上自动有索引，因为id是主键。</p>
<p>另外在mysql当中，一个字段上如果有<strong>unique约束</strong>的话，也会自动创建索引对象</p>
</li>
<li>
<p>Tip2：在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个物理存储编号。</p>
</li>
<li>
<p>Tip3：在mysql当中，索引是一个单独的对象，在不同的存储引擎中以不同的形式存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中索引存储在一个逻辑名称叫做tablespace当中。在MEMORY存储引擎当中索引被存储在内存当中。不管索引存储在哪里，索引在mysql当中都是一个<strong>树的形式</strong>。</p>
</li>
</ul>
<p><strong>什么条件下</strong>会考虑给字段添加索引：</p>
<ol>
<li>数据量庞大。</li>
<li>该字段经常出现在where的后面，以<strong>条件</strong>的形式存在，也就是说<strong>这个字段总是被扫描</strong>。</li>
<li>该字段有很少的<strong>DML</strong>(insert delete update)操作。（因为DML之后，索引需要重新排序）</li>
</ol>
<ul>
<li>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</li>
<li><strong>建议通过主键查询</strong>，建议通过unique约束的字段进行查询，效率是比较高的。</li>
</ul>
<h3 id="11-1索引的创建和删除">11.1索引的创建和删除</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建索引：</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line">	<span class="comment">-- 给emp表的ename字段添加索引，起名：emp_ename_index</span></span><br><span class="line">删除索引：</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> index emp_ename_index <span class="keyword">on</span> emp;</span><br><span class="line">	<span class="comment">-- 将emp表上的emp_ename_index索引删除。</span></span><br><span class="line">修改索引：</span><br><span class="line">     mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> index emp_ename_index rename <span class="keyword">to</span> new_index;</span><br><span class="line">     <span class="comment">-- 对旧索引重新命名</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 查看一个SQL语句是否使用了索引进行检索</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> 。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+-</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> 。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ALL</span></span><br><span class="line">	扫描<span class="number">14</span>条记录，说明没有使用索引。<span class="comment">-- 后面没有截取到row</span></span><br><span class="line"></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+-----------------</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys   <span class="operator">|</span> key             。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+-----------------</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> emp_ename_index <span class="operator">|</span> emp_ename_index 。。。</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+-----------------</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ref</span></span><br><span class="line">	扫描到<span class="number">1</span>条记录，说明使用了索引。<span class="comment">-- 后面没有截取到row</span></span><br></pre></td></tr></table></figure>
<h3 id="11-2索引失效">11.2索引失效</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">失效的第<span class="number">1</span>种情况：模糊匹配</span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%T&#x27;</span>;</span><br><span class="line">    <span class="comment">/*ename上即使添加了索引，也不会走索引</span></span><br><span class="line"><span class="comment">	原因是因为模糊匹配当中以“%”开头，任意一个数据都可被查到。</span></span><br><span class="line"><span class="comment">	所以尽量避免模糊查询的时候以“%”开始*/</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%T&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">type<span class="operator">=</span><span class="keyword">ALL</span>,没有使用索引。</span><br><span class="line"></span><br><span class="line">失效的第<span class="number">2</span>种情况：使用<span class="keyword">or</span>且只有一端有索引</span><br><span class="line">	<span class="comment">/*如果使用or，那么要求or两端的条件字段都要有索引，才会走索引，</span></span><br><span class="line"><span class="comment">	如果其中一边有一个字段没有索引，那么另一个字段上的索引也不会实现。*/</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+------+---------</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys   <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+------+---------</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> emp_ename_index <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-----------------+------+---------</span></span><br><span class="line">type<span class="operator">=</span><span class="keyword">ALL</span>,没有使用索引。</span><br><span class="line"></span><br><span class="line">失效的第<span class="number">3</span>种情况：使用复合索引时没有用左侧的字段查询</span><br><span class="line">	<span class="comment">/*复合索引：</span></span><br><span class="line"><span class="comment">		两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">create</span> index emp_job_sal_index <span class="keyword">on</span> emp(job,sal); <span class="comment">-- 只有使用job字段才能使用索引</span></span><br><span class="line">	</span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-------------------+---------------</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys     <span class="operator">|</span> key           </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-------------------+---------------</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> emp_job_sal_index <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+-------------------+---------------</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ref</span>，使用了索引。</span><br><span class="line">	</span><br><span class="line">	mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>; <span class="comment">-- 使用sal字段</span></span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	<span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> </span><br><span class="line">	<span class="operator">+</span><span class="comment">----+-------------+-------+------+---------------+------+---------+--</span></span><br><span class="line">	type<span class="operator">=</span><span class="keyword">ALL</span>,没有使用索引。</span><br></pre></td></tr></table></figure>
<h2 id="12-视图">12.视图</h2>
<p>视图view:站在不同的角度去看待同一份数据。</p>
<p>基本表删除后，由该基本表导出的所有视图均无法使用。但是视图的定义没有从数据字典中清除，需要显式地使用drop view语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表复制：</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> dept2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept; <span class="comment">-- 快速复制</span></span><br><span class="line"><span class="comment">-- dept2表中的数据：</span></span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> DEPTNO <span class="operator">|</span> DNAME      <span class="operator">|</span> LOC      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NEW</span> YORK <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span> DALLAS   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> SALES      <span class="operator">|</span> CHICAGO  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span> OPERATIONS <span class="operator">|</span> BOSTON   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图对象：</span></span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">view</span> dept2_view <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2;</span><br><span class="line"><span class="comment">-- 删除视图对象：</span></span><br><span class="line">	<span class="keyword">drop</span> <span class="keyword">view</span> dept2_view;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：只有DQL语句才能以view的形式创建。</span></span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">view</span> view_name <span class="keyword">as</span> <span class="comment">-- 这里的语句必须是DQL语句，也就是select语句;</span></span><br></pre></td></tr></table></figure>
<h3 id="12-1视图的作用">12.1视图的作用</h3>
<p>我们可以面向视图对象进行增删改查。</p>
<p>对视图对象的增删改查，<strong>会导致原表也被改动</strong>，会影响到原表中的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 面向视图查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2_view; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 面向视图插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept2_view(deptno,dname,loc) <span class="keyword">values</span>(<span class="number">60</span>,<span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询原表数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2; <span class="comment">-- 原表也被插入数据</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> DEPTNO <span class="operator">|</span> DNAME      <span class="operator">|</span> LOC      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span> <span class="keyword">NEW</span> YORK <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span> DALLAS   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> SALES      <span class="operator">|</span> CHICAGO  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span> OPERATIONS <span class="operator">|</span> BOSTON   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">60</span> <span class="operator">|</span> SALES      <span class="operator">|</span> BEIJING  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 面向视图删除</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> dept2_view;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询原表数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2; <span class="comment">-- 原表也被删除</span></span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 创建视图对象</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> </span><br><span class="line">	emp_dept_view <span class="comment">-- 使以后的表操作更加简单，便利</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> </span><br><span class="line">		e.ename,e.sal,d.dname</span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">		emp e</span><br><span class="line">	<span class="keyword">join</span></span><br><span class="line">		dept d</span><br><span class="line">	<span class="keyword">on</span></span><br><span class="line">		e.deptno <span class="operator">=</span> d.deptno; <span class="comment">-- 将emp表和dept表连接后的表作为视图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询视图对象</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp_dept_view;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> sal     <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 面向视图更新</span></span><br><span class="line"><span class="keyword">update</span> emp_dept_view </span><br><span class="line"><span class="keyword">set</span> sal <span class="operator">=</span> <span class="number">1000</span> </span><br><span class="line"><span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;ACCOUNTING&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option; <span class="comment">-- 对该视图进行更新操作时，会自动检查where子句的条件。同样适用于插入和删除操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 原表数据被更新</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+----</span></span><br><span class="line"><span class="operator">|</span> EMPNO <span class="operator">|</span> ENAME  <span class="operator">|</span> JOB       <span class="operator">|</span> MGR  <span class="operator">|</span> HIREDATE   <span class="operator">|</span> SAL     <span class="operator">|</span> COMM    <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+----</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span> <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span> <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> MANAGER   <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span> <span class="operator">|</span> <span class="number">1000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span> <span class="operator">|</span> <span class="number">1000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> SALESMAN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span> <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> CLERK     <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">1000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span>     </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+-----------+------+------------+---------+---------+----</span></span><br></pre></td></tr></table></figure>
<h3 id="12-2视图在开发中的作用">12.2视图在开发中的作用</h3>
<p>假设<strong>有一条非常复杂的SQL语句</strong>，而这条SQL语句需要在不同的位置上<strong>反复使用</strong>。</p>
<p>每一次使用这个sql语句的时候都需要重新编写，很长，很麻烦，怎么办？</p>
<p>可以把这条复杂的SQL语句以视图对象的形式新建，在需要编写这条SQL语句的位置直接使用视图对象，可以大大<strong>简化开发</strong>，并且利于后期的维护，修改数据的时候也只需要修改视图。</p>
<p>可以对视图进行增删改查等操作。视图不是在内存当中，视图对象也是以文件形式<strong>存储在硬盘上的，不会消失</strong>。</p>
<p>视图并不等同于派生表。</p>
<h2 id="13-数据库三范式">13.数据库三范式</h2>
<p><strong>第一范式</strong>：要求任何一张表<strong>必须有主键</strong>，每一个<strong>字段</strong>原子性<strong>不可再分</strong>。</p>
<p><strong>第二范式</strong>：建立在第一范式的基础之上，要求所有非主键字段<strong>完全依赖主键</strong>，<br>
<strong>不要产生部分依赖</strong>。</p>
<p><strong>第三范式</strong>：建立在第二范式的基础之上，要求所有非主键字段<strong>直接依赖主键</strong>，<br>
<strong>不要产生传递依赖</strong>。</p>
<p>设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</p>
<h3 id="13-1第一范式">13.1第一范式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生编号    学生姓名    联系方式</span><br><span class="line"><span class="comment">------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>		张三		zs<span class="variable">@gmail</span>.com,<span class="number">1359999999</span></span><br><span class="line"><span class="number">1002</span>		李四		ls<span class="variable">@gmail</span>.com,<span class="number">13699999999</span></span><br><span class="line"><span class="number">1001</span>		王五		ww<span class="variable">@163</span>.net,<span class="number">13488888888</span></span><br><span class="line">	</span><br><span class="line">以上是学生表，满足第一范式吗？</span><br><span class="line">	不满足。第一：没有主键；第二：联系方式可以分为邮箱地址和电话</span><br><span class="line">修改：</span><br><span class="line">学生编号(pk)          学生姓名	 邮箱地址		 联系电话</span><br><span class="line"><span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>				张三		zs<span class="variable">@gmail</span>.com	<span class="number">1359999999</span></span><br><span class="line"><span class="number">1002</span>				李四		ls<span class="variable">@gmail</span>.com	<span class="number">13699999999</span></span><br><span class="line"><span class="number">1003</span>				王五		ww<span class="variable">@163</span>.net		<span class="number">13488888888</span></span><br></pre></td></tr></table></figure>
<h3 id="13-2第二范式">13.2第二范式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生编号 		学生姓名 	教师编号 教师姓名</span><br><span class="line"><span class="comment">----------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>			张三		<span class="number">001</span>		王老师</span><br><span class="line"><span class="number">1002</span>			李四		<span class="number">002</span>		赵老师</span><br><span class="line"><span class="number">1003</span>			王五		<span class="number">001</span>		王老师</span><br><span class="line"><span class="number">1001</span>			张三		<span class="number">002</span>		赵老师</span><br><span class="line">这张表描述了学生和老师的关系：<span class="number">1</span>个学生有多个老师，<span class="number">1</span>个老师有多个学生</span><br><span class="line">这是非常典型的`多对多`关系</span><br><span class="line"></span><br><span class="line">以上的表是否满足第一范式？</span><br><span class="line">没有主键，不满足第一范式</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">学生编号<span class="operator">+</span>教师编号(pk)		       学生姓名       教师姓名</span><br><span class="line"><span class="comment">----------------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>			<span class="number">001</span>				张三			王老师</span><br><span class="line"><span class="number">1002</span>			<span class="number">002</span>				李四			赵老师</span><br><span class="line"><span class="number">1003</span>			<span class="number">001</span>				王五			王老师</span><br><span class="line"><span class="number">1001</span>			<span class="number">002</span>				张三			赵老师</span><br><span class="line">学生编号和教师编号，两个字段联合做主键——复合主键</span><br><span class="line"></span><br><span class="line">以上的表是否满足第二范式？</span><br><span class="line">不满足，“张三”依赖<span class="number">1001</span>，“王老师”依赖<span class="number">001</span>，显然产生了部分依赖。</span><br><span class="line"></span><br><span class="line">产生部分依赖有什么缺点？</span><br><span class="line">数据冗余了，空间浪费了。“张三”重复了，“王老师”重复了。</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">使用三张表来表示`多对多`的关系</span><br><span class="line">学生表</span><br><span class="line">学生编号(pk)		     学生名字</span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="number">1001</span>					张三</span><br><span class="line"><span class="number">1002</span>					李四</span><br><span class="line"><span class="number">1003</span>					王五</span><br><span class="line"></span><br><span class="line">教师表</span><br><span class="line">教师编号(pk)		 教师姓名</span><br><span class="line"><span class="comment">--------------------------------------</span></span><br><span class="line"><span class="number">001</span>					王老师</span><br><span class="line"><span class="number">002</span>					赵老师</span><br><span class="line"></span><br><span class="line">学生教师关系表</span><br><span class="line">id(pk)			        学生编号(fk)			      教师编号(fk)</span><br><span class="line"><span class="comment">-------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>						<span class="number">1001</span>						<span class="number">001</span></span><br><span class="line"><span class="number">2</span>						<span class="number">1002</span>						<span class="number">002</span></span><br><span class="line"><span class="number">3</span>						<span class="number">1003</span>						<span class="number">001</span></span><br><span class="line"><span class="number">4</span>						<span class="number">1001</span>						<span class="number">002</span></span><br></pre></td></tr></table></figure>
<p>多对多，要使用三张表，关系表中要有两个外键。</p>
<h3 id="13-3第三范式">13.3第三范式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">学生编号（PK） 	    学生姓名   班级编号  	 班级名称</span><br><span class="line"><span class="comment">---------------------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>				张三		<span class="number">01</span>			一年一班</span><br><span class="line"><span class="number">1002</span>				李四		<span class="number">02</span>			一年二班</span><br><span class="line"><span class="number">1003</span>				王五		<span class="number">03</span>			一年三班</span><br><span class="line"><span class="number">1004</span>				赵六		<span class="number">03</span>			一年三班</span><br><span class="line"></span><br><span class="line">以上表的设计是描述班级和学生的关系，很显然是`<span class="number">1</span>对多`关系。</span><br><span class="line">一个班级有多个学生。</span><br><span class="line"></span><br><span class="line">以上表是否满足第一范式？</span><br><span class="line">满足第一范式，有主键。</span><br><span class="line"></span><br><span class="line">以上表是否满足第二范式？</span><br><span class="line">满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。</span><br><span class="line"></span><br><span class="line">分析以上表是否满足第三范式？</span><br><span class="line">第三范式要求：不要产生传递依赖</span><br><span class="line">一年一班依赖<span class="number">01</span>，<span class="number">01</span>依赖<span class="number">1001</span>，产生了传递依赖</span><br><span class="line">不符合第三范式的要求，产生了数据的冗余</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">班级表：一</span><br><span class="line">班级编号(pk)				      班级名称</span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line"><span class="number">01</span>								一年一班</span><br><span class="line"><span class="number">02</span>								一年二班</span><br><span class="line"><span class="number">03</span>								一年三班</span><br><span class="line"></span><br><span class="line">学生表：多</span><br><span class="line">学生编号（PK）        学生姓名       班级编号(fk)</span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>				张三			<span class="number">01</span>			</span><br><span class="line"><span class="number">1002</span>				李四			<span class="number">02</span>			</span><br><span class="line"><span class="number">1003</span>				王五			<span class="number">03</span>			</span><br><span class="line"><span class="number">1004</span>				赵六			<span class="number">03</span>		</span><br></pre></td></tr></table></figure>
<p>一对多，使用两张表，对应多的表加外键。</p>
<p>如果有一张字段很多，数据庞大的表，建议把一张表拆成两张，其中一张表的字段添加上外键和唯一性约束。（fk+unique）</p>
<p><strong>关于三范式的实际使用</strong></p>
<p>数据库三范式是理论上的，实践和理论有时候会存在偏差。</p>
<p>最终目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</p>
<p>因为在sql当中，<strong>表和表之间连接次数越多，效率越低。（笛卡尔积）</strong></p>
<p><strong>有时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，并且对于开发人员来说，sql语句的编写难度也会降低。</strong></p>
<hr>
<h2 id="14-DBA常用命令">14.DBA常用命令</h2>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-03-26_10-54-44.png" alt=""></p>
<h2 id="15-自主存取控制">15.自主存取控制</h2>
<h3 id="15-1授予权限grant">15.1授予权限grant</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把查询Student表的权限授给用户U1</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> U1</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">grant</span> option; <span class="comment">-- 允许该用户把这种权限再授予给其他用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把Student表的全部操作权限授予给用户U2和用户U3</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> U2,U3;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把查询Student表的权限授给所有用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> public;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把查询Student表和修改学号的权限授给用户U4</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span>(Sno)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> U1;</span><br></pre></td></tr></table></figure>
<h3 id="15-2收回权限revoke">15.2收回权限revoke</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把用户U4修改学号的权限收回</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">update</span>(sno)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">from</span> U4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回所有用户对Student表的查询权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">from</span> public;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以在用户名后加cascade，表示级联收回该用户及其赋予用户的权限</span></span><br></pre></td></tr></table></figure>
<h3 id="15-3创建数据库的权限">15.3创建数据库的权限</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 首先以超级用户system登录,再创建超级用户system2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> system2 </span><br><span class="line"><span class="keyword">with</span> superuser password <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建具有createdb权限的用户U1和普通用户U2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> U1 </span><br><span class="line"><span class="keyword">with</span> createdb password <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> U2 </span><br><span class="line">password <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以U1用户登录，创建数据库U1DB</span></span><br><span class="line"><span class="keyword">create</span> database U1DB;</span><br></pre></td></tr></table></figure>
<h3 id="15-4数据库角色">15.4数据库角色</h3>
<p><strong>角色是权限的集合</strong>，可以为一组具有相同权限的用户创建一个角色。</p>
<p>使用角色来管理数据库权限<strong>可以简化授权的过程</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个角色</span></span><br><span class="line"><span class="keyword">create</span> role R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使角色R1拥有Student表的select、update、insert权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span>,<span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将角色R1授予王平、张明、赵玲，使他们具有角色R1所包含的全部权限</span></span><br><span class="line"><span class="keyword">grant</span> R1</span><br><span class="line"><span class="keyword">to</span> 王平、张明、赵玲;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次性收回王平的这三个权限</span></span><br><span class="line"><span class="keyword">revoke</span> R1</span><br><span class="line"><span class="keyword">from</span> 王平;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给角色R1增加delete权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">to</span> R1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 收回角色R1的select权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">table</span> Student</span><br><span class="line"><span class="keyword">from</span> R1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下开学前的总结与展望</title>
    <url>/2024/02/23/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%BC%80%E5%AD%A6%E5%89%8D%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%8E%E5%B1%95%E6%9C%9B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="7c3615c403e6c6488b8170359192d00d719511ce53e4c587aa1dceb9522e8964"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>科三挂了的感想</title>
    <url>/2024/02/01/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E7%A7%91%E4%B8%89%E6%8C%82%E4%BA%86%E7%9A%84%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1f9c8f67ecc2f6120e1a73a5567dd59fcd1d336dc31895326e00ec961a9ddf5e">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b6069bb26e481fb6f1373cf33ead42051611ac9cf81b1321669bf70ac000d2ba71bd71cee6ded55bb03782ec43750df41c6ddacfb93ce9dedf5a1ecd50ced939c39934f407261b10a1436251992844d83cbbac4e2ab5169fc30d41e24ba5c6897ba9908f589ae9c2e2c569ba17e28da1d8c1f3a4d34a6187a3396dd7b219c455f1887fcd1f0a1e7e47ad8931ed11c07653ae21cf8bfcecf9ed12279e18d182487f822d7298c9f78b27469c80d1af1a505057c66a836cff4378ecd779b46a79f4f3e9c35cbe953d1462b690ee9e9273b6dee14ac6903747e5ef253109a06bfe683cafca92d7b7d11186959265c7e86cae4dcac3e5cab5de30c3e8498d6ec200e97730327348b8fdedfaba4e09427662fb8ef6c0cb4b9a49f84b6dcd70ad81a982a7cd0c8c42dc15d649f6f228e69edf5b4a6759bd1ffd2aade8407001ea859a8948563a24d4254c4a3cc2aaa62e5ecb8cc4ac3c628cfa45110a6321452e2470d85676689e907546b61d50cab54662eb0642f500f89d0de9662bc597c141d07c61a9f763ce07f873a9a1065ba48d5bb43e58fcd0d84cad4ca9e2911421e781a6bee806d8a547ac64fb50f002cdeec9be37340e9d2bb1ddf29c5e6b1d57cf14f6a304fb2738888c62f33f44a0f8a5738d81908e4cd2f5b7bb9c565160229aecd1ccd48de9a668b1e23e1e64a315e1d239a67741313f698fded3b995226b95152f1e544d510c7e9bff7e3aaf49d16fbd48e2512203dfea6572a6dfc8a2806b2967fed4c9d76cb8456f0e354edf01dcce4f0eba308770c80d1260cd969447ed8c5dc696403ec51054d812ccc47818709736d46d1a44138b29164bc27553b261d7195abb4af0b7563202044fa66c1b17b58f1bcab07335ba88b970cbd9d5c3419f4e951ed2ef09f2d9d9a98400a3b342f27402b982d2039de3613459cf71ac8df298026a49810fb9f85e445790719ee9ad30fb5394c0e7cb027074e02c003cf4c42f8ef11d9b17dd6d6c8af123d031643d9804354ddc71fa30c953c593959d77663f9f19ba406c0ccfaa4435a7c90c9a61e9a710c06327f85551427c36233dfafd85f442d77417c3a35e81bb9f9ca25c4c0f77f3e63c726db4aafcf38afdc86e14f13fe86184aa9b099f2b8da783688d1f85bd90bcf270bd1cecc469bb5723a37f04118e5e90c60dcfe16067f455bc982f9b0cb436808cf2781071ae9a744a9a7b9c6f58b8ae4b070e77ea1e57d286e9563858c053032abb03e78d35f50f242a08834cacd7312cee9ea8a7d3e7df00aa61bf9adedfb13407d385fd5461b4d2029358d5d9d658391b3efa0e09d8bf3b86531926b5d9e2fb1ca001c04c4c68d3ce5f0ceade462b9463ca2e75062958fcc28dd4af451d62aa49edbb5e665de436173e0f70ff113eeac8f05438c21f4b2c93f2a90e8790a7025b4ab84691945b682338bddff93611a8b4881489cc88318f92a3fc48b881cf9c80d4d6959fc0f99cb466850c408d5f4550c8c311cff33798a1843f43f09d45647da2ba45e89a89024bf82477afb6015288b42fc3974fc8892e6212967e4acff6e1989486019819eff5635d89cd59729a3008f71ecbf4bfd29ff1e7062be6758d97710586355a94da701208df2551dd651e1c1efd0e07c8bb56db572eb7802c6d0bd1c939a06bbaa8c25481c79bdf3be0fe75327069b1efbb4eeafc5b9463dcd5afede17dca78acb569f147eac94f922112424628344142517922aea6bf07a4c94406a5c5e223fac7d434bbb1674e12c710493a3ea9c0f436a9e4db9979ca8da377a0d7fbe6888d22d83ec294790e372b87c01a2947a30daabf2df882fdd15b34e4a259cba76632232552c19fc6c1a737d46be535a9b1cf58acb92984e36ffe35f0f002053ea221235371920d5a6b9d488f24b1ec01799657e28ab250022eb564889c9d4f531a9b1a9634e81bb51d96c9c8a0749f88060c802031dcda36634385cfc65b06c200a433a51558389824dd4b9b133deeeefad4690382a63c470e8c85093116550feeb357f8d16440aef920e1b5892f3442f049d2f8a8cdea441c6de6204d9433f0182a0bf91a7c88ea234c5fd605f62e87b69ee395cbeb71fb350bad587262cfb361758f92d42cfc1f9ded9d08f57cbd1367caa1030bddad7b968fb919f9cb79e06aaaacd69805bb2ba7b848160b70ab485b6f8c41f73651e710608d3780bc7ad28e1814b0a712896fd326a1331f94ffbe536b1fed88df6141b15be98c528699b7997d5ba6307f1c9c1e04ed2733f9c7ccd5544d5a7cb1f4fca091108e3b4c545af08ec084578f39300773bbeaecddc884b5dd1fd6fc68f15715a08ab8edc6005495568e7206681c2b151c1e45e05d756625365a23bd28e2d927460d5776b11d29e146893f2b4c63cca6acb5959cf546d14b437ab9ff40eda49dfa8f64e7c6ce4fa789e4302f6c45829ee73b84bcf9b4e23059fe9808426698052eb78f8750c3451965eb9931170d148aa77c29a16d775a6be020bac6016f9b661ab48cc1c9afeba170d7c03f4be7c3599a6acef6a13485efa6c1a6a2b115f55c013f3a457df11727940e4daaf055834e003835a3f7f13216be56cba1de33ab7c13baec08949185d74d5fa0ab5bb3c1881898d6a79822f252c6de44ac9c498797f12b1f270b3058cfced651f51f815e8999d8dfc30e41a23da6b2bd6305506c09577568b7b2fbcec2c732a892fa65fc97a9374693bfb12029b53be00abd0693bc9d7107785cb1260f45dc911454e330b4e090415a7d9d1c9254e6c52dfae8901728aba301857af14959b3f8d4979541971ba946fd8a35d73ea6bae9a9043bb38d1fb5897e77db0315765ac2216a8287496</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/2024/01/28/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>村雨的HTML学习笔记</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720221103083336.jpg" alt=""></p>
<span id="more"></span>
<hr>
<h1>HTML介绍</h1>
<p>HTML 是用来<strong>描述网页</strong>的一种语言。</p>
<ul>
<li>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li>
<li>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</li>
<li>标记语言是一套<strong>标记标签</strong> (markup tag)</li>
<li>HTML 使用标记标签来<strong>描述</strong>网页</li>
<li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li>
<li>HTML文档也叫做 <strong>web 页面</strong></li>
</ul>
<h2 id="一个简单的例子">一个简单的例子</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>//声明定义该文档是 HTML5 文档</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>//HTML页面的根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>//包含有关 HTML页面的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>//指定 HTML 页面的标题（显示在浏览器的标题栏或页面的选项卡中）</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>//HTML文档的主体，并且是所有可见内容的容器，例如标题、段落、图像、超链接、表格、列表等。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My First Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//定义了一个大标题</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//定义了一个段落</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-03_10-46-36.png"  />
<p>HTML 元素由<strong>开始标记、一些内容</strong>和<strong>结束标记</strong>定义：</p>
<p>格式：&lt;标记名&gt; 内容放在这里… &lt; /标记名&gt;</p>
<p>例如：标题：<h1>My First Heading</h1></p>
<p>​           段落：<p>My first paragraph.</p></p>
<p>其中br元素称为<strong>空元素</strong>，没有内容，没有结束标记。//换行符</p>
<hr>
<p>Web 浏览器（Chrome、Edge、Firefox、Safari）的用途是读取 HTML 文档并正确显示它们。</p>
<p>HTML页面结构的可视化：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-03_10-45-30.png" alt=""></p>
<h2 id="使用记事本学习HTML">使用记事本学习HTML</h2>
<p>将下面代码保存在记事本中，用.htm 或 .html 作为文件扩展名，将编码设置为 <strong>UTF-8</strong>（这是 HTML 文件的首选编码）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My First Heading&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;My first paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在浏览器中查看HTML文档：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-03_10-53-18.png"  />
<hr>
<h1>HTML基础</h1>
<p>所有 HTML 文档都必须以文档类型声明<strong>开头</strong>：<code>&lt;!DOCTYPE html&gt;</code>。</p>
<p>HTML 文档本身以 开头<code>&lt;html&gt;</code>并以 结尾<code>&lt;/html&gt;</code>。</p>
<p>HTML 文档的可见部分位于<code>&lt;body&gt;</code>和之间<code>&lt;/body&gt;</code>。</p>
<hr>
<h2 id="HTML元素">HTML元素</h2>
<p><strong>HTML 标题</strong>用<code>&lt;h1&gt;</code>to<code>&lt;h6&gt;</code>标签定义。</p>
<p><code>&lt;h1&gt;</code>定义最重要的标题。<code>&lt;h6&gt;</code>定义最不重要的标题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;This is heading <span class="number">1</span>&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;This is heading <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;This is heading <span class="number">3</span>&lt;/h3&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>HTML 段落</strong>用<code>&lt;p&gt;</code>标签定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is another paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>HTML 链接</strong>是<code>&lt;a&gt;</code>标签定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.w3schools.com&quot;</span>&gt;This is a link&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>HTML 图像</strong>用<code>&lt;img&gt;</code>标签定义：</p>
<p>源文件 ( <code>src</code>)、替代文本 ( <code>alt</code>)、 <code>width</code>和<code>height</code>作为属性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;w3schools.jpg&quot;</span> alt=<span class="string">&quot;W3Schools.com&quot;</span> width=<span class="string">&quot;104&quot;</span> height=<span class="string">&quot;142&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>HTML 标签不区分大小写：<code>&lt;P&gt;</code>与 含义相同<code>&lt;p&gt;</code>。//但建议使用小写</p>
<hr>
<h2 id="HTML属性">HTML属性</h2>
<p>HTML 属性提供有关 HTML 元素的附加信息。</p>
<p><strong>href 属性</strong></p>
<p><code>&lt;a&gt;</code>标签定义了一个超链接。<code>href</code>属性指定链接转到的页面的 URL：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.w3schools.com&quot;</span>&gt;Visit W3Schools&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><strong>src属性</strong></p>
<p><code>&lt;img&gt;</code>标签用于在 HTML 页面中嵌入图像。<code>src</code>属性指定要显示的图像的路径：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>宽度和高度属性</strong></p>
<p><img>标签还应包含 width和 height属性，它们指定图像的宽度和高度（以像素为单位）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span> width=<span class="string">&quot;500&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>alt 属性</strong></p>
<p>如果由于某种原因无法显示图像，则alt<code>属性</code><img>` 可以指定图像的替代文本。</p>
<p>这可能是由于连接速度慢、src属性错误或者用户使用屏幕阅读器造成的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span> alt=<span class="string">&quot;Girl with a jacket&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_11-10-46.png" alt=""></p>
<p><strong>样式属性</strong></p>
<p><code>style</code>属性用于向元素添加样式，例如颜色、字体、大小等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;color:red;&quot;</span>&gt;This is a red paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p style="color:red;">This is a red paragraph.</p>
<p><strong>语言属性</strong></p>
<p>应该始终在标记<code>lang</code>内包含属性<code>&lt;html&gt;</code>，以声明网页的语言。</p>
<p>指定英语作为语言：(zh是中文)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>标题属性</strong></p>
<p><code>title</code>属性定义了有关元素的一些额外信息。</p>
<p>将鼠标悬停在元素上时，标题属性的值将显示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p title=<span class="string">&quot;I&#x27;m a tooltip&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_11-20-55.png" alt=""></p>
<hr>
<p>建议使用小写字母，为属性值加上引号。一般使用双引号。</p>
<p>若属性值本身包含双引号，则使用单引号；若属性值本身包含单引号，则使用双引号。</p>
<h2 id="HTML段落">HTML段落</h2>
<p>对于 HTML，无法通过在 HTML 代码中添加额外的空格或额外的行来更改显示。</p>
<p>当页面显示时，浏览器会自动删除任何<strong>多余的空格和行</strong>。</p>
<p><strong>HTML分割线</strong></p>
<p><code>&lt;hr&gt;</code>标签定义 HTML 页面中的内容中断，并且通常显示为水平直线。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;This is heading <span class="number">1</span>&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is some text.&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h2&gt;This is heading <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;This is some other text.&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-40-55.png" alt=""></p>
<p><code>&lt;hr&gt;</code>标签是一个空标签，这意味着它没有结束标签。</p>
<p><strong>HTML换行符</strong></p>
<p><code>&lt;br&gt;</code>元素定义换行符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is&lt;br&gt;a paragraph&lt;br&gt;with line breaks.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is<br>a paragraph<br>with line breaks.</p>
<p><code>&lt;br&gt;</code>标签是一个空标签，这意味着它没有结束标签。</p>
<p><strong><code>&lt;pre&gt;</code>元素</strong></p>
<p>使用<code>&lt;pre&gt;</code>元素定义预格式化文本。</p>
<p><code>&lt;pre&gt;</code>元素内的文本以固定大小和字体（通常是 Courier）显示，并且保留空格和换行符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">  My Bonnie lies over the ocean.</span><br><span class="line"></span><br><span class="line">  My Bonnie lies over the sea.</span><br><span class="line"></span><br><span class="line">  My Bonnie lies over the ocean.</span><br><span class="line"></span><br><span class="line">  Oh, bring back my Bonnie to me.</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-49-35.png" alt=""></p>
<h2 id="HTML样式">HTML样式</h2>
<p>HTML<code>style</code>属性用于向元素添加样式，例如颜色、字体、大小等。</p>
<p><strong>背景颜色</strong></p>
<p>CSS<code>background-color</code>属性定义 HTML 元素的背景颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;body style=<span class="string">&quot;background-color:powderblue;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-57-16.png" alt=""></p>
<p>为两个不同的元素设置背景颜色：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:powderblue;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;background-color:tomato;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-58-41.png" alt=""></p>
<p><strong>文字颜色</strong></p>
<p>CSS<code>color</code>属性定义 HTML 元素的文本颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:blue;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;color:red;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_17-59-43.png" alt=""></p>
<p><strong>字体</strong></p>
<p>CSS<code>font-family</code>属性定义 HTML 元素使用的字体。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;font-family:verdana;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;font-family:courier;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_18-01-30.png" alt=""></p>
<p><strong>字体大小</strong></p>
<p>CSS<code>font-size</code>属性定义 HTML 元素的文本大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;font-size:300%;&quot;</span>&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;font-size:160%;&quot;</span>&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_18-02-45.png" alt=""></p>
<p><strong>文本对齐</strong></p>
<p>CSS<code>text-align</code>属性定义 HTML 元素的文本水平对齐方式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;text-align:center;&quot;</span>&gt;Centered Heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;text-align:center;&quot;</span>&gt;Centered paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-04_18-04-00.png" alt=""></p>
<h2 id="HTML文本格式">HTML文本格式</h2>
<p>HTML格式化元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;- 加粗字体</span><br><span class="line">&lt;strong&gt;- 重要文字</span><br><span class="line">&lt;i&gt;- 斜体文本</span><br><span class="line">&lt;em&gt;- 强调文字</span><br><span class="line">&lt;mark&gt;- 标记文本</span><br><span class="line">&lt;small&gt;- 较小的文字</span><br><span class="line">&lt;del&gt;- 删除文本</span><br><span class="line">&lt;ins&gt;- 插入的文本</span><br><span class="line">&lt;sub&gt;- 下标文字</span><br><span class="line">&lt;sup&gt;- 上标文字</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><code>&lt;b&gt;</code>元素定义粗体文本，没有任何额外的重要性。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br></pre></td></tr></table></figure>
<p><b>This text is bold</b></p>
<hr>
<p><strong><code>&lt;strong&gt;</code>元素定义非常重要的文本，内容以粗体显示。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;This text is important!&lt;/strong&gt;</span><br></pre></td></tr></table></figure>
<p><strong>This text is important!</strong></p>
<hr>
<p><strong><code>&lt;i&gt;</code>元素定义斜体文本，没有任何额外的重要性。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;i&gt;This text is italic&lt;/i&gt;</span><br></pre></td></tr></table></figure>
<p><i>This text is italic</i></p>
<hr>
<p><strong><code>&lt;em&gt;</code>元素强调文本的语义，内容通常以斜体显示。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;em&gt;This text is emphasized&lt;/em&gt;</span><br></pre></td></tr></table></figure>
<p><em>This text is emphasized</em></p>
<hr>
<p><strong><code>&lt;small&gt;</code>元素定义较小的文本。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;small&gt;This is some smaller text.&lt;/small&gt;</span><br></pre></td></tr></table></figure>
<p><small>This is some smaller text.</small></p>
<hr>
<p><strong><code>&lt;mark&gt;</code>元素定义应标记或突出显示的文本。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Do <span class="keyword">not</span> forget to buy &lt;mark&gt;milk&lt;/mark&gt; today.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>Do not forget to buy <mark>milk</mark> today.</p>
<hr>
<p><strong><code>&lt;del&gt;</code>元素定义已从文档中删除的文本，会在删除的文本中划一条线。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; red.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>My favorite color is <del>blue</del> red.</p>
<hr>
<p><strong><code>&lt;ins&gt;</code>元素定义已插入到文档中的文本，会给插入的文本添加下划线。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; &lt;ins&gt;red&lt;/ins&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>My favorite color is <del>blue</del> <ins>red</ins>.</p>
<hr>
<p><strong><code>&lt;sub&gt;</code>元素定义下标文本。下标文本出现在法线下方半个字符处，有时会以较小的字体呈现。下标文本可用于化学式，例如 H<sub>2</sub>O。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;sub&gt;subscripted&lt;/sub&gt; text.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is <sub>subscripted</sub> text.</p>
<hr>
<p><strong><code>sup&gt;</code>元素定义上标文本。上标文本显示在正常线上方半个字符，并且有时以较小的字体呈现。上标文本可用于脚注，例如 XXX<sup> [1]</sup></strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;sup&gt;superscripted&lt;/sup&gt; text.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is <sup>superscripted</sup> text.</p>
<hr>
<h2 id="HTML引用">HTML引用</h2>
<p><strong><code>&lt;blockquote&gt;</code>元素定义从另一个源引用的内容，浏览器会将内容缩进。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Here is a quote from WWF<span class="number">&#x27;</span>s website:&lt;/p&gt;</span><br><span class="line">&lt;blockquote cite=<span class="string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span><br><span class="line">For <span class="number">60</span> years, WWF has worked to help people <span class="keyword">and</span> nature thrive. As the world<span class="number">&#x27;</span>s leading conservation organization, WWF works in nearly <span class="number">100</span> countries. At every level, we collaborate with people around the world to develop <span class="keyword">and</span> deliver innovative solutions that protect communities, wildlife, <span class="keyword">and</span> the places in which they live.</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>
<p>Here is a quote from WWF's website:</p><blockquote cite="http://www.worldwildlife.org/who/index.html">For 60 years, WWF has worked to help people and nature thrive. As the world's leading conservation organization, WWF works in nearly 100 countries. At every level, we collaborate with people around the world to develop and deliver innovative solutions that protect communities, wildlife, and the places in which they live.</blockquote>
<hr>
<p><strong><code>&lt;q&gt;</code>标签定义一个简短的引用，浏览器通常在引文两边插入引号。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;WWF<span class="number">&#x27;</span>s goal is to: &lt;q&gt;Build a future where people live in harmony with nature.&lt;/q&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>WWF's goal is to: <q>Build a future where people live in harmony with nature.</q></p>
<hr>
<p><strong><code>&lt;abbr&gt;</code>标签定义缩写或首字母缩略词，例如“HTML”、“CSS”、“Mr.”、“Dr.”、“ASAP”、“ATM”。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;The &lt;abbr title=<span class="string">&quot;World Health Organization&quot;</span>&gt;WHO&lt;/abbr&gt; was founded in <span class="number">1948.</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>The <abbr title="World Health Organization">WHO</abbr> was founded in 1948.</p>
<p>注：将鼠标悬停在元素上时,可显示缩写词/首字母缩略词的描述。</p>
<hr>
<p><strong><code>&lt;address&gt;</code>标签定义文档或文章的作者/所有者的联系信息。</strong></p>
<p>联系信息可以是电子邮件地址、URL、实际地址、电话号码、社交媒体账号等。</p>
<p>元素中的文本<code>&lt;address&gt;</code>通常以斜体呈现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;</span><br><span class="line">Written by John Doe.&lt;br&gt;</span><br><span class="line">Visit us at:&lt;br&gt;</span><br><span class="line">Example.com&lt;br&gt;</span><br><span class="line">Box <span class="number">564</span>, Disneyland&lt;br&gt;</span><br><span class="line">USA</span><br><span class="line">&lt;/address&gt;</span><br></pre></td></tr></table></figure>
<address>
Written by John Doe.<br>
Visit us at:<br>
Example.com<br>
Box 564, Disneyland<br>
USA
</address>
<hr>
<p><strong><code>&lt;cite&gt;</code>标签定义创意作品的标题</strong>（例如，一本书、一首诗、一首歌、一部电影、一幅画、一件雕塑等）。</p>
<p>注：人名并非作品名称,元素中的文本通常以斜体呈现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;cite&gt;The Scream&lt;/cite&gt; by Edvard Munch. Painted in <span class="number">1893.</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>
<hr>
<p><strong><code>&lt;bdo&gt;</code>标签用于覆盖当前文本方向。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;bdo dir=<span class="string">&quot;rtl&quot;</span>&gt;This text will be written from right to left&lt;/bdo&gt;</span><br></pre></td></tr></table></figure>
<p><bdo dir="rtl">This text will be written from right to left</bdo></p>
<p>从左到右变成从右到左。</p>
<hr>
<h2 id="HTML注释">HTML注释</h2>
<p>注释不会显示在浏览器中，但它们可以帮助记录 HTML 源代码。</p>
<p>使用以下语法向 HTML 源添加注释:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!-- Write your comments here --&gt;</span><br></pre></td></tr></table></figure>
<!-- Write your comments here -->
<p>注：开始标记中有感叹号<code>!</code>，但结束标记中没有。</p>
<hr>
<p><strong>隐藏内容</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;p&gt;This is another paragraph &lt;/p&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;This is a paragraph too.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is a paragraph.</p><!-- <p>This is another paragraph </p> --><p>This is a paragraph too.</p>
<p><strong>隐藏多行</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;p&gt;Look at <span class="keyword">this</span> cool image:&lt;/p&gt;</span><br><span class="line">&lt;img border=<span class="string">&quot;0&quot;</span> src=<span class="string">&quot;pic_trulli.jpg&quot;</span> alt=<span class="string">&quot;Trulli&quot;</span>&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph too.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>This is a paragraph.</p>
<!--
<p>Look at this cool image:</p><img border="0" src="pic_trulli.jpg" alt="Trulli">
-->
<p>This is a paragraph too.</p>
<hr>
<h2 id="HTML颜色">HTML颜色</h2>
<p>在 HTML 中，可以使用颜色名称来指定颜色。</p>
<p><strong>设置文本背景颜色</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt;Tomato&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Orange;&quot;</span>&gt;Orange&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:DodgerBlue;&quot;</span>&gt;DodgerBlue&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:MediumSeaGreen;&quot;</span>&gt;MediumSeaGreen&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Gray;&quot;</span>&gt;Gray&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:SlateBlue;&quot;</span>&gt;SlateBlue&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:Violet;&quot;</span>&gt;Violet&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:LightGray;&quot;</span>&gt;LightGray&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:Tomato;">Tomato</h1>
<h1 style="background-color:Orange;">Orange</h1>
<h1 style="background-color:DodgerBlue;">DodgerBlue</h1>
<h1 style="background-color:MediumSeaGreen;">MediumSeaGreen</h1>
<h1 style="background-color:Gray;">Gray</h1>
<h1 style="background-color:SlateBlue;">SlateBlue</h1>
<h1 style="background-color:Violet;">Violet</h1>
<h1 style="background-color:LightGray;">LightGray</h1>
<p>HTML 支持<a href="https://www.w3schools.com/colors/colors_names.asp">140 个颜色名称</a>。</p>
<hr>
<p><strong>设置文本颜色</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:Tomato;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;color:DodgerBlue;&quot;</span>&gt;Hello World&lt;/p&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;color:MediumSeaGreen;&quot;</span>&gt;Hello World&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h1 style="color:Tomato;">Hello World</h1>
<p style="color:DodgerBlue;">Hello World</p>
<p style="color:MediumSeaGreen;">Hello World</p>
<hr>
<p><strong>设置边框颜色</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;border:2px solid Tomato;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;border:2px solid DodgerBlue;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;border:2px solid Violet;&quot;</span>&gt;Hello World&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="border:2px solid Tomato;">Hello World</h1>
<h1 style="border:2px solid DodgerBlue;">Hello World</h1>
<h1 style="border:2px solid Violet;">Hello World</h1>
<hr>
<p><strong>RGB</strong></p>
<p>RGB 颜色值代表红色red、绿色green和蓝色blue。</p>
<p>每个参数（红色、绿色和蓝色）定义颜色的强度，其<strong>值介于 0 到 255 之间</strong>。</p>
<p>这意味着有 256 x 256 x 256 = 16777216 种可能的颜色！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(255, 0, 0);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(0, 0, 255);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(60, 179, 113);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">60</span>, <span class="number">179</span>, <span class="number">113</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(238, 130, 238);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">130</span>, <span class="number">238</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(255, 165, 0);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(106, 90, 205);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">106</span>, <span class="number">90</span>, <span class="number">205</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:rgb(255, 0, 0);">rgb(255, 0, 0)</h1>
<h1 style="background-color:rgb(0, 0, 255);">rgb(0, 0, 255)</h1>
<h1 style="background-color:rgb(60, 179, 113);">rgb(60, 179, 113)</h1>
<h1 style="background-color:rgb(238, 130, 238);">rgb(238, 130, 238)</h1>
<h1 style="background-color:rgb(255, 165, 0);">rgb(255, 165, 0)</h1>
<h1 style="background-color:rgb(106, 90, 205);">rgb(106, 90, 205)</h1>
<p><strong>灰色阴影</strong></p>
<p>通常使用所有三个参数的相同值来定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(60, 60, 60);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(100, 100, 100);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(140, 140, 140);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">140</span>, <span class="number">140</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(180, 180, 180);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(200, 200, 200);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgb(240, 240, 240);&quot;</span>&gt;<span class="built_in">rgb</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:rgb(60, 60, 60);">rgb(60, 60, 60)</h1>
<h1 style="background-color:rgb(100, 100, 100);">rgb(100, 100, 100)</h1>
<h1 style="background-color:rgb(140, 140, 140);">rgb(140, 140, 140)</h1>
<h1 style="background-color:rgb(180, 180, 180);">rgb(180, 180, 180)</h1>
<h1 style="background-color:rgb(200, 200, 200);">rgb(200, 200, 200)</h1>
<h1 style="background-color:rgb(240, 240, 240);">rgb(240, 240, 240)</h1>
<p><strong>RGBA</strong></p>
<p>RGBA 颜色值是带有 Alpha 通道（不透明度）的 RGB 的扩展。</p>
<p>alpha 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.2);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.2</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.4);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.4</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.6);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.6</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.8);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.8</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:rgba(255, 99, 71, 1);&quot;</span>&gt;<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">1</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:rgba(255, 99, 71, 0);">rgba(255, 99, 71, 0)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.2);">rgba(255, 99, 71, 0.2)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.4);">rgba(255, 99, 71, 0.4)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.6);">rgba(255, 99, 71, 0.6)</h1>
<h1 style="background-color:rgba(255, 99, 71, 0.8);">rgba(255, 99, 71, 0.8)</h1>
<h1 style="background-color:rgba(255, 99, 71, 1);">rgba(255, 99, 71, 1)</h1>
<hr>
<p><strong>十六进制颜色</strong></p>
<p>通过以下方式指定：</p>
<p><code>#rrggbb</code></p>
<p>其中 rr（红色）、gg（绿色）和 bb（蓝色）是 <strong>00 到 ff 之间</strong>的十六进制值（与十进制 0-255 相同）</p>
<p>例如，#ff0000 显示为红色，因为红色设置为其最高值 (ff)，而其他两个（绿色和蓝色）设置为 00。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#ff0000;&quot;</span>&gt;#ff0000&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#0000ff;&quot;</span>&gt;#<span class="number">0000f</span>f&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#3cb371;&quot;</span>&gt;#<span class="number">3</span>cb371&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#ee82ee;&quot;</span>&gt;#ee82ee&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#ffa500;&quot;</span>&gt;#ffa500&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#6a5acd;&quot;</span>&gt;#<span class="number">6</span>a5acd&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:#ff0000;">#ff0000</h1>
<h1 style="background-color:#0000ff;">#0000ff</h1>
<h1 style="background-color:#3cb371;">#3cb371</h1>
<h1 style="background-color:#ee82ee;">#ee82ee</h1>
<h1 style="background-color:#ffa500;">#ffa500</h1>
<h1 style="background-color:#6a5acd;">#6a5acd</h1>
<p><strong>灰色阴影</strong></p>
<p>通常使用所有三个参数的相同值来定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#404040;&quot;</span>&gt;#<span class="number">404040</span>&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#686868;&quot;</span>&gt;#<span class="number">686868</span>&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#a0a0a0;&quot;</span>&gt;#a0a0a0&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#bebebe;&quot;</span>&gt;<span class="meta">#bebebe<span class="string">&lt;/h1&gt;</span></span></span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#dcdcdc;&quot;</span>&gt;<span class="meta">#dcdcdc<span class="string">&lt;/h1&gt;</span></span></span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:#f8f8f8;&quot;</span>&gt;#f8f8f8&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:#404040;">#404040</h1>
<h1 style="background-color:#686868;">#686868</h1>
<h1 style="background-color:#a0a0a0;">#a0a0a0</h1>
<h1 style="background-color:#bebebe;">#bebebe</h1>
<h1 style="background-color:#dcdcdc;">#dcdcdc</h1>
<h1 style="background-color:#f8f8f8;">#f8f8f8</h1>
<hr>
<p><strong>HSL</strong></p>
<p>hsl(<em>色调</em>,<em>饱和度</em>,<em>亮度</em>)</p>
<p>色调是色轮上从 0 到 360 的一个度数。0 是红色，120 是绿色，240 是蓝色。</p>
<p>饱和度是一个百分比值。 0% 表示灰度，100% 表示全色。</p>
<p>亮度也是一个百分比值。 0% 为黑色，100% 为白色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(240, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">240</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(147, 50%, 47%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">147</span>, <span class="number">50</span>%, <span class="number">47</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(300, 76%, 72%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">300</span>, <span class="number">76</span>%, <span class="number">72</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(39, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">39</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(248, 53%, 58%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">248</span>, <span class="number">53</span>%, <span class="number">58</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>
<h1 style="background-color:hsl(240, 100%, 50%);">hsl(240, 100%, 50%)</h1>
<h1 style="background-color:hsl(147, 50%, 47%);">hsl(147, 50%, 47%)</h1>
<h1 style="background-color:hsl(300, 76%, 72%);">hsl(300, 76%, 72%)</h1>
<h1 style="background-color:hsl(39, 100%, 50%);">hsl(39, 100%, 50%)</h1>
<h1 style="background-color:hsl(248, 53%, 58%);">hsl(248, 53%, 58%)</h1>
<p><strong>饱和度</strong></p>
<p>饱和度可以描述为颜色的强度。</p>
<p>100% 是纯色，没有灰色阴影。</p>
<p>50%是50%灰色，但你仍然可以看到颜色。</p>
<p>0%是完全灰色的；你再也看不到颜色了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 80%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">80</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 60%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">60</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 40%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">40</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 20%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">20</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>
<h1 style="background-color:hsl(0, 80%, 50%);">hsl(0, 80%, 50%)</h1>
<h1 style="background-color:hsl(0, 60%, 50%);">hsl(0, 60%, 50%)</h1>
<h1 style="background-color:hsl(0, 40%, 50%);">hsl(0, 40%, 50%)</h1>
<h1 style="background-color:hsl(0, 20%, 50%);">hsl(0, 20%, 50%)</h1>
<h1 style="background-color:hsl(0, 0%, 50%);">hsl(0, 0%, 50%)</h1>
<p><strong>亮度</strong></p>
<p>亮度可以描述为您想要赋予该颜色多少光。</p>
<p>0%表示没有光（黑色）。</p>
<p>50%表示50%光（既不暗也不亮）。</p>
<p>100%表示完全亮度（白色）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 0%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">0</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 25%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">25</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 50%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">50</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 75%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">75</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 90%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">90</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 100%, 100%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100</span>%, <span class="number">100</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 100%, 0%);">hsl(0, 100%, 0%)</h1>
<h1 style="background-color:hsl(0, 100%, 25%);">hsl(0, 100%, 25%)</h1>
<h1 style="background-color:hsl(0, 100%, 50%);">hsl(0, 100%, 50%)</h1>
<h1 style="background-color:hsl(0, 100%, 75%);">hsl(0, 100%, 75%)</h1>
<h1 style="background-color:hsl(0, 100%, 90%);">hsl(0, 100%, 90%)</h1>
<h1 style="background-color:hsl(0, 100%, 100%);">hsl(0, 100%, 100%)</h1>
<p><strong>灰色阴影</strong></p>
<p>通常通过将色调和饱和度设置为 0 并将亮度从 0% 调整到 100% 以获得更暗/更亮的阴影来定义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 20%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">20</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 30%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">30</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 40%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">40</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 60%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">60</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 70%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">70</span>%)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsl(0, 0%, 90%);&quot;</span>&gt;<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0</span>%, <span class="number">90</span>%)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsl(0, 0%, 20%);">hsl(0, 0%, 20%)</h1>
<h1 style="background-color:hsl(0, 0%, 30%);">hsl(0, 0%, 30%)</h1>
<h1 style="background-color:hsl(0, 0%, 40%);">hsl(0, 0%, 40%)</h1>
<h1 style="background-color:hsl(0, 0%, 60%);">hsl(0, 0%, 60%)</h1>
<h1 style="background-color:hsl(0, 0%, 70%);">hsl(0, 0%, 70%)</h1>
<h1 style="background-color:hsl(0, 0%, 90%);">hsl(0, 0%, 90%)</h1>
<p><strong>HSLA</strong></p>
<p>HSLA 颜色值是 HSL 颜色值的扩展，带有 Alpha 通道 - 用于指定颜色的不透明度。</p>
<p>alpha 参数是 介于0.0（完全透明）和 1.0（完全不透明）之间的数值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.2);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.2</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.4);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.4</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.6);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.6</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.8);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">0.8</span>)&lt;/h1&gt;</span><br><span class="line">&lt;h1 style=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 1);&quot;</span>&gt;<span class="built_in">hsla</span>(<span class="number">9</span>, <span class="number">100</span>%, <span class="number">64</span>%, <span class="number">1</span>)&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h1 style="background-color:hsla(9, 100%, 64%, 0);">hsla(9, 100%, 64%, 0)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.2);">hsla(9, 100%, 64%, 0.2)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.4);">hsla(9, 100%, 64%, 0.4)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.6);">hsla(9, 100%, 64%, 0.6)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 0.8);">hsla(9, 100%, 64%, 0.8)</h1>
<h1 style="background-color:hsla(9, 100%, 64%, 1);">hsla(9, 100%, 64%, 1)</h1>
<hr>
<h2 id="HTML-CSS">HTML-CSS</h2>
<p>层叠样式表 (CSS) 用于格式化网页的布局。</p>
<p>CSS 节省了大量工作。它可以同时控制多个网页的布局。</p>
<p>应用于父元素的样式也将应用于父元素中的所有子元素。</p>
<p>因此，如果将正文文本的颜色设置为“蓝色”，正文中的所有标题、段落和其他文本元素也将获得相同的颜色（除非特别指定内容）！</p>
<h3 id="内联CSS">内联CSS</h3>
<p>用于将独特的样式应用于<strong>单个 HTML 元素</strong>，使用<code>style</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:blue;&quot;</span>&gt;A Blue Heading&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p style=<span class="string">&quot;color:red;&quot;</span>&gt;A red paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h1 style="color:blue;">A Blue Heading</h1>
<p style="color:red;">A red paragraph.</p>
<hr>
<h3 id="内部CSS">内部CSS</h3>
<p>用于定义<strong>单个 HTML 页面</strong>的样式。</p>
<p>在<code>&lt;head&gt;</code> 页面的某个<code>&lt;style&gt;</code>元素内定义。</p>
<p>将（该页面上）所有<code>&lt;h1&gt;</code>元素的文本颜色设置为蓝色，并将所有<code>&lt;p&gt;</code>元素的文本颜色设置为红色。此外，页面将以“粉蓝色”背景色显示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;<span class="comment">//内部CSS</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;background-color: powderblue;&#125;</span><br><span class="line">h1   &#123;color: blue;&#125;</span><br><span class="line">p    &#123;color: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-08-49.png" alt=""></p>
<hr>
<h3 id="外部CSS">外部CSS</h3>
<p>外部样式表用于定义许多 HTML 页面的样式，可以通过更改一个文件来更改整个网站的外观。</p>
<p>要使用外部样式表，要在每个 HTML 页面的 <code>&lt;head&gt;</code>部分中添加指向它的链接。</p>
<p>外部样式表可以在任何文本编辑器中编写。该文件不得包含任何 HTML 代码，并且必须以 .css 扩展名保存。</p>
<p>“styles.css”文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: powderblue;</span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引用“styles.css”文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;<span class="comment">//调用css文件</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;link&gt;</code>：这是HTML中的一个标签，用于定义文档与外部资源之间的关系。</li>
<li><code>rel=&quot;stylesheet&quot;</code>：这是<code>&lt;link&gt;</code>标签的属性之一，用于指定被链接文档与当前文档的关系。在这里，<code>stylesheet</code>表示被链接的文档是一个样式表。</li>
<li><code>href=&quot;styles.css&quot;</code>：这也是<code>&lt;link&gt;</code>标签的一个属性，用于指定被链接文档的URL或路径。在这里，<code>styles.css</code>是被链接的样式表文件的路径或URL。</li>
</ul>
<p>将当前HTML文档与名为<code>styles.css</code>的外部样式表文件关联起来，以应用样式表中定义的样式规则来渲染HTML文档中的元素。</p>
<hr>
<h3 id="CSS-颜色、字体和大小">CSS 颜色、字体和大小</h3>
<p>CSS<code>color</code>属性定义要使用的文本颜色。</p>
<p>CSS<code>font-family</code>属性定义要使用的字体。</p>
<p>CSS<code>font-size</code>属性定义要使用的文本大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![Snipaste_2024<span class="number">-02</span><span class="number">-08</span>_01<span class="number">-24</span><span class="number">-47</span>](C:/Users/<span class="number">86176</span>/Desktop/Snipaste_2024<span class="number">-02</span><span class="number">-08</span>_01<span class="number">-24</span><span class="number">-47.</span>png)&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">h1 &#123;<span class="comment">//定义一级标题的样式</span></span><br><span class="line">  color: blue;</span><br><span class="line">  font-family: verdana;</span><br><span class="line">  font-size: <span class="number">300</span>%;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;<span class="comment">//定义段落的样式</span></span><br><span class="line">  color: red;</span><br><span class="line">  font-family: courier;</span><br><span class="line">  font-size: <span class="number">160</span>%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-24-47.png" alt=""></p>
<hr>
<h3 id="CSS边框">CSS边框</h3>
<p>CSS<code>margin</code>属性定义边框外的<strong>边距</strong>（空间）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">p &#123;<span class="comment">//定义边框</span></span><br><span class="line">  border: <span class="number">2</span>px solid powderblue;<span class="comment">//边框的样式</span></span><br><span class="line">  margin: <span class="number">50</span>px;<span class="comment">//边距</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-27-18.png" alt=""></p>
<hr>
<h3 id="CSS填充">CSS填充</h3>
<p>CSS<code>padding</code>属性定义文本和边框之间的填充（空间）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  border: <span class="number">2</span>px solid powderblue;</span><br><span class="line">  padding: <span class="number">30</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_09-52-59.png" style="zoom:50%;" />
<hr>
<h3 id="链接外部CSS">链接外部CSS</h3>
<p>外部样式表可以通过完整的 URL 或路径来引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://www.w3schools.com/html/styles.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-08_01-36-37.png" alt=""></p>
<hr>
<h2 id="HTML链接">HTML链接</h2>
<p>HTML 链接是超链接。</p>
<p>可以单击链接并跳转到另一个文档，将鼠标移到链接上时，鼠标箭头会变成一只小手。</p>
<p><code>&lt;a&gt;</code>标签定义超链接。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.w3schools.com/&quot;</span>&gt;Visit W3Schools.com!&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.w3schools.com/">Visit W3Schools.com!</a></p>
<p><strong>注意</strong>：链接不一定是文本。链接可以是图像或任何其他 HTML 元素！</p>
<hr>
<h3 id="目标属性">目标属性</h3>
<p>默认情况下，链接页面将显示在<strong>当前浏览器窗口</strong>中。要更改此设置，必须为链接指定另一个目标。</p>
<p><code>target</code>属性指定在哪里打开链接文档。</p>
<ul>
<li><code>_self</code>- 默认。在单击时的同一窗口/选项卡中打开文档</li>
<li><code>_blank</code>- 在<strong>新窗口</strong>或选项卡中打开文档</li>
<li><code>_parent</code>- 在父框架中打开文档</li>
<li><code>_top</code>- 在整个窗口中打开文档</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.villagerain.cn/&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;这里是村雨的个人博客&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.villagerain.cn/" target="_blank">这里是村雨的个人博客</a></p>
<hr>
<h3 id="相对URL">相对URL</h3>
<p>上面的示例都在<code>href</code>属性中使用<strong>绝对 URL</strong>（完整网址）。</p>
<p><strong>本地链接（指向同一网站内页面的链接）使用相对 URL</strong>指定 （不带“<a href="https://www">https://www</a>”部分）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;Absolute URLs&lt;/h2&gt;<span class="comment">//指向不同的网站</span></span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;https://www.w3.org/&quot;</span>&gt;W3C&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;https://www.google.com/&quot;</span>&gt;Google&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Relative URLs&lt;/h2&gt;<span class="comment">//都指向W3school网站内页面</span></span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;html_images.asp&quot;</span>&gt;HTML Images&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;/css/default.asp&quot;</span>&gt;CSS Tutorial&lt;/a&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用图像作为链接">使用图像作为链接</h3>
<p>要使用图像作为链接，只需将<code>&lt;img&gt;</code> 标签放在标签内即可<code>&lt;a&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;link&quot;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;smiley.gif&quot;</span> alt=<span class="string">&quot;HTML tutorial&quot;</span> style=<span class="string">&quot;width:42px;height:42px;&quot;</span>&gt;<span class="comment">//img标签</span></span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_10-16-52.png" alt=""></p>
<p>点击图像即可跳转对应网页。</p>
<hr>
<h3 id="链接到电子邮箱">链接到电子邮箱</h3>
<p><code>mailto:</code>在<code> href</code>属性内部创建一个打开用户电子邮箱的链接</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;mailto:someone@example.com&quot;</span>&gt;Send email&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="mailto:1796245865@qq.com">Send email</a></p>
<hr>
<h3 id="使用按钮作为链接">使用按钮作为链接</h3>
<p>要使用按钮作为链接，必须添加一些 JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.location=&#x27;https://villagerain.cn/&#x27;&quot;</span>&gt;</span>村雨的个人博客<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_10-30-56.png" alt=""></p>
<p><strong>点击按钮后跳转网站。</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-16_10-31-14.png" alt="Snipaste_2024-02-16_10-31-14"></p>
<hr>
<h3 id="链接书签">链接书签</h3>
<p>如果网页很长，书签会很有用，以便读者可以跳转到网页的特定部分。</p>
<p>首先，使用<code>id</code>属性创建书签：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h2 id=<span class="string">&quot;C4&quot;</span>&gt;Chapter <span class="number">4</span>&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<h2 id="C4">Chapter 4</h2>
<p>然后，在同一页面中添加指向书签的链接（“跳转到第 4 章”）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;#C4&quot;</span>&gt;Jump to Chapter <span class="number">4</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><a href="#C4">Jump to Chapter 4</a></p>
<p>当点击链接时，就会自动找到Chapter 4。</p>
<hr>
<h2 id="HTML图像">HTML图像</h2>
<p>HTML<code>&lt;img&gt;</code>标签用于在网页中嵌入图像。</p>
<p>从技术上讲，图像并未插入网页；图像链接到网页。<code>&lt;img&gt;</code>标签为引用的图像创建了一个保存空间。</p>
<p>该<code>&lt;img&gt;</code>标签是空的，仅包含属性，并且<strong>没有结束标签。</strong></p>
<p>该<code>&lt;img&gt;</code>标签有两个必需的属性：</p>
<ul>
<li>src - 指定图像的路径</li>
<li>alt - 指定图像的替代文本</li>
</ul>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;url&quot;</span> alt=<span class="string">&quot;alternatetext&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg&quot;</span> alt=<span class="string">&quot;安度因&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg" alt="安度因" style="zoom:50%;" >
<hr>
<h3 id="图像尺寸">图像尺寸</h3>
<p>使用<code>style</code>属性来指定图像的宽度和高度：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">style=<span class="string">&quot;width:500px;height:600px;&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用<code>width</code>和<code>height</code>属性来指定图像的宽度和高度：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">width=<span class="string">&quot;500&quot;</span> height=<span class="string">&quot;600&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：始终指定图像的宽度和高度。如果未指定宽度和高度，加载图像时网页可能会闪烁。</p>
<p>​            建议使用<code>style</code>属性。它可以防止样式表更改图像的大小。</p>
<hr>
<h3 id="图像浮动">图像浮动</h3>
<p>使用 CSS<code>float</code>属性让图像浮动到文本的右侧right或左侧left：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg&quot;</span> alt=<span class="string">&quot;安度因&quot;</span> style=<span class="string">&quot;float:left;width:150px;height:150px;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E5%AE%89%E5%BA%A6%E5%9B%A0.jpg" alt="安度因" style="float:left;width:150px;height:150px;">
<hr>
<h3 id="图像映射">图像映射</h3>
<p>使用 HTML 图像映射，可以<strong>在图像上创建可单击区域</strong>。当点击对应区域时就会跳转到相应的页面。</p>
<p>由于涉及到像素点的位置，比较繁琐。更详细的内容请查看官网。</p>
<p><a href="https://www.w3schools.com/html/html_images_imagemap.asp">https://www.w3schools.com/html/html_images_imagemap.asp</a></p>
<p><code>&lt;map&gt;</code>标签定义图像映射。被定义图像具有可点击区域。这些区域是用一个或多个<code>&lt;area&gt;</code>标签定义的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;workplace.jpg&quot;</span> alt=<span class="string">&quot;Workplace&quot;</span> usemap=<span class="string">&quot;#workmap&quot;</span>&gt;<span class="comment">//整张图片</span></span><br><span class="line"></span><br><span class="line">&lt;map name=<span class="string">&quot;workmap&quot;</span>&gt;</span><br><span class="line">  &lt;area shape=<span class="string">&quot;rect&quot;</span> coords=<span class="string">&quot;34,44,270,350&quot;</span> alt=<span class="string">&quot;Computer&quot;</span> href=<span class="string">&quot;computer.htm&quot;</span>&gt;<span class="comment">//矩形电脑区域</span></span><br><span class="line">  &lt;area shape=<span class="string">&quot;rect&quot;</span> coords=<span class="string">&quot;290,172,333,250&quot;</span> alt=<span class="string">&quot;Phone&quot;</span> href=<span class="string">&quot;phone.htm&quot;</span>&gt;<span class="comment">//矩形手机区域</span></span><br><span class="line">  &lt;area shape=<span class="string">&quot;circle&quot;</span> coords=<span class="string">&quot;337,300,44&quot;</span> alt=<span class="string">&quot;Coffee&quot;</span> href=<span class="string">&quot;coffee.htm&quot;</span>&gt;<span class="comment">//圆形咖啡杯区域</span></span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>
<img src="C:/Users/86176/Desktop/Snipaste_2024-02-19_23-16-32.png" style="zoom: 80%;" />
<p>在该例子中，有三个图像映射的区域。当点击对应的区域，就会跳转到对应区域所指向的网页（href）</p>
<hr>
<h3 id="背景图片">背景图片</h3>
<p>要在 HTML 元素上添加背景图片，要使用 HTML<code>style</code>属性和 CSS<code>background-image</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;background-image: url(&#x27;img_girl.jpg&#x27;);&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>还可以在<code>&lt;head&gt;</code>元素中的以下部分中指定背景图片 ：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">p &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;img_girl.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>如果希望<strong>整个页面</strong>都有背景图片，则必须在<code>&lt;body&gt;</code>元素上指定背景图片：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;img_girl.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>如果背景图像小于元素，图像将水平和垂直<strong>重复</strong>自身，直到到达元素的末尾。</p>
<p>要避免背景图像重复，可将该<code>background-repeat</code>属性设置为<code>no-repeat</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;example_img_girl.jpg&#x27;</span>);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>如果希望背景图片覆盖整个元素，可以将该<code>background-size</code>属性设置为 <code>cover.</code></p>
<p>另外，为了确保整个元素始终被覆盖，可以将 <code>background-attachment</code>属性设置为<code>fixed:</code></p>
<p>这样，背景图像将覆盖整个元素，不会拉伸（图像将保持其原始比例）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![Snipaste_2024<span class="number">-02</span><span class="number">-19</span>_23<span class="number">-51</span><span class="number">-27</span>](C:/Users/<span class="number">86176</span>/Desktop/Snipaste_2024<span class="number">-02</span><span class="number">-19</span>_23<span class="number">-51</span><span class="number">-27.</span>png)&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: <span class="built_in">url</span>(<span class="string">&#x27;http://villagerain.oss-cn-huhehaote.aliyuncs.com/img%E9%A9%AC%E7%AB%9E%E5%A4%BA%E5%86%A0.jpg&#x27;</span>);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment: fixed; </span><br><span class="line">  background-size: <span class="number">100</span>% <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;马德里竞技<span class="number">20</span>/<span class="number">21</span>夺冠赛季&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;海神之子，永不言弃！&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-19_23-51-27.png" style="zoom:50%;" />
<p>如果希望背景图像拉伸以适合整个元素，可以将该<code>background-size</code>属性设置为 <code>100% 100%</code></p>
<hr>
<h3 id="图片元素">图片元素</h3>
<p>HTML<code>&lt;picture&gt;</code>元素允许为不同的设备或屏幕尺寸显示不同的图片，为 Web 开发人员指定图像资源提供了更大的灵活性。</p>
<p><code>&lt;picture&gt;</code>元素包含一个或多个<code>&lt;source&gt;</code>元素，每个元素通过属性引用不同的图像<code>srcset</code> 。</p>
<p>这样浏览器就可以选择最适合当前视图和/或设备的图像。</p>
<p>每个<code>&lt;source&gt;</code>元素都有一个 <code>media</code>属性，用于定义图像何时最合适。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//针对不同的屏幕尺寸显示不同的图像：</span></span><br><span class="line">&lt;picture&gt;</span><br><span class="line">  &lt;source media=<span class="string">&quot;(min-width: 650px)&quot;</span> srcset=<span class="string">&quot;img_food.jpg&quot;</span>&gt;</span><br><span class="line">  &lt;source media=<span class="string">&quot;(min-width: 465px)&quot;</span> srcset=<span class="string">&quot;img_car.jpg&quot;</span>&gt;</span><br><span class="line">  &lt;img src=<span class="string">&quot;img_girl.jpg&quot;</span>&gt;</span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：始终将某个<code>&lt;img&gt;</code>元素指定为<code>&lt;picture&gt;</code>元素的最后一个子元素。该<code>&lt;img&gt;</code>元素由不支持该<code>&lt;picture&gt;</code>元素的浏览器使用，或者如果没有<code>&lt;source&gt;</code>标签匹配时使用。</p>
<p>（本内容了解即可）</p>
<hr>
<h2 id="HTML网站图标">HTML网站图标</h2>
<p>将网站图标图像保存到网络服务器的根目录中，或者在<strong>根目录</strong>中创建一个名为 images 的文件夹，并将您的网站图标图像保存在此文件夹中。网站图标图像的通用名称是“favicon.ico”。</p>
<p>接下来，将一个<code>&lt;link&gt;</code>元素添加到“index.html”文件中的<code>&lt;title&gt;</code>元素后面。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;网站图标测试&lt;/title&gt;<span class="comment">//网站页面标题</span></span><br><span class="line">  &lt;link rel=<span class="string">&quot;icon&quot;</span> type=<span class="string">&quot;image/x-icon&quot;</span> href=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;你干嘛~&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;练习时长两年半。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>测试结果</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_10-41-11.png" alt=""></p>
<p><strong>注意</strong>：要将html文件和images文件夹要放在同一目录下，本例中我都放到了D盘根目录。</p>
<hr>
<h2 id="HTML表格">HTML表格</h2>
<h3 id="定义表格">定义表格</h3>
<p><strong>表行</strong></p>
<p>每个表行以<code>&lt;tr&gt;</code>开头并以<code>&lt;/tr&gt;</code>标签结尾。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;<span class="comment">//表格</span></span><br><span class="line">  &lt;tr&gt;<span class="comment">//表示行的开始table row</span></span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;<span class="comment">//表中的数据table date</span></span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;<span class="comment">//表示行的结束</span></span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;<span class="comment">//表中的数据</span></span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p>一个表中可以有任意多的行，只需确保每行中的<strong>单元格数量相同</strong>即可。</p>
<hr>
<h3 id="表格标题"><strong>表格标题</strong></h3>
<p>希望单元格成为标题单元格时，使用表头<code>&lt;th&gt;</code>标签。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;<span class="comment">//表格</span></span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;<span class="comment">//标题单元格table head</span></span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>金球奖第一</th>
    <th>金球奖第二</th>
    <th>金球奖第三</th>
  </tr>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p>若要使第一列成为标题，则设置每行的第一个单元格为表头：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;<span class="comment">//设置为表头</span></span><br><span class="line">    &lt;td&gt;金球奖第二&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;金球奖第三&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;格里兹曼&lt;/th&gt;<span class="comment">//设置为表头</span></span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;<span class="number">1</span>&lt;/th&gt;<span class="comment">//设置为表头</span></span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>金球奖第一</th>
    <td>金球奖第二</td>
    <td>金球奖第三</td>
  </tr>
  <tr>
    <th>格里兹曼</th>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <th>1</th>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p><strong>对齐标题</strong></p>
<p>在网页中，默认情况下，表标题为粗体并居中。</p>
<p>要左对齐<strong>标题</strong>，使用 CSS中<code>text-align</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-03-58.png" alt=""></p>
<p><strong>多列标题</strong></p>
<p>使用元素 <code>&lt;th&gt;</code>上的属性<code>colspan</code>可以设置跨越两列或更多列的标题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th colspan=<span class="string">&quot;2&quot;</span>&gt;金球奖前二&lt;/th&gt;<span class="comment">//标题跨越两列</span></span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th colspan="2">金球奖前二</th>
    <th>金球奖第三</th>
  </tr>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p><strong>添加整个表格的标题</strong></p>
<p>使用<code>&lt;caption&gt;</code>标签：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;caption&gt;金球奖排行&lt;/caption&gt;<span class="comment">//在&lt;table&gt;标签下，&lt;tr&gt;标签上添加</span></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
    <caption>金球奖排行</caption>
    <tr>
    <th>金球奖第一</th>
    <th>金球奖第二</th>
    <th>金球奖第三</th>
  </tr>
  <tr>
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<hr>
<h3 id="表格边框">表格边框</h3>
<p>HTML 表格可以具有不同样式和形状的边框。</p>
<p>要添加边框，则在 <code>table</code>、<code>th</code>和 <code>td</code>元素上使用 CSS 属性<code>border</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;<span class="comment">//整个网页的代码</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;<span class="comment">//内部CSS</span></span><br><span class="line">table, th, td &#123;<span class="comment">//添加边框</span></span><br><span class="line">  border: <span class="number">1</span>px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;金球奖第一&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在网页上添加表格与不添加表格的效果对比：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-14-26.png" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-14-37.png" alt=""></p>
<p><strong>设置表格为单边框</strong></p>
<p>将 CSS<code>border-collapse</code> 属性设置为<code>collapse</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">table, th, td &#123;</span><br><span class="line">  border: <span class="number">1</span>px solid black;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-17-21.png" alt=""></p>
<p><strong>设置单元格背景颜色</strong></p>
<p>在内部CSS中添加以下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  background-color: #<span class="number">96</span>D4D4;<span class="comment">//颜色可自行设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-24-29.png" alt=""></p>
<p><strong>设置圆桌边框</strong></p>
<p>添加<code>border-radius</code>属性，边框变为圆角：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">table, th, td &#123;</span><br><span class="line">  border: <span class="number">1</span>px solid black;</span><br><span class="line">  border-radius: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-26-48.png" alt=""></p>
<p><strong>设置边框样式</strong></p>
<p>使用<code>border-style</code>属性，可以设置边框的外观。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  border-style: dotted;<span class="comment">//设置为虚线</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-30-39.png" alt=""></p>
<p>其他样式：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-30-54.png" alt=""></p>
<p><strong>边框颜色</strong></p>
<p>通过<code>border-color</code>属性，可以设置边框的颜色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  border-color: #<span class="number">96</span>D4D4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_21-32-33.png" alt=""></p>
<hr>
<h3 id="表格大小">表格大小</h3>
<p>HTML 表格的每列、行或整个表格可以有不同的大小。</p>
<p>让<code>&lt;style&gt;</code> 带有<code>width</code>或<code>height</code> 属性来指定行或列的大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;<span class="comment">//设置表格宽度为100%</span></span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th style=<span class="string">&quot;width:50%&quot;</span>&gt;金球奖第一&lt;/th&gt;<span class="comment">//设置第一列宽度为50%</span></span><br><span class="line">    &lt;th&gt;金球奖第二&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;金球奖第三&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr style=<span class="string">&quot;height:100px&quot;</span>&gt;<span class="comment">//设置第二行的列高为100px</span></span><br><span class="line">    &lt;td&gt;格里兹曼&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;梅西&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;C罗&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table style="width:100%">
  <tr>
    <th style="width:50%">金球奖第一</th>
    <th>金球奖第二</th>
    <th>金球奖第三</th>
  </tr>
  <tr style="height:100px">
    <td>格里兹曼</td>
    <td>梅西</td>
    <td>C罗</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
</table>
<p><strong>注意</strong>:使用百分比作为宽度的大小单位意味着该元素与其父元素（在本例中为<code>&lt;body&gt;</code>元素）相比有多宽 。</p>
<hr>
<h3 id="单元格填充和间距"><strong>单元格填充和间距</strong></h3>
<p>单元格填充是单元格边缘和单元格内容之间的空间，默认情况下，填充设置为 0。</p>
<p>要在单元格上添加填充，需使用 CSS<code>padding</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  padding: <span class="number">15</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-19-54.png" alt=""></p>
<p>要仅在内容上方添加填充，使用<code>padding-top</code>属性。</p>
<p>还支持<code>padding-bottom</code>、<code>padding-left</code>和<code>padding-right</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">th, td &#123;</span><br><span class="line">  padding-top: <span class="number">10</span>px;</span><br><span class="line">  padding-bottom: <span class="number">0</span>px;</span><br><span class="line">  padding-left: <span class="number">0</span>px;</span><br><span class="line">  padding-right: <span class="number">0</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-22-05.png" alt=""></p>
<p><strong>单元格间距</strong></p>
<p>单元格间距是每个单元格之间的空间，默认情况下，空间设置为 2 像素。</p>
<p>要更改表格单元格之间的间距，请使用元素<code> border-spacing</code>上的 CSS 属性<code>table</code> ：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">table &#123;</span><br><span class="line">  border-spacing: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-25-55.png" alt=""></p>
<hr>
<h3 id="列跨度和行跨度">列跨度和行跨度</h3>
<p>要使单元格跨越多列，使用<code>colspan</code>属性，<strong>表格标题</strong>一栏中已举例说明。</p>
<p>要使单元格跨越多行，使用<code>rowspan</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">    &lt;td&gt;德佩&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th rowspan=<span class="string">&quot;2&quot;</span>&gt;职业&lt;/th&gt;</span><br><span class="line">    &lt;td&gt;足球运动员&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;说唱歌手&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<table>
  <tr>
    <th>姓名</th>
    <td>德佩</td>
  </tr>
  <tr>
    <th rowspan="2">职业</th>
    <td>足球运动员</td>
  </tr>
  <tr>
    <td>说唱歌手</td>
</tr>
</table>
<hr>
<h3 id="表格样式">表格样式</h3>
<p><strong>斑马条纹</strong></p>
<p>如果在每隔一个表格行添加背景颜色，将获得漂亮的斑马条纹效果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数行有颜色</span></span><br><span class="line">  background-color: #D6EEEE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-40-58.png" alt=""></p>
<p><strong>垂直斑马条纹</strong></p>
<p>要制作垂直斑马条纹，需每隔一<strong>列</strong>设置样式，而不是每隔一行设置样式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">td:nth-<span class="built_in">child</span>(even), th:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数列和偶数列标题有颜色</span></span><br><span class="line">  background-color: #D6EEEE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-42-59.png" alt=""></p>
<p><strong>组合垂直和水平斑马纹</strong></p>
<p>结合上面两个示例中的样式，每隔一行和每一列都会有条纹：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数行有颜色</span></span><br><span class="line">  background-color: <span class="built_in">rgba</span>(<span class="number">150</span>, <span class="number">212</span>, <span class="number">212</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用rgba()来指定颜色的透明度：</span></span><br><span class="line">td:nth-<span class="built_in">child</span>(even),th:nth-<span class="built_in">child</span>(even) &#123;<span class="comment">//只设置偶数列和偶数列标题有颜色</span></span><br><span class="line">  background-color: <span class="built_in">rgba</span>(<span class="number">150</span>, <span class="number">212</span>, <span class="number">212</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-48-07.png" alt=""></p>
<p><strong>水平分割线</strong></p>
<p>如果仅在每个表格行的底部指定边框，将产生一个带有水平分隔线的表格。</p>
<p>将<code>border-bottom</code>属性添加到所有 <code>tr</code>元素以获取水平分隔线：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr &#123;</span><br><span class="line">  border-bottom: <span class="number">1</span>px solid <span class="meta">#ddd;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-52-08.png" alt=""></p>
<p><strong>悬浮表格</strong></p>
<p>使用 <code>tr:hover</code>选择器在<strong>鼠标悬停时</strong>突出显示表行：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tr:hover &#123;background-color: #D6EEEE;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-53-32.png" alt=""></p>
<h3 id="表格列成组">表格列成组</h3>
<p>如果要设置<strong>表格前两列</strong>的样式，使用<code>&lt;colgroup&gt;</code> 和<code>&lt;col&gt;</code> 元素。</p>
<p><code>&lt;colgroup&gt;</code>元素应用作列规格的容器。</p>
<p>每个组都用一个元素指定<code>&lt;col&gt;</code>。</p>
<p><code>span</code>属性指定有多少列获得该样式。</p>
<p><code>style</code>属性指定列的样式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;</span><br><span class="line">  &lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;2&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_22-58-39.png" alt=""></p>
<p><strong>使用不同的样式设置更多列</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;</span><br><span class="line">&lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;<span class="comment">//第一列成组</span></span><br><span class="line">    &lt;col span=<span class="string">&quot;2&quot;</span> style=<span class="string">&quot;background-color: pink&quot;</span>&gt;<span class="comment">//第二三列成组（第一组的后面两列成组）</span></span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_23-04-50.png" alt=""></p>
<p><strong>空列成组</strong></p>
<p>如果要为表格中间的列设置样式，请 <code>&lt;col&gt;</code>在前面的列中插入一个“空”元素（没有样式）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span>&gt;<span class="comment">//一个道理</span></span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: pink&quot;</span>&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_23-07-34.png" alt=""></p>
<p><strong>隐藏列</strong></p>
<p>使用<code>visibility: collapse</code>属性隐藏列：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;table style=<span class="string">&quot;width:100%&quot;</span>&gt;</span><br><span class="line">&lt;colgroup&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;visibility: collapse&quot;</span>&gt;</span><br><span class="line">    &lt;col span=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;background-color: #D6EEEE&quot;</span>&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-26_23-10-46.png" alt=""></p>
<hr>
<h2 id="HTML列表">HTML列表</h2>
<h3 id="无序列表">无序列表</h3>
<p>无序列表以<code>&lt;ul&gt;</code>标签开头。每个列表项都以标签开头 <code>&lt;li&gt;</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line"> &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line"> &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
 <li>格里兹曼</li>
 <li>梅西</li>
 <li>C罗</li>
</ul>
<p>可以通过CSS<code>list-style-type</code>属性改变标签的<strong>样式</strong></p>
<p>例如，空心圆圈circle：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ul style=<span class="string">&quot;list-style-type:circle;&quot;</span>&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul style="list-style-type:circle;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<p>此外，还有实心圆圈disc、正方形square、无none。效果依次如下：</p>
<ul style="list-style-type:disc;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<ul style="list-style-type:square;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<ul style="list-style-type:none;">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ul>
<hr>
<h3 id="嵌套列表">嵌套列表</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;<span class="comment">//无序列表嵌套</span></span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西<span class="comment">//展开此标签</span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;呦西&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;球玉&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/li&gt;<span class="comment">//此标签结束</span></span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
  <li>格里兹曼</li>
  <li>梅西
    <ul>
      <li>呦西</li>
      <li>球玉</li>
    </ul>
  </li>
  <li>C罗</li>
</ul>
<hr>
<h3 id="有序列表">有序列表</h3>
<p><code>&lt;ol&gt;</code>标签定义了一个有序列表。有序列表可以是数字的或字母的。</p>
<p>列表项默认会标有数字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<ol>
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>若想使用字母，需要使用<code>type</code>属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ol type=<span class="string">&quot;A&quot;</span>&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<ol type="A">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>使用罗马数字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;ol type=<span class="string">&quot;I&quot;</span>&gt;</span><br><span class="line">  &lt;li&gt;格里兹曼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;梅西&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;C罗&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
<ol type="I">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>其他标签头使用方法依次类推。</p>
<p><strong>控制列表计数</strong></p>
<p>默认情况下，有序列表会从 1 开始计数。如果想从指定的数字开始计数，可以使用<code>start</code>属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>格里兹曼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>梅西<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>C罗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="50">
  <li>格里兹曼</li>
  <li>梅西</li>
  <li>C罗</li>
</ol>
<p>有序也可以嵌套，与无序列表方法相同。</p>
<h3 id="描述列表">描述列表</h3>
<p>标签<code>&lt;dl&gt;</code>定义描述列表，<code> &lt;dt&gt;</code>标签定义术语（名称），<code> &lt;dd&gt;</code>标签描述每个术语：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;格里兹曼&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;- 足球大师&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;梅西&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;- 没礼貌的小偷&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;C罗&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;- 不如格子&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>
<dl>
  <dt>格里兹曼</dt>
  <dd>- 足球大师</dd>
  <dt>梅西</dt>
  <dd>- 没礼貌的小偷</dd>
  <dt>C罗</dt>
  <dd>- 不如格子</dd>
</dl>
<hr>
<h2 id="块和内联">块和内联</h2>
<p>每个 HTML 元素都有一个<strong>默认显示值</strong>，具体取决于元素的类型。</p>
<p>两个最常见的显示值是块和内联。</p>
<p><strong>块级元素</strong>总是从新行开始，浏览器会自动在元素前后添加一些空格（边距）。</p>
<p>块级元素始终占据可用的全部宽度（尽可能向左和向右延伸）。</p>
<p>两个常用的块级元素是：<code>&lt;p&gt;</code> 和<code>&lt;div&gt;</code>。</p>
<p><code>&lt;p&gt;</code>元素定义 HTML 文档中的一个段落。</p>
<p><code>&lt;div&gt;</code>元素定义 HTML 文档中的一个分区或一个部分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;格里兹曼&lt;/p&gt;</span><br><span class="line">&lt;div&gt;姆巴佩&lt;/div&gt;<span class="comment">//&lt;div&gt;元素通常用作其他 HTML 元素的容器。</span></span><br></pre></td></tr></table></figure>
<p>格里兹曼</p>
<div>姆巴佩</div>
<p><strong>HTML中的块级元素：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;address&gt; &lt;article&gt; &lt;aside&gt; &lt;blockquote&gt; &lt;canvas&gt; &lt;dd&gt; &lt;div&gt; &lt;dl&gt; &lt;dt&gt; &lt;fieldset&gt; &lt;figcaption&gt; &lt;figure&gt; &lt;footer&gt;&lt;form&gt; &lt;h1&gt;-&lt;h6&gt; &lt;header&gt; &lt;hr&gt; &lt;li&gt; &lt;main&gt; &lt;nav&gt; &lt;noscript&gt; &lt;ol&gt; &lt;p&gt; &lt;pre&gt; &lt;section&gt; &lt;table&gt; &lt;tfoot&gt; &lt;ul&gt; &lt;video&gt;</span><br></pre></td></tr></table></figure>
<p><strong>内联元素</strong></p>
<p>内联元素不会从新行开始。</p>
<p>内联元素仅占用必要的宽度。</p>
<p>例如段落内的 <span> 元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;格里兹曼&lt;span&gt;是足球大师&lt;/span&gt;&lt;/p&gt;<span class="comment">//&lt;span&gt;元素是一个内联容器，用于标记文本的一部分或文档的一部分。</span></span><br></pre></td></tr></table></figure>
<p>格里兹曼<span>是足球大师</span></p>
<p><strong>HTML中的内联元素</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;a&gt; &lt;abbr&gt; &lt;acronym&gt; &lt;b&gt; &lt;bdo&gt; &lt;big&gt; &lt;br&gt; &lt;button&gt; &lt;cite&gt; &lt;code&gt; &lt;dfn&gt; &lt;em&gt; &lt;i&gt; &lt;img&gt; &lt;input&gt; &lt;kbd&gt; &lt;label&gt; &lt;map&gt;&lt;object&gt; &lt;output&gt; &lt;q&gt; &lt;samp&gt; &lt;script&gt; &lt;select&gt; &lt;small&gt; &lt;span&gt; &lt;strong&gt; &lt;sub&gt; &lt;sup&gt; &lt;textarea&gt; &lt;time&gt; &lt;tt&gt; &lt;var&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="HTML-Div分区">HTML-Div分区</h2>
<p><code>&lt;div&gt;</code>元素用作其他 HTML 元素的容器,是块级元素，这意味着它占用所有可用宽度，并且前后带有换行符。</p>
<p><code>&lt;div&gt;</code>元素通常用于将网页的各个部分分组在一起。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  background-color: #FFF4A3;<span class="comment">//黄色</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="comment">//分区</span></span><br><span class="line">  &lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;London is the capital city of England.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;London has over <span class="number">13</span> million inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这样，只有div分区的部分具有div所定义的样式。</p>
<h3 id="居中对齐-div-元素"><strong>居中对齐<code>&lt;div&gt;</code>元素</strong></h3>
<p>如果希望<code>&lt;div&gt;</code>元素不是 100% 宽，并且想要将其居中对齐，需将 CSS <code>margin</code>属性设置为<code> auto</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  width:<span class="number">300</span>px;</span><br><span class="line">  margin:<span class="keyword">auto</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>可以在一个页面上拥有多个div分区，每个分区设置自己独特的样式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;background-color:#FFF4A3;&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;London is the capital city of England.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;London has over <span class="number">13</span> million inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;background-color:#FFC0C7;&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;Oslo&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;Oslo is the capital city of Norway.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Oslo has over <span class="number">600.000</span> inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;background-color:#D9EEE1;&quot;</span>&gt;</span><br><span class="line">  &lt;h2&gt;Rome&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;Rome is the capital city of Italy.&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Rome has almost <span class="number">3</span> million inhabitants.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<div style="background-color:#FFF4A3;">
  <h2>London</h2>
  <p>London is the capital city of England.</p>
  <p>London has over 13 million inhabitants.</p>
</div>
<div style="background-color:#FFC0C7;">
  <h2>Oslo</h2>
  <p>Oslo is the capital city of Norway.</p>
  <p>Oslo has over 600.000 inhabitants.</p>
</div>
<div style="background-color:#D9EEE1;">
  <h2>Rome</h2>
  <p>Rome is the capital city of Italy.</p>
  <p>Rome has almost 3 million inhabitants.</p>
</div>
<h3 id="并排对齐-div-元素"><strong>并排对齐<code>&lt;div&gt;</code>元素</strong></h3>
<p>构建网页时，通常希望 <code>&lt;div&gt;</code>并排有两个或多个元素，如下所示：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-02-28_22-49-16.png" alt=""></p>
<p><strong>方法1：CSS-float属性</strong></p>
<hr>
<h2 id="HTML类">HTML类</h2>
<p><code>class</code>属性用于指定 HTML 元素的类，不同的HTML 元素可以共享同一个类。</p>
<p><strong>语法</strong>：写一个句点 (.) 字符，后跟类名。然后，在大括号 {} 内定义 CSS 属性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.city &#123;<span class="comment">//city类</span></span><br><span class="line">  background-color: tomato;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.note &#123;<span class="comment">//note类</span></span><br><span class="line">  font-size: <span class="number">120</span>%;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><strong>绑定类</strong>：元素括号中加上class=“类名”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;city&quot;</span>&gt;<span class="comment">//该分区属于city类</span></span><br><span class="line">  &lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;London is the capital of England.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;city&quot;</span>&gt;<span class="comment">//该分区属于city类</span></span><br><span class="line">  &lt;h2&gt;Paris&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;Paris is the capital of France.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My &lt;span <span class="keyword">class</span>=<span class="string">&quot;note&quot;</span>&gt;Important&lt;/span&gt; Heading&lt;/h1&gt;<span class="comment">//该分区属于note类</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;This is some &lt;span <span class="keyword">class</span>=<span class="string">&quot;note&quot;</span>&gt;important&lt;/span&gt; text.&lt;/p&gt;<span class="comment">//该分区属于note类</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：类名区分大小写！</p>
<p><strong>一个HTML元素也可以绑定多个类</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;h2 <span class="keyword">class</span>=<span class="string">&quot;city note&quot;</span>&gt;London&lt;/h2&gt;<span class="comment">//两个类名用空格分开即可</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="HTML-id">HTML-id</h2>
<p><code>id</code>属性用于指定 HTML 元素的<strong>唯一</strong>ID，用于指向样式表中的特定样式声明。</p>
<p>在 HTML 文档中不能有多个具有相同 id 的元素。</p>
<p><strong>语法</strong>：写入一个哈希字符 (#)，后跟一个 id 名称。然后，在大括号 {} 内定义 CSS 属性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#myHeader &#123;<span class="comment">//通过id来指定样式</span></span><br><span class="line">  background-color: lightblue;</span><br><span class="line">  color: black;</span><br><span class="line">  padding: <span class="number">40</span>px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 id=<span class="string">&quot;myHeader&quot;</span>&gt;My Header&lt;/h1&gt;<span class="comment">//设置元素h1的id为myHeader</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> ：id名称区分大小写，必须至少包含一个字符，不能以数字开头，并且不能包含空格（空格、制表符等）。</p>
<p><strong>类和id的区别</strong>：类名可以由多个 HTML 元素使用，而 id 名称只能由页面中的一个 HTML 元素使用。</p>
<p>id还可以实现书签的功能，具体语法在HTML链接一节。</p>
<hr>
<h2 id="HTML内嵌框架">HTML内嵌框架</h2>
<p>HTML <code>&lt;iframe&gt;</code> 用于在网页中显示网页。（在当前 HTML 文档中嵌入另一个文档。）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;https://www.bilibili.com/&quot;</span> style=<span class="string">&quot;border:none;&quot;</span> <span class="comment">//删除边框，还可以自定义其他CSS样式</span></span><br><span class="line">    height=<span class="string">&quot;500&quot;</span> width=<span class="string">&quot;800&quot;</span><span class="comment">//高度和宽度</span></span><br><span class="line">    title=<span class="string">&quot;B站&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<iframe src="https://www.bilibili.com/" style="border:none;" height="500" width="800" title="Iframe Example"></iframe>
<hr>
<h2 id="HTML其他">HTML其他</h2>
<h3 id="HTML-meta-元素">HTML -meta 元素</h3>
<p><code>&lt;meta&gt;</code>元素通常用于指定字符集、页面描述、关键字、文档作者和视口设置。</p>
<p>数据<strong>不会显示在页面上</strong>，但由浏览器（如何显示内容或重新加载页面）、搜索引擎（关键字）和其他 Web 服务使用。</p>
<p><strong>定义使用的字符集：</strong></p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
<p><strong>定义搜索引擎的关键字：</strong></p>
<p><code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, JavaScript&quot;&gt;</code></p>
<p><strong>定义网页的描述：</strong></p>
<p><code>&lt;meta name=&quot;description&quot; content=&quot;Free Web tutorials&quot;&gt;</code></p>
<p><strong>定义页面的作者：</strong></p>
<p><code>&lt;meta name=&quot;author&quot; content=&quot;John Doe&quot;&gt;</code></p>
<p><strong>每 30 秒刷新一次文档：</strong></p>
<p><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;</code></p>
<p><strong>设置视口以使您的网站在所有设备上看起来都不错：</strong></p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;<span class="comment">//示例</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Free Web tutorials&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;HTML, CSS, JavaScript&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;John Doe&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;All meta information goes inside the head section.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/86176/Desktop/Snipaste_2024-03-02_11-04-48.png" alt=""></p>
<p><strong>设置视口</strong></p>
<p>视口是网页的用户可见区域。它因设备而异 - 在手机上它会比在电脑屏幕上小。</p>
<p>应该在<strong>所有网页</strong>中包含以下元素：</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p>
<p>这为浏览器提供了如何控制页面尺寸和缩放的说明。</p>
<p><code>width=device-width</code>设置页面的宽度以遵循设备的屏幕宽度（这将根据设备而变化）。</p>
<p><code>initial-scale=1.0</code>设置浏览器首次加载页面时的初始缩放级别。</p>
<hr>
<h3 id="HTML-script元素">HTML -script元素</h3>
<p><code>&lt;script&gt;</code>元素用于定义客户端 JavaScript。</p>
<p>下面的 JavaScript 会写“Hello JavaScript!” 到 id=“demo” 的 HTML 元素中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function">function <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  document.<span class="built_in">getElementById</span>(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="string">&quot;Hello JavaScript!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>JavaScript的具体知识请看相关章节。</p>
<hr>
<h3 id="HTML-base标签">HTML -base标签</h3>
<p><code>&lt;base&gt;</code>为页面上所有的链接指定默认 URL 和默认目标：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;https://www.w3schools.com/&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;<span class="comment">//默认路径就是w3school 打开方式为新建窗口</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;<span class="comment">//之后的所有路径都将基于w3school去查询 打开方式都为新建窗口</span></span><br><span class="line">&lt;img src=<span class="string">&quot;images/stickman.gif&quot;</span> width=<span class="string">&quot;24&quot;</span> height=<span class="string">&quot;39&quot;</span> alt=<span class="string">&quot;Stickman&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;tags/tag_base.asp&quot;</span>&gt;HTML base Tag&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;base&gt;</code>标记必须具有 href 或 target 属性，或两者兼而有之。</p>
<p>html文档中<strong>只能有一个</strong><code>&lt;base&gt;</code>元素，并且它必须位于 <code>&lt;head&gt; </code>元素内。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ map新知</title>
    <url>/2024/01/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++map%E6%96%B0%E7%9F%A5/</url>
    <content><![CDATA[<p><strong>假期闲来无事，打一打基础。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720220731222432.jpg" style="zoom: 25%;" />
<span id="more"></span>
<hr>
<h2 id="命名空间">命名空间</h2>
<p>在 C++ 中，命名空间是一个命名范围或容器，用于<strong>组织和封装代码元素的集合</strong>，例如变量、函数、类和其他命名空间。</p>
<p>它们主要用于划分和管理代码库，使开发人员能够控制名称冲突和代码的专业化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> animals &#123;</span><br><span class="line">    std::string dog = <span class="string">&quot;Bobby&quot;</span>;</span><br><span class="line">    std::string cat = <span class="string">&quot;Lilly&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//访问命名空间中的内容需要加上作用域符号::</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Dog&#x27;s name: &quot;</span> &lt;&lt; animals::dog &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Cat&#x27;s name: &quot;</span> &lt;&lt; animals::cat &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> animals::dog;<span class="comment">//using关键字，后面可以直接使用命名空间animals中的变量dog</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Dog&#x27;s name: &quot;</span> &lt;&lt; dog &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像常用的 <code>using namespace std；</code></p>
<p>就可以直接使用std中的成员，<code>cin</code>、<code>cout</code>、<code>endl</code>等等。</p>
<h2 id="多态">多态</h2>
<p>父类<strong>指针或引用</strong>指向子类对象，产生多态现象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The Animal makes a sound&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Dog barks!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Cat meows!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal* myAnimal = <span class="keyword">new</span> <span class="built_in">Animal</span>();<span class="comment">//父类指针指向子类对象</span></span><br><span class="line">    Animal* myDog = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">    Animal* myCat = <span class="keyword">new</span> <span class="built_in">Cat</span>();</span><br><span class="line"></span><br><span class="line">    myAnimal-&gt;<span class="built_in">makeSound</span>();  <span class="comment">// Outputs: The Animal makes a sound</span></span><br><span class="line">    myDog-&gt;<span class="built_in">makeSound</span>();     <span class="comment">// Outputs: Dog barks!</span></span><br><span class="line">    myCat-&gt;<span class="built_in">makeSound</span>();     <span class="comment">// Outputs: Cat meows!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> myAnimal;</span><br><span class="line">    <span class="keyword">delete</span> myDog;</span><br><span class="line">    <span class="keyword">delete</span> myCat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类中的特殊成员函数">类中的特殊成员函数</h2>
<ol>
<li>
<p><strong>构造函数（Constructor）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MyResource</span>() : <span class="built_in">data</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>]) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这个构造函数用于在<strong>对象创建时</strong>分配一个包含100个整数的动态数组，并将该数组的地址存储在 <code>data</code> 成员变量中。</p>
</li>
<li>
<p><strong>析构函数（Destructor）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~<span class="built_in">MyResource</span>() &#123; <span class="keyword">delete</span>[] data; &#125;</span><br></pre></td></tr></table></figure>
<p>析构函数用于在<strong>对象销毁时</strong>释放动态分配的内存。这里使用 <code>delete[]</code> 来释放通过 <code>new int[100]</code> 分配的整数数组。</p>
</li>
<li>
<p><strong>复制构造函数（Copy Constructor）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MyResource</span>(<span class="type">const</span> MyResource&amp; other) : <span class="built_in">data</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>]) &#123;</span><br><span class="line">    std::<span class="built_in">copy</span>(other.data, other.data + <span class="number">100</span>, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制构造函数用于在<strong>创建一个新对象时</strong>，使用另一个对象的数据来初始化新对象。这里通过动态分配一个新的数组，并使用 <code>std::copy</code> 将 <code>other</code> 对象的数据复制到新数组中。</p>
<p>其中：</p>
<ul>
<li><code>other.data</code>: 是源范围的<strong>起始位置</strong>，指向 <code>other</code> 对象的动态分配的整数数组。</li>
<li><code>other.data + 100</code>: 是源范围的<strong>结束位置</strong>，指向 <code>other.data</code> 之后100个元素的位置。</li>
<li><code>data</code>: 是<strong>目标范围的起始位置</strong>，指向当前对象的动态分配的整数数组。</li>
</ul>
</li>
<li>
<p><strong>复制赋值运算符（Copy Assignment Operator）:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyResource&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyResource&amp; other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    std::<span class="built_in">copy</span>(other.data, other.data + <span class="number">100</span>, data);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制赋值运算符用于<strong>将一个对象的数据复制到另一个已经存在的对象中</strong>。在这里，首先检查是否是自我赋值（<code>if (&amp;other == this)</code>），如果是自我赋值，就直接返回当前对象。否则，分配一个新的数组，并使用 <code>std::copy</code> 将 <code>other</code> 对象的数据复制到当前对象operator的数组中。</p>
</li>
<li>
<p><strong>移动构造函数（Move Constructor）:</strong></p>
<p>通过<strong>转移所有权</strong>来更有效地处理资源，而不必复制所有数据。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MyResource</span>(MyResource&amp;&amp; other) <span class="keyword">noexcept</span> : <span class="built_in">data</span>(other.data) &#123;</span><br><span class="line">    other.data = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移动构造函数接受一个右值引用 <code>MyResource&amp;&amp; other</code>，表示可以使用其他对象的资源。在这里，它将 <code>other</code> 对象的 <code>data</code> 指针（指向动态分配的数组）移动到当前对象，并将 <code>other.data</code> 设置为 <code>nullptr</code>，<strong>表示资源已经被移动</strong>。这样做的目的是确保在 <code>other</code> 对象被销毁时不会重复释放内存。</p>
<ol start="6">
<li><strong>移动赋值运算符（Move Assignment Operator）:</strong></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyResource&amp; <span class="keyword">operator</span>=(MyResource&amp;&amp; other) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] data;</span><br><span class="line">    data = other.data;</span><br><span class="line">    other.data = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移动赋值运算符接受一个右值引用 <code>MyResource&amp;&amp; other</code>，表示可以使用其他对象的资源。它首先检查是否是自我赋值，然后释放当前对象已有的资源（通过 <code>delete[] data</code>），将 <code>other.data</code> 移动到当前对象，最后将 <code>other.data</code> 设置为 <code>nullptr</code>。这样做是为了确保在 <code>other</code> 对象被销毁时不会重复释放内存。</p>
<p>这些移动语义的改进可以提高对象的性能，特别是在涉及到资源管理的场景，因为它避免了不必要的<strong>深拷贝</strong>。</p>
<h2 id="菱形继承">菱形继承</h2>
<p>菱形继承会带来二义性和资源浪费的问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  A</span><br><span class="line"> / \</span><br><span class="line">B   C</span><br><span class="line"> \ /</span><br><span class="line">  D</span><br></pre></td></tr></table></figure>
<p><strong>二义性（Ambiguity）：</strong> 如果在类 <code>D</code> 中访问一个继承自 <code>A</code> 的成员，编译器可能无法确定应该使用哪个基类的成员，因为可以通过两条路径（从 <code>B</code> 或从 <code>C</code>）到达 <code>A</code>。</p>
<p><strong>资源浪费：</strong> 如果 <code>B</code> 和 <code>C</code> 中都有 <code>A</code> 类的成员，而 <code>D</code> 继承了两者，就会导致 <code>A</code> 类的成员在 <code>D</code> 中存在两份，这可能会浪费内存。</p>
<p>为了解决这些问题，可以使用<strong>虚继承</strong>，通过在基类 <code>A</code> 的继承前面加上 <code>virtual</code> 关键字，确保只有一份 <code>A</code> 类的实例被继承，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;    <span class="comment">// ... &#125;; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;    <span class="comment">// ... &#125;;</span></span><br></pre></td></tr></table></figure>
<h2 id="静态多态性">静态多态性</h2>
<p>静态多态性，也称为<strong>编译时</strong>多态性，是一种在编译时而非运行时解析类型和方法调用的多态性。</p>
<p>通常使用 C++ 中的<strong>函数重载</strong>和<strong>模板</strong>来实现的。</p>
<p><strong>函数重载</strong>是一种创建多个具有<strong>相同名称但不同参数列表</strong>的函数的方法。</p>
<p>编译器根据调用函数时使用的参数类型和数量确定要调用的正确函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing int: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span> d)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing double: &quot;</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing string: &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>);          <span class="comment">// Calls print(int i)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.14</span>);       <span class="comment">// Calls print(double d)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>);    <span class="comment">// Calls print(const char* s)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>模板</strong>是 C++ 中的一项强大功能，创建通用函数或通用类。</p>
<p>特定类型的实际代码是在<strong>编译时</strong>生成的，这避免了运行时多态性的开销。使用模板是C++中实现静态多态性的主要技术。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Template function to print any type</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//T为各种数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Printing value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">42</span>);           <span class="comment">// int</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.14159</span>);      <span class="comment">// double</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>);      <span class="comment">// const char*</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态多态性">动态多态性</h2>
<p>动态多态性是面向对象语言（如 C++）中的一个编程概念，其中派生类可以覆盖或重新定义其基类的<strong>方法</strong>。</p>
<p>这意味着单个方法调用可以根据调用它的对象类型有不同的实现。</p>
<p>动态多态性是通过<strong>虚函数</strong>实现的。当在基类中指定虚函数时，可以在任何派生类中<strong>重写</strong>它以提供不同的实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Base class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;<span class="comment">//虚函数</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a shape&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a circle&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Drawing a rectangle&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Shape* shape;</span><br><span class="line">    Circle circle;</span><br><span class="line">    Rectangle rectangle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Storing the address of circle</span></span><br><span class="line">    shape = &amp;circle;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call circle draw function</span></span><br><span class="line">    shape-&gt;<span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Storing the address of rectangle</span></span><br><span class="line">    shape = &amp;rectangle;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call rectangle draw function</span></span><br><span class="line">    shape-&gt;<span class="built_in">draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异常处理">异常处理</h2>
<p>C++ 中的异常处理是一种处理程序执行期间可能发生的错误、异常或意外事件的机制。</p>
<p>这使得程序在遇到错误时可以继续运行或优雅退出，<strong>而不是突然崩溃</strong>。</p>
<p>C++ 提供了一组关键字和构造来实现异常处理：</p>
<ul>
<li><code>try</code>：定义应监视异常的代码块。</li>
<li><code>catch</code>：指定要捕获的异常类型以及异常发生时应执行的代码块。</li>
<li><code>throw</code>：引发异常，该异常将由适当的 catch 块捕获并处理。</li>
<li><code>noexcept</code>：指定一个函数，如果在其范围内抛出异常，则不会抛出异常或终止程序。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Division by zero!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter two numbers for division: &quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">divide</span>(num1, num2);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The result is: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error: &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当除数为0时，会执行<code>throw &quot;Division by zero!&quot;;</code>然后<code>&quot;Division by zero!&quot;</code>会传到catch语句块，输出错误信息。</p>
<h2 id="动态数组vector">动态数组vector</h2>
<p><code>vector</code> 是一种动态数组（dynamic array）的数据结构，它属于标准模板库（STL）的一部分。</p>
<p><code>vector</code> 提供了一个可变大小的数组，可以在运行时动态地调整大小，而且<strong>支持在数组的末尾高效地添加或删除元素</strong>。</p>
<p>与传统的数组相比，<code>vector</code> 的一个主要优势是<strong>它能够自动处理内存管理，不需要手动指定数组大小。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的整数数组</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; myVector;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向数组中添加元素</span></span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">myVector.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//删除数组的末尾元素</span></span><br><span class="line">myVector.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// 访问向量中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; myVector.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    std::cout &lt;&lt; myVector[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="auto关键字">auto关键字</h2>
<p>auto用于自动类型推导，在编译时自动从变量的初始化表达式的类型推断出变量的类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Traditional way of declaring a variable:</span></span><br><span class="line">    <span class="type">int</span> myInt = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using auto for type deduction:</span></span><br><span class="line">    <span class="keyword">auto</span> myAutoInt = <span class="number">5</span>; <span class="comment">// Automatically deduces the type as &#x27;int&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为auto是根据<strong>等号右项</strong>来自动推导类型，所以<strong>必须要提供初始值</strong>，否则会报错。</p>
<h2 id="类型转换">类型转换</h2>
<p><strong>C 风格转换</strong>：这是从 C 继承的语法，只需将目标数据类型放在要转换的值之前的<strong>括号</strong>中即可完成。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = (<span class="type">float</span>)a;  <span class="comment">// C-style cast from int to float</span></span><br></pre></td></tr></table></figure>
<p><strong><code>static_cast</code></strong>：这是 C++ 中<strong>最常用</strong>的类型转换方法。它在编译时执行，当您在<strong>数据类型之间</strong>进行显式转换时应该使用它。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(a);  <span class="comment">// static_cast from int to float</span></span><br></pre></td></tr></table></figure>
<p><strong><code>dynamic_cast</code></strong>：此方法专门用于在类层次结构中的<strong>基类和派生类之间</strong>安全地转换指针和引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Base* base_ptr = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Derived* derived_ptr = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(base_ptr);  <span class="comment">// dynamic_cast from Base* to Derived*</span></span><br></pre></td></tr></table></figure>
<p><strong><code>reinterpret_cast</code></strong>：此转换更改指针、引用或整数值的类型。它也称为<strong>按位转换</strong>，因为它改变了编译器解释底层位的方式。</p>
<p>仅当您对自己正在做的事情有深入了解时才使用<code>reinterpret_cast</code>，因为它并不能保证结果值有意义。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">42</span>);</span><br><span class="line"><span class="type">long</span> b = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">long</span>&gt;(a);  <span class="comment">// reinterpret_cast from int* to long</span></span><br></pre></td></tr></table></figure>
<p><strong><code>const_cast</code></strong>：此转换方法用于从<strong>常量</strong>中删除限定符。通常不建议这样做，但在某些无法控制变量常量的情况下可能很有用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* ptr = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;a);  <span class="comment">// const_cast from const int* to int*</span></span><br><span class="line">*ptr = <span class="number">20</span>;  <span class="comment">// Not recommended, use with caution</span></span><br></pre></td></tr></table></figure>
<h2 id="未定义行为">未定义行为</h2>
<p><strong>未初始化的变量</strong>：声明一个变量但没有显式地初始化它时，它的值是未定义的，而<strong>不是默认初始化为0</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y = x + <span class="number">5</span>; <span class="comment">// Undefined behavior since x is uninitialized</span></span><br></pre></td></tr></table></figure>
<p><strong>越界内存访问</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> val = arr[<span class="number">5</span>]; <span class="comment">// Undefined behavior since the valid indices are 0 to 4</span></span><br></pre></td></tr></table></figure>
<p><strong>空指针解引用</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ptr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="type">int</span> val = *ptr; <span class="comment">// Undefined behavior since ptr is a null pointer</span></span><br></pre></td></tr></table></figure>
<p><strong>除以零</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> z = x / y; <span class="comment">// Undefined behavior since division by zero is not allowed</span></span><br></pre></td></tr></table></figure>
<h2 id="C-宏">C++ 宏</h2>
<p>宏是 C++ 中的<strong>预处理指令</strong>，预处理器使用它来执行文本替换。它们是使用<code>#define</code>指令定义的，后跟宏名称和要替换的值。</p>
<p><strong>常量宏</strong>：常量宏用于定义在代码中使用的符号常量。它们<strong>不使用任何内存</strong>，并在编译过程之前由预处理器替换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159<span class="comment">//常数宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> circumference = <span class="number">2</span> * PI * radius;</span><br></pre></td></tr></table></figure>
<p><strong>函数宏</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x))<span class="comment">//函数宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> square_of_five = <span class="built_in">SQUARE</span>(<span class="number">5</span>); <span class="comment">// expands to ((5) * (5))</span></span><br></pre></td></tr></table></figure>
<h2 id="C-标准模板库STL">C++ 标准模板库STL</h2>
<p>C++ 标准模板库 (STL) 是<strong>头文件的集合</strong>，提供多种数据结构、算法和函数来<strong>简化 C++ 编码体验</strong>。</p>
<p>STL 的主要目的是通过提供一组即用型的有用工具来节省时间并提高效率。</p>
<p>STL最常用的功能可以分为三大类：<strong>容器、算法</strong>和<strong>迭代器</strong>。</p>
<p><strong>容器</strong>：C++ 中用于数据存储和操作的数据结构。它们分为四种类型：序列容器、关联容器、无序关联容器和容器适配器。</p>
<p><code>std::vector</code>：在运行时增长和收缩的动态数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; my_vector;</span><br></pre></td></tr></table></figure>
<p><code>std::list</code>：双向链表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; my_list;</span><br></pre></td></tr></table></figure>
<p><code>std::set</code>：按键值排序的元素的集合。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="type">int</span>&gt; my_set;</span><br></pre></td></tr></table></figure>
<p><code>std::unordered_set</code>：没有特定顺序的独特元素的集合。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unordered_set&lt;<span class="type">int</span>&gt; my_unordered_set;</span><br></pre></td></tr></table></figure>
<p><code>std::stack</code>：栈</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::stack&lt;<span class="type">int</span>&gt; my_stack;</span><br></pre></td></tr></table></figure>
<p><code>std::queue</code>：队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>&gt; my_queue;</span><br></pre></td></tr></table></figure>
<p>未完待续 ~</p>
<p><strong>算法</strong>：STL 提供了几种通用算法，可用于对容器中存储的数据执行各种操作。</p>
<p>它们分为五类：非修改序列算法、修改序列算法、排序算法、排序范围算法和数值算法。</p>
<p>一些示例包括<code>std::find</code>、<code>std::replace</code>、<code>std::sort</code>和<code>std::binary_search</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序算法（从小到大）</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; my_vec = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::<span class="built_in">sort</span>(my_vec.<span class="built_in">begin</span>(), my_vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>
<p><strong>迭代器</strong>：迭代器是 STL 中的一个基本概念，因为它们提供了访问容器中元素的统一方法。</p>
<p>迭代器可以被认为是<strong>指针的高级形式</strong>。</p>
<p><strong>每个容器都有</strong>自己的迭代器类型，可<strong>用于遍历元素和修改值</strong>。</p>
<p>最常见的迭代器操作是<code>begin()</code>和 ，<code>end()</code>分别用于获取指向容器的第一个元素和最后一个元素之后的迭代器。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历元素</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; my_vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//定义一个动态数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = my_vec.<span class="built_in">begin</span>(); it != my_vec.<span class="built_in">end</span>(); ++it) &#123;<span class="comment">//for循环</span></span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//通过解引用操作符 *，可以访问迭代器所指向的元素。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多线程">多线程</h2>
<p>多线程是程序中多个线程的<strong>并发执行</strong>。</p>
<p>通过<strong>同时执行</strong>多个任务来提高应用程序的性能和效率。</p>
<p><strong>基本线程的创建</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;This function is executing in a separate thread&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(my_function)</span></span>;<span class="comment">//创建了一个名为 t 的线程对象，并将 my_function 作为新线程的执行函数。</span></span><br><span class="line">    t.<span class="built_in">join</span>(); <span class="comment">//在主线程中等待新线程执行完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>互斥量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;<span class="comment">//定义了一个互斥量对象 mtx，它将用于保护共享资源，确保在任何时候只有一个线程能够访问它。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_block</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span> </span>&#123;<span class="comment">//以n为次数打印字符c。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">locker</span><span class="params">(mtx)</span></span>;<span class="comment">//创建一个独占锁，一旦一个线程获得了锁，其他线程就无法获得，直到释放。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cout &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//创建了两个线程 t1 和 t2</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(print_block, <span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(print_block, <span class="number">50</span>, <span class="string">&#x27;$&#x27;</span>)</span></span>;</span><br><span class="line"><span class="comment">//等待两个线程执行完成。确保在主线程结束之前，等待所有的子线程执行完成。</span></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了互斥量 <code>std::mutex</code> 来<strong>避免竞态条件</strong>。</p>
<p>如果没有互斥量，两个线程 <code>t1</code> 和 <code>t2</code> 可能会同时访问 <code>std::cout</code>，导致输出的字符交叉、混乱，从而产生竞态条件。</p>
<p>通过使用互斥量，每个线程在访问共享资源之前都会尝试获得锁，确保只有一个线程能够执行打印操作，从而避免了竞态条件的发生。</p>
<h2 id="模板">模板</h2>
<p>C++ 中的模板是一项强大的功能，用来编写通用代码。模板：<code>template</code>关键字</p>
<p>这意味着可以编写能够<strong>处理不同数据类型</strong>的单个函数或类，这意味着不需要为每种数据类型编写单独的函数或类。</p>
<p><strong>模板函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//模板头</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;<span class="comment">//判断哪个数更大</span></span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//可以显式指定数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">max</span>(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//也可以让编译器自行推断</span></span><br></pre></td></tr></table></figure>
<p><strong>模板类</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;<span class="comment">//模板头</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T1 first;</span><br><span class="line">    T2 second;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pair</span>(T1 first, T2 second) : <span class="built_in">first</span>(first), <span class="built_in">second</span>(second) &#123;&#125;<span class="comment">//类的构造函数，初始化成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Pair&lt;<span class="type">int</span>, std::string&gt; <span class="title">pair</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>)</span></span>;<span class="comment">//实例化类对象并传参</span></span><br></pre></td></tr></table></figure>
<p><strong>可变参数模板</strong></p>
<p>定义具有可变数量参数的模板。</p>
<p>当需要编写可以接受<strong>不同数量</strong>和类型的参数的函数或类时，这特别有用。</p>
<p>表示：<code>template &lt;typename... Args&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 基本模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t, Args... args)</span> </span>&#123;<span class="comment">//对多个数求和</span></span><br><span class="line">  <span class="keyword">return</span> t + <span class="built_in">sum</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);  <span class="comment">// expands to 1 + 2 + 3 + 4 + 5</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;The sum is: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用">引用</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">server_client::AddInts::Request &amp;req</span><br></pre></td></tr></table></figure>
<p>在C++中，声明一个名为 <code>req</code> 的变量，且该变量是 <code>Request</code> 类型的一个引用，这种做法在多种场景下都非常有用。以下是一些关键的应用场景和优势：</p>
<ol>
<li><strong>避免不必要的拷贝</strong>：<br>
当 <code>Request</code> 类型包含大量数据或复杂结构时，通过引用传递可以避免在函数调用或参数传递过程中进行昂贵的拷贝操作。这能够显著提升程序的性能，特别是当处理大型数据结构时。</li>
<li><strong>直接修改原始数据</strong>：<br>
通过引用传递的变量（如 <code>req</code>）允许函数或方法直接修改其引用的原始数据。这在需要更新或修改传入参数的场景中非常有用。</li>
<li><strong>保持数据一致性</strong>：<br>
在某些情况下，确保数据的一致性和准确性至关重要。通过引用传递，可以确保所有操作都在同一份数据上进行，从而避免了数据不同步或丢失更新的风险。</li>
<li><strong>提高代码可读性</strong>：<br>
使用引用可以使代码更加清晰和易于理解。通过明确标注参数是通过引用传递的，可以更容易地推断出函数或方法可能会修改其参数。</li>
<li><strong>支持多态性</strong>：<br>
在面向对象编程中，引用常用于支持多态性。通过基类引用指向派生类对象，可以实现动态绑定和运行时多态性。</li>
<li><strong>函数返回引用</strong>：<br>
虽然不直接相关于你的例子，但值得一提的是，函数也可以返回引用。这允许函数返回一个对内部数据结构的直接引用，而不是其拷贝。</li>
<li><strong>与STL容器和算法协同工作</strong>：<br>
C++标准模板库（STL）中的许多算法和容器都使用引用来操作元素。通过引用传递，可以确保这些算法和容器能够高效地处理数据。</li>
</ol>
<p>在你的特定情况下，如果 <code>req</code> 是作为某个函数或方法的参数传递的，并且该参数需要被修改或包含大量数据，那么使用引用传递是一个明智的选择。这样做不仅可以提高性能，还可以使代码更加简洁和易于维护。</p>
<p>请注意，当使用引用时，必须确保引用的对象在引用的生命周期内始终有效。如果引用的对象被销毁或变得无效，那么通过该引用进行的任何操作都可能导致未定义行为。因此，在使用引用时需要格外小心。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>1.20总结</title>
    <url>/2024/01/21/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/1-20%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="a3be3caa83de410ac795edddc03bb364344dccef1655b3d8217b09a622aa3fcb">60fd0739c5a82ca45262b2f3393acd53fd31bca53c334bb8932a0f6239abd0ae741c8c3f2a20d75e28b189146242deb9332b5d1a54b6f087496383247c18b5abe4be8fc7653c8806b7744385ac0ef5e1e7d4a30f9239e4c9447ea2d3ff76af551d2d5d90c216b7f1e920d00059db86512c118c402a43d15c4b7dd070cb512ef94430e5dda1c8c35e36e1053c4faf8e5acf31a38da095304d48f0f4f56e541a4d0d1186cce94606e44f7480cb019d9503cb8e48b75c439afbd4334ae64874d8d8d5403208dae29efdeef6e6a39c96486ba206f8b63291f61371887de995f7866512949845d71ac8c0efe6aa90bd41afaafd4ae7a89448fb1835b092e381aed58e3687111eb9755e7c5dd230973061a91763eda8c21e22ef4548e3b6db489433aa1e47dd2580f344ad4d042df556f6446565ff6a583eb5504f38d46d3c5199169676d461fc164714068d6824e2518d6f657c45125bbe37fb0367f098020ffe5cd5a79fc3fc7161da508947058cd8fe1dea384903556936f4bc284720926d03a1ab0d43c3eec684c95febf04dd0a3b6245bebfa1241381eac209dea18e857388fc6ad14408fa89374ae5503f8e8077e83a86c0f25b5a3ddd1f8012ed58d95c5ee068c96c2506cb1f9d4496e87c8691aa759401804b659b99f4442c18da1c59f059536d561e0bd2318cf7ea578d49d68c1ee7008feeeb489edf7e70202a36f2ecff8d437ef9dc60a9a6c61dff57aa1c51f20888bada4f1fd331f30ac3bda3d9917381763419be0d0cc9a0f133ad89d113df6abdfa01d921cb62653560e85d117cc3945b2fe2594f7e25d4796a40d2d7172e334c240cb3c7f9f883924e589036488a6a07ce449f4ce67398abea1cb94e0c487af90ed54f6d117707e5cb41ebb16b207c943a8b8c50b78be0640ef0e6b644cfde134372543b676723f37a965b7f2e1679fe873f74b2e2d73d8d593c7c4b93d23a624853fa7fe8f37466299a9d11dd8e8bbb71114ec220ee2babf39d2e20645ff3a4a1d4ce1c654deca62d40c949c3aa6b779b2eeedf575bcce6a88a4d58a116d807f04152c01d673584134b3335e1178743820e73fc0915531630d8f51c052ff01691757602bd0ecac541857222a424b6192759d395be7fc5a3064578055508af6c1bc9c9e97a8e344d2b61e31e579350d2b2c8e1fb430a632bd4bd98c58c9f2c2f519e561a2fc7b9bb558ff3374790eb64e289004358a32909fe4e160192c47116c92c76f86a224dd5593729deb2d3906fc5870b2cbfdb0c8fa0fc49186793be8b5802bf77b526d269099abd4b9a80aa23435ba417d351a3c5e18778e10785fa45ab4822da2b38157e876a48f7f183c80b4c1b59de51a56ea62c5144b1d422fb0ab84a3b2f335c264aab379dac82936d2f85796eacf86817603cb9728a9143dc7bdcc7fa935947272dd1177d45602057ba4f0e499b84e9104e02e54ec5b983c483a0ff36788c129f6f99c3adacd0db12b684f1e71585ef5f2fc4ffa483dc097f78da6496dd7d7ff2d34486a86f24abe3080304ff74a73d412bce92ac47b87e69d811dabc773958bfc66cbdb80d1a65b75232786f85c72e834a03ce7ad2e6dfadb17b9d721b54519bf529077b026010575824167cbb6ee15105b99625075f6de50fc7b0abca09beea941492972a2e67f958b17da8614360fa91b573d0cd2d34ee98a11c09e819d2451a87b8294240c19df7a1649ea36ebf058b19d40aa3a46cee1123bc1aca67f1a141cff52b727a6df4b2cc6e49f258989915a2960390db51486204e14efc695a2e1b811512e858f2a6edfe8b9d710ae81c0adb42ddc9696635132a279ed55065d0918937868066bbb2aa68079da973d344f793762d95a278c5c349dc8847b79d3c333ec3d1fb0ee236f90b884ad8d6319c777b15f38fffca7d67d93ff337bc96454a0e38e8c3396ef0a9a6413dfab8614d639ab2cb364209e7c6baec94c93597c08fe97154f33c525ee7678b2a8842f9a42acb7442ae0f69bb1b0d74b51d3a45e5cadf23331f35931b5ea229240a0aae0b4e82ddbfd57abc693e73d2b95302a18cdde5d0e9bad1a4bcaf7fbcbba8a1e4eb6c4e855197c622d19b7bc9b242abd64075526a86328ad8dd536389a667476e54f96547a1464a73d33fd108d72d85f9611549aa4aa7713da1436f5019323927b640541be9505233442f3b77dc8efbae8f8d444b3d3e394e3e6a5ee8e9f7eb5ad800b1008bc83eb0807bfbc7c8f04ae9586db74c19bc78209e4d45d3d885c13807080860f0617857841a527c8545af3bbadbf8e97229fe14814462ef66a65082a74d69ea95623a7e86a3e50719fb87f0d05acedcc54e2b0326450b6446d5574fca356dc4b1566e61a3dee9a6ef6b69550f2cf81d9b532d25fb8ebc5059189748403569214a1264c85962d91764c1a7ad7772ca40a3da9fc69c0f68a5ce6140d68a29c9814acbaea4ae52d2bfa232731b5d4bc9fd60be8c04d663894b141829924a8e743b00841189a3d46c2dbfdf88a47681d4ff7bf293927fef190a8497bcd898b2dd7de0999b4c87abdbde9c3160d79f80d7cd4504884fdeb359693af0b1364d6cd482180e3782b60a2ca237eb42011ed2ca720b014e0c67f3550eb8d3659d90e68b66ccce5dff477c9ebc8e236fa5e1db4b267f3737103319004ec3a7942b36ca75648f94f10abe420ceff1ad0ba6c7e68c69281044afb416b8eafac29985f3bc37f5718d06abb08d5bbc73a4af51b3c8f6d6999b521bc2fa0560ab2ffda2fb32f961c01315d724bcab2b3d07367554e4dfc866b60c804</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone问题</title>
    <url>/2024/01/18/%E9%81%87%E5%88%B0%E7%9A%84bug/git-clone%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>昨天晚上看到一位陌生人的博客加载十分流畅，切换页面时不需要重新加载侧边栏。</p>
<p>在该博客中找到教程，需要下载<strong>pjax插件</strong>。</p>
<p>但是在git clone插件的时候却出现了连接不到该地址的报错。</p>
<span id="more"></span>
<p>经过各种查询最终得知，我的deploy地址是ssh形式而非https。</p>
<p>ssh：git@github.com:theme-next/theme-next-pjax.git</p>
<p>https：<a href="https://github.com/theme-next/theme-next-pjax.git">https://github.com/theme-next/theme-next-pjax.git</a></p>
<p><strong>将https形式改为ssh</strong></p>
<p>git clone <a href="mailto:git@github.com">git@github.com</a>:theme-next/theme-next-pjax source/lib/pjax</p>
<p>连接成功！</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-18_00-18-25.png" alt=""></p>
]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>博客问题</tag>
      </tags>
  </entry>
  <entry>
    <title>博客上传问题</title>
    <url>/2024/01/17/%E9%81%87%E5%88%B0%E7%9A%84bug/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%97%AE%E9%A2%98%E5%BE%97%E4%BB%A5%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>下午打开博客的时候突然发现烟花特效消失，于是赶紧去重新修改文件，但是最后上传的时候又给我报错。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-28-43.png" alt=""></p>
<span id="more"></span>
<p>这个报错从搭建博客的时候就不时出现，最近的一次是在11号晚上。</p>
<p>那次我修改了上传github的方式，将https改为ssh，然后就没有再出现这个问题。</p>
<p>但是今天下午五点半我用同样的方法却无法奏效。</p>
<p>然后就是不断地百度，查CSDN。</p>
<p>一开始以为是自己的deploy方式出错，然后重新把github与博客进行绑定，但还是无济于事。</p>
<p>于是翻到最开始的博客搭建教程，发现输入ssh -T git@github.com时，无法连接到github。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-36-58.png" alt=""></p>
<p>然后又是去各种搜索，最后终于找到解决方法。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-38-55.png" alt=""></p>
<p>按照上述教程将22端口换至443端口。</p>
<p>最后终于弄好了!</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-40-18.png" alt=""></p>
<p>然后就是再次上传，看到Deploy done: <strong>git</strong>时给我激动坏了！</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2024-01-17_19-41-41.png" alt=""></p>
<hr>
<p>从五点半到七点半，这一个问题就搞了两个小时。中途几度绝望，因为博客无法上传就意味着博客无法更新内容，就意味着最终博客会被弃用。从12月29日到1月15日，这半个月里，我抽出时间搭建了属于我自己的博客，期间遇到不少困扰我的问题，但最终都会在网上找到答案。或许我遇到的问题在这个世界上早就有人遇到过，最后还提供了解决方法共享在网上。所以啊，要好好利用互联网这个最强大的学习工具。遇到的问题总会有解决的方法，事虽难，做则可成！</p>
]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>博客问题</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构笔记</title>
    <url>/2024/01/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>村雨在进行数据结构期末复习时整理的笔记。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720220730001638.jpg" style="zoom: 25%;" />
<span id="more"></span>
<hr>
<h1>一、绪论</h1>
<h3 id="1-数据结构的基本概念">1.数据结构的基本概念</h3>
<p><strong>数据</strong>由<strong>数据元素</strong>组成，数据元素由<strong>数据项</strong>组成。</p>
<p><strong>数据元素</strong>是讨论数据结构时涉及的<strong>最小数据单位</strong>，其中的<strong>数据项一般不予考虑</strong>。</p>
<p><strong>数据结构</strong>：相互之间存在一定关系的数据元素的集合。可以认为是一堆数据元素和这些数据元素之间的关系的总和，换句话说，数据结构是带&quot;结构&quot;的数据元素的集合。</p>
<p>数据结构分为<strong>逻辑结构</strong>和<strong>存储结构（物理结构）</strong></p>
<p><strong>逻辑结构</strong>：指数据元素之间的<strong>逻辑关系</strong>。即从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的。</p>
<p><strong>集合</strong>结构： 仅同属一个集合，为使用方便，一般处理为线性结构。</p>
<p><strong>线性</strong>结构:    一对一（1:1) 的<strong>线性</strong>关系</p>
<p><strong>树</strong>结构:    一对多（1:n)的层次关系</p>
<p><strong>图</strong> 结 构:   多对多  (m:n)的任意关系</p>
<p><strong>存储结构</strong>是数据逻辑结构在计算机中的<strong>表示</strong>，包括数据元素的表示和关系的表示。</p>
<p>存储结构通常有两种：</p>
<ol>
<li>
<p><strong>顺序</strong>存储结构：用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示。</p>
</li>
<li>
<p><strong>链接</strong>存储结构：用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示 。</p>
</li>
</ol>
<h3 id="2-算法及特性">2.算法及特性</h3>
<p>1.算法（Algorithm）:是对特定问题求解步骤的一种描述，是指令的<strong>有限序列。</strong></p>
<p>2.算法的五大特性：<br>
⑴ <strong>输入</strong>：一个算法有零个或多个输入。<br>
⑵ <strong>输出</strong>：一个算法有一个或多个输出。（必须有输出）<br>
⑶ <strong>有穷性</strong>：一个算法必须总是在执行有穷步之后结束，且每一步都在有穷时间内完成。<br>
⑷ <strong>确定性</strong>：算法中的每一条指令必须有确切的含义，对于相同的输入只能得到相同的输出。<br>
⑸ <strong>可行性</strong>：算法描述的操作可以通过已经实现的基本操作执行有限次来实现。</p>
<p><strong>好算法</strong>的特性:易读性，高效性，<strong>鲁棒性</strong>，正确性</p>
<p>2.<strong>算法分析</strong>（Algorithm Analysis）：对算法所需要的计算机资源——时间和空间进行估算</p>
<p><strong>时间复杂度</strong></p>
<p><strong>空间复杂度</strong></p>
<p>通常，一个特定算法的执行时间，即“运行工作量”的大小，是随问题规模的增长而增长，<strong>只</strong>依赖于问题的规模（通常用整数量 n 表示），或者说，它是<strong>问题规模</strong>的函数<strong>f(n)</strong>。</p>
<p>因此衡量不同算法的优劣，应该以其随问题规模的增长而“增长的趋势”为准则。称这种算法时间的量度为算法的渐近时间复杂度，简称时间复杂度，记作为：<strong>T (n) = O(f(n))</strong></p>
<p>称**T(n)**为算法的(渐近)**时间复杂度。**它表示随着问题规模 n 的增长，算法执行时间的增长率和 f(n) 的增长率相同，把T(n)作为算法的时间度量。</p>
<p>分析算法的时间复杂度的核心是<strong>分析算法中基本操作的重复次数。</strong></p>
<p>通常用Ο(1)表示<strong>常数</strong>计算时间。</p>
<p>（1）对于多项式复杂度来说，计算时去低阶项，去掉常数项，去掉高阶项的系数。</p>
<p>（2）最坏情况复杂性，指在规模为n时，算法所执行的基本运算的最大次数。</p>
<p>以下六种计算算法时间的多项式是最常用的，其关系为：<br>
<strong>O(1)&lt;O(㏒n)&lt;O(n)&lt;O(n㏒n)&lt;O(n2)&lt;O(n3)</strong><br>
非多项式时间的关系为：<br>
<strong>O(2n)&lt;O(n!)&lt;O(nn)</strong></p>
<hr>
<h1>二、线性表</h1>
<h3 id="1-线性表及其逻辑结构">1.线性表及其逻辑结构</h3>
<p>线性表：简称表，是n（n≥0）个具有<strong>相同类型</strong>的数据元素的<strong>有限序列</strong>。</p>
<p>线性表的长度：线性表中数据元素的个数。</p>
<p>空表：长度等于零的线性表，记为：L=(  )。</p>
<p>非空表记为：L＝(a1, a2 , …, ai-1, ai , …, an )</p>
<p>其中，ai（<strong>1≤i≤n</strong>）称为数据元素；下角标 i 表示该元素在线性表中的<strong>位置或序号</strong> 。</p>
<h3 id="2-线性表的特性">2.线性表的特性</h3>
<ol>
<li>
<p><strong>有限性</strong>：线性表中数据元素的个数是<strong>有穷的</strong>。</p>
</li>
<li>
<p><strong>相同性</strong>：线性表中数据元素的类型是<strong>相同的</strong>。</p>
</li>
<li>
<p><strong>顺序性</strong>：线性表中相邻的数据元素ai-1和ai之间<strong>存在序偶关系</strong>(ai-1, ai)，即ai-1是ai的前驱， ai是ai-1的后继；a1无前驱，an无后继</p>
<p>其它每个元素<strong>有且仅有</strong>一个前驱和一个后继。</p>
</li>
</ol>
<h3 id="3-线性表的顺序存储结构（顺序表）">3.线性表的顺序存储结构（顺序表）</h3>
<p>顺序表通常使用一维数组，用一段地址连续的存储单元依次存储线性表中的数据元素。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-07_10-50-16.png" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-07_10-53-34.png" alt="Snipaste_2023-12-07_10-53-34"></p>
<p>顺序表的存储结构为<strong>随机存取结构</strong>。</p>
<p>只要确定了顺序表的起始地址（或数组的基地址），就可以计算任意一个元素的存储地址，并且计算时间是相等的。</p>
<p><strong>顺序表的优点：</strong><br>
⑴ <strong>无需</strong>为表示表中元素之间的逻辑关系而<strong>增加额外的存储空间</strong>；<br>
⑵ 随机存取：可以<strong>快速地存取</strong>表中任一位置的元素。<br>
<strong>顺序表的缺点：</strong><br>
⑴ <strong>插入</strong>和<strong>删除</strong>操作需要<strong>移动大量元素</strong>；<br>
⑵ 表的<strong>容量难以确定</strong>，表的<strong>容量难以扩充</strong>；<br>
⑶ 造成存储空间的碎片。</p>
<h3 id="4-线性表的链接存储结构（链表）">4.线性表的链接存储结构（链表）</h3>
<p>用一组<strong>任意的</strong>存储单元存放线性表的元素。</p>
<p><strong>存储特点：</strong></p>
<p>1.逻辑次序和物理次序不一定相同。</p>
<p>2.元素之间的逻辑关系用指针表示。</p>
<p>单链表是由若干结点构成的。单链表的结点结构：数据域+指针域</p>
<p>**data：**存储数据元素</p>
<p>**next：**存储指向后继结点的地址</p>
<p>单链表是一种<strong>顺序存取</strong>的链式存储结构。</p>
<p>一些<strong>特殊</strong>链表：</p>
<p><strong>循环链表</strong>:将单链表的<strong>首尾相接</strong>，将终端结点的指针域由空指针改为指向头结点，构成单循环链表，简称循环链表。</p>
<p><strong>双向链表</strong>：在单链表的每个结点中<strong>再</strong>设置一个<strong>指向其前驱结点</strong>的指针域。</p>
<p><strong>静态链表</strong>：用数组来表示单链表，用数组元素的下标来模拟单链表的指针。</p>
<p>相对于顺序表而言，静态链表有什么<strong>优点</strong>？</p>
<p>答：优点：在执行<strong>插入</strong>和<strong>删除</strong>操作时，只需修改游标，<strong>不需要移动</strong>表中的元素，从而改进了在顺序表中插入和删除操作需要移动大量元素的缺点。<br>
缺点：没有解决连续存储分配带来的表长难以确定的问题；静态链表还需要维护一个空闲链；静态链表不能随机存取。</p>
<p>顺序表和链表的<strong>比较</strong>：</p>
<p>1.<strong>时间性能的比较：</strong></p>
<p><strong>按位查找：</strong><br>
顺序表的时间为Ｏ(1)，是随机存取；<br>
链表的时间为Ｏ(n)，是顺序存取。<br>
<strong>插入和删除</strong>：<br>
顺序表需移动表长一半的元素，时间为Ｏ(n)；<br>
链表不需要移动元素，在给出某个合适位置的指针后，插入和删除操作所需的时间仅为Ｏ(1)。</p>
<p>2**.空间性能的比较：**</p>
<p>空间性能是指某种存储结构所占用的存储空间的大小。<br>
定义结点的<strong>存储密度</strong>：<br>
存储密度＝数据域占用的存储量/整个结点占用的存储量<br>
结点的存储密度：<br>
<strong>顺序表</strong>：结点的<strong>存储密度为1</strong>（只存储数据元素），没有浪费空间；<br>
<strong>链表</strong>：结点的<strong>存储密度&lt;1</strong>（包括数据域和指针域），有指针的结构性开销。</p>
<p>顺序表：<strong>需要预分配存储空间</strong>，如果预分配得过大，造成浪费，若估计得过小，又将发生上溢；<br>
链表：<strong>不需要预分配空间</strong>，只要有内存空间可以分配，单链表中的元素个数就没有限制。</p>
<p>结论：</p>
<p>⑴若线性表需频繁查找却很少进行插入和删除操作，或其操作和元素在表中的位置密切相关时，宜采用<strong>顺序表</strong>作为存储结构；若线性表需频繁插入和删除时，则宜采用<strong>链表</strong>做存储结构。</p>
<p>⑵当线性表中元素个数变化较大或者未知时，最好使用<strong>链表</strong>实现；而如果用户事先知道线性表的大致长度，使用<strong>顺序表</strong>的空间效率会更高。</p>
<h1>三、栈和队列</h1>
<p>两种特殊的<strong>线性表</strong>——栈和队列</p>
<p>但是操作受限，<strong>插入和删除</strong>只能在表的“端点”进行。</p>
<h3 id="1-栈">1.栈</h3>
<p>栈：限定<strong>仅在一端</strong>进行插入和删除操作的线性表。</p>
<p><strong>栈顶</strong>（top）：允许插入和删除的一端称为栈顶<br>
<strong>栈底</strong>（bottom）：另一端称为栈底</p>
<p>栈的操作特性：<strong>后进先出</strong>（Last  In  First  Out，LIFO）（<strong>先进后出</strong>）</p>
<p>n个元素按次序进栈后的出栈序列个数：<br>
$$<br>
（1/n+1）*C n 2n<br>
$$<br>
栈只是对插入和删除操作的<strong>位置</strong>进行了限制并没有限定插入和删除操作进行的时间</p>
<p>tip：在输出序列中任意元素<strong>后面</strong>不能出现<strong>比该元素小并且是升序的两个元素。</strong>（元素大小体现的是入栈次序，小表示先入栈。）</p>
<h4 id="顺序栈：栈的顺序存储结构"><strong>顺序栈</strong>：栈的顺序存储结构</h4>
<p>如何<strong>表示栈底</strong>：用数组的一端作为栈底</p>
<p>如何<strong>表示栈顶</strong>：设变量top存储栈顶元素所在的下标（从0开始）</p>
<h4 id="链栈：栈的链接存储结构"><strong>链栈</strong>：栈的链接存储结构</h4>
<p>用<strong>链头</strong>作为<strong>栈顶</strong></p>
<p>链栈无须加头结点</p>
<h4 id="两栈共享空间">两栈共享空间</h4>
<p>使用一个数组来存储两个栈，让一个栈的栈底为该数组的始端，另一个栈的栈底为该数组的末端，两个栈从各自的端点<strong>向中间延伸</strong>。</p>
<p>什么时候栈1为空？top1== -1</p>
<p>什么时候栈2为空？top2== StackSize</p>
<p>什么时候栈满？top2== top1+1</p>
<h3 id="2-队列">2.队列</h3>
<p>队列：只允许在表的<strong>一端进行插入</strong>操作，在<strong>另一端进行删除</strong>操作</p>
<p><strong>队尾</strong>：允许插入的一端，相应地，位于队尾的元素称为队尾元素（入队）</p>
<p><strong>队头</strong>：允许删除的一端，相应地，位于队头的元素称为队头元素（出队）</p>
<p>队列的操作特性：<strong>先进先出</strong>（First  In  First  Out，FIFO）</p>
<h4 id="顺序队列：队列的顺序存储结构">顺序队列：队列的顺序存储结构</h4>
<p>如何表示<strong>队头</strong>：用数组的一端作为队头，从下标 0 处开始存放</p>
<p>如何表示<strong>队尾</strong>：设变量rear存储队尾元素所在的下标</p>
<p><strong>如何改进出队操作的时间性能？</strong></p>
<p>设置队头、队尾两个位置指针。front和rear</p>
<p>约定：队头front指向队头元素的前一个位置，队尾rear指向队尾元素</p>
<p>入队、出队时间性能均是O(1)</p>
<p><strong>产生的问题</strong>：整个队列会向数组下标较大方向移动（单向移动性）</p>
<p>从而造成假溢出：数组空间发生<strong>上溢</strong>，但数组的<strong>低端还有空闲空间</strong></p>
<p><strong>解决方法</strong>：循环队列</p>
<h4 id="循环队列">循环队列</h4>
<p>队列采用顺序存储，并且数组是<strong>头尾相接</strong>的循环结构</p>
<p><strong>程序技巧</strong>：求模（正余数）使得数组下标循环。如rear = (rear + 1) % 5</p>
<h4 id="链队列：队列的链接存储结构">链队列：队列的链接存储结构</h4>
<p>链头作为队头，出队时间为O(1)，队头指针front指向单链表的头结点</p>
<p>链尾作为队尾，入队时间为O(n)，队尾指针rear指向单链表的尾结点</p>
<p><strong>可以没有头结点</strong>，但增加头结点的目的是使空队列和非空队列的操作一致</p>
<p><strong>循环队列和链队列的比较</strong></p>
<p>时间性能:循环队列和链队列的基本操作都需要常数时间O (1)。</p>
<p>空间性能:</p>
<p>循环队列：必须<strong>预先确定一个固定的长度</strong>，所以有<strong>存储元素个数的限制</strong>和<strong>空间浪费</strong>的问题。</p>
<p>链队列：<strong>没有队列满</strong>的问题，只有当内存没有可用空间时才会出现队列满，但是<strong>每个元素都需要一个指针域</strong>，从而产生了<strong>结构性开销。</strong></p>
<h3 id="3-栈和队列的应用">3.<strong>栈和队列的应用</strong></h3>
<h4 id="数值转换">数值转换</h4>
<h4 id="括号匹配">括号匹配</h4>
<h4 id="表达式求值">表达式求值</h4>
<p>表达式的三种标识方法：设  Exp = S1 + <strong>OP</strong> + S2 （OP为运算符）</p>
<p>则称    <strong>OP</strong> + S1 + S2       为前缀表示法</p>
<p>​            S1 + <strong>OP</strong> + S2      为中缀表示法</p>
<p>​            S1 + S2 + <strong>OP</strong>       为后缀表示法（逆波兰式）（所有的运算符都在对应的操作数后面出现）</p>
<p>为了在后缀表达式中区分相邻的操作数，在每个操作数末尾添加一个<strong>字符“#”</strong>。<strong>后缀表达式中没有括号</strong>，只有操作数和运算符，越放在前面的运算符优先级越高。计算机就是**先将中缀表达式转换为后缀表达式，**然后再对后缀表达式求值。</p>
<p><strong>前缀式</strong>的运算规则为: 连续出现的两个操作数和在它们之前且紧靠它们的运算符构成一个最小表达式;</p>
<p><strong>后缀式</strong>的运算规则为: 运算符在式中出现的顺序恰为表达式的运算顺序; 每个运算符和在它之前出现且紧靠它的两个操作数构成一个最小表达式。</p>
<p><strong>中缀表达式</strong>求值：</p>
<p>1.运算符的优先级从高到低依次为( )、*和/ 、+和-、#；<br>
2.有括号出现时先算括号内的，后算括号外的，多层括号由内向外进行计算；<br>
3.左右括号优先级相等（唯一相等的情况）；<br>
4.左括号大于它左边的其它运算符（即其它&lt;(），小于它右边的其它运算符（即(&lt;其它）；<br>
5.右括号小于所有其它运算符（实际只能跟它左边的运算符比较）；<br>
6.优先级相同的普通运算符（如+和- ， *和/ ），谁在前优先级谁高。</p>
<p><strong>计算机</strong>中<strong>后缀表达式</strong>求值规则：</p>
<p>从左到右遍历表达式的每个数字和符号，遇到数字就进栈，遇到运算符就将处于栈顶的两个数字弹出并进行运算，然后将运算结果进栈，一直到获得最终结果。</p>
<p><strong>中缀表达式转后缀表达式规则</strong>：</p>
<p>1.从左到右遍历中缀表达式，如果是数字就直接输出，如果是运算符，则执行步骤2</p>
<p>2.判断其与栈顶运算符的优先级，若优先级相等，则肯定是“）”，栈顶的“（”直接出栈即可；</p>
<p>若优先级高，则直接入栈；</p>
<p>若优先级低，则栈顶元素依次出栈并输出，直到栈顶元素优先级低于当前运算符，当前运算符再入栈。</p>
<p>3.执行步骤1、2，一直遍历到表达式结束，栈中运算符依次出栈到栈空为止。</p>
<p>“(”=“)”</p>
<p>先入栈运算符&lt;“(”,“(”&lt;后入栈运算符</p>
<p>&quot;)&quot;小于所有其他运算符</p>
<p>+和-、*和/谁在前谁的优先级高</p>
<h1>四、串和矩阵</h1>
<h3 id="1-串">1.串</h3>
<p>串，由零个或多个<strong>字符</strong>组成的有限序列，是一种<strong>特殊类型的线性表</strong>，也叫<strong>字符串。</strong></p>
<p><strong>非空串</strong>：长度不为0的串，通常记为：S = &quot; s1 s2 …… sn &quot;</p>
<p>其中：S是<strong>串名</strong>，双引号是<strong>定界符</strong>，双引号内部是<strong>串值</strong> ，si（1≤i≤n）是一个任意字符。<br>
<strong>空串</strong>：长度为0的串，记为&quot;&quot; 。</p>
<p><strong>strCmp串比较</strong>：通过组成串的字符（ASCII码）之间的比较来进行</p>
<ul>
<li>[ ] 给定两个串：X=&quot;x1x2…xn&quot;和Y=“y1y2…ym”，则：</li>
</ul>
<ol>
<li>当且仅当n=m且x1=y1，…，xn=ym时，称<strong>X=Y</strong>；</li>
<li>当下列条件之一成立时，称<strong>X＜Y</strong>：<br>
⑴ n＜m且xi=yi（1≤ i≤n）；<br>
⑵存在k≤min(m,n)，使得xi=yi(1≤i≤k-1)且xk＜yk。</li>
<li>其它情况，称<strong>X&gt;Y</strong>。</li>
</ol>
<p><strong>串和线性表的比较</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-18-15.png" alt=""></p>
<p>在<strong>线性表</strong>的基本操作中，大多以“<strong>单个元素</strong>”作为操作对象；</p>
<p>在<strong>串</strong>的基本操作中，通常以“<strong>串的整体</strong>”作为操作对象。</p>
<p>串有<strong>两种</strong>存储方式：</p>
<p>1.顺序存储方式</p>
<p>2.块链存储方式</p>
<h4 id="串的顺序存储">串的顺序存储</h4>
<p>就是要用<strong>一段地址连续的存储空间</strong>存储串的内容。</p>
<p>如何记录存储空间的首地址？如何记录串的长度？</p>
<p><strong>方法1</strong>：用数组的<strong>0号单元</strong>存放<strong>串长</strong>，从<strong>1号单元</strong>作为存储空间<strong>首地址</strong>。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-22-25.png" alt=""></p>
<p><strong>方法2：<strong>在</strong>串尾</strong>存储一个不会在串中出现的特殊字符作为<strong>串的终结符</strong>，表示串的结尾。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-24-14.png" alt=""></p>
<h4 id="串的块链储存">串的块链储存</h4>
<p>链表存储串的例子：“shujujiegou”的存储</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231214112625121.png" alt="image-20231214112625121"></p>
<p>可用链表来存储串，由于串的数据元素是一个字符，因此每个链表结点的数据域为1个字符，占用内存的1个字节，而指针域为4个字节，<strong>存储密度低。</strong></p>
<p><strong>存储密度 = 数据元素存储空间/实际分配的存储空间</strong></p>
<p>上述例子的存储密度为：1/（1+4）=1/5</p>
<p>链表存储串方法的<strong>改进-块链</strong>：“shujujiegou”的存储</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231214112911246.png" alt="image-20231214112911246"></p>
<p>链表各结点存储多个字符，存储密度高。</p>
<p>上述例子的存储密度为4/（4+4）=1/2</p>
<h4 id="串的模式匹配">串的模式匹配</h4>
<p>给定<strong>主串S</strong>=“s1s2…sn”和<strong>子串T</strong>=“t1t2…tm”，在S中寻找T 的过程称为模式匹配，又称为子串定位。</p>
<p>如果匹配成功，返回T 在S中的位置；如果匹配失败，返回-1。</p>
<p>在模式匹配操作中，<strong>S</strong>又可以称为<strong>目标串</strong>，<strong>T</strong>又称为<strong>模式串。</strong></p>
<p>模式匹配算法：<strong>BF算法</strong>和<strong>KMP算法</strong></p>
<h5 id="BF算法">BF算法</h5>
<p>即Brute Force算法，特点是<strong>暴力匹配</strong>。</p>
<p><strong>基本思想：</strong></p>
<p>从目标串S的第一个字符开始和模式串T 的第一个字符进行比较。</p>
<p>若相等，则继续比较两者的后续字符；否则，从主串S的第二个字符开始和模式T 的第一个字符进行比较，重复上述过程。</p>
<p>直到<strong>T 中</strong>的字符全部比较完毕，则说明本趟<strong>匹配成功</strong>；或<strong>S中</strong>的字符全部比较完，则说明<strong>匹配失败</strong>。</p>
<p><strong>过程</strong>：</p>
<ol>
<li>在串S和串T中设比较的起始下标i和j；</li>
<li>循环直到S或T的所有字符均比较完<br>
2.1 如果S[i]=T[j]，继续比较S和T的下一个字符；<br>
2.2 否则，将i和j<strong>回溯</strong>，准备下一趟比较；</li>
<li>如果T中所有字符均比较完，则匹配成功，返回匹配的起始比较下标；否则，匹配失败，返回0；</li>
</ol>
<p>代码实现：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_11-40-36.png" style="zoom:80%;" />
<h5 id="KMP算法">KMP算法</h5>
<p>是对BF算法的改进，主要是<strong>消除了主串指针的回溯</strong>，从而使算法效率有了较大程度的提升。</p>
<p>核心步骤是要求出T模式串的next[j]函数。</p>
<p>如下图所示，其实就是找<strong>前后缀</strong>相同。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231214202544.jpg" alt=""></p>
<p>找到next[j]函数后，进行以下操作。</p>
<p>下图的next[j]=[-1,0,0,1,2]</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231214203119.jpg" alt=""></p>
<p>判断j在哪一个位置匹配失败，然后找到对应位置的next值k，下一趟则让j指向T[k]，</p>
<p>只不过<strong>并不是令j回溯</strong>，而是令T模式串整体向右移动，使得j指向T[k]，</p>
<p>如果i=j，说明匹配成功，i和j同时右移一位。</p>
<p><strong>KMP比较抽象，但是却大幅度地优化了BF算法。</strong></p>
<h3 id="2-数组">2.数组</h3>
<p>数组：由一组<strong>类型相同</strong>的数据元素构成的有序集合，每个数据元素称为一个数组元素（简称为元素）</p>
<p>数组的<strong>特点</strong>：</p>
<p>1.元素本身可以具有某种结构，属于同一数据类型；<br>
2.数组是一个具有固定格式和数量的数据集合。</p>
<p>在数组上一般<strong>不能</strong>执行<strong>插入</strong>或<strong>删除</strong>某个数组元素的操作</p>
<p>数组的<strong>基本操作：</strong></p>
<p><strong>存取</strong>：给定一组下标，读出对应的数组元素</p>
<p><strong>修改</strong>：给定一组下标，存储或修改与其相对应的数组元素</p>
<p>如何存储（多维）数组呢？</p>
<p>按<strong>行优先</strong>：先存储行号较小的元素，行号相同者先存储列号较小的元素</p>
<p>按<strong>列优先</strong>：先存储列号较小的元素，列号相同者先存储行号较小的元素</p>
<h3 id="3-特殊矩阵">3.特殊矩阵</h3>
<p>矩阵中很多值相同的元素并且它们的分布有一定的规律。主要形式有<strong>对称</strong>矩阵、<strong>三角</strong>矩阵、<strong>对角</strong>矩阵等，<strong>都是方阵。</strong>（n*n型）</p>
<p>存储的基本思路：<strong>为多个值相同的元素只分配一个存储空间</strong>；保证随机存取，即在O(1)时间内寻址。</p>
<p><strong>对称矩阵的压缩存储</strong>：只存储下三角部分的元素。</p>
<p><strong>三角矩阵的压缩存储</strong>：只存储上三角部分（或下三角）的元素和其余部分的任意c 值。（相同的常数）</p>
<p><strong>对角矩阵的压缩存储</strong>：所有非零元素都集中在以主对角线为中心的带状区域中，除了主对角线和它的上下方若干条对角线的元素外，所有其他元素都为零。</p>
<h3 id="4-稀疏矩阵">4.稀疏矩阵</h3>
<p>稀疏矩阵：矩阵中有很多零元素，非零元个数远远小于矩阵元素总个数。</p>
<p>非零元的分布没有规律，具有随机性。存储的基本思路：<strong>对零元素不分配存储空间</strong>。</p>
<p><strong>稀疏矩阵的压缩存储</strong>：只存储非零元素。</p>
<p><strong>注意</strong>：稀疏矩阵中的非<strong>零元素的分布没有规律。</strong></p>
<p>**三元组顺序表：**将稀疏矩阵中的每个非零元素表示为一个三元组：(<strong>行号，列号，非零元素值</strong>)</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-04-22.png" alt=""></p>
<p>三元组顺序表可表示为下图</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-05-59.png" alt=""></p>
<p>三元组顺序表不适用于稀疏矩阵的加法、乘法等操作，非零元素的个数及位置都会发生变化，则在三元组顺序表中就要进行<strong>插入</strong>和<strong>删除</strong>操作，顺序存储就十分不便。</p>
<p><strong>十字链表</strong></p>
<p>采用链接存储结构存储三元组表</p>
<p>十字链表可表示为下图</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-07-48.png" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-14_21-08-03.png" alt=""></p>
<h1>五、树和二叉树</h1>
<h3 id="1-树的引入">1.树的引入</h3>
<p><strong>树</strong>的定义：</p>
<p>n（n≥0）个结点的<strong>有限集合</strong>。当n＝0时，称为<strong>空树</strong>；任意一棵非空树满足以下条件：有且仅有一个特定的称为根的结点；当n＞1时，除根结点之外的其余结点被分成m（m&gt;0）个<strong>互不相交</strong>的有限集合T1,T2,… ,Tm，其中每个集合又是一棵树，并称为这个根结点的子树。</p>
<p><strong>二叉树</strong>的定义：</p>
<p>n(n≥0)个结点的<strong>有限集合</strong>，该集合或者为<strong>空集（称为空二叉树）</strong>，或者由一个根结点和两棵互不相交的、分别称为根结点的<strong>左子树</strong>和<strong>右子树</strong>的二叉树组成。</p>
<p>特点：（1）每个结点最多有两棵子树；（2）两棵子树是<strong>有序的</strong>，不能任意颠倒；（3）即使结点只有<strong>一棵子树，也有左右之分。</strong></p>
<p>二叉树<strong>是另一种树型结构</strong>，不是树的子集。与度为2的树的<strong>区别</strong>：</p>
<p>（1）度为2的树至少有一个结点的度为2，而二叉树没有这个要求；</p>
<p>（2）度为2的树中的结点如果只有一棵子树，是不区分左右的，而二叉树需要严格区分左右。</p>
<h3 id="2-树的存储结构">2.树的存储结构</h3>
<h4 id="树的基本术语">树的<strong>基本术语</strong></h4>
<p><strong>结点的度</strong>：结点所<strong>拥有的子树的个数</strong>。</p>
<p><strong>树的度</strong>：树中各结点度的最大值<strong>max</strong>。</p>
<p><strong>叶子</strong>结点：<strong>度为0</strong>的结点，也称为终端结点。</p>
<p><strong>分支</strong>结点：<strong>度不为0</strong>的结点，也称为非终端结点。</p>
<p><strong>孩子、双亲</strong>：树中某<strong>结点子树</strong>的根结点称为这个结点的孩子结点，这个结点称为其孩子结点的双亲结点；</p>
<p><strong>兄弟</strong>：具有<strong>同一个双亲</strong>的孩子结点互称为兄弟。</p>
<p><strong>路径</strong>：如果树的结点序列n1, n2, …, nk有如下关系：结点ni是ni+1的双亲（1&lt;=i&lt;k），则把<strong>n1, n2, …, nk</strong>称为一条由n1至nk的路径；</p>
<p><strong>路径长度</strong>：路径上经过的<strong>边的个数</strong>称为路径长度。</p>
<p><strong>祖先、子孙</strong>：在树中，如果有一条路径从结点x到结点y，则x称为y的祖先，而y称为x的子孙。</p>
<p>结点所在<strong>层数</strong>：根结点的层数为1；对其余任何结点，若某结点在第k层，则其孩子结点在第k+1层。</p>
<p>树的<strong>深度</strong>：树中所有结点的<strong>最大层数</strong>max，也称高度。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-01-14.png" style="zoom:80%;" />
<p><strong>层序编号</strong>：将树中结点按照<strong>从上层到下层</strong>、同层<strong>从左到右</strong>的次序依次给他们编以<strong>从1开始</strong>的连续自然数。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-02-01.png"  />
<p><strong>有序树、无序树</strong>：如果一棵树中结点的<strong>各子树从左到右是有次序的</strong>，称这棵树为有序树；<strong>反之</strong>，称为无序树。</p>
<p>（数据结构中讨论的一般都是有序树）</p>
<p><strong>森林</strong>：m (m≥0)棵互不相交的树的集合。</p>
<h4 id="树的遍历">树的<strong>遍历</strong></h4>
<p>从根结点出发，<strong>按照某种次序</strong>访问树中所有结点，使得<strong>每个结点被访问一次且仅被访问一次。</strong></p>
<p>遍历的<strong>实质</strong>：树结构（非线性结构）<strong>→线性结构。</strong></p>
<p><strong>遍历的方式</strong>：</p>
<p><strong>前序</strong>遍历：<strong>根</strong>左右</p>
<p><strong>中序</strong>遍历：左<strong>根</strong>右</p>
<p><strong>后序</strong>遍历：左右<strong>根</strong></p>
<p><strong>层序</strong>遍历：从上到下，从左到右</p>
<p>如何表示结点的双亲和孩子，而这种关系很难用存储位置来体现，所以<strong>树一般没有顺序存储结构</strong>。</p>
<h4 id="树的表示法"><strong>树的表示法</strong></h4>
<h5 id="1-双亲表示法">1.双亲表示法</h5>
<p>用<strong>一维数组</strong>来存储树的各个结点（一般按层序存储）</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-22-04.png" alt=""></p>
<p>示意图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-22-45.png" alt=""></p>
<h5 id="2-孩子链表表示法">2.孩子链表表示法</h5>
<p>1.用<strong>一维数组</strong>来存储树的各个结点（一般按层序存储）；</p>
<p>2.把<strong>每个结点的孩子排列起来</strong>，看成是一个线性表，且以单链表存储，则n个结点共有 n 个孩子链表；</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-27-38.png" style="zoom:50%;" />
<p>示意图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-27-51.png" alt=""></p>
<h5 id="3-双亲孩子表示法">3.双亲孩子表示法</h5>
<p>融合了双亲表示法和孩子链表表示法</p>
<p>示意图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-31-13.png" alt=""></p>
<h5 id="4-孩子兄弟表示法">4.孩子兄弟表示法</h5>
<p>任一结点的<strong>第一个孩子</strong>是惟一的，<strong>右兄弟</strong>是惟一的，设置两个分别指向该结点的第一个孩子和右兄弟的指针。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-33-46.png" style="zoom:80%;" />
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_17-34-38.png" alt=""></p>
<p>但这种表示方法同样<strong>不方便查找</strong>结点的<strong>双亲</strong>信息</p>
<h3 id="3-二叉树的逻辑结构">3.二叉树的逻辑结构</h3>
<h5 id="特殊的二叉树">特殊的二叉树</h5>
<h6 id="斜树"><strong>斜树</strong></h6>
<p>1.所有结点都只有左子树的二叉树称为<strong>左斜树</strong>；<br>
2.所有结点都只有右子树的二叉树称为<strong>右斜树</strong>；<br>
3.左斜树和右斜树统称为斜树。</p>
<p><strong>特点</strong>：在斜树中，<strong>每一层只有一个结点</strong>；斜树的<strong>结点个数与其深度相同</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_19-55-53.png" style="zoom:50%;" />
<h6 id="满二叉树">满二叉树</h6>
<p>在一棵二叉树中，如果所有分支结点<strong>都存在左子树和右子树</strong>，并且<strong>所有叶子都在同一层</strong>上。</p>
<p><strong>特点</strong>：<strong>叶子</strong>只能出现在<strong>最下一层</strong>；<strong>只有度为0和度为2</strong>的结点。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_19-55-25.png" style="zoom:50%;" />
<h6 id="完全二叉树">完全二叉树</h6>
<p>对一棵具有n个结点的二叉树按层序编号，如果<strong>编号</strong>为i（1≤i≤n）的结点<strong>与同样深度的满二叉树</strong>中编号为i的结点在二叉树中的位<strong>置完全相同。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_19-58-23.png" style="zoom:50%;" />
<p>结点<strong>集中</strong>在下面，左面</p>
<p>特点：</p>
<p>1.<strong>叶子结点只能出现在最下两层</strong>且最下层的叶子结点都<strong>集中在</strong>二叉树的<strong>左面</strong>；<br>
2.完全二叉树中<strong>如果有度为1的结点，只能有一个</strong>，<strong>且该结点只有左孩子</strong>；<br>
3.深度为k的完全二叉树在<strong>k-1层上一定是满二叉树</strong>；<br>
4.在<strong>同样结点个数</strong>的二叉树中，<strong>完全二叉树的深度最小。</strong></p>
<p>在满二叉树中，从最后一个结点开始，<strong>连续去掉</strong>任意个结点，即是一棵完全二叉树。</p>
<h5 id="二叉树的基本性质">二叉树的基本性质</h5>
<h6 id="性质1">性质1</h6>
<p>二叉树的<strong>第i层</strong>上<strong>最多有2^(i-1)^个</strong>结点（i≥1).</p>
<h6 id="性质2">性质2</h6>
<p>一棵<strong>深度为k</strong>的二叉树中，<strong>最多有2k-1个</strong>结点，<strong>最少有k个</strong>结点。</p>
<h6 id="性质3">性质3</h6>
<p>在一棵<strong>二叉树中</strong>，如果叶子（度为0）结点数为n0，度为2的结点数为n2，则有: <strong>n0＝n2＋1</strong>。</p>
<h6 id="性质4">性质4</h6>
<p>具有<strong>n个结点</strong>的<strong>完全二叉树</strong>的深度为[$\log_2{n}$]+1。（向下取整）</p>
<h6 id="性质5（完全二叉树的基本性质）">性质5（完全二叉树的基本性质）</h6>
<p>对一棵<strong>具有n个结点的完全二叉树</strong>中**从1开始按层序编号，**则对于任意的序号为i（1≤i≤n）的结点（简称为结点i），有：</p>
<p>1.如果<strong>i＞1</strong>，则结点i的<strong>双亲结点</strong>的序号为  [<strong>i/2</strong>]；如果<strong>i＝1</strong>，则结点<strong>i是根结点，无双亲</strong>结点。<br>
2.如果<strong>2i≤n</strong>，则结点<strong>i的左孩子</strong>的序号为<strong>2i</strong>；如果<strong>2i＞n</strong>，则结点<strong>i无左孩子</strong>。<br>
3.如果<strong>2i+1≤n</strong>，则结点<strong>i的右孩子</strong>的序号为<strong>2i+1</strong>；如果<strong>2i+1＞n</strong>，则结点 <strong>i无右孩子</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_20-50-05.png" style="zoom:50%;" />
<h3 id="4-二叉树的存储结构">4.二叉树的存储结构</h3>
<h5 id="二叉树的顺序存储结构">二叉树的顺序存储结构</h5>
<p>用<strong>一维数组</strong>存储二叉树中的结点，并且结点的存储位置（下标）应<strong>能体现结点之间的逻辑关系——双亲和孩子关系</strong>。</p>
<p><strong>完全二叉树（包括满二叉树）<strong>中结点的序号可以</strong>唯一地反映</strong>出结点之间的逻辑关系 。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-23-11.png" style="zoom:50%;" />
<p><strong>二叉树的顺序存储结构</strong>一般<strong>仅存储完全二叉树</strong>，<strong>不适合存储一般的二叉树。</strong></p>
<p>例如非完全二叉树：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-24-48.png" style="zoom:50%;" /></p>
<h5 id="二叉树的链表存储结构">二叉树的链表存储结构</h5>
<p>令二叉树的<strong>每个结点对应一个链表结点</strong>，链表结点除了<strong>存放与二叉树结点有关的数据信息</strong>外，还要设置指示<strong>左右孩子的指针</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-27-29.png" style="zoom:50%;" />
<h5 id="二叉树前序、中序和后序遍历的非递归实现">二叉树前序、中序和后序遍历的非递归实现</h5>
<p>先空着，哈哈</p>
<h5 id="二叉树的构造">二叉树的构造</h5>
<p>为了能<strong>唯一构造</strong>一颗二叉树，可以采取两类方法：</p>
<p>1.采用<strong>两个不同的遍历序列</strong></p>
<p><strong>前序</strong>遍历序列+<strong>中序</strong>遍历序列<strong>可以</strong>构造二叉树</p>
<p><strong>中序</strong>遍历序列+<strong>后序</strong>遍历序列<strong>可以</strong>构造二叉树</p>
<p>但是 <strong>前序遍历序列+<strong>后序</strong>遍历序列</strong>不可以**构造二叉树（找不到根结点）</p>
<p>2.采用<strong>扩展二叉树</strong>：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_21-42-17.png" style="zoom:50%;" /></p>
<h5 id="二叉树的应用">二叉树的应用</h5>
<p>1.<strong>求二叉树的结点个数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Count</span><span class="params">(BiNode *root)</span>  <span class="comment">//count为全局量并已初始化为0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">Count</span>(root-&gt;lchild);</span><br><span class="line">         count++;</span><br><span class="line">         <span class="built_in">Count</span>(root-&gt;rchild);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.<strong>按前序次序打印二叉树中的叶子结点</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;lchild &amp;&amp; !root-&gt;rchild)</span><br><span class="line">               cout&lt;&lt;root-&gt;data;</span><br><span class="line">        <span class="built_in">PreOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">PreOrder</span>(root-&gt;rchild);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.<strong>求二叉树的深度</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Depth</span><span class="params">(BiNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         hl= <span class="built_in">Depth</span>(root-&gt;lchild);</span><br><span class="line">         hr= <span class="built_in">Depth</span>(root -&gt;rchild);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">max</span>(hl, hr)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-三叉链表">5.三叉链表</h3>
<p>在二叉链表的基础上<strong>增加了一个指向双亲的指针域</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_23-00-47.png" style="zoom:50%;" />
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_23-01-25.png" style="zoom:50%;" /></p>
<h3 id="6-线索链表">6.线索链表</h3>
<p>对于有n个结点的二叉链表来说，共有2n个指针域，其中用来存放孩子信息的指针域只有n-1个，剩余n+1个指针域的值为nullptr。</p>
<p>可以<strong>利用这些空闲的指针域</strong>存放<strong>遍历时的前驱后继关系</strong>来<strong>加快遍历的进程，减少时间的开销</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_10-27-59.png" style="zoom:50%;" />
<p>方法：增加<strong>两个标志域</strong>，分别指示对应的指针域存储的<strong>是孩子</strong>还<strong>是前驱或后继</strong></p>
<p>将<strong>空闲的左孩子域</strong>指向结点的<strong>前驱</strong>，将<strong>空闲的右孩子域</strong>指向<strong>后继</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-16_23-10-00.png" style="zoom:50%;" />
<p><strong>标志域为1</strong>，则说明存在<strong>线索</strong>。<strong>标志域为0</strong>，说明存在<strong>孩子</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_10-37-33.png" style="zoom:50%;" /></p>
<p>因为<strong>中序</strong>遍历为“<strong>左根右</strong>”，所以这里的前驱后继关系<strong>并不是指父子关系</strong>，而是<strong>指访问的次序</strong>。比如<strong>根的前驱是左，根的后继是右</strong>。</p>
<h3 id="7-树、森林和二叉树的相互转换">7.树、森林和二叉树的相互转换</h3>
<h4 id="树转换为二叉树">树转换为二叉树</h4>
<p>1.<strong>加线</strong>，在所有兄弟结点之间加一条连线</p>
<p>2.<strong>抹线</strong>，只保留双亲与第一个孩子的连线，删去与其它孩子的连线</p>
<p>3.<strong>顺时针旋转</strong>，使结构层次分明</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217110527.jpg" style="zoom: 33%;" /></p>
<h4 id="森林转换为二叉树">森林转换为二叉树</h4>
<p>1.先把每棵树都<strong>转换</strong>为二叉树（加线，抹线，顺时针旋转）</p>
<p>2.<strong>连接</strong>，从第二棵二叉树开始，依次<strong>把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子</strong>，当所有二叉树连起来后，此时所得到的二叉树就是由森林转换得到的二叉树。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217110522.jpg" style="zoom:33%;" /></p>
<h4 id="二叉树转换为树或森林">二叉树转换为树或森林</h4>
<p>1.<strong>加线</strong>，在二叉树中，若某<strong>结点x</strong>是其<strong>双亲y</strong>的<strong>左孩子</strong>，则把<strong>结点x的右孩子</strong>、<strong>右孩子的右孩子</strong>、……，<strong>都与结点y</strong>用线<strong>连起来</strong>；</p>
<p>2**.抹线**，删去原二叉树中<strong>所有</strong>结点<strong>与其右孩子结点的连线</strong></p>
<p>3.<strong>调整</strong>，使结构层次分明</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217111443.jpg" style="zoom:33%;" /></p>
<h4 id="树和二叉树遍历的关系">树和二叉树遍历的关系</h4>
<p>1.树的<strong>前序</strong>遍历=二叉树的<strong>前序</strong>遍历</p>
<p>2.树的<strong>后序</strong>遍历=二叉树的<strong>中序</strong>遍历</p>
<h3 id="8-哈夫曼树和哈夫曼编码">8.哈夫曼树和哈夫曼编码</h3>
<p>**权：**对树结点赋予一个有实际含义的数值</p>
<p><strong>带权路径长度</strong>：根结点到某一结点路径长度与权值的乘积<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_11-30-19.png" style="zoom:50%;" /></p>
<h4 id="哈夫曼树">哈夫曼树</h4>
<p>给定n个权值作为n个<strong>叶子</strong>结点，构造一颗<strong>二叉树</strong>，若该树的<strong>带权路径长度达到最小</strong>，这样的二叉树就叫做<strong>哈夫曼树</strong>，也称为<strong>最优二叉树。</strong></p>
<p><strong>特点</strong>：</p>
<p>1.<strong>权值越大</strong>的叶子结点<strong>越靠近根结点</strong>，而<strong>权值越小</strong>的叶子结点<strong>越远离</strong>根结点。</p>
<p>2.<strong>只有度为0</strong>（叶子结点）<strong>和度为2</strong>（分支结点）的结点，<strong>不存在度为1</strong>的结点。</p>
<p>3.同一组权值，对应的<strong>哈夫曼树不唯一</strong></p>
<p><strong>哈夫曼树的构造</strong>：选取最小的两个结点，合并。重复此步骤。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217114233.jpg" style="zoom: 33%;" /></p>
<h4 id="哈夫曼编码">哈夫曼编码</h4>
<p><strong>等长编码</strong>：表示一组对象的二进制位串的长度相等，如ASCII码</p>
<p><strong>不等长编码</strong>：表示一组对象的二进制位串的长度不相等。使用频率高的用短码，使用频率低的用长码。</p>
<p><strong>前缀编码</strong>：设计不等长编码时必须保证某字符的编码不是另一个字符的前缀（最左子串），这种编码就叫做前缀编码。</p>
<p>哈夫曼编码是一种前缀编码，该方法以字符出现的频率为权值来构建哈夫曼树，并得到平均长度最短的码字。</p>
<p>例如：一组字符{A, B, C, D, E, F, G}出现的频率分别是{9, 11, 5, 7, 8, 2, 3}，设计最经济的编码方案。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_11-55-06.png" alt=""></p>
<p>**译码：**从Huffman树根开始，从待译码电文中逐位取码。</p>
<p>若编码是**“0”，则向左走**；若编码是**“1”，则向右走**；一旦<strong>到达叶子结点</strong>，则<strong>译出一个字符</strong>；再<strong>重新从根出发</strong>，直到电文结束。</p>
<p>例如：电文编码：010110011011010</p>
<p>译文只能是 CDFDB</p>
<p><strong>注意</strong>：编码方和译码方的哈夫曼树必须一致，否则不能正确译码。</p>
<h1>六、图</h1>
<h3 id="1-图的基本概念">1.图的基本概念</h3>
<p>图由顶点的有穷非空集合和顶点之间边的集合组成（点集和边集），通常表示为： <strong>G=(V，E</strong>)</p>
<p>在线性表中有空表，元素个数为零；</p>
<p>在树中有空树，结点个数为零；</p>
<p><strong>但</strong>在图中，<strong>顶点个数不能为零，但可以没有边</strong>。</p>
<p>图<strong>无法采用顺序存储</strong>结构。</p>
<hr>
<p><strong>无向边：</strong>(vi，vj)   <strong>有向边(弧）:</strong>&lt;vi，vj&gt;</p>
<p><strong>简单图</strong>：在图中，若<strong>不存在顶点到其自身</strong>的边，且同一条边<strong>不重复</strong>出现。</p>
<p><strong>邻接、依附</strong>:</p>
<p>1.<strong>无向图中</strong>，对于任意两个顶点vi和顶点vj，<strong>若存在边(vi，vj)</strong>，则称顶点vi和顶点vj<strong>互为邻接点</strong>，同时称<strong>边(vi，vj)依附于顶点</strong>vi和顶点vj。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-32-02.png" style="zoom:50%;" />
<p>2.<strong>有向图中</strong>，对于任意两个顶点vi和顶点vj，<strong>若存在弧&lt;vi，vj&gt;</strong>，则称<strong>顶点vi邻接到顶点vj</strong>，<strong>顶点vj邻接自顶点vi</strong>，同时称<strong>弧&lt;vi，vj&gt;依附于</strong>顶点vi和顶点vj 。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-32-24.png" style="zoom:50%;" />
<p>在<strong>线性</strong>结构中，元素之间的关系为<strong>前驱和后继</strong>；</p>
<p>在<strong>树</strong>结构中，结点之间的关系为<strong>双亲和孩子；</strong></p>
<p>在<strong>图</strong>结构中，顶点之间的关系为<strong>邻接</strong>。</p>
<hr>
<p><strong>无向完全图</strong>：在无向图中，如果<strong>任意两个顶点</strong>之间都存在<strong>边</strong>，则称该图为无向完全图。</p>
<p><strong>有向完全图</strong>：在有向图中，如果<strong>任意两个顶点</strong>之间都存在<strong>方向相反</strong>的<strong>两条弧</strong>，则称该图为有向完全图。</p>
<p>含有n个顶点的<strong>无向完全图</strong>有<strong>n×(n-1)/2</strong>条边。 含有n个顶点的<strong>有向完全图</strong>有**n×(n-1)**条弧。</p>
<p><strong>稀疏图</strong>：称<strong>边数很少的图</strong>为稀疏图；</p>
<p><strong>稠密图</strong>：称<strong>边数很多的图</strong>为稠密图。</p>
<p>顶点的<strong>度</strong>：在<strong>无向图中</strong>，顶点v的度是指<strong>依附于该顶点的边数</strong>，通常记为TD (v)。</p>
<p>顶点的<strong>入度</strong>：在<strong>有向图中</strong>，顶点v的入度是指<strong>以该顶点为弧头的弧的数目</strong>（<strong>进入</strong>该点），记为ID (v)；</p>
<p>顶点的<strong>出度</strong>：在<strong>有向图中</strong>，顶点v的出度是指<strong>以该顶点为弧尾的弧的数目</strong>（<strong>离开</strong>该点），记为OD (v)。</p>
<p>在<strong>无向图</strong>中，<strong>度数和=边数的2倍</strong></p>
<p>在<strong>有向图</strong>中，<strong>入度和=出度和=弧数</strong></p>
<p><strong>权</strong>：是指<strong>对边赋予</strong>的<strong>有意义的数值量</strong>。</p>
<p><strong>网</strong>：<strong>边上带权的图</strong>，也称网图。</p>
<p><strong>路径</strong>：例如无向图----&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-46-48.png" style="zoom: 33%;" /></p>
<p><strong>路径长度：</strong></p>
<p><strong>非带权图</strong>——路径上<strong>边的个数</strong></p>
<p><strong>带权图</strong>——路径上<strong>各边的权之和</strong></p>
<p><strong>回路（环）</strong>：第一个顶点和最后一个顶点相同的路径。(<strong>回到自身</strong>)</p>
<p><strong>简单路径</strong>：序列中<strong>顶点不重复出现</strong>的路径。</p>
<p><strong>简单回路（简单环）</strong>：除了第一个顶点和最后一个顶点外，<strong>其余顶点不重复出现</strong>的回路。</p>
<p><strong>子图</strong>：若图G=（V，E），G’=（V’，E’），如果V’属于V 且E’ 属于 E ，则称图G’是G的子图。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_16-51-45.png" style="zoom:50%;" />
<p><strong>连通图</strong>：在<strong>无向图</strong>中，如果从一个顶点vi到另一个顶点vj(i≠j)<strong>有路径</strong>，则称顶点vi和vj是连通的。如果<strong>图中任意两个顶点都是连通的</strong>，则称该图是连通图。</p>
<p><strong>连通分量</strong>：<strong>非连通图的极大连通子图</strong>称为连通分量。（两个连通分量<strong>只要再加一条边</strong>就可成为连通图）</p>
<p>连通分量是<strong>对无向图的一种划分</strong></p>
<p><strong>强连通图：<strong>在</strong>有向图</strong>中，对图中<strong>任意一对顶点</strong>vi和vj (i≠j)，若从<strong>顶点vi到顶点v</strong>j和<strong>从顶点vj到顶点vi均有路径</strong>，则称该有向图是强连通图。</p>
<p><strong>强连通分量</strong>：非强连通图的极大强连通子图。（两个强连通分量<strong>只要再加一条边</strong>就可成为强连通图）</p>
<p>强连通分量是<strong>对有向图的一种划分</strong></p>
<hr>
<p><strong>生成树</strong>：n个顶点的连通图G的生成树是<strong>包含G中全部顶点的一个极小连通子图。</strong></p>
<p>图的生成树唯一性不能确定</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217170427.jpg" style="zoom: 25%;" />
<p>对于<strong>无向连通图，<strong>例如左侧，有</strong>6个结点</strong>的生成树，一定有<strong>5条边。</strong></p>
<p>再任意<strong>添加1条属于原图中的边</strong>必定会<strong>产生回路</strong>。</p>
<p>再任意<strong>减少1条边</strong>，则必然<strong>变成非连通。</strong></p>
<hr>
<p>对于<strong>有向连通图</strong>，例如右侧，有4个结点的生成树中，<strong>只有1个入度为0</strong>的顶点v2，<strong>其他顶点</strong>的<strong>入度均为1</strong></p>
<p><strong>生成森林：<strong>在非连通图中，由每个连通分量都可以得到一棵生成树，这些</strong>连通分量的生成树</strong>就<strong>组成了一个非连通图的生成森林。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231217171551.jpg" style="zoom: 33%;" />
<h3 id="2-图的遍历">2.图的遍历</h3>
<p>图的遍历是在从图中某一顶点出发，对图中<strong>所有顶点访问一次且仅访问一次</strong>。</p>
<p>要解决的<strong>问题</strong>：</p>
<p>1.在图中，如何选取遍历的<strong>起始顶点</strong>？</p>
<p>答：从编号小的顶点开始 。</p>
<p>2.从某个起点始<strong>可能到达不了所有其它顶点</strong>，怎么办？</p>
<p>答：<strong>多次调用</strong>从某顶点出发遍历图的算法</p>
<p>3.因图中可能存在回路，某些顶点可能会被重复访问，那么<strong>如何避免遍历不会因回路而陷入死循环</strong>。</p>
<p>答：附设<strong>访问标志数组</strong>visited[n] 。</p>
<p>4.在图中，一个顶点可以和其它多个顶点相连，当这样的顶点访问过后，<strong>如何选取下一个要访问的顶点</strong>？</p>
<p>答：<strong>深度优先遍历</strong>和<strong>广度优先遍历。</strong></p>
<hr>
<h4 id="深度优先遍历">深度优先遍历</h4>
<p>基本思想：（重点在&quot;深&quot;）</p>
<p>⑴ 访问顶点v；</p>
<p>⑵ 从v的未被访问的<strong>邻接点中选取一个</strong>顶点w，从w出发进行<strong>深度优先遍历</strong>；（递归）</p>
<p>⑶ <strong>重复</strong>上述两步，直至图中所有和v有路径相通的顶点都被访问到。</p>
<h4 id="广度优先遍历">广度优先遍历</h4>
<p>基本思想：（重点在&quot;广&quot;）</p>
<p>⑴ 访问顶点v；</p>
<p>⑵ 依次访问<strong>v的各个未被访问的邻接点</strong>v1, v2, …, vk；</p>
<p>⑶ 分别从v1，v2，…，vk出发依次访问它们未被访问的邻接点，并<strong>使“先被访问顶点的邻接点”先于“后被访问顶点的邻接点”被访问</strong>。直至图中所有与顶点v有路径相通的顶点都被访问到。</p>
<h3 id="3-图的存储">3.图的存储</h3>
<h4 id="邻接矩阵">邻接矩阵</h4>
<p>用一个<strong>一维数组</strong>存储图中<strong>顶点</strong>的信息，用一个<strong>二维数组</strong>（称为邻接矩阵）存储图中<strong>各顶点之间的邻接关系。</strong></p>
<p>两顶点之间<strong>有边为1</strong>，<strong>无边为0</strong>；自身和自身无边，为0。</p>
<p>示意图1：<strong>无向图</strong>的邻接矩阵—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-01-37.png" style="zoom:50%;" /></p>
<p><strong>如何求顶点i的度？</strong></p>
<p>答：邻接矩阵的<strong>第i行（或第i列</strong>）<strong>非零元素的个数。</strong></p>
<p>示意图2：<strong>有向图</strong>的邻接矩阵—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-09-05.png" style="zoom:50%;" /></p>
<p><strong>如何求顶点 i 的出度？</strong></p>
<p>答:邻接矩阵的<strong>第 i 行元素之和</strong>。</p>
<p><strong>如何求顶点 i 的入度？</strong></p>
<p>答:邻接矩阵的<strong>第 i 列元素之和</strong>。</p>
<p>示意图3：<strong>网图</strong>的邻接矩阵—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-14-09.png" style="zoom:50%;" /></p>
<p>邻接矩阵特点：</p>
<p>优点：容易实现<strong>图的操作</strong>，如：<strong>求某顶点的度</strong>、<strong>判断顶点之间是否有边（弧</strong>）、<strong>找顶点的邻接点</strong>等等。</p>
<p>缺点：n个顶点需要n*n个单元存储边(弧);空间效率为O(n2)。 对稀疏图而言尤其<strong>浪费空间。</strong></p>
<h4 id="邻接表">邻接表</h4>
<p>对于图的每个顶点vi，<strong>将所有邻接于vi的顶点链成一个单链表</strong>，称为顶点vi的<strong>边表</strong>（对于有向图则称为出边表），<strong>所有边表的头指针和存储顶点信息的一维数组</strong>构成了<strong>顶点表</strong>。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-20-51.png" style="zoom:50%;" />
<p>示意图1:<strong>无向图</strong>的邻接表—&gt;</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-24-20.png" style="zoom:50%;" />
<p><strong>如何求顶点 i 的度？</strong></p>
<p>答:顶点i的边表中结点的个数。</p>
<p>示意图2：<strong>有向图</strong>的邻接表—&gt;<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-17_22-28-18.png" style="zoom:50%;" /></p>
<p><strong>如何求顶点 i 的入度？</strong></p>
<p>答：<strong>整个</strong>邻接表中<strong>邻接点域值是i的结点个数</strong></p>
<p><strong>如何求顶点 i 的所有邻接点？</strong></p>
<p>答:遍历顶点 i 的边表，该<strong>边表中的所有结点</strong>都是顶点 i 的邻接点。</p>
<h4 id="邻接表与邻接矩阵的比较">邻接表与邻接矩阵的比较</h4>
<p>1.联系：邻接表中每个链表对应于邻接矩阵中的一行，链表中结点个数等于该行中非零元素的个数。</p>
<p>2.区别：</p>
<p>① 对于任一确定的无向图，<strong>邻接矩阵是唯一的</strong>（行列号与顶点编号一致），但**邻接表不唯一（**链接次序与顶点编号无关）。</p>
<p>因为<strong>顶点指向的单链表各个节点的顺序是任意的</strong></p>
<p>② 邻接矩阵的空间复杂度为O(n2),而邻接表的空间复杂度为O(n+e)。</p>
<p>3.用途：<strong>邻接矩阵多用于稠密图</strong>的存储（e接近n(n-1)/2)；而<strong>邻接表多用于稀疏图</strong>的存储（e&lt;&lt; n(n-1)/2)</p>
<h3 id="4-最小生成树">4.最小生成树</h3>
<p>生成树的<strong>代价</strong>：设G = (V, E)是一个<strong>无向连通网</strong>，生成树上<strong>各边的权值之和</strong>称为该生成树的代价。</p>
<p><strong>最小生成树</strong>：在图G所有生成树中，<strong>代价最小的生成树</strong>称为最小生成树。</p>
<p><strong>MST性质</strong>：假设G=(V, E)是一个无向连通网，U是顶点集V的一个非空子集。<strong>若(u, v)是一条具有最小权值的边，<strong>其中u∈U，v∈V－U，则</strong>必存在</strong>一棵<strong>包含边(u, v)的最小生成树</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_09-54-13.png" style="zoom:50%;" /></p>
<h4 id="普里姆（Prim）算法">普里姆（Prim）算法</h4>
<p>基本思想：设<strong>G</strong>=(V, E)是具有n个顶点的连通网，<strong>T</strong>=(U, TE)是G的最小生成树，<strong>T的初始状态为U={u0}（u0∈V），TE={ }，</strong></p>
<p>重复执行下述<strong>操作</strong>：在所有u∈U，v∈V-U的边中<strong>找一条代价最小的边(u, v)并入集合TE，同时v并入U，直至U=V。</strong></p>
<p><strong>流程图</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-17.png" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-24.png" alt="Snipaste_2023-12-18_10-00-24" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-32.png" alt="Snipaste_2023-12-18_10-00-32" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-39.png" alt="Snipaste_2023-12-18_10-00-39" style="zoom: 50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-47.png" alt="Snipaste_2023-12-18_10-00-47" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-00-53.png" alt="Snipaste_2023-12-18_10-00-53" style="zoom:50%;" />
<h4 id="克鲁斯卡尔（Kruskal）算法">克鲁斯卡尔（Kruskal）算法</h4>
<p>基本思想：设无向连通网为<strong>G</strong>＝(V, E)，令G的最小生成树为<strong>T</strong>＝(U, TE)，<strong>其初态为U＝V，TE＝{ }</strong>。</p>
<p><strong>操作</strong>：按照边的<strong>权值由小到大</strong>的顺序，<strong>考察G的边集E中的各条边</strong>。若被考察的边的两个顶点属于T的两个不同的连通分量，则将此边作为最小生成树的边加入到T中，<strong>同时把两个连通分量连接为一个连通分量</strong>；若被考察边的两个顶点属于同一个连通分量，则舍去此边，以免造成回路，如此下去，<strong>当T中的连通分量个数为1时</strong>，此连通分量便为G的一棵最小生成树。</p>
<p><strong>流程图：</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-31.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-38.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-47.png" alt="Snipaste_2023-12-18_10-11-47" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-11-53.png" alt="Snipaste_2023-12-18_10-11-53" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-12-01.png" alt="Snipaste_2023-12-18_10-12-01" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-12-10.png" alt="Snipaste_2023-12-18_10-12-10" style="zoom:50%;" />
<hr>
<h4 id="两个算法的比较">两个算法的比较</h4>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-18-17.png" alt=""></p>
<h3 id="5-图的最短路径">5.图的最短路径</h3>
<p><strong>最短路径</strong>：</p>
<p>在<strong>非网图</strong>中，最短路径是指两顶点之间经历的<strong>边数最少</strong>的路径。</p>
<p>在<strong>网图</strong>中，最短路径是指两顶点之间经历的<strong>边上权值之和最短</strong>的路径。</p>
<p><strong>单源点最短路径问题</strong></p>
<p><strong>问题</strong>描述：给定带权有向图G＝(V, E)和源点v∈V，求<strong>从v到G中其余各顶点</strong>的最短路径。</p>
<p>应用实例——<strong>计算机网络传输</strong>的问题：怎样找到一种最经济的方式，从一台计算机向网上所有其它计算机发送一条消息。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-29-40.png" alt=""></p>
<h4 id="迪杰斯特拉-Dijkstra-算法">迪杰斯特拉(Dijkstra)算法</h4>
<p>基本思想：设置一个集合S存放已经找到最短路径的顶点，S的初始状态只包含源点v，对vi∈V-S，<strong>假设从源点v到vi的有向边为最短路径。<strong>以后</strong>每求得一条最短路径v, …, vk，<strong>就将vk加入集合S中，并</strong>将路径v, …, vk , vi与原来的假设相比较</strong>，<strong>取</strong>路径长度<strong>较小者</strong>为最短路径。重复上述过程，直到集合V中全部顶点加入到集合S中。</p>
<p><strong>流程图</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-36-52.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-36-58.png" alt="Snipaste_2023-12-18_10-36-58" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-37-04.png" alt="Snipaste_2023-12-18_10-37-04" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-37-09.png" alt="Snipaste_2023-12-18_10-37-09" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-37-14.png" alt="Snipaste_2023-12-18_10-37-14" style="zoom:50%;" />
<hr>
<p><strong>每一对顶点之间的最短路径问题</strong></p>
<p>解决办法1：<strong>每次</strong>以一个顶点为源点<strong>调用Dijkstra算法</strong>。显然，时间复杂度为<strong>O(n3)。</strong></p>
<p>解决办法2：<strong>弗洛伊德</strong>提出的求每一对顶点之间的最短路径算法——Floyd算法，其时间复杂度<strong>也是O(n3)</strong>，但<strong>形式上要简单些</strong>。</p>
<h4 id="弗洛伊德-Floyd-算法">弗洛伊德(Floyd)算法</h4>
<p>基本思想：对于从vi到vj的弧，进行<strong>n次试探</strong>：首先考虑路径vi,v0,vj是否存在，如果存在，则比较vi,vj和vi,v0,vj的路径长度，<strong>取较短者</strong>为从vi到vj的中间顶点的序号不大于0的最短路径。在路径上再增加一个顶点v1，依此类推，在经过n次比较后，最后求得的必是从顶点vi到顶点vj的最短路径。</p>
<p>流程图：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-04.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-14.png" alt="Snipaste_2023-12-18_10-51-14" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-20.png" alt="Snipaste_2023-12-18_10-51-20" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_10-51-31.png" alt="Snipaste_2023-12-18_10-51-31" style="zoom:50%;" />
<h3 id="6-有向无环图及其应用">6.有向无环图及其应用</h3>
<h4 id="AOV网">AOV网</h4>
<p>在一个表示<strong>工程</strong>的<strong>有向图</strong>中，用<strong>顶点表示活动</strong>，用<strong>弧表示活动之间的优先关系</strong>，称这样的有向图为顶点表示活动的网，简称AOV网。</p>
<p><strong>特点</strong>：</p>
<p>1.AOV网中的弧表示活动之间存在的某种制约关系。</p>
<p>2.AOV网中不能出现回路 。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-02-29.png" style="zoom:50%;" /></p>
<h4 id="拓扑排序">拓扑排序</h4>
<p>拓扑<strong>序列</strong>：设G=(V，E)是一个具有n个顶点的有向图，V中的顶点序列v1, v2, …, vn称为一个拓扑序列，当且仅当满足下列条件：若<strong>从顶点vi到vj有一条路径</strong>，则<strong>在顶点序列中顶点vi必在顶点vj之前。</strong></p>
<p>拓扑<strong>排序</strong>：<strong>对一个有向图构造拓扑序列</strong>的过程称为拓扑排序 。</p>
<p>拓扑序列使得AOV网中<strong>所有应存在的前驱和后继关系都能得到满足。</strong></p>
<p>基本思想：<br>
⑴ 从AOV网中<strong>选择一个没有前驱的顶点并且输出</strong>；<br>
⑵ 从AOV网中<strong>删去该顶点</strong>，并且<strong>删去所有以该顶点为尾的弧</strong>；<br>
⑶ 重复上述两步，**直到全部顶点都被输出，**或AOV网中不存在没有前驱的顶点。</p>
<p>示意图：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-12-51.png" style="zoom:50%;" />
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-12-57.png" alt="Snipaste_2023-12-18_11-12-57" style="zoom:50%;" />
<h4 id="AOE网">AOE网</h4>
<p>在一个表示<strong>工程</strong>的<strong>带权有向图</strong>中，用<strong>顶点表示事件</strong>，用<strong>有向边表示活动</strong>，边上的<strong>权值表示活动的持续时间</strong>，称这样的有向图叫做<strong>边表示活动</strong>的网，简称AOE网。</p>
<p>AOE网中<strong>没有入边的顶点称为始点（或源点）</strong>，<strong>没有出边的顶点称为终点（或汇点）</strong>。</p>
<p>AOE网的<strong>性质</strong>：<br>
⑴ 只有在<strong>某顶点所代表的事件发生后</strong>，<strong>从该顶点出发的各活动才能开始；</strong><br>
⑵ 只有在进入某顶点的<strong>各活动都结束</strong>，<strong>该顶点所代表的事件才能发生</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-18-47.png" style="zoom:50%;" /></p>
<p>AOE网可以回答下列<strong>问题</strong>：</p>
<ol>
<li>完成<strong>整个工程至少需要多少时间</strong>?</li>
<li>为<strong>缩短</strong>完成工程所需的<strong>时间</strong>, 应当<strong>加快</strong>哪些<strong>活动?</strong></li>
</ol>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-22-28.png" alt=""></p>
<p>最短工期为：a1+a3=6+4=10</p>
<hr>
<p>**关键路径：**在AOE网中，<strong>从始点到终点具有最大路径长度</strong>（该路径上的各个活动所持续的时间之和）的路径称为关键路径。</p>
<p><strong>关键活动</strong>：<strong>关键路径上的活动</strong>（<strong>边</strong>）称为关键活动。</p>
<p>关键路径可能不只一条，<strong>重要的是找到关键活动</strong></p>
<hr>
<p>求最短路径方法：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-49-25.png" alt=""></p>
<hr>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_11-49-44.png" alt="Snipaste_2023-12-18_11-49-44"></p>
<p><strong>核心</strong>在于求出：</p>
<p>顶点的<strong>事件最早发生时间</strong>Ve（从起点向终点，依次加上活动时间，多路径选最大值）</p>
<p>顶点的<strong>事件最迟发生时间</strong>Vl（从终点向起点，依次减去活动时间，多路径选最小值)</p>
<p>注意：<strong>起点</strong>和<strong>终点</strong>的事件最早发生时间与事件最迟发生时间<strong>对应相同</strong></p>
<p>边的活动最早开始时间e（从起点向终点，该活动对应<strong>弧尾</strong>顶点的<strong>最早发生时间</strong>）</p>
<p>边的活动最晚开始时间l（从终点向起点，该活动对应<strong>弧头</strong>顶点的<strong>最迟发生时间-该活动的权值</strong>）</p>
<p>时间余量l-e</p>
<p>最终<strong>时间余量为0时</strong>对应的活动就是<strong>关键活动</strong>，进而可以找到对应的<strong>关键路径</strong></p>
<p>关键活动中的<strong>任意一个不能按时完成</strong>，整个工程的工期就会<strong>被拖延。</strong></p>
<p><strong>虽然</strong>理论上缩短关键活动的时间可以加快工程进度，<strong>但</strong>在实际情况下，需要综合考虑技术、资源、成本和<strong>对其他活动的影响</strong>，以确定是否可以成功缩短关键活动的时间，并提前完成整个工程。</p>
<h1>七、查找技术</h1>
<h3 id="1-概述">1.概述</h3>
<p><strong>查找</strong> ：在具有<strong>相同类型</strong>的记录构成的集合中找出满足给定条件的记录。</p>
<p>把<strong>查找条件</strong>限制为“<strong>匹配</strong>”，即查找<strong>关键码等于给定值</strong>的记录。</p>
<p>查找的结果 ：若在查找集合中找到了与给定值相匹配的记录，则称<strong>查找成功</strong>；否则，称<strong>查找失败</strong>。</p>
<p><strong>平均查找长度</strong>：将查找算法进行的<strong>关键码的比较次数的数学期望值</strong>定义为平均查找长度，即：<strong>ASL</strong></p>
<hr>
<p><strong>静态</strong>查找 ：<strong>不涉及插入</strong>和<strong>删除</strong>操作的查找 。</p>
<p>查找集合一经生成，便<strong>只对其进行查找</strong>，而<strong>不进行插入和删除</strong>操作，或<strong>经过一段时间的查找之后</strong>，<strong>集中地进行插入和删除</strong>等修改操作；</p>
<p><strong>动态</strong>查找 ：<strong>涉及插入</strong>和<strong>删除</strong>操作的查找。</p>
<p>查找与插入和删除操作<strong>在同一个阶段进行</strong>，例如当<strong>查找成功</strong>时，要<strong>删除</strong>查找到的记录，当<strong>查找不成功</strong>时，要<strong>插入</strong>被查找的记录。</p>
<hr>
<p><strong>查找结构</strong> ：<strong>面向查找操作</strong>的数据结构 ，即查找所依赖的数据结构。</p>
<p><strong>线性表</strong>：适用于<strong>静态查找</strong>，主要采用<strong>顺序查找</strong>技术和<strong>折半查找</strong>技术。</p>
<p><strong>树表</strong>：适用于<strong>动态查找</strong>，主要采用<strong>二叉排序树</strong>的查找技术。</p>
<p><strong>散列表</strong>：静态查找和动态查找<strong>均适用</strong>，主要采用<strong>散列技术</strong>。</p>
<p>查找算法时间性能通过<strong>关键码的比较次数</strong>来度量。</p>
<hr>
<h3 id="2-线性表的查找技术">2.线性表的查找技术</h3>
<h4 id="顺序查找（线性查找）">顺序查找（线性查找）</h4>
<p>基本思想：从线性表的<strong>一端向另一端逐个</strong>将关键码与给定值进行<strong>比较</strong>，若相等，则<strong>查找成功</strong>，<strong>给出</strong>该记录在表中的<strong>位置；</strong></p>
<p>若整个表检测完仍未找到与给定值相等的关键码，则<strong>查找失败,给出失败信息。</strong></p>
<p>对顺序查找作出<strong>改进</strong>：设置“<strong>哨兵</strong>”。</p>
<p>哨兵就是待查值，将它放在查找方向的<strong>尽头处</strong>，<strong>免去了</strong>在查找过程中<strong>每一次比较后都要判断查找位置是否越界</strong>，从而提高查找速度</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_20-32-38.png" style="zoom:50%;" />
<p>不用每次查找都判断一次<strong>i位置是否小于0。</strong></p>
<hr>
<h4 id="折半查找（二分查找）">折半查找（二分查找）</h4>
<p>使用条件：线性表中的记录<strong>必须</strong>按关键码<strong>有序</strong>；<strong>必须</strong>采用<strong>顺序存储。</strong></p>
<p>基本思想：在<strong>有序表</strong>中，<strong>取中间记录</strong>作为比较对象，若给定值<strong>与中间记录的关键码相等</strong>，则<strong>查找成功</strong>；</p>
<p>若给定值<strong>小于</strong>中间记录的关键码，则在中间记录的<strong>左半区</strong>继续查找；</p>
<p>若给定值<strong>大于</strong>中间记录的关键码，则在中间记录的<strong>右半区</strong>继续查找。不断重复上述过程，直到查找成功，或所查找的区域无记录，查找失败。</p>
<p><strong>判定树</strong>：折半查找的过程<strong>可以用二叉树来描述</strong>，树中的每个结点对应有序表中的一个记录，结点的值为该记录在表中的位置。</p>
<p>通常称这个描述折半查找过程的二叉树为折半查找判定树，简称判定树。</p>
<p>时间复杂度:O($\log_2{n}$)</p>
<h3 id="3-树表的查找技术">3.树表的查找技术</h3>
<h4 id="二叉排序树">二叉排序树</h4>
<p>二叉排序树（也称<strong>二叉查找树</strong>）：或者是一棵<strong>空</strong>的二叉树，或者是具有下列性质的二叉树：<strong>左&lt;根&lt;右</strong>。它的<strong>左右子树也都是二叉排序树</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_20-51-29.png" style="zoom:50%;" /></p>
<hr>
<h5 id="二叉排序树的插入"><strong>二叉排序树的插入</strong></h5>
<p>根据动态查找表的定义，“<strong>插入</strong>”操作<strong>在查找不成功时才进行；</strong></p>
<p><strong>分析</strong>：若二叉排序树为<strong>空树</strong>，则新插入的结点<strong>为新的根结点</strong>；<strong>否则</strong>，新插入的结点<strong>必为一个新的叶子结点</strong>，其插入位置由查找过程得到。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_20-54-36.png" style="zoom:50%;" />
<hr>
<h5 id="二叉排序树的构造"><strong>二叉排序树的构造</strong></h5>
<p>从空的二叉排序树开始，<strong>依次插入</strong>一个个结点 。</p>
<p>数据元素的<strong>输入顺序不同，<strong>则得到的</strong>二叉排序树形态也不同。</strong></p>
<p><strong>总结</strong>：</p>
<p><strong>一个无序序列可以</strong>通过构造一棵二叉排序树而<strong>变成一个有序序列</strong>;<br>
每次<strong>插入的新结点</strong>都是二叉排序树上<strong>新的叶子结点;</strong><br>
找到插入位置后，<strong>不必移动其它结点</strong>，<strong>仅需修改某个结点的指针；<br>
新插入的结点</strong>没有破坏原有结点之间的关系**</p>
<hr>
<h5 id="二叉排序树的删除"><strong>二叉排序树的删除</strong></h5>
<p>和插入相反，<strong>删除在查找成功之后进行，<strong>并且要求在</strong>删除</strong>二叉排序树上某个结点<strong>之后</strong>，<strong>仍然保持二叉排序树的特性。</strong></p>
<p><strong>情况1</strong>——被删除的结点是<strong>叶子结点</strong></p>
<p>操作：将<strong>双亲结点</strong>中相应<strong>指针域的值改为空。</strong></p>
<p>示意图:<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_21-04-21.png" style="zoom:50%;" /></p>
<p><strong>情况2</strong>——被删除的结点<strong>只有左子树</strong>或者<strong>只有右子树</strong></p>
<p>操作：将<strong>双亲结点</strong>的相应指<strong>针域的值指向被删除结点的左子树（或右子树）。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_21-04-31.png" style="zoom:50%;" /></p>
<p><strong>情况3</strong>——被删除的结点p<strong>既有左子树PL也有右子树PR</strong></p>
<p>可知中序遍历的序列为<strong>PL</strong>，p，<strong>PR</strong>。</p>
<p>为了替换被删除结点p而保持二叉树有序的性质，</p>
<p>可以用<strong>PL中最大</strong>的结点替换p，也可以用<strong>PR中最小</strong>的结点替换p，然后<strong>删除</strong>用来替换的<strong>重复结点。</strong></p>
<p>示意图：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218211359.jpg" style="zoom: 33%;" />
<h5 id="二叉排序树的查找">二叉排序树的查找</h5>
<p>查找成功：从根结点出发，<strong>沿着左分支或右分支</strong>逐层向下<strong>直至关键字等于给定值的结点</strong>;</p>
<p>查找失败：从根结点出发，<strong>沿着左分支或右分支</strong>逐层向下<strong>直至指针指向空树</strong>为止。</p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/img20201027174712367.jpg" alt=""></p>
<p>二叉排序树的<strong>查找性能取决于二叉排序树的形状</strong>，<strong>O($\log_2{n}$)<strong>在和</strong>O(n</strong>)之间。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_21-18-25.png" style="zoom:50%;" /></p>
<h4 id="平衡二叉树">平衡二叉树</h4>
<p>平衡二叉树：或者是一棵<strong>空</strong>的<strong>二叉排序树</strong>，或者是具有下列性质的<strong>二叉排序树：</strong></p>
<p>⑴ 根结点的左子树和右子树的<strong>深度最多相差1</strong></p>
<p>⑵ 根结点的左子树和右子树<strong>也都是平衡二叉树</strong></p>
<p><strong>平衡因子</strong>：结点的平衡因子定义为该结点的<strong>左子树的深度与右子树的深度之差</strong>。(每个结点都要满足)</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_22-06-06.png" style="zoom:50%;" /></p>
<p><strong>最小不平衡子树</strong>：在平衡二叉树的构造过程中，以<strong>距离插入结点最近的</strong>、且<strong>平衡因子的绝对值大于1的结点为根</strong>的子树。</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_22-16-20.png" style="zoom: 67%;" />
<p>设结点A为最小不平衡子树的根结点，对该子树进行平衡调整归纳起来有以下<strong>四种情况：</strong></p>
<ol>
<li>LL型</li>
<li>RR型</li>
<li>LR型</li>
<li>RL型</li>
</ol>
<hr>
<h5 id="LL型（左子树的左子树）">LL型（左子树的左子树）</h5>
<p>插入位置在最小不平衡子树根结点左孩子的左子树上</p>
<p><strong>操作：向右旋转，换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218232416.jpg" style="zoom: 33%;" /></p>
<h5 id="RR型（右子树的右子树）">RR型（右子树的右子树）</h5>
<p>插入位置在最小不平衡子树根结点右孩子的右子树上</p>
<p><strong>操作：向左旋转，换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218232656.jpg" style="zoom:33%;" /></p>
<h5 id="LR型（左子树的右子树）">LR型（左子树的右子树）</h5>
<p>插入位置在最小不平衡子树根结点左孩子的右子树上</p>
<p><strong>操作：旋转两次，先向左旋转，再向右旋转，先局部后整体，同样要换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218233054.jpg" style="zoom:33%;" /></p>
<h5 id="RL型（右子树的左子树）">RL型（右子树的左子树）</h5>
<p>插入位置在最小不平衡子树根结点右孩子的左子树上</p>
<p><strong>操作：旋转两次，先向右旋转，再向左旋转，先局部后整体，同样要换子树。</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218233305.jpg" style="zoom:33%;" /></p>
<h3 id="4-散列表的查找技术">4.散列表的查找技术</h3>
<p><strong>散列</strong>的基本思想：在记录的<strong>存储地址</strong>和它的<strong>关键码</strong>之间建立<strong>一个确定的对应关系</strong>。</p>
<p>这样，<strong>不经过比较，<strong>一</strong>次读取就能得到所查元素</strong>的查找方法。</p>
<p><strong>散列表</strong>：采用散列技术将记录<strong>存储在一块连续的存储空间中</strong>，这块连续的存储空间称为散列表。</p>
<p><strong>散列函数</strong>：将关键码<strong>映射</strong>为散列表中适当存储位置的函数。</p>
<p><strong>散列地址</strong>：由散列函数所得的存储地址 。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_23-38-10.png" style="zoom: 50%;" /></p>
<p>散列既是一种查找技术，也是一种存储技术。</p>
<p>散列技术的<strong>关键问题</strong>：</p>
<p>⑴ 散列<strong>函数的设计</strong>。如何设计一个简单、均匀、存储利用率高的散列函数。</p>
<p>1.<strong>计算简单</strong>。散列函数不应该有很大的计算量，否则会降低查找效率。</p>
<p>2.函数值即<strong>散列地址分布均匀</strong>。函数值要尽量均匀散布在地址空间，这样才能<strong>保证存储空间的有效利用</strong>并减少冲突。</p>
<p>⑵ <strong>冲突的处理</strong>。如何采取合适的处理冲突方法来解决冲突。</p>
<p>1.拉链法（开散列方法）</p>
<p>2.开放定址法（闭散列方法）</p>
<hr>
<p><strong>冲突</strong>：对于两个不同关键码ki≠kj，有H(ki)＝H(kj)，即<strong>两个不同的记录需要存放在同一个存储位置</strong>,ki和kj相对于H称做<strong>同义词</strong>。</p>
<h5 id="开放定址法（闭散列方法）">开放定址法（闭散列方法）</h5>
<p>由关键码得到的散列地址<strong>一旦产生了冲突</strong>，<strong>就去寻找下一个空的散列地址</strong>，并将记录存入。</p>
<p><strong>1.线性探测法</strong></p>
<p>若发生冲突，则挨个向后找</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218235308.jpg" style="zoom:33%;" /></p>
<p><strong>2.二次探测法</strong></p>
<p>若发生冲突，则左右横跳</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231218235357.jpg" style="zoom:33%;" /></p>
<p><strong>3.随机探测法</strong>（不重要）</p>
<p>当发生冲突时，<strong>下一个散列地址的位移量是一个随机数列</strong>，即寻找下一个散列地址的公式为：</p>
<p>Hi=(H(key)+di)% m   （di是一个随机数列，i=1，2，……，m-1）</p>
<hr>
<h5 id="拉链法（开散列方法）">拉链法（开散列方法）</h5>
<p>也叫做<strong>链地址法</strong></p>
<p>基本思想：将所有散列地址相同的记录，即<strong>所有同义词记录存储在一个单链表中</strong>（称为同义词子表），</p>
<p>在散列表中存储的是所有<strong>同义词</strong>子表的头指针。</p>
<p>用拉链法处理冲突构造的散列表叫做<strong>开散列表</strong>。</p>
<p>开散列表<strong>不会出现堆积现象</strong>。</p>
<p>设n个记录存储在长度为m的散列表中，则同义词子表的平均长度为n / m。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-18_23-59-38.png" style="zoom: 50%;" /></p>
<h5 id="开散列表和闭散列表的比较">开散列表和闭散列表的比较</h5>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_00-01-06.png" style="zoom:50%;" />
<h3 id="5-B树">5.B树</h3>
<p>B树是一种<strong>多路平衡查找树</strong>，能够<strong>保持数据的有序性</strong>，使数据的查找、插入、删除等操作都在对数时间内完成。</p>
<p>B树定义为一颗m阶的B树，或者为<strong>空树</strong>，或为满足下列特性的m叉树：（也满足<strong>左&lt;根&lt;右）</strong></p>
<p>1.树中每个结点<strong>最多有m颗子树</strong></p>
<p>2.若<strong>根结点</strong>不是终端结点，则<strong>至少有两颗子树</strong></p>
<p>3.除<strong>根结点之外的</strong>所有非终端结点<strong>至少有[m/2]颗子树（向上取整）</strong></p>
<p>4.<strong>有n个子节点</strong>的非终端结点<strong>拥有n-1个关键码</strong></p>
<p>5.所有的<strong>叶子结点位于同一层</strong></p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219104703.jpg" style="zoom:33%;" /></p>
<h4 id="B树的插入">B树的插入</h4>
<p>假定要在<strong>m阶B树</strong>中插入关键码k，<strong>关键码数目的最大值为m-1</strong>。</p>
<p>查找过程分为<strong>两个阶段</strong>：</p>
<p>1.查找-定位</p>
<p>2.<strong>分裂-提升</strong></p>
<h4 id="B树的构造">B树的构造</h4>
<p>B树的构造就是<strong>逐一插入</strong>各个关键码的过程</p>
<p>流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219110029.jpg"  /></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219110033.jpg" alt="QQ图片20231219110033"></p>
<h4 id="B树的删除">B树的删除</h4>
<p>假定<strong>key</strong>是<strong>结点q</strong>中第i个关键码，若要删除key，有以下几种情况：</p>
<p>1.若结点q不是终端结点，则用<strong>子树中的最小键值</strong>x来&quot;<strong>替换</strong>key&quot;，然后删除原有x</p>
<p>2.如果q是终端结点，且关键码的个数**大于[m/2]-1，**则可直接删除key</p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219112511.jpg" style="zoom: 33%;" /></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219112513.jpg" alt="QQ图片20231219112513" style="zoom: 50%;" />
<p>3.如果q是终端结点，删除一个关键码后，关键码的个数&lt;[m/2]-1,则不符合m阶B树的要求，需要<strong>从兄弟结点借关键码或合并结点，</strong></p>
<p>分为<strong>两种情况</strong>：</p>
<p>(1)<strong>兄弟</strong>结点的关键码个数&gt;[m/2]-1,<strong>足够借</strong>，那么q就从该兄弟借一个关键码，</p>
<p>借来的关键结点<strong>上移到父结点</strong>，<strong>父结点相应的关键码下移</strong>到被删结点中。</p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219113203.jpg" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219113206.jpg" alt="QQ图片20231219113206"></p>
<p>(2)如果<strong>兄弟</strong>结点的关键码格个数&lt;=[m/2]-1,<strong>不够借</strong>，则将<strong>双亲结点相应关键码下沉并合并</strong>，</p>
<p>合并过程可能一直上传到根结点，并<strong>使B树的树高减少一层。</strong></p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219113640.jpg" style="zoom: 33%;" /></p>
<h1>八、排序技术</h1>
<p><strong>排序</strong>：将杂乱无章、毫无规律的数据元素，按照一定的方法以其关键码顺序排列成<strong>升序或降序</strong>的过程</p>
<p>排序算法的<strong>稳定性</strong>：假定在待排序的记录集中，存在多个具有相同键值的记录，</p>
<p>若经过排序，这些记录的<strong>相对次序仍然保持不变</strong>，即在原序列中，ki=kj且ki在kj之前，而在排序后的序列中，ki仍在kj之前，则称这种排序算法是<strong>稳定的</strong>；否则称为<strong>不稳定的。</strong></p>
<p>排序的<strong>分类</strong></p>
<ol>
<li><strong>内排序</strong>：在排序的整个过程中，待排序的所有记录全部被放置在<strong>内存</strong>中</li>
<li><strong>外排序</strong>：由于<strong>待排序的记录个数太多</strong>，不能同时放置在内存，而需要将<strong>一部分记录放置在内存，另一部分记录放置在外存上</strong>，整个排序过程需要<strong>在内外存之间多次交换数据</strong>才能得到排序的结果。</li>
</ol>
<h3 id="1-插入排序">1.插入排序</h3>
<h4 id="直接插入排序">直接插入排序</h4>
<p>基本思想：在<strong>插入第 i（i＞1）个</strong>记录时，<strong>前面的 i-1个记录已经排好序</strong>。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_15-01-13.png" style="zoom: 50%;" /></p>
<hr>
<p>插入的流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219151035.jpg" style="zoom:50%;" /></p>
<p>关键问题：</p>
<p>1.如何构造初始的有序序列？</p>
<p>答：在第一趟进行插入排序时假定初始有序序列只有一个记录的关键码。</p>
<p><strong>将第1个关键码看成是初始有序序列</strong>，然后<strong>从第2个记录</strong>的关键码<strong>依次插入</strong>到有序序列中，直至将第n个记录插入。</p>
<p>2.如何查找待插入关键码的插入序列？</p>
<p>答：这相当于在一个有序序列中进行查找，在对<strong>第i个</strong>记录进行插入时，</p>
<p>首先<strong>初始化带比较元素的下标k=i-1</strong>，将<strong>待插入关键码保存在下标为0的单元</strong>。</p>
<hr>
<p><strong>直接插入排序算法的时间复杂度为O(n^2^)</strong></p>
<p><strong>空间性能：需要一个记录的辅助空间</strong>。</p>
<p>直接插入排序算法是一种<strong>稳定的</strong>排序算法。</p>
<p>直接插入排序算法<strong>简单、容易实现</strong>，<strong>适用于待排序记录基本有序</strong>或<strong>待排序记录较小</strong>时。</p>
<p>当待排序的记录个数较多时，<strong>大量的比较和移动操作使</strong>直接插入排序算法的<strong>效率降低。</strong></p>
<p><strong>如何改进</strong>直接插入排序?</p>
<p>注意到，在插入第 i（i＞1）个记录时，前面的 i-1 个记录已经排好序，</p>
<p>则在寻找插入位置时，可以用<strong>折半查找</strong>来代替顺序查找，从而<strong>减少比较次数。</strong></p>
<hr>
<h4 id="希尔排序">希尔排序</h4>
<p>基本思想：将整个待排序记录<strong>分割成若干个子序列</strong>，在子序列内<strong>分别进行直接插入排序，</strong></p>
<p>待整个序列中的记录<strong>基本有序</strong>时，<strong>对全体记录进行直接插入排序。</strong></p>
<p>分割待排序记录的<strong>目的</strong>:</p>
<ol>
<li>减少待排序记录个数；</li>
<li>使整个序列向<strong>基本有序</strong>发展。</li>
</ol>
<p>流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219154644.jpg" alt=""></p>
<p>关键问题：</p>
<p>1.如何分割待排序记录？</p>
<p>答“将相隔某个“<strong>增量</strong>”的记录组成一个子序列。</p>
<p>增量应如何取：希尔最早提出的方法是<strong>d1=n/2，d(i+1)=di/2。</strong></p>
<p>2.<strong>子序列内</strong>如何进行直接插入排序？</p>
<p>答：在<strong>插入</strong>记录<strong>r[i]<strong>时，自</strong>r[i-d]起</strong>往前跳跃式（<strong>跳跃幅度为d</strong>）搜索待插入位置，并且<strong>r[0]只是暂存单元，不是哨兵。</strong></p>
<p>当搜索位置＜0，表示插入位置已找到。<br>
在搜索过程中，记录<strong>后移也是跳跃d个位置。</strong><br>
在整个序列中，前d个记录分别是d个<strong>子序列中的第一个记录</strong>，所以<strong>从第d+1个记录开始进行插入</strong>。</p>
<p>希尔排序的时间性能在<strong>O(n^2^</strong>)和**O($\log_2{n}$)**之间。当n在某个特定范围内，希尔排序所需的比较次数和记录的移动次数约为O(n1.3 ) 。</p>
<hr>
<h3 id="2-交换排序">2.交换排序</h3>
<p>交换排序的主要操作是<strong>交换</strong>，其主要思想是：（反序则交换）</p>
<p>在待排序列中选两个记录，将它们的关键码相比较，如果反序（即排列顺序与排序后的次序正好相反），则交换它们的存储位置。</p>
<h4 id="冒泡排序">冒泡排序</h4>
<p>基本思想：<strong>两两比较相邻记录</strong>的关键码，如果<strong>反序则交换</strong>，直到没有反序的记录为止。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_16-25-28.png" style="zoom:50%;" /></p>
<p>关键问题：</p>
<p>1.如何区分<strong>有序区</strong>和<strong>无序区</strong>？</p>
<p>答：设<strong>变量exchange</strong>记载记录交换的位置，则一趟排序后，exchange记载的一定是这一趟排序中记录的<strong>最后一次交换的位置</strong>，</p>
<p>且从<strong>此位置以后的所有记录均已经有序。</strong></p>
<p>因此，可以用exchange来标记有序区和无序区。有序区的元素不进行后续的两两比较。</p>
<p>示意图:<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_16-32-41.png" style="zoom:50%;" /></p>
<p>2.如何确定<strong>起泡排序的范围？</strong></p>
<p>答：<strong>bound位置</strong>的记录是无序区的最后一个记录，则每趟起泡排序的范围是r[1] ~ r[bound]。</p>
<p>在一趟排序后，从exchange位置之后的记录一定是有序的，所以<strong>bound=exchange。</strong></p>
<p>3.如何判别起泡排序的结束？</p>
<p>答：在<strong>每一趟</strong>起泡排序之前，**令exchange的初值为0，**在以后的排序过程中，<strong>只要有记录交换，exchange的值就会大于0。</strong></p>
<p>这样，在一趟比较完毕，就可以通过exchange的值是否为0来<strong>判别是否有记录交换</strong>，从而判别整个起泡排序的结束。</p>
<p><strong>冒泡排序的时间复杂度为O(n^2^)</strong></p>
<hr>
<h4 id="快速排序">快速排序</h4>
<p>基本思想：首先选一个轴值（即比较的基准），通过一趟排序将待排序记录<strong>分割成独立的两部分，</strong>（<strong>二分法</strong>）</p>
<p><strong>前一部分</strong>记录的关键码均小于或等于轴值，<strong>后一部分</strong>记录的关键码均大于或等于轴值，</p>
<p>然后分别对这两部分<strong>重复上述方法</strong>，<strong>直到整个序列有序</strong>。</p>
<p>关键问题：</p>
<p>1.<strong>如何选择轴值？</strong></p>
<p>选择轴值的<strong>方法</strong>：<br>
1.使用<strong>第一个记录</strong>的关键码；<br>
2.选取<strong>序列中间记录</strong>的关键码；<br>
3.<strong>比较</strong>序列中<strong>第一个</strong>记录、<strong>最后一个</strong>记录和<strong>中间记录</strong>的关键码，<strong>取关键码居中的</strong>作为轴值<strong>并调换到第一个记录的位置</strong>；<br>
4.<strong>随机</strong>选取轴值。</p>
<p>选取不同轴值的后果：</p>
<p><strong>决定</strong>两个左右子序列的<strong>长度</strong>，<strong>左右子序列</strong>的长度<strong>最好相等</strong>。</p>
<p>2.如何<strong>实现一次划分？</strong></p>
<p>答：一次划分也称为分割操作，根据轴值将待排序序列<strong>分为左右两个子序列，</strong></p>
<p>所有比轴值小的元素摆放在轴值的前面，所有比轴值大的元素摆放在轴值的后面</p>
<p>流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219170555.jpg" alt=""></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219170558.jpg" alt="QQ图片20231219170558"></p>
<p>3.如何<strong>递归地处理</strong>分割后的子序列？</p>
<p>只需要将分割后的两个子序列<strong>进一步递归地分割为更小的子序列</strong>即可，直到子序列无法再继续分割为止。</p>
<p>快速排序的时间复杂度为<strong>O(n$\log_2{n}$)</strong></p>
<p>大多数情况下，快速排序要比其他排序算法<strong>更快</strong>。</p>
<h3 id="3-选择排序">3.选择排序</h3>
<p>选择排序的主要操作是<strong>选择</strong>，其主要思想是：每趟排序在当前待排序序列中<strong>选出关键码最小的记录</strong>，<strong>添加到有序序列中。</strong></p>
<h4 id="简单选择排序">简单选择排序</h4>
<p>基本思想：<strong>第i 趟</strong>在<strong>n-i+1（i=1,2,…,n-1）个记录中</strong>选取关键码<strong>最小</strong>的记录<strong>作为有序序列中的第i个记录</strong>。</p>
<p>流程图：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219172143.jpg" alt=""></p>
<p>简单选择排序思路非常简单，只需要从无序区<strong>选择最小关键码，<strong>并</strong>交换至无序区第一个元素即可</strong>。</p>
<p>每一趟排序只交换一对元素，有序区长度增加1，无序区长度减少1，直至整个序列有序，因此<strong>总共需要进行n-1次交换。</strong></p>
<p><strong>简单选择排序的时间复杂度为O(n^2^)。</strong></p>
<hr>
<h4 id="堆排序">堆排序</h4>
<p><strong>改进</strong>的着眼点：如何<strong>减少关键码间的比较次数</strong>。</p>
<p>若能利用每趟比较后的结果，也就是在<strong>找出键值最小记录的同时，也找出键值较小的记录</strong>，则<strong>可减少</strong>后面的选择中所用的<strong>比较次数</strong>，从而提高整个排序过程的效率。</p>
<p><strong>堆</strong>是具有下列性质的<strong>完全二叉树</strong>：</p>
<p>1**.每个结点<strong>的值都</strong>小于或等于<strong>其</strong>左右孩子结点<strong>的值（称为</strong>小根堆**），</p>
<p>2.<strong>每个结点</strong>的值都<strong>大于或等于</strong>其<strong>左右孩子结点</strong>的值（称为<strong>大根堆）</strong>。</p>
<hr>
<p>基本思想：首先<strong>将待排序的记录序列构造成一个大根堆</strong>，此时，<strong>选出了</strong>堆中所有记录的<strong>最大者</strong>，然后将它<strong>从堆中移走</strong>，并将剩余的记录<strong>再调整成堆</strong>，这样<strong>又找出了次小的记录</strong>，以此类推**，直到堆中只有一个记录。**</p>
<p>堆调整：将剩余关键码序列重新调整成为堆，这样会在堆顶得到剩余关键码序列中的最大值。</p>
<p>关键问题：</p>
<p>1.如何将n个关键码的序列<strong>建成堆</strong>？</p>
<p>答：将初始序列看成一个<strong>完全二叉树</strong>，将初始序列序列的关键码按初始顺序<strong>从上到下，从左到右依次填充</strong>到完全二叉树中。</p>
<p>根据n个结点的完全二叉树的性质，<strong>最后一个分支结点的结点下标为[n/2],（向下取整）<strong>那么</strong>从该结点为根的子树开始</strong>向前<strong>逐一进行堆调整</strong>，</p>
<p>使每一颗子树均成为堆，直到根结点。（自下而上调整）</p>
<p>2.如何<strong>处理堆顶记录</strong>，进行排序？</p>
<p>答：根据大根堆的性质，根结点就是序列的最大值，而序列的次大值位于根结点的左、右孩子之一。</p>
<p>因此建队以后，<strong>只需要输出根结点，再将剩余关键码调整成堆即可</strong>。</p>
<p>将堆顶的根结点<strong>与堆的最后一个元素</strong>，即堆中最下层最右侧的元素进行<strong>交换</strong>，交换后，将最大值排除在待排序序列之外。</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219201507.jpg" alt=""></p>
<p>3.输出堆顶关键码后，调整剩余关键码，使其成为一个新堆</p>
<p>答：在输出堆的根结点之后，剩下n-1个元素。此时，堆已经被破坏，但只有根结点不满足堆的条件。</p>
<p>因此，对根结点进行堆调整即可。</p>
<p>当所有结点都输出时，堆排序结束。</p>
<p>堆排序的<strong>时间复杂度</strong>为：O(n$\log_2{n}$)</p>
<hr>
<h3 id="4-归并排序">4.归并排序</h3>
<p>归并排序的主要操作是<strong>归并</strong>，其主要思想是：将若干有序序列<strong>逐步归并</strong>，最终得到一个有序序列。</p>
<p><strong>归并</strong>：将两个或两个以上的有序序列合并成一个有序序列的过程。</p>
<hr>
<h4 id="二路归并排序">二路归并排序</h4>
<p>基本思想：将一个具有n个待排序记录的序列看成是<strong>n</strong>个<strong>长度为1</strong>的有序序列，然后进行两两归并，</p>
<p>得到<strong>n/2</strong>个<strong>长度为2</strong>的有序序列，再进行两两归并，得到<strong>n/4</strong>个<strong>长度为4</strong>的有序序列，……，<strong>直至得到一个长度为n的有序序列为止。</strong></p>
<p>例如：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219203016.jpg"  /></p>
<p>关键问题：</p>
<p>1.如何将两个有序序列合成为一个有序序列？</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219221154.jpg" alt=""></p>
<p>2.怎样完成<strong>一趟归并</strong>？</p>
<p>在一趟归并中，<strong>除最后一个有序序列外</strong>，其它有序序列中记录的个数相同，用<strong>长度h</strong>表示。</p>
<p>设<strong>参数i</strong>指向待归并序列的<strong>第一个记录</strong>，<strong>归并的步长是2h</strong>，在归并过程中，有以下<strong>三种情况：</strong></p>
<p>①<strong>若i≤n-2h+1</strong>，则相邻两个有序表的长度均为h，执行一次归并，完成后i加2h，<strong>准备进行下一次归并；</strong></p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_22-24-06.png" alt=""></p>
<p>②<strong>若i＜n-h+1</strong>，则表示<strong>仍有两个相邻有序表</strong>，一个长度为h，另一个长度小于h，则执行两个有序表的归并，完成后退出一趟归并。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_22-26-11.png" alt=""></p>
<p>③<strong>若i≥n-h+1</strong>，则表明只剩下一个有序表，直接将该有序表送到r1的相应位置，完成后退出一趟归并。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_22-29-29.png" alt=""></p>
<p>3.如何控制二路归并的<strong>结束</strong>？</p>
<p>答：开始时，有序序列的<strong>长度h=1</strong>，结束时，有序序列的<strong>长度h=n</strong>，用有序序列的长度来控制排序的结束。</p>
<p>二路归并排序算法的<strong>时间复杂度</strong>：O(n$\log_2{n}$)</p>
<h3 id="5-分配排序">5.分配排序</h3>
<p>分配排序是基于分配和收集的排序方法，其基本思想是：</p>
<p>先<strong>将待排序记录序列分配到不同的桶里</strong>，然后再把各桶中的记录<strong>依次收集到一起。</strong></p>
<h4 id="桶式排序">桶式排序</h4>
<p>基本思想是：假设待排序记录的<strong>值都在0～m-1之间</strong>，设置<strong>m个桶</strong>，</p>
<p>首先将值<strong>为i的记录分配到第i个桶中</strong>，然后再将各个桶中的记录<strong>依次收集起来。</strong></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231219223839713.png" alt="image-20231219223839713" style="zoom:67%;" />
<p>关键问题：</p>
<p>1.如何在计算机中表示桶？</p>
<p>由于<strong>具有相同键值的记录可能会有多个</strong>，所以，应采用<strong>链接存储</strong>，</p>
<p>为保证排序的稳定性，可以<strong>设m个链队列</strong>作为桶的存储结构。</p>
<p>为<strong>避免</strong>在分配和收集的过程中<strong>移动元素</strong>，采用<strong>静态链表</strong>作为链队列和待排序记录序列的存储结构</p>
<p>示意图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgimage-20231219224612374.png" alt="image-20231219224612374" style="zoom:50%;" /></p>
<p>桶排序流程图：<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgv2-ff4cdccdb1ff6b90ecdb3fc4d361f725_r.jpg" style="zoom:67%;" /></p>
<p><strong>桶式排序的时间复杂度为O(n+m)。</strong></p>
<hr>
<h4 id="基数排序">基数排序</h4>
<p>桶式排序适用于单键排序的情况，在一定条件下具有很高的时间效率，但桶的个数m极大限制了排序的应用。</p>
<p><strong>基数排序是对桶式排序的改进和推广；<strong>如果说桶式排序是一维的基于桶的排序，那么基数排序就是</strong>多维</strong>的基于桶的排序。</p>
<p>举个<strong>例子</strong>：用<strong>桶式排序</strong>对[0,99]之间的数进行排序，<strong>需要100个桶</strong>，分配一次，收集一次，完成排序；</p>
<p>而<strong>基数排序</strong>只<strong>需要0-9总共10个桶</strong>（即关键字为数字0-9），依次进行个位和十位的分配和收集从而完成排序。</p>
<p>对多关键码排序有以下两种基本方法：</p>
<p>1.<strong>最主位</strong>优先法(MSD)</p>
<p>2.<strong>最次位</strong>优先法(LSD)</p>
<p>例如：采用最次位优先法</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219233436.jpg" alt=""></p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgQQ%E5%9B%BE%E7%89%8720231219233440.jpg" alt="QQ图片20231219233440" style="zoom: 33%;" />
<p>基数排序的<strong>时间复杂度</strong>为O(d(n +m))，d为关键码的个数</p>
<hr>
<h3 id="6-总结">6.总结</h3>
<p>各种排序算法<strong>时间复杂度的比较</strong>：</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_23-37-50.png" alt=""></p>
<p>各种排序算法<strong>空间复杂度的比较</strong>：</p>
<img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_23-39-17.png" style="zoom:67%;" />
<p>各种排序算法<strong>稳定性的比较</strong>：</p>
<p><strong>稳定</strong>的：直接插入排序、起泡排序、归并排序和分配排序；</p>
<p><strong>不稳定</strong>的：希尔排序、简单选择排序、快速排序和堆排序。</p>
<hr>
<p>各种排序算法<strong>简单性的比较</strong>：</p>
<p><strong>简单</strong>算法：直接插入排序、简单选择排序和起泡排序</p>
<p><strong>改进后</strong>的算法：希尔排序、堆排序、快速排序和归并排序，这些算法都很复杂。</p>
<p>从待排序的记录个数n的大小看，</p>
<p><strong>n越小</strong>，采用<strong>简单</strong>排序方法越合适，</p>
<p><strong>n越大</strong>，采用<strong>改进</strong>的排序方法越合适。</p>
<p>因为<strong>n越小，O(n2)同O(nlog2n)的差距越小</strong>，并且输入和调试简单算法比输入和调试改进算法要少用许多时间。</p>
<hr>
<p><strong>记录本身信息量越大</strong>，移动记录所花费的时间就越多，所以对记录的移动次数较多的算法不利。</p>
<p><img src="http://villagerain.oss-cn-huhehaote.aliyuncs.com/imgSnipaste_2023-12-19_23-46-03.png" alt=""></p>
<p>当<strong>待排序记录按关键码有序时</strong>，<strong>插入</strong>排序和<strong>起泡</strong>排序能达到**O(n)**的时间复杂度；</p>
<p>对于<strong>快速</strong>排序而言，这是<strong>最坏的情况</strong>，此时的时间性能蜕化为<strong>O(n2)</strong>；</p>
<p><strong>选择</strong>排序、<strong>堆</strong>排序和<strong>归并</strong>排序的<strong>时间性能不随记录序列中关键字的分布而改变</strong>。</p>
<hr>
<p>数据结构复习笔记初步整理完毕！</p>
<p>一定会有所收获！！！</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>大学物理下不理想成绩的反思</title>
    <url>/2024/01/12/%E6%84%9F%E6%82%9F%E4%B8%8E%E5%B1%95%E6%9C%9B/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E4%B8%8B%E4%B8%8D%E7%90%86%E6%83%B3%E6%88%90%E7%BB%A9%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="282517c806c6bd51a778f05d0bb6dfe6325b4011fef006a7613dabcbd0f12258">60fd0739c5a82ca45262b2f3393acd53baa226ee3632ad1daaff8446ec5b6069c3822921fefc82050a64f15064072fe939bceb416e76afb24c5b5d808dc4d5b8d328de1094718662950a221e971458f0c219e8284f6469f33d3fc54880071615e76ac53123f4b10ec39a155a0ebdcfa9bdced8f9ee5e3a8db89d41612f3d1fc7e44ef6aa0c48e26275ba558302ace998685a4db0a24bdde87eb76d376f8c26cbe0f5d85d710ea8625c6ace70ad5092674165db6680d4f0781c0aa1f32d412020539f2ac8560e184a3cf6ac055bb016804506dfed1f055fdd198cca89abdab5c6f71cb8e713dfcfda4c9697fd3638874e69573a01118a92c2187e4fb01e1dc2176048032816e5cdaee22c9421dd806a10683b983f25a14761814ca33493ab0265ed10d5a4d737417e4d5980bc582be66f1e05dafaa869fb14f070aeb7a5d6fe200410ecc0a968ca14155a52eec7ee7fd60160a19f82826b29271fbc3c77de72c6bac06594994e5c4879ea0c7703c8927be3db135960dd71f7864dc04c25df8de9466755e9dd44d86577f4ae77486c45d470782c100d298b68e7be6f7f8527b33cd75a8044c90ef52f5d8b0d51416f4aeef18cbdb395e5774a967fafe04d14870849372658f087af5c78175aea0800e21caecbd3a51a3512a82e9a87ad8f8afd6362a61d66afa9a4fb3f23966cb4c8c78ad837feffa26af6835989bcdeca6288f83a2c02f75f69e0975c9629224f9c71cb9b9295867708aa6f2917df1262946e0e323970f943568c69d502299411a535456bd1278a6845babb0c419132912eb381a558e03bba07bf8cd61bdd4187f06aac52defe65473ead0d6b08f1081395db996efec79cf8ced6366f17743388a86c32e2793280dd22acc8cd79900768ba3f7d8c6d85319fcd4113d208351859e6c7553b9e6813f68724f1009675e0f594ec2712bb19b0a1fd76a5d332bb38554559e128256a92e4d7034839bfb4bbc3a534df8f6e3b5b8f796e670579e97b57aa52d1b4418cfb41404c7bb50c7e7816ce8dd7c4732540f6559cabb37c6411f270844ccfcdf8bb5a701b976ba5890937c6c5f1d89c9ca062b366ec69478557a4a11add8f7e7df68df930b17006b2eade28767272cd501d1d8707db6ba0a2536f526dd400620790864f23efe7c1bb56ff17944a7c35e86cedcdac451170d1b42757ec83e22c9c3861a321e4ef71c4b1a0ed58384b4db1bc3671ccb6e38c14b37dfd4ccb0b8cb75505de7a0bae0959f41a864bdeb5a619f1094a293e7a389c3c43a07e5ac23ccef67c2996861332621d4b72ec754fdb8b5c97d2b9222816e6013c2b6b749f4d066fa131f02ded5899b229334576cf490265d2f76f94f1eceea58526871893edfa02984454f05b4771cc045eda85d8fe3ea61e8332d6a9ec7241311d140b408d0e3c0e8075feac8b582a5c1ad09c2f9902aeb5f13017e37a2190334e98bb13993422f108eccd0af6e30a9642c8ab1536b54317c09b5fd26d6b192ac01105b5d9e9aba79f0eaf4a815b9c307941e6e9ccb9119befd23266a28bcffb3210ef4dc8764d7ac21dcc40b956b272f439b9ffc47eb3362bdb5b9c70aab383e14cdb650f379ed2ce22224b2e4b8ee0f5d95c9e2b2dfb31aab6982649aa79eab0c378fac2d89751285d0ff5f697539307534d9c049534d92e9726ba3e1e280af04122beb2db645324062a9a5e9cfb6d0aca8cd2e140e9a67270667b8ad815dbb0215a71be0823ed37b6d59e036c4b9cdaef88d204d0a4c456f4d8af58e1999f138f433c9fbe2b12781f2c06d92d116f52d111ed0b71147c93e4f6f9aefc1171e5f517b874f287176230aa94e34d94b122ee5201af57675c23a900f75fe5969e23095f6e2384eb7dd572a342b9357e8861a3e36df285f90be6e83f5f37359f373d7daf72c5764ba6dddc247ffb70b005536d8e65516bff1d7520277c89cc9b85f250f546e3106d8da4d5f57a1cf332479251423863d0432152a4ba4f0217df962262ecede0a64cab020c209b42d1daffad2a3bd9bd794af8971eeb3a803f359f362e3b19ea8a45ebe1def3b0c95e5bf7eade041038bc19315f112404377f1770c91e1ddce78e77e13e6de57287938343928f4e13b0e069e7e677a9d8dcdc06ec010e46b58642b4b9a42e270d4d49f3b7cf403bda7317b4b9714f561a8a955caf6533d4669819f89fd21c908775e737c6f2da8485029d5963f3752752902cfa83d6d80400f4fd3b2737989c5e04f2969a1a46dea0d61c7f58d3f32c253eefc047a50dde0e6f8e61e88b55317a1b44d85d47c1b294bb918f1cd29643d5d7bb34a98e3bd6ba460b6a009eb493ef272842604432e6c3b1b4d967362c7449411663b916b0005133e9b1ffa246bac10a14532c171baaf6aa34d26f2aceca5aa052852f743e92266647c1f3ffc719025b3d51a7cc078fcdd58ee924a22f1da8f1168017c5cbef7560ca5a7a34bbdc3f2344ea968bbcd5059d5e9df5ed84cb20b7197b28e2cd5bf69aa360281c2de5c7c5cf0b3e297bfdeb89de0907bb918cf5c3adacfcf6906a4396e75551d7411a3ecd4e4393b6a9f8fce1ccc27dd96a85781e933ac89ae09b30c8296442d01b943aaff2a8b475fff150fe0e278d865995e2016b3bda0c1911f107c24f51a20b0eb865da2be6856c33</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面对失败</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>大二上总结</title>
    <url>/2024/01/09/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 密码错误, 请重新输入。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="b382b2539b5bea0597fc43976010e3d886d75480bdc740295fc4201f468a3747"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要输入密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>大二上期末感想</title>
    <url>/2024/01/06/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E6%9C%9F%E6%9C%AB%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>过度地陷入自我怀疑和对过去已经发生的事情的无止境纠结，可我明明知道自己没有犯错。</p>
<p>从高中到现在，这种疯狂的歇斯底里的如同噩梦般的焦虑便不时地产生，但每一次的结局都是我把该做的做到了最好。</p>
<p>明知道自己不会犯那种小错误，从小到大的训练养成的肌肉记忆也不会允许我犯那样的低级失误。</p>
<p>可我总是会假想自己犯错，因为过于追求完美而容不得一点差错。</p>
<p>无论如何，这种令我痛苦的焦虑必然会影响到我。我真的需要专注，需要静下心来去做好现阶段的事情。</p>
<p>已经发生的无法改变的事情，就让它过去，放过自己吧。</p>
<p><strong>活在当下</strong>，这四个字是那么的简单却又那么的重要。</p>
<p>或许等到一切尘埃落定，再回过头来，才会发现这时的自己有多么可笑吧。</p>
]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
